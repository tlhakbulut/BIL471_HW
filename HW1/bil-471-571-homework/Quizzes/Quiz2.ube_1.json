{
  "questions": [
    "Kahve Sipariş Sistemi\n\nBIL 211 - Quiz 2\n\n13 Şubat 2025\n\n1 Giriş\nBu laboratuvarda Inheritance, Polymorphism ve Interface kullanarak bir Kahve Sipariş Sistemi geliştire-\nceğiz.\n\n2 Genel Yapı\nSistem, üç ana bileşenden oluşmaktadır:\nEklenti Arayüzü (CoffeeAddon). Kahveye eklenen tüm bileşenleri tanımlar.\nSoyut Kahve Sınıfı (BaseCoffee). Ortak kahve özelliklerini içerir.\nÖzel Kahve Sınıfları (Espresso, Latte, Americano). Farklı kahve türlerini temsil eder.\nEklenti Sınıfları (Milk, Chocolate, VanillaSyrup, DoubleShot). Kahveye eklenebilecek bileşenleri içerir.\nKahve Makinesi Sınıfı (CoffeeMachine). Kahve yapımı ve özelliklerin eklenmesini sağlar.\n\n3 Sınıf ve Arayüz Tanımları\n\n3.1 CoffeeAddon Arayüzü\nMetotlar:\n\n- double getCost()\n\nEklentinin kahveye eklediği fiyatı döner.\n\n- String getName()\n\nEklentinin adını döner.\n\n3.2 Eklenti Sınıfları (Milk, Chocolate, VanillaSyrup, DoubleShot)\nHer bir eklenti CoffeeAddon arayüzünü uygular. Eklenti sınıflarının arayüz fonksiyonlarında döneceği değer-\nler aşağıdaki tabloda verilmiştir.\n\nTable 1: Eklentiler ve fiyatları\nFiyat (TL)\n5\n7\n6\n10\n\nEklenti\nMilk\nChocolate\nVanillaSyrup\nDoubleShot\n\n3.3 BaseCoffee Sınıfı (Soyut Sınıf )\nDeğişkenler:\n\n- addons (protected ArrayList<CoffeeAddon>)\n\nKahveye eklenen eklentileri saklar.\n\nMetotlar:\n\n- public void addAddon(CoffeeAddon addon)\n\nKahveye eklenti ekler.\n\n- public abstract double calculatePrice()\n\nSoyut metod. Kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler).\n\n1\n\n\fTable 2: Kahve Türleri ve Fiyatları\nKahve Türü Baz Fiyat (TL)\n\nEspresso\nLatte\nAmericano\n\n40\n50\n45\n\n3.4 Espresso Sınıfı - BaseCoffee sınıfını geliştirir (extend)\nDeğişkenler:\n\n- isHeated (private bool)\n\nFincan ısıtılma durumunu belirtir.\nİlk değeri her zaman false olmalı. Eğer isHeated doğru ise\ncalculatePrice fonksiyonunda sipariş yazılırken kahve ismi \"Espresso (Sıcak Fincan)\" olarak belirtilir.\n\nMetotlar:\n\n- public void heatCup()\n\nisHeated değişkenini true yapar.\n\n3.5 Latte Sınıfı - BaseCoffee sınıfını geliştirir (extend)\n\nBaseCoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez.\n3.6 Americano Sınıfı - BaseCoffee sınıfını geliştirir (extend)\nBaseCoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez.\n\n3.7 Coffee Machine Sınıfı\nMetotlar:\n\n- public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon adddon)\n\nKahveye eklenti ekler. Kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana\n\"[UYARI] kahveIsmi tipi kahveye eklentiAdi eklenemez\" yazdırır (kahveIsmi ve eklentiAdi yerine\nkahve sınıfının ve eklentinin ismi yazdırılmalı, Ana Program kısmında örnek mevcut).\n\n- public void makeCoffee(BaseCoffee coffee)\n\nKahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı Ana Program bölümünde\nmevcut).\n\n- public void heatEspressoCup(BaseCoffee coffee)\n\nEğer kahve Espresso sınıfındansa ekrana \"Espresso kahve fincanı ısıtıldı\" yazdırır ve kahvenin heatCup\nfonksiyonunu çağırır. Diğer kahve türleri için \"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\"\nyazdırır.\n\n- ???\n\nBu fonksiyon tüm farklı CoffeeMachine’ler tarafından üretilmiş kahve sayısını ekrana \"Tum fabrikalar\nkahve makineleri toplam toplamKahveUretimi kahve uretildi\" yazdırır (toplamKahveUretimi yerine\ntoplam üretilen kahve sayısı yazılmalıdır). Bu fonksiyonu tamamlamak için CoffeeMachine sınıfına\nyardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap-\nmayın.\n\nTable 3: Kahve Türlerine Eklenebilen Özellikler\nKahve Türü\nEspresso\nLatte\nAmericano\n\nEklenebilen Özellikler\nDoubleShot, Chocolate\nMilk, VanillaSyrup, Chocolate\nMilk, VanillaSyrup\n\n2\n\n\f4 Ana Program (Main Sınıfı)\n\npublic class Main {\n\npublic static void main(String[] args) {\n\nCoffeeMachine machine = new CoffeeMachine();\n\nBaseCoffee espresso = new Espresso();\nmachine.addAddonToCoffee(espresso, new DoubleShot());\nmachine.addAddonToCoffee(espresso, new Milk());\nmachine.heatEspressoCup(espresso);\nmachine.makeCoffee(espresso);\n\nBaseCoffee latte = new Latte();\nmachine.addAddonToCoffee(latte, new Milk());\nmachine.addAddonToCoffee(latte, new VanillaSyrup());\nmachine.makeCoffee(latte);\n\n// ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\nCoffeMachine anotherMachine = new CoffeMachine();\nBaseCoffee americano = new Americano();\nanotherMachine.heatEspressoCup(americano);\nanotherMachine.makeCoffee(americano);\n\nSystem.our.println(\"\\n\");\n??? // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n\n}\n\n}\n\n5 Çıktı Örneği\n[UYARI] Espresso tipi kahveye Milk eklenemez\nEspresso kahve fincanı ısıtıldı\nSipariş: Espresso (Sıcak Fincan) + Double Shot\nToplam Fiyat: 50TL\n\nSipariş: Latte + Milk + Vanilla Syrup\nToplam Fiyat: 61TL\n\n[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\nSipariş: Americano\nToplam Fiyat: 45TL\n\nTum kahve makineleri tarafindan toplam 3 kahve uretildi\n\n6 Gönderim Formatı\n\n- Tüm sınıflar için ayrı bir dosya oluşturun (Main.java, RobotFactory.java, ...).\n\n- Quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından\n\nherhangi birisi uygun).\n\n- Sıkıştırılmış arşivin ismini Isim_Numara_Sube1 şeklinde isimlendirin (örn., JohnNash_181101014_Sube1.zip).\n\n- İsimlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine \"Quiz2 Şube2\" başlıklı bir mail ile\n\ngönderin.\n\n3\n\n"
  ],
  "answers": [
    {
      "id": "6275288",
      "Latte.java": "public class Latte extends BaseCoffee {\n    public double calculatePrice() {\n        return 50.0;\n    }\n}\n",
      "Espresso.java": "public class Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n\n    public boolean getter() {\n        return isHeated;\n    }\n\n    public double calculatePrice() {\n        return 40.0;\n    }\n\n    public void heatCup() {\n        isHeated = true;\n    }\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 6.0;\n    }\n\n    @Override\n    public String getName() {\n        return \"VanillaSyrup\";\n    }\n\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n    public double getCost();\n\n    public String getName();\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n        CoffeeMachine.count++;\n    }\n\n    public abstract double calculatePrice();\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee {\n    public double calculatePrice() {\n        return 45.0;\n    }\n}\n",
      "CoffeeMachine.java": "public class CoffeeMachine {\n    public static int count = 0;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n        if (coffee instanceof Espresso && (addon instanceof VanillaSyrup || addon instanceof Milk)) {\n            System.out.println(\"[UYARİ] ESPRESSO TİPİ KAHVEYE \" + addon.getName() + \" EKLENEMEZ\");\n        }\n        if (coffee instanceof Latte && (addon instanceof DoubleShot)) {\n            System.out.println(\"[UYARİ] LATTE TİPİ KAHVEYE\" + addon.getName() + \"EKLENEMEZ\");\n        }\n        if (coffee instanceof Americano && (addon instanceof Chocolate || addon instanceof DoubleShot)) {\n            System.out.println(\"[UYARİ] AMERİCANO TİPİ KAHVEYE\" + addon.getName() + \"EKLENEMEZ\");\n        } else {\n            coffee.addAddon(addon);\n        }\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        if (coffee instanceof Latte) {\n            System.out.print(\"Sipariş: Latte\");\n            int i = coffee.addons.size();\n            for (int y = 0; y < i; y++) {\n                System.out.print(\"+\" + coffee.addons.get(y).getName());\n            }\n            Double z = 0.0;\n            System.out.println();\n            for (int y = 0; y < i; y++) {\n                z = z + coffee.addons.get(y).getCost();\n            }\n            z = z + coffee.calculatePrice();\n            System.out.println(\"Toplam Fiyat:\" + z);\n            System.out.println();\n        }\n        if (coffee instanceof Americano) {\n            System.out.print(\"Sipariş: Americano\");\n            int i = coffee.addons.size();\n            for (int y = 0; y < i; y++) {\n                System.out.print(\"+\" + coffee.addons.get(y).getName());\n            }\n            System.out.println();\n            Double z = 0.0;\n            for (int y = 0; y < i; y++) {\n                z = z + coffee.addons.get(y).getCost();\n            }\n            z = z + coffee.calculatePrice();\n            System.out.println(\"Toplam Fiyat:\" + z);\n            System.out.println();\n        }\n        if (coffee instanceof Espresso) {\n            if (((Espresso) coffee).getter())\n                System.out.print(\"SİPARİS:ESPRESSO (SICAK FİNCAN)\");\n            else\n                System.out.print(\"SİPARİS:ESPRESSO NORMAL\");\n            int i = coffee.addons.size();\n            for (int y = 0; y < i - 1; y++) {\n                System.out.print(\"+\" + coffee.addons.get(y).getName());\n            }\n            System.out.println();\n            Double z = 0.0;\n            for (int y = 0; y < i; y++) {\n                z = z + coffee.addons.get(y).getCost();\n            }\n            z = z + coffee.calculatePrice();\n            System.out.println(\"Toplam Fiyat:\" + z);\n            System.out.println();\n        }\n\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            System.out.println(\"Espresso coffee isitildi\");\n            ((Espresso) coffee).heatCup();\n        } else {\n            System.out.println(\"[UYARI]Sadece Espresso tipi kahve isitilabilir.\");\n        }\n    }\n\n    public void getCount() {\n        System.out.println(\"BU KADAR KAHVE ÜRETİLDİ:\" + (count - 1));\n    }\n\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    public double getCost() {\n        return 5.0;\n    }\n\n    public String getName() {\n        return \"Milk\";\n    }\n}\n",
      "mainim.java": "public class mainim {\n    public static void main(String[] args) {\n        CoffeeMachine machine = new CoffeeMachine();\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n        // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve\n        // uretiyoruz.\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n        System.out.println();\n        // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n        machine.getCount();\n    }\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 10.0;\n    }\n\n    @Override\n    public String getName() {\n        return \"DoubleShot\";\n    }\n\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    public double getCost() {\n        return 7.0;\n    }\n\n    public String getName() {\n        return \"Chocolate\";\n    }\n}\n"
    },
    {
      "id": "4380745",
      "Latte.java": "public class Latte extends BaseCoffee{\n    @Override\n    public double calculatePrice() {\n        int price = 50;\n        String message = \"Sipariş: Latte\";\n\n        for(CoffeeAddon addon : addons){\n            price += addon.getCost();\n            message += \" + \" + addon.getName();\n        }\n\n        System.out.println(message);\n        System.out.println(\"Toplam Fiyat: \" + price + \"TL\");\n        System.out.println();\n        return price;\n    }\n\n    @Override\n    public String getType() {\n        return \"Latte\";\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n            CoffeeMachine machine = new CoffeeMachine();\n            BaseCoffee espresso = new Espresso();\n            machine.addAddonToCoffee(espresso, new DoubleShot());\n            machine.addAddonToCoffee(espresso, new Milk());\n            machine.heatEspressoCup(espresso);\n            machine.makeCoffee(espresso);\n            BaseCoffee latte = new Latte();\n            machine.addAddonToCoffee(latte, new Milk());\n            machine.addAddonToCoffee(latte, new VanillaSyrup());\n            machine.makeCoffee(latte);\n            // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n            CoffeeMachine anotherMachine = new CoffeeMachine();\n            BaseCoffee americano = new Americano();\n            anotherMachine.heatEspressoCup(americano);\n            anotherMachine.makeCoffee(americano);\n            anotherMachine.displaySumOfCoffeNumber();// Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n        }\n}\n",
      "Espresso.java": "public class Espresso extends BaseCoffee{\n    \n    private boolean isHeated = false;\n\n    public Espresso(){\n    }\n    \n    @Override\n    public double calculatePrice() {\n        int price = 40;\n        String message = \"Sipariş: Espresso\";\n\n        if(isHeated) message += \" (Sıcak Fincan)\";\n\n        for(CoffeeAddon addon : addons){\n            price += addon.getCost();\n            message += \" + \" + addon.getName();\n        }\n\n        System.out.println(message);\n        System.out.println(\"Toplam Fiyat: \" + price + \"TL\");\n        System.out.println();\n        return price;\n    }\n\n    public void heatCup(){\n        isHeated = true;\n    }\n\n    @Override\n    public String getType() {\n        return \"Espresso\";\n    }\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon{\n    @Override\n    public double getCost() {\n        return 6;\n    }\n\n    @Override\n    public String getName() {\n        return \"Vanilla Syrup\";\n    }\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n    double getCost();\n    String getName();\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons;\n\n    public BaseCoffee(){\n        addons = new ArrayList<CoffeeAddon>();\n    }\n\n    public void addAddon(CoffeeAddon addon){\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n    public abstract String getType();\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee{\n    @Override\n    public double calculatePrice() {\n        int price = 45;\n        String message = \"Sipariş: Americano\";\n\n        for(CoffeeAddon addon : addons){\n            price += addon.getCost();\n            message += \" + \" + addon.getName();\n        }\n\n        System.out.println(message);\n        System.out.println(\"Toplam Fiyat: \" + price + \"TL\");\n        System.out.println();\n        return price;\n    }\n\n    @Override\n    public String getType() {\n        return \"Americano\";\n    }\n}\n",
      "CoffeeMachine.java": "public class CoffeeMachine {\n\n    static int sumOfCoffeNumber = 0;\n    \n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon adddon){\n        if(coffee instanceof Espresso && (adddon instanceof DoubleShot || adddon instanceof Chocolate)){\n            coffee.addAddon(adddon);\n        }\n        else if(coffee instanceof Latte && (adddon instanceof Milk || adddon instanceof VanillaSyrup || adddon instanceof Chocolate)){\n            coffee.addAddon(adddon);\n        }\n        else if(coffee instanceof Americano && (adddon instanceof Milk || adddon instanceof VanillaSyrup)){\n            coffee.addAddon(adddon);\n        }\n        else{\n            System.out.println(\"[UYARI] \" + coffee.getType() + \" tipi kahveye \" + adddon.getName() + \" eklenemez\");\n        }\n    }\n\n    public void makeCoffee(BaseCoffee coffee){\n        coffee.calculatePrice();\n        sumOfCoffeNumber++;\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee){\n        if(coffee instanceof Espresso){\n            ((Espresso)coffee).heatCup();\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n        }\n        else{\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    public void displaySumOfCoffeNumber(){\n        System.out.println(\"Tum kahve makineleri tarafindan toplam \" + sumOfCoffeNumber + \" kahve uretildi\");\n    }\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon{\n    @Override\n    public double getCost() {\n        return 5;\n    }\n\n    @Override\n    public String getName() {\n        return \"Milk\";\n    }\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon{\n    @Override\n    public double getCost() {\n        return 10;\n    }\n\n    @Override\n    public String getName() {\n        return \"Double Shot\";\n    }\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon{\n    @Override\n    public double getCost() {\n        return 7;\n    }\n\n    @Override\n    public String getName() {\n        return \"Chocolate\";\n    }\n}\n"
    },
    {
      "id": "7214465",
      "Latte.java": "public class Latte extends BaseCoffee {\n     @Override\n    public double calculatePrice() {\n        double basePrice = 50;\n        double totalPrice = basePrice;\n        for (CoffeeAddon addon : addons) {\n            totalPrice += addon.getCost();\n        }\n        return totalPrice;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder order = new StringBuilder(\"Latte\");\n        for (CoffeeAddon addon : addons) {\n            order.append(\" + \").append(addon.getName());\n        }\n        return \"Sipariş: \" + order.toString() + \" Toplam Fiyat: \" + calculatePrice() + \" TL\";\n    }\n}",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n    CoffeeMachine machine = new CoffeeMachine();\n    BaseCoffee espresso = new Espresso();\n    machine.addAddonToCoffee(espresso, new DoubleShot());\n    machine.addAddonToCoffee(espresso, new Milk());\n    machine.heatEspressoCup(espresso);\n    machine.makeCoffee(espresso);\n    BaseCoffee latte = new Latte();\n    machine.addAddonToCoffee(latte, new Milk());\n    machine.addAddonToCoffee(latte, new VanillaSyrup());\n    machine.makeCoffee(latte);\n    // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n    CoffeeMachine machine2 = new CoffeeMachine();\n    machine2.addAddonToCoffee(espresso, new DoubleShot());\n    machine2.addAddonToCoffee(espresso, new Milk());\n    machine2.heatEspressoCup(espresso);\n    machine2.makeCoffee(espresso);\n    machine2.getTotalCoffeesMade();\n    //...\n    CoffeeMachine anotherMachine = new CoffeeMachine();\n    BaseCoffee americano = new Americano();\n    anotherMachine.heatEspressoCup(americano);\n    anotherMachine.makeCoffee(americano);\n    System.out.println(\"\\n\");\n    // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n    anotherMachine.getTotalCoffeesMade();\n    }\n}\n",
      "Espresso.java": "public class Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n\n    public void heatCup() {\n        isHeated = true;\n    }\n\n    @Override\n    public double calculatePrice() {\n        double basePrice = 40;\n        double totalPrice = basePrice;\n        for (CoffeeAddon addon : addons) {\n            totalPrice += addon.getCost();\n        }\n        return totalPrice;\n    }\n\n    @Override\n    public String toString() {\n        String coffeeName = isHeated ? \"Espresso (Sıcak Fincan)\" : \"Espresso\";\n        StringBuilder order = new StringBuilder(coffeeName);\n        for (CoffeeAddon addon : addons) {\n            order.append(\" + \").append(addon.getName());\n        }\n        return \"Sipariş: \" + order.toString() + \" Toplam Fiyat: \" + calculatePrice() + \" TL\";\n    }\n}",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    @Override\n    public double getCost() {\n        return 6;\n    }\n\n    @Override\n    public String getName() {\n        return \"Vanilla Syrup\";\n    }\n}",
      "CoffeeAddon.java": "public interface CoffeeAddon{\n    public double getCost();\n    public String getName();\n}",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n    } \n    public abstract double calculatePrice();\n}",
      "Americano.java": "public class Americano extends BaseCoffee {\n    @Override\n    public double calculatePrice() {\n        double basePrice = 45;\n        double totalPrice = basePrice;\n        for (CoffeeAddon addon : addons) {\n            totalPrice += addon.getCost();\n        }\n        return totalPrice;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder order = new StringBuilder(\"Americano\");\n        for (CoffeeAddon addon : addons) {\n            order.append(\" + \").append(addon.getName());\n        }\n        return \"Sipariş: \" + order.toString() + \" Toplam Fiyat: \" + calculatePrice() + \" TL\";\n    }\n}",
      "CoffeeMachine.java": "public class CoffeeMachine {\n    private static int totalCoffeesMade = 0;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n        coffee.addAddon(addon);\n    }\n    public void makeCoffee(BaseCoffee coffee) {\n        totalCoffeesMade++;\n        System.out.println(\"Hazırlanıyor..\" + coffee.getClass().getSimpleName());\n        System.out.println(\"Toplam Fiyat: \" + coffee.calculatePrice());\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            ((Espresso) coffee).heatCup();\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n        } else {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir.\");\n        }\n    }\n\n    public static int getTotalCoffeesMade() {\n        return totalCoffeesMade;\n    }\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    @Override\n    public double getCost() {\n        return 5;\n    }\n\n    @Override\n    public String getName() {\n        return \"Milk\";\n    }\n}",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n    @Override\n    public double getCost() {\n        return 10;\n    }\n\n    @Override\n    public String getName() {\n        return \"Double Shot\";\n    }\n}",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    @Override\n    public double getCost() {\n        return 7;\n    }\n\n    @Override\n    public String getName() {\n        return \"Chocolate\";\n    }\n}\n"
    },
    {
      "id": "1762204",
      "Latte.java": "public class Latte extends BaseCoffee {\n    public Latte() {\n        super(\"Latte\");\n    }\n\n    public double calculatePrice() {\n        double addonsSum = 0;\n        for (CoffeeAddon coffeeAddon : addons) {\n            addonsSum += coffeeAddon.getCost();\n        }\n        return addonsSum += 50;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CoffeeMachine machine = new CoffeeMachine();\n\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n\n        // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n\n        System.out.println(\"\\n\");\n        System.out.println(\"Tum kahve makineleri tarafindan toplam \" + CoffeeMachine.getTotalNumberOfCoffeesFromAllMachines() + \" kahve uretildi\");\n    }\n}",
      "Espresso.java": "public class Espresso extends BaseCoffee {\n    private boolean isHeated;\n    \n    public Espresso() {\n        super(\"Espresso\");\n    }\n\n    public String getName() {\n        if (isHeated)\n            return super.getName() + \" (Sıcak Fincan)\";\n        else\n            return super.getName();\n    }\n\n    public double calculatePrice() {\n        double addonsSum = 0;\n        for (CoffeeAddon coffeeAddon : addons) {\n            addonsSum += coffeeAddon.getCost();\n        }\n        return addonsSum += 40;\n    }\n\n    public void heatCup() {\n        System.out.println(getName() + \" kahve fincanı ısıtıldı\");\n        isHeated = true;\n    }\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    public String getName() {\n        return \"VanillaSyrup\";\n    }\n\n    public double getCost() {\n        return 6;\n    }\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n    double getCost();\n    String getName();\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    private String name;\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<CoffeeAddon>();\n\n    public BaseCoffee(String name) {\n        this.name = name;\n    }\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee {\n    public Americano() {\n        super(\"Americano\");\n    }\n\n    public double calculatePrice() {\n        double addonsSum = 0;\n        for (CoffeeAddon coffeeAddon : addons) {\n            addonsSum += coffeeAddon.getCost();\n        }\n        return addonsSum += 45;\n    }\n}\n",
      "CoffeeMachine.java": "import java.util.ArrayList;\n\npublic class CoffeeMachine {\n    private static ArrayList<CoffeeMachine> allCoffeeMachines = new ArrayList<CoffeeMachine>();\n    private int totalNumberOfCoffees = 0;\n\n    public CoffeeMachine() {\n        allCoffeeMachines.add(this);\n    }\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon adddon) {\n        if (coffee instanceof Espresso && !(adddon instanceof DoubleShot || adddon instanceof Chocolate)) {\n            System.out.println(\"[UYARI] Espresso tipi kahveye \" + adddon.getName() + \" eklenemez\");\n            return;\n        }\n        if (coffee instanceof Latte && !(adddon instanceof Milk || adddon instanceof VanillaSyrup || adddon instanceof Chocolate)) {\n            System.out.println(\"[UYARI] Latte tipi kahveye \" + adddon.getName() + \" eklenemez\");\n            return;\n        }\n        if (coffee instanceof Americano && !(adddon instanceof Milk || adddon instanceof VanillaSyrup)) {\n            System.out.println(\"[UYARI] Americano tipi kahveye \" + adddon.getName() + \" eklenemez\");\n            return;\n        }\n\n        coffee.addAddon(adddon);\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        String addonsString = \"\";\n        for (CoffeeAddon coffeeAddon : coffee.addons) {\n            addonsString += \" + \" + coffeeAddon.getName();\n        }\n        totalNumberOfCoffees++;\n        System.out.println(\"Sipariş: \" + coffee.getName() + addonsString);\n        System.out.println(\"Toplam Fiyat: \" + (int)coffee.calculatePrice());\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            Espresso espresso = (Espresso) coffee;\n            espresso.heatCup();\n        } else {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    public int totalNumberOfCoffees() {\n        return totalNumberOfCoffees;\n    }\n\n    public static int getTotalNumberOfCoffeesFromAllMachines() {\n        int totalNumberOfCoffees = 0;\n        for (CoffeeMachine coffeeMachine : allCoffeeMachines) {\n            totalNumberOfCoffees += coffeeMachine.totalNumberOfCoffees();\n        }\n        return totalNumberOfCoffees;\n    }\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    public String getName() {\n        return \"Milk\";\n    }\n\n    public double getCost() {\n        return 5;\n    }\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n    public String getName() {\n        return \"DoubleShot\";\n    }\n\n    public double getCost() {\n        return 10;\n    }\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    public String getName() {\n        return \"Chocolate\";\n    }\n\n    public double getCost() {\n        return 7;\n    }\n}\n"
    },
    {
      "id": "9830856",
      "Latte.java": "public class Latte extends BaseCoffee\n{\n   \n   \n    public Latte()\n    {\n        BaseCoffee.count++;\n    }\n   \n   \n   \n   \n   \n   \n   \n    @Override\n    public double calculatePrice()\n    {\n      \n        return 50.0;\n      \n    }\n\n\n\n    public boolean LatteKontrol(CoffeeAddon addons)\n    {\n    if(addons instanceof DoubleShot)\n    return false;\n\n    else \n    return true;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n    CoffeeMachine machine = new CoffeeMachine();\n    BaseCoffee espresso = new Espresso();\n    machine.addAddonToCoffee(espresso, new DoubleShot());\n    machine.addAddonToCoffee(espresso, new Milk());\n    machine.heatEspressoCup(espresso);\n    machine.makeCoffee(espresso);\n    BaseCoffee latte = new Latte();\n    machine.addAddonToCoffee(latte, new Milk());\n    machine.addAddonToCoffee(latte, new VanillaSyrup());\n    machine.makeCoffee(latte);\n   \n    CoffeeMachine anotherMachine = new CoffeeMachine();\n    BaseCoffee americano = new Americano();\n    anotherMachine.heatEspressoCup(americano);\n    anotherMachine.makeCoffee(americano);\n    System.out.println(\"\\n\");\n    anotherMachine.toplamKahve(americano);\n\n    \n    }\n    }\n    \n",
      "Espresso.java": "public class Espresso extends BaseCoffee\n{\n    private boolean isHeated= false;\n\n\n    public Espresso()\n    {\n       \n        BaseCoffee.count++;\n    }\n\n  @Override\n  public double calculatePrice()\n  {\n    \n\n    if(isHeated)\n    {\n        HeatPrint();\n    }\n    return 40.0;\n    \n  }\n\n  public void heatCup()\n  {\n    this.isHeated=true;\n  }\n\n  public void HeatPrint()\n  {\n    System.out.println(\" Espresso (Sıcak Fincan)\");\n  }\n\n  public boolean EspressoKontrol(CoffeeAddon addons)\n  {\n    if(addons instanceof Milk)\n    return false;\n\n   else if(addons instanceof VanillaSyrup)\n    return false;\n\n    else \n    return true;\n  }\n\n\n  \n\n\n\n\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon\n{\n    @Override\n    public double getCost()\n    {\n        return 6.0;\n    }\n\n    @Override\n    public String getName()\n     {\n       return \"Vanilla Syrup \";\n     }\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon \n{\n    double getCost();\n    String getName();\n}\n\n\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\n\npublic abstract class BaseCoffee \n{\n    public static int count=0;\n    public abstract double calculatePrice();\n    protected ArrayList<CoffeeAddon> addons;\n    public ArrayList<BaseCoffee> coffees;\n    \n\n    public void addAddon(CoffeeAddon addon)\n    {\n       addons.add(addon);\n    }\n\n    public boolean EklentiKontrol(BaseCoffee coffee, CoffeeAddon adddon)\n    {\n        boolean flag;\n\n        if(coffee instanceof Espresso)\n        flag= ((Espresso) coffee).EspressoKontrol(adddon);\n\n\n        else if(coffee instanceof Americano)\n        flag= ((Americano) coffee).AmericanoKontrol(adddon);\n\n        else \n        flag= ((Latte)coffee).LatteKontrol(adddon);\n  \n        return flag;\n\n    }\n\n\n\npublic void EklenemezPrint(BaseCoffee coffeee, CoffeeAddon adddonn )\n{\n    if(!EklentiKontrol(coffeee, adddonn))\n    {\n           System.out.println( \" [UYARI]!!!! \" + coffeee + \" tipi kahveye \" + adddonn + \" eklenemez.\");\n    }\n\n    else\n    System.out.println();\n\n}\n\n\n\n    \n\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee\n{\n\n\npublic Americano()\n{\n    BaseCoffee.count++;\n}\n\n\n\n\n    @Override\n    public double calculatePrice()\n    {\n      \n        return 45.0;\n      \n    }\n\n    public boolean AmericanoKontrol(CoffeeAddon addons)\n    {\n      if(addons instanceof DoubleShot)\n      return false;\n  \n     else if(addons instanceof Chocolate)\n      return false;\n  \n      else \n      return true;\n    }\n\n\n\n}\n",
      "CoffeeMachine.java": "\n\npublic class CoffeeMachine \n{\n    \n    double price=0;\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon adddon)\n    {\n        \n      if(coffee.EklentiKontrol(coffee,adddon))\n      {\n        price+=adddon.getCost();\n        coffee.addAddon(adddon);\n      }\n\n\n      else \n      coffee.EklenemezPrint(coffee, adddon);\n\n    }\n\n\n    public void makeCoffee(BaseCoffee coffee)\n    {\n        price+= coffee.calculatePrice();\n        if(coffee instanceof Espresso)\n        {\n            \n            System.out.println(\" Espresso kahve fincanı ısıtıldı\");\n            ((Espresso) coffee).heatCup();\n        }\n\n        else\n        System.out.println(\"[UYARI]!!! sadece espresso kahve fincanları ısıtılabilir\");\n\n        price=0;\n    }\n\n\n\n    public void heatEspressoCup(BaseCoffee coffee)\n    {\n        if(coffee instanceof Espresso)\n        {\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n            ((Espresso) coffee).heatCup();\n        }\n\n       \n    }\n\n\n    public void toplamKahve(BaseCoffee coffee)\n    {\n        System.out.println(\"Tum fabrikalar  kahve makineleri \" + BaseCoffee.count +  \"toplam kahve uretildi\");\n                                         \n    }\n\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon\n{\n    @Override\n    public double getCost()\n    {\n        return 5.0;\n    }\n\n    @Override\n    public String getName()\n     {\n       return \"Milk \";\n     }\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon\n{\n\n    @Override\n    public double getCost() \n    {\n       return 10.0;\n    }\n\n    @Override\n    public String getName()\n     {\n       return \"Double Shot \";\n     }\n    \n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon\n{\n    @Override\n    public double getCost()\n     {\n        return 7.0;\n     }\n\n     @Override\n    public String getName()\n     {\n       return \"Chocolate \";\n     }\n}\n"
    },
    {
      "id": "8435496",
      "Latte.java": "package Quiz.Quiz2;\n\npublic class Latte extends BaseCoffee\n{\n    @Override\n    public double calculatePrice()\n    {\n        double price = 50;\n\n        System.out.print(\"Sipariş: Latte\");\n        for (CoffeeAddon addon : addons)\n        {\n            price += addon.getCost();\n            System.out.print(\" + \" + addon.getName());\n        }\n        System.out.println();\n\n        return price;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Latte\";\n    }\n}\n",
      "Main.java": "package Quiz.Quiz2;\n\npublic class Main\n{\n    public static void main(String[] args) {\n        CoffeeMachine machine = new CoffeeMachine();\n\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n\n        // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n\n        System.out.println(\"\\n\");\n        CoffeeMachine.printTimes();\n    }\n}\n",
      "Espresso.java": "package Quiz.Quiz2;\n\npublic class Espresso extends BaseCoffee\n{\n    private boolean isHeated = false;\n\n    @Override\n    public double calculatePrice()\n    {\n        double price = 40;\n\n        System.out.print(\"Sipariş: \");\n        if (isHeated)\n        {\n            System.out.print(\"Espresso (Sıcak Fincan)\");\n        }\n        else\n        {\n            System.out.print(\"Espresso\");\n        }\n\n        for (CoffeeAddon addon : addons)\n        {\n            price += addon.getCost();\n            System.out.print(\" + \" + addon.getName());\n        }\n        System.out.println();\n\n        return price;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Espresso\";\n    }\n\n    public void heatCup()\n    {\n        isHeated = true;\n        System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n    }\n}\n",
      "VanillaSyrup.java": "package Quiz.Quiz2;\n\npublic class VanillaSyrup implements CoffeeAddon\n{\n    @Override\n    public double getCost()\n    {\n        return 6;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Vanilla Syrup\";\n    }\n}\n",
      "CoffeeAddon.java": "package Quiz.Quiz2;\n\npublic interface CoffeeAddon\n{\n    double getCost();\n    String getName(); // TODO:\n}\n",
      "BaseCoffee.java": "package Quiz.Quiz2;\n\nimport java.util.ArrayList;\n\npublic abstract class BaseCoffee\n{\n    protected ArrayList<CoffeeAddon> addons;\n\n    public BaseCoffee()\n    {\n        addons = new ArrayList<>();\n    }\n\n    public void addAddon(CoffeeAddon addon)\n    {\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n\n    public abstract String getName();\n}\n",
      "Americano.java": "package Quiz.Quiz2;\n\npublic class Americano extends BaseCoffee\n{\n    @Override\n    public double calculatePrice()\n    {\n        double price = 45;\n\n        System.out.print(\"Sipariş: Americano\");\n        for (CoffeeAddon addon : addons)\n        {\n            price += addon.getCost();\n            System.out.print(\" + \" + addon.getName());\n        }\n        System.out.println();\n\n        return price;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Americano\";\n    }\n}\n",
      "CoffeeMachine.java": "package Quiz.Quiz2;\n\npublic class CoffeeMachine\n{\n    private static int times = 0;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon)\n    {\n        if (coffee instanceof Espresso && addon instanceof Milk)\n        {\n            System.out.println(\"[UYARI] \" + coffee.getName() + \" tipi kahveye \"\n                                + addon.getName() + \" eklenemez\");\n            return;\n        }\n        coffee.addAddon(addon);\n    }\n\n    public void makeCoffee(BaseCoffee coffee)\n    {\n        double price = coffee.calculatePrice();\n        System.out.println(\"Toplam Fiyat: \" + price + \"TL\\n\");\n        times++;\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee)\n    {\n        if (coffee instanceof Espresso)\n        {\n            ((Espresso) coffee).heatCup();;\n        }\n        else\n        {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    public static void printTimes()\n    {\n        System.out.println(\"Tum kahve makineleri tarafindan toplam \" + times + \" kahve uretildi\");\n    }\n}\n",
      "Milk.java": "package Quiz.Quiz2;\n\npublic class Milk implements CoffeeAddon\n{\n\n    @Override\n    public double getCost()\n    {\n        return 5;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Milk\";\n    }\n}\n",
      "DoubleShot.java": "package Quiz.Quiz2;\n\npublic class DoubleShot implements CoffeeAddon\n{\n    @Override\n    public double getCost()\n    {\n        return 10;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Double Shot\";\n    }\n}\n",
      "Chocolate.java": "package Quiz.Quiz2;\n\npublic class Chocolate implements CoffeeAddon\n{\n    @Override\n    public double getCost()\n    {\n        return 7;\n    }\n\n    @Override\n    public String getName()\n    {\n        return \"Chocolate\";\n    }\n}\n"
    },
    {
      "id": "8783086",
      "Latte.java": "public class Latte extends BaseCoffee {\n    public double calculatePrice() {\n        double price = 50.0;\n        for (int i = 0; i < addons.size(); i++) {\n            price += addons.get(i).getCost();\n        }\n        return price;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n    }\n}\n",
      "Espresso.java": "import java.util.ArrayList;\n\npublic class Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n\n    public double calculatePrice() {\n        double price = 40.0;\n        for (int i = 0; i < addons.size(); i++) {\n            price += addons.get(i).getCost();\n        }\n        return price;\n    }\n\n    public setHeat(Boolean heat) {\n        isHeated = heat;\n    }\n\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    public double getCost() {\n        return 6.0;\n    }\n\n    public String getName() {\n        return \"VanillaSyrup\";\n    }\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n    double getCost();\n\n    String getName();\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee {\n    public double calculatePrice() {\n        double price = 45.0;\n        for (int i = 0; i < addons.size(); i++) {\n            price += addons.get(i).getCost();\n        }\n        return price;\n    }\n}\n",
      "CoffeeMachine.java": "public class CoffeeMachine {\n    boolean heat = false;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n        if (coffee instanceof Espresso && (addon instanceof Milk || addon instanceof VanillaSyrup)) {\n            System.out.println(\"[UYARI] Espresso tipi kahveye \" + addon.getName() + \" eklenemez\");\n        } else if (coffee instanceof Latte && addon instanceof DoubleShot) {\n            System.out.println(\"[UYARI] Latte tipi kahveye \" + addon.getName() + \" eklenemez\");\n        } else if (coffee instanceof Americano && (addon instanceof DoubleShot || addon instanceof Chocolate)) {\n            System.out.println(\"[UYARI] Americano tipi kahveye \" + addon.getName() + \" eklenemez\");\n        } else {\n            coffee.addAddon(addon);\n        }\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n            heat = true;\n        } else {\n            System.out.println(\"[UYARI] sadece espresso fincanları ısıtılabilir\");\n        }\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        if (coffee instanceof Espresso && heat == true) {\n            System.out.print(\"Sipariş: Espresso (Sıcak Fincan) \");\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                System.out.print(\" + \" + coffee.addons.get(i).getName());\n            }\n        } else if (coffee instanceof Espresso) {\n            System.out.print(\"Sipariş: Espresso \");\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                System.out.print(\" + \" + coffee.addons.get(i).getName());\n                System.out.println();\n                System.out.println(\"Toplam fiyat:\" + coffee.calculatePrice());\n            }\n        } else if (coffee instanceof Americano) {\n            System.out.print(\"Sipariş: Americano \");\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                System.out.print(\" + \" + coffee.addons.get(i).getName());\n                System.out.println();\n                System.out.println(\"Toplam fiyat:\" + coffee.calculatePrice());\n            }\n        } else if (coffee instanceof Latte) {\n            System.out.print(\"Sipariş: Latte \");\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                System.out.print(\" + \" + coffee.addons.get(i).getName());\n                System.out.println();\n                System.out.println(\"Toplam fiyat:\" + coffee.calculatePrice());\n            }\n        }\n    }\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    public double getCost() {\n        return 5.0;\n    }\n\n    public String getName() {\n        return \"Milk\";\n    }\n\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n    public double getCost() {\n        return 10.0;\n    }\n\n    public String getName() {\n        return \"DoubleShot\";\n    }\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    public double getCost() {\n        return 7.0;\n    }\n\n    public String getName() {\n        return \"Chocolate\";\n    }\n}\n"
    },
    {
      "id": "4731282",
      "Quiz2.java": "import java.util.ArrayList;\n\npublic class Quiz2 {\n    public static void main(String[] args) {\n\n        CoffeeMachine machine = new CoffeeMachine();\n\n        BaseCoffee espresso = new Espresso();\n\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n\n        machine.addAddonToCoffee(espresso, new Milk());\n\n        machine.heatEspressoCup(espresso);\n\n        machine.makeCoffee(espresso);\n\n        BaseCoffee latte = new Latte();\n\n        machine.addAddonToCoffee(latte, new Milk());\n\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n\n        machine.makeCoffee(latte);\n\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n\n        BaseCoffee americano = new Americano();\n\n        anotherMachine.heatEspressoCup(americano);\n\n        anotherMachine.makeCoffee(americano);\n\n        System.out.println(\"\\n\");\n        System.out.println(CoffeeMachine.totalCoffees());\n\n    }\n}\n\nabstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<CoffeeAddon>();\n\n    public void addAddon(CoffeeAddon addon) {\n        this.addons.add(addon);\n\n    }\n\n    public abstract double calculatePrice();\n\n}\n\nclass Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n    double price = 0;\n\n    public double calculatePrice() {\n        for (int i = 0; i < this.addons.size(); i++) {\n            this.price += (this.addons.get(i)).getCost();\n        }\n        this.price += 40;\n        return this.price;\n\n    }\n\n    public void heatCup() {\n        this.isHeated = true;\n    }\n\n    public boolean getHeatedValue() {\n        return isHeated;\n    }\n\n}\n\nclass Latte extends BaseCoffee {\n    double price = 0;\n\n    public double calculatePrice() {\n        for (int i = 0; i < this.addons.size(); i++) {\n            this.price += (this.addons.get(i)).getCost();\n        }\n        this.price += 50;\n        return this.price;\n\n    }\n\n}\n\nclass Americano extends BaseCoffee {\n    double price = 0;\n\n    public double calculatePrice() {\n        for (int i = 0; i < this.addons.size(); i++) {\n            this.price += (this.addons.get(i)).getCost();\n        }\n        this.price += 45;\n        return this.price;\n\n    }\n}\n\nclass CoffeeMachine {\n    static int counter = 0;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n        if (coffee instanceof Espresso) {\n            if (addon instanceof Milk) {\n                System.out.println(\"[UYARI] Espresso tipi kahveye Milk eklenemez\");\n            }\n            if (addon instanceof VanillaSyrup) {\n                System.out.println(\"[UYARI] Espresso tipi kahveye Vanilla Syrup eklenemez\");\n            } else {\n                coffee.addAddon(addon);\n            }\n        }\n\n        if (coffee instanceof Latte) {\n            if (addon instanceof DoubleShot) {\n                System.out.println(\"[UYARI] Latte tipi kahveye Double Shot eklenemez\");\n            } else {\n                coffee.addAddon(addon);\n            }\n        }\n\n        if (coffee instanceof Americano) {\n            if (addon instanceof Chocolate) {\n                System.out.println(\"[UYARI] Americano tipi kahveye Chocolate eklenemez\");\n\n            }\n            if (addon instanceof DoubleShot) {\n                System.out.println(\"[UYARI] Americano tipi kahveye Double Shot eklenemez\");\n\n            } else {\n                coffee.addAddon(addon);\n            }\n        }\n\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        String theOrder = \"\";\n        if (coffee instanceof Espresso && ((Espresso) coffee).getHeatedValue() == true) {\n            theOrder += \"Sipariş: Espresso (Sıcak Fincan)\";\n\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                theOrder += \"+\" + (coffee.addons.get(i)).getName();\n            }\n            System.out.println(theOrder);\n            System.out.println(\"Toplam Fiyat: \" + coffee.calculatePrice() + \" TL\");\n            System.out.println();\n            counter++;\n\n        }\n        if (coffee instanceof Espresso && ((Espresso) coffee).getHeatedValue() == false) {\n            theOrder += \"Sipariş: Espresso \";\n\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                theOrder += \"+\" + (coffee.addons.get(i)).getName();\n            }\n            System.out.println(theOrder);\n            System.out.println(\"Toplam Fiyat: \" + coffee.calculatePrice() + \" TL\");\n            System.out.println();\n            counter++;\n\n        }\n\n        if (coffee instanceof Latte) {\n            theOrder += \"Sipariş: Latte \";\n\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                theOrder += \"+\" + (coffee.addons.get(i)).getName();\n            }\n            System.out.println(theOrder);\n            System.out.println(\"Toplam Fiyat: \" + coffee.calculatePrice() + \" TL\");\n            System.out.println();\n            counter++;\n\n        }\n        if (coffee instanceof Americano) {\n            theOrder += \"Sipariş: Americano \";\n\n            for (int i = 0; i < coffee.addons.size(); i++) {\n                theOrder += \"+\" + (coffee.addons.get(i)).getName();\n            }\n            System.out.println(theOrder);\n            System.out.println(\"Toplam Fiyat: \" + coffee.calculatePrice() + \" TL\");\n            System.out.println();\n            counter++;\n\n        }\n\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            ((Espresso) coffee).heatCup();\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n        } else {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n\n    }\n\n    public static String totalCoffees() {\n        return \"Tüm kahve makinelerinden toplam \" + counter + \" kahve üretildi\";\n    }\n}\n\ninterface CoffeeAddon {\n    double getCost();\n\n    String getName();\n}\n\nclass Milk implements CoffeeAddon {\n\n    public double getCost() {\n        return 5;\n\n    }\n\n    public String getName() {\n        return \" Milk \";\n\n    }\n\n}\n\nclass Chocolate implements CoffeeAddon {\n\n    public double getCost() {\n        return 7;\n\n    }\n\n    public String getName() {\n        return \" Chocolate \";\n\n    }\n\n}\n\nclass VanillaSyrup implements CoffeeAddon {\n\n    public double getCost() {\n        return 6;\n\n    }\n\n    public String getName() {\n        return \" Vanilla Syrup \";\n\n    }\n\n}\n\nclass DoubleShot implements CoffeeAddon {\n\n    public double getCost() {\n        return 10;\n\n    }\n\n    public String getName() {\n        return \" Double Shot \";\n\n    }\n\n}\n"
    },
    {
      "id": "6202193",
      "Main.java": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        CoffeeMachine machine = new CoffeeMachine();\n    BaseCoffee espresso = new Espresso();\n    machine.addAddonToCoffee(espresso, new DoubleShot());\n    machine.addAddonToCoffee(espresso, new Milk());\n    machine.heatEspressoCup(espresso);\n    machine.makeCoffee(espresso);\n    BaseCoffee latte = new Latte();\n    machine.addAddonToCoffee(latte, new Milk());\n    machine.addAddonToCoffee(latte, new VanillaSyrup());\n    machine.makeCoffee(latte);\n\n    CoffeeMachine anotherMachine = new CoffeeMachine();\n    BaseCoffee americano = new Americano();\n    anotherMachine.heatEspressoCup(americano);\n    anotherMachine.makeCoffee(americano);\n    System.out.println(\"\\n\");\n    anotherMachine.getAllCoffees();\n\n\n    }\n}\n\n\n\nclass Milk implements CoffeeAddon{\n\n    public double getCost(){\n        return 5;\n    }\n\n    public String getName(){\n        return \"Milk\";\n    }\n\n\n}\n\nclass Chocolate implements CoffeeAddon{\n\n    public double getCost(){\n        return 7;\n    }\n\n    public String getName(){\n        return \"Chocolate\";\n    }\n\n\n}\n\nclass VanillaSyrup implements CoffeeAddon{\n\n    public double getCost(){\n        return 6;\n    }\n\n    public String getName(){\n        return \"Vanilla Syrup\";\n    }\n\n\n}\n\nclass DoubleShot implements CoffeeAddon{\n\n    public double getCost(){\n        return 10;\n    }\n\n    public String getName(){\n        return \"Double Shot\";\n    }\n\n\n}\n\n\n\nclass Espresso extends BaseCoffee{\n    \n    private boolean isHeated=false;\n    \n    public void heatCup(){\n        isHeated=true;\n        System.out.println(\"Espresso kahve fincanı ısıtıldı.\");\n    }\n    \n    @Override\n    public double calculatePrice() {\n        if(isHeated)System.out.print(\"(Sıcak Fincan) + \");\n        int total = 0;\n        total+=40;\n        for(int i =0;i<addonList.size();i++){\n            total+=addonList.get(i).getCost();\n        }\n        return total;\n    }\n    }\n\n\nclass Americano extends BaseCoffee{\n\n    @Override\n    public double calculatePrice() {\n        int total = 0;\n        total+=45;\n        for(int i =0;i<addonList.size();i++){\n            total+=addonList.get(i).getCost();\n        }\n        return total;\n    }\n    }\n\n\nclass Latte extends BaseCoffee{\n\n    \n\n    @Override\n    public double calculatePrice() {\n        int total = 0;\n        total+=50;\n        for(int i =0;i<addonList.size();i++){\n            total+=addonList.get(i).getCost();\n        }\n        return total;\n    }\n}\n\nclass CoffeeMachine{\n\n    static int coffeesMade=0;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon){\n        if(coffee instanceof Espresso){\n            if(addon instanceof DoubleShot||addon instanceof Chocolate){\n                coffee.addAddon(addon);\n            }\n            else System.out.println(\"[UYARI] Espresso tipi kahveye \"+addon.getName()+\" eklenemez\");\n        }\n        else if(coffee instanceof Latte){\n            if(addon instanceof DoubleShot){\n                System.out.println(\"[UYARI] Latte tipi kahveye Double shot eklenemez\");\n            }\n            else coffee.addAddon(addon);\n        }\n        else if(coffee instanceof Americano){\n            if(addon instanceof Milk||addon instanceof VanillaSyrup){\n                coffee.addAddon(addon);\n            }\n            else System.out.println(\"[UYARI] Americano tipi kahveye \"+addon.getName()+\" eklenemez\");\n        }\n\n        \n    }\n\n    public void makeCoffee(BaseCoffee coffee){\n        if(coffee instanceof Espresso){\n            \n            System.out.print(\"Sipraiş: Espresso \");\n\n            double temp = coffee.calculatePrice();\n            \n            for(int i =0;i<coffee.addonList.size();i++){\n                System.out.print(coffee.addonList.get(i).getName());\n             if(i!=coffee.addonList.size()-1)System.out.print( \" + \");\n             \n            }\n            System.out.println();\n            \n            System.out.println(\"Toplam Fiyat: \"+(int)temp+\"TL\");\n            coffeesMade+=1;\n\n\n        }\n\n        if(coffee instanceof Latte){\n            System.out.println();\n            System.out.print(\"Sipraiş: Latte \");\n            \n    \n            for(int i =0;i<coffee.addonList.size();i++){\n                System.out.print(coffee.addonList.get(i).getName());\n             if(i!=coffee.addonList.size()-1)System.out.print( \" + \");\n             \n            }\n            System.out.println();\n            double temp = coffee.calculatePrice();\n            System.out.println(\"Toplam Fiyat: \"+(int)temp+\"TL\");\n            coffeesMade+=1;\n\n        }\n\n        if(coffee instanceof Americano){\n            \n            System.out.println(\"Sipraiş: Americano \");\n            for(int i =0;i<coffee.addonList.size();i++){\n                System.out.print(coffee.addonList.get(i).getName());\n             if(i!=coffee.addonList.size()-1)System.out.print( \" + \");\n             \n            }\n            System.out.println(\"Toplam Fiyat: \" +(int)coffee.calculatePrice()+\"TL\");\n            coffeesMade+=1;\n\n        }\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee){\n        if(coffee instanceof Espresso){\n            ((Espresso)coffee).heatCup();\n             \n        }\n        else {\n            System.out.println();\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    public void getAllCoffees(){\n        System.out.println(\"Tum kahve makineleri tarafindan toplam \"+coffeesMade+\" kahve uretildi\");\n    }\n}\n\n\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n\n    double getCost();\n    String getName();\n    \n\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee{\n\n    protected ArrayList<CoffeeAddon> addonList= new ArrayList<>();\n\n    public void addAddon(CoffeeAddon addon){\n        if(addonList.equals(null)){\n            addonList= new ArrayList<>();\n        }\n        addonList.add(addon);\n    }\n\n    public abstract double calculatePrice();\n}"
    },
    {
      "id": "8190737",
      "Main.java": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        CoffeeMachine machine = new CoffeeMachine();\n\n        BaseCoffee espresso = new Espresso(); \n        machine.addAddonToCoffee(espresso, new DoubleShot()); \n        machine.addAddonToCoffee(espresso, new Milk()); \n        machine.heatEspressoCup(espresso); \n        machine.makeCoffee(espresso);\n\n        BaseCoffee latte = new Latte(); \n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup()); \n        machine.makeCoffee(latte);\n\n        CoffeeMachine anotherMachine = new CoffeeMachine(); \n        BaseCoffee americano = new Americano(); \n        anotherMachine.heatEspressoCup(americano); \n        anotherMachine.makeCoffee(americano);\n\n        machine.printCoffeeCounter();\n\n        sc.close();\n   }\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon{\n    double getCost();\n    String getName();\n}\n\nclass Milk implements CoffeeAddon{\n    final double cost = 5;\n    final String name = \"Milk\";\n\n    public double getCost(){\n        return cost;\n    }\n\n    public String getName(){\n        return name;\n    }\n}\n\nclass Chocolate implements CoffeeAddon{\n    final double cost = 7;\n    final String name = \"Chocolate\";\n\n    public double getCost(){\n        return cost;\n    }\n\n    public String getName(){\n        return name;\n    }\n}\n\nclass VanillaSyrup implements CoffeeAddon{\n    final double cost = 6;\n    final String name = \"VanillaSyrup\";\n\n    public double getCost(){\n        return cost;\n    }\n\n    public String getName(){\n        return name;\n    }\n}\n\nclass DoubleShot implements CoffeeAddon{\n    final double cost = 10;\n    final String name = \"DoubleShot\";\n\n    public double getCost(){\n        return cost;\n    }\n\n    public String getName(){\n        return name;\n    }\n}",
      "BaseCoffee.java": "import java.util.*;\n\npublic abstract class BaseCoffee{\n    protected ArrayList<CoffeeAddon> addons;\n\n    BaseCoffee(){\n        addons = new ArrayList<CoffeeAddon>();\n    }\n\n    public void addAddon(CoffeeAddon addon){\n        addons.add(addon);\n    };\n\n    public abstract double calculatePrice();\n    public abstract String getType();\n}\n\nclass Espresso extends BaseCoffee{\n    private String type = \"Espresso\";\n    private boolean isHeated = false;\n\n    public String getType(){\n        if(isHeated) return type + \" (Sicak fincan)\";\n        else return type;\n    }\n\n    public void heatCup(){\n        isHeated = true;\n    }\n\n    public double calculatePrice(){\n        double price = 40;\n\n        for(CoffeeAddon addon:addons){\n            price += addon.getCost();\n        }\n\n        return price;\n    }\n}\n\nclass Latte extends BaseCoffee{\n    private String type = \"Latte\";\n\n    public String getType(){\n        return type;\n    }\n\n    public double calculatePrice(){\n        double price = 50;\n\n        for(CoffeeAddon addon:addons){\n            price += addon.getCost();\n        }\n\n        return price;\n    }\n}\n\nclass Americano extends BaseCoffee{\n    private String type = \"Americano\";\n\n    public String getType(){\n        return type;\n    }\n\n    public double calculatePrice(){\n        double price = 45;\n\n        for(CoffeeAddon addon:addons){\n            price += addon.getCost();\n        }\n\n        return price;\n    }\n}",
      "CoffeeMachine.java": "public class CoffeeMachine{\n    static int counter = 0;\n\n    private boolean isAddonCompatible(BaseCoffee coffee, CoffeeAddon addon){\n        if(coffee instanceof Espresso){\n            return addon.getName().equals(\"DoubleShot\") || addon.getName().equals(\"Chocolate\");\n        }\n        if(coffee instanceof Latte){\n            return addon.getName().equals(\"Milk\") || addon.getName().equals(\"VanillaSyrup\") || addon.getName().equals(\"Chocolate\");\n        }\n        if(coffee instanceof Americano){\n            return addon.getName().equals(\"Milk\") || addon.getName().equals(\"VanillaSyrup\");\n        }\n        return false;\n    }\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon){\n        if(!isAddonCompatible(coffee, addon)){\n            System.out.println(\"[UYARI]\" + coffee.getType() + \" tipi kahveye \" + addon.getName() + \" eklenemez\\n\");\n            return;\n        }\n        coffee.addAddon(addon);\n    }\n\n    public void makeCoffee(BaseCoffee coffee){\n        counter = counter + 1;\n        System.out.print(\"Siparis: \" + coffee.getType());\n        for(CoffeeAddon addon:coffee.addons){\n            System.out.print(\" + \" + addon.getName());\n        }\n        System.out.println(\"\\nToplam fiyat: \" + coffee.calculatePrice() + \"\\n\");\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee){\n        if(coffee instanceof Espresso){\n            ((Espresso)coffee).heatCup();\n            System.out.println(\"Espresso kahve fincani isitildi \\n\");\n            return;\n        }\n        System.out.println(\"[UYARI] Yalnizca Espresso kahve fincanlari isitilabilir\");\n    }\n\n    public void printCoffeeCounter(){\n        System.out.println(\"Tum kahve makineleri tarafindan toplam \" + counter + \" kahve uretildi\");\n    }\n}"
    },
    {
      "id": "6194008",
      "Main.java": "\nimport java.util.ArrayList;\n\ninterface CoffeeAddon {\n    double getCost();\n    String getName();\n}\nclass Milk implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 5;\n    }\n\n    @Override\n    public String getName() {\n        return \"Milk\";\n    }\n\n}\nclass Chocolate implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 7;\n    }\n\n    @Override\n    public String getName() {\n        return \"Chocolate\";\n    }\n\n}\nclass VanillaSyrup implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 6;\n    }\n\n    @Override\n    public String getName() {\n        return \"Vanilla Syrup\";\n    }\n\n}\nclass DoubleShot implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 10;\n    }\n\n    @Override\n    public String getName() {\n        return \"Double Shot\";\n    }\n\n}\nabstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addon = new ArrayList<>();\n    public void addAddon(CoffeeAddon addons) {\n        addon.add(addons);\n    }\n    public abstract double calculatePrice();\n}\nclass Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n    @Override\n    public double calculatePrice() {\n        int totalAddonsPrice = 0;\n        for (CoffeeAddon a : addon) {\n            totalAddonsPrice += a.getCost();\n        }\n        return 40 + totalAddonsPrice;      \n    }\n    public void heatCup() {\n        isHeated = true;\n    }\n    public boolean getIsHeated() {\n        return isHeated;\n    }\n\n}\nclass Latte extends BaseCoffee {\n\n    @Override\n    public double calculatePrice() {\n        int totalAddonsPrice = 0;\n        for (CoffeeAddon a : addon) {\n            totalAddonsPrice += a.getCost();\n        }\n        return 50 + totalAddonsPrice;\n    }\n\n}\nclass Americano extends BaseCoffee {\n\n    @Override\n    public double calculatePrice() {\n        int totalAddonsPrice = 0;\n        for (CoffeeAddon a : addon) {\n            totalAddonsPrice += a.getCost();\n        }\n        return 45 + totalAddonsPrice;\n    }\n\n}\nclass CoffeeMachine {\n    static int toplamKahveUretimi = 0;\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addons) {\n        if (coffee instanceof Espresso) {\n            if (addons instanceof DoubleShot || addons instanceof Chocolate) {\n                coffee.addAddon(addons);\n            }\n            else {\n                System.out.println(\"[UYARI] \"+ coffee.getClass() + \" tipi kahveye \" + addons.getName() + \" eklenemez\");\n            }\n        }\n        else if (coffee instanceof Latte) {\n            if (addons instanceof VanillaSyrup || addons instanceof Chocolate || addons instanceof Milk) {\n                coffee.addAddon(addons);\n            }\n            else {\n                System.out.println(\"[UYARI] \"+ coffee.getClass() + \" tipi kahveye \" + addons.getName() + \" eklenemez\");\n            }\n        }\n        else if (coffee instanceof Americano) {\n            if (addons instanceof Milk || addons instanceof VanillaSyrup) {\n                coffee.addAddon(addons);\n            }\n            else {\n                System.out.println(\"[UYARI] \"+ coffee.getClass() + \" tipi kahveye \" + addons.getName() + \" eklenemez\");\n            }\n        }\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        toplamKahveUretimi++;\n        String ab = \"\";\n        for (CoffeeAddon a : coffee.addon) {\n            ab += \" + \" + a.getName();\n        }\n        if (coffee instanceof Espresso) {\n            if (((Espresso) coffee).getIsHeated() == true) {\n                System.out.println(\"Sipariş: Espresso (Sıcak Fincan)\" + ab);\n            }\n            else {\n                System.out.println(\"Sipariş: Espresso\" + ab);\n            }\n        }\n        else if (coffee instanceof Latte) {\n            System.out.println(\"Sipariş: Latte\" + ab);\n        }\n        else if (coffee instanceof Americano) {\n            System.out.println(\"Sipariş: Americano\" + ab);\n        }\n\n        System.out.println(\"Toplam Fiyat: \" + coffee.calculatePrice() + \"TL\");\n        System.out.println();\n    }\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            ((Espresso) coffee).heatCup();\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n        }\n        else {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n    public static void totalCoffee() {\n        System.out.println(\"Tüm kahve makineleri tarafindan toplam \" + toplamKahveUretimi + \" kahve üretildi\");\n    }\n}\n\n\n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        CoffeeMachine machine = new CoffeeMachine();\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n        System.out.println(\"\\n\");\n        CoffeeMachine.totalCoffee();\n        }\n    \n}\n"
    },
    {
      "id": "7817361",
      "Latte.java": "package Quiz2;\n\npublic class Latte extends BaseCoffee {\n\n    public double calculatePrice(){\n        return 50.0;\n    }\n\n    public String getCoffeeName(){\n        return \"latte\";\n    }\n\n}\n",
      "Main.java": "package Quiz2;\n\npublic class Main {\n\n    public static void main(String[] args){\n        CoffeeMachine machine = new CoffeeMachine();\n\n        BaseCoffee espresso = new Espresso();\n\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n        // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n\n\n        System.out.println(\"Tüm Kahve Makineleri tarafından toplam \"+ machine.say() + \" kere üretildi\");\n        \n\n         // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n    }\n\n}\n",
      "Espresso.java": "package Quiz2;\n\npublic class Espresso extends BaseCoffee{\n\n    private boolean isHeated = false;\n\n    public double calculatePrice(){\n        return 40.0;\n    }\n\n    public void heatCup(){\n        isHeated = true;\n    }\n\n    public String getCoffeeName(){\n        return \"espresso\";\n    }\n\n}\n",
      "VanillaSyrup.java": "package Quiz2;\n\npublic class VanillaSyrup implements CoffeeAddon {\n\n    public double getCost(){\n\n        return 6.0;\n\n    }\n\n    public String getName(){\n        return \"Vanilla Syrup\";\n    }\n\n\n}\n",
      "CoffeeAddon.java": "package Quiz2;\n\ninterface CoffeeAddon{\n\n    double getCost();\n\n    String getName();\n\n}",
      "BaseCoffee.java": "package Quiz2;\n\nimport java.util.ArrayList;\n\n\npublic abstract class BaseCoffee {\n\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();\n\n\n    public void addAddon(CoffeeAddon addon){\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n\n    public abstract String getCoffeeName();\n\n\n\n\n}\n",
      "Americano.java": "package Quiz2;\n\npublic class Americano extends BaseCoffee {\n\n    public double calculatePrice(){\n        return 45.0;\n    }\n\n    public String getCoffeeName(){\n        return \"americano\";\n    }\n\n}\n",
      "CoffeeMachine.java": "package Quiz2;\n\nimport java.util.ArrayList;\n\npublic class CoffeeMachine {\n\n    public boolean isHEated = false;\n\n    public double toplamTutar = 0.0;\n    \n    int count = 0;\n    int m;\n    \n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon){\n\n        isHEated = false;\n\n        if ((addon.getName().equals(\"Milk\") || addon.getName().equals( \"Vanilla Syrup\"))&& coffee.getCoffeeName().equals(\"espresso\")){\n\n            System.out.println(\"[UYARI] Espresso tipi kahveye \" + addon.getName() + \" eklenemez.\");\n\n        }\n        if ((addon.getName().equals(\"Double Shot\") || addon.getName().equals( \"Chocolate\"))&& coffee.getCoffeeName().equals(\"americano\")){\n\n            System.out.println(\"[UYARI] Americano tipi kahveye \" + addon.getName() + \" eklenemez.\");\n\n        }\n        if (addon.getName().equals(\"Double Shot\") && coffee.getCoffeeName().equals(\"latte\")){\n\n            System.out.println(\"[UYARI] Latte tipi kahveye \" + addon.getName() + \" eklenemez.\");\n\n        }\n\n        coffee.addons.add(addon);\n    }\n\n    public void makeCoffee(BaseCoffee coffee){\n\n        System.out.print(\"Sipariş: \" + coffee.getCoffeeName());\n\n        if(isHEated == true){\n            System.out.println(\" (Sıcak Fincan) \");\n        }\n\n        for(int i = 0; i < coffee.addons.size() ; i++){\n\n            System.out.print(\" + \" + coffee.addons.get(i).getName());\n            toplamTutar = toplamTutar + coffee.addons.get(i).getCost();\n        }\n\n        System.out.println(\"\\nToplam Fiyat: \" + (toplamTutar + coffee.calculatePrice()));\n\n        say();\n\n    } \n\n    public void heatEspressoCup(BaseCoffee coffee){\n\n        isHEated = false;\n\n        if(coffee.getCoffeeName().equals(\"espresso\")){\n\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n\n            Espresso espresso = (Espresso)coffee;\n\n            espresso.heatCup();\n\n            isHEated = true;\n\n        }\n        else{\n            System.out.println(\"[UYARI] Yalnızca Espresso tipi kahve fincanları ısıtılabilir.\");\n        }\n\n    }\n\n    public int say(){\n        count++;\n\n        return count;\n    }\n   \n\n    \n\n\n}\n",
      "Milk.java": "package Quiz2;\n\npublic class Milk implements CoffeeAddon{\n\n    public double getCost(){\n\n        return 5.0;\n\n    }\n\n    public String getName(){\n        return \"Milk\";\n    }\n\n\n}\n",
      "DoubleShot.java": "package Quiz2;\n\npublic class DoubleShot implements CoffeeAddon{\n\n    public double getCost(){\n\n        return 10.0;\n\n    }\n\n    public String getName(){\n        return \"Double Shot\";\n    }\n\n\n}\n",
      "Chocolate.java": "package Quiz2;\n\npublic class Chocolate implements CoffeeAddon{\n\n    public double getCost(){\n\n        return 7.0;\n\n    }\n\n    public String getName(){\n        return \"Chocolate\";\n    }\n\n}\n"
    },
    {
      "id": "2051651",
      "WithBattery.java": "public interface WithBattery {\n\n    int getBatteryLife();\n\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    \n    protected String modelName;\n    protected int batteryLife;\n    String type;\n\n    public AbstractRobot(String modelName, int batteryLife, String type){\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.type = type;\n    }\n\n    public String getModelName(){\n        return modelName;\n    }\n\n    public abstract void performTask();\n\n}\n",
      "Main.java": "public class Main {  \n    public static void main(String[] args){\n        RobotFactory factory = new RobotFactory();\n\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println();\n        \n        System.out.println(\"Tüm fabrikalar tarafından toplam \" + RobotFactory.totalrobots + \" robot üretildi.\");\n    }\n}\n    \n    \n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n\n    private boolean isArmed;\n    \n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife, \"Security Robot\");\n        this.isArmed = isArmed;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = 100;\n    }\n\n    @Override\n    public void performTask() {\n        if(batteryLife >= 10){\n            System.out.println(modelName + \" Scanning for threats... Armed \" + isArmed);\n            batteryLife -= 10;\n        }\n\n        else{\n            System.out.println(modelName + \" Not enough battery to scan threats.\");\n        }\n    }\n\n    public void toggleArmedMode(){\n        if(isArmed == true){\n            isArmed = false;\n        }\n        else{\n            isArmed = true;\n        }\n    }\n\n    public boolean getisArmed(){\n        return isArmed;\n    }\n    \n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n    \n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife, \"Cleaning Robot\");\n        this.cleaningPower = cleaningPower;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = 100;\n    }\n\n    @Override\n    public void performTask() {\n        if(batteryLife >= 10){\n            System.out.println(modelName + \" Cleaning in progress... \" + \"Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        }\n\n        else{\n            System.out.println(modelName + \" Not enough battery to clean\");\n        }\n    }\n\n    public int getCleaningPower(){\n        return cleaningPower;\n    }\n\n    public void setCleaningPower(int x){\n        cleaningPower += x;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    \n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n    private ArrayList<SecurityRobot> securityRobots = new ArrayList<>();\n    private ArrayList<CleaningRobot> cleaningRobots = new ArrayList<>();\n    static int totalrobots;\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        cleaningRobots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalrobots += 1;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        securityRobots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalrobots += 1;\n    }\n\n    public void performAllTasks(){\n        for (AbstractRobot abstractRobot : robots) {\n            abstractRobot.performTask();\n        }\n    }\n\n    public void displayRobots(){\n        \n        for (CleaningRobot c : cleaningRobots) {\n            System.out.println(\"Cleaning Robot - model: \" + c.getModelName() +\n                 \", Battery: \" + c.getBatteryLife() + \", Cleaning Power: \" + c.getCleaningPower());\n        }\n        for (SecurityRobot s : securityRobots) {\n            System.out.println(\"Security Robot - model: \" + s.getModelName() +\n                 \", Battery: \" + s.getBatteryLife() + \", Armed: \" + s.getisArmed());\n        } \n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        for (CleaningRobot c : cleaningRobots){\n                c.setCleaningPower(miktar);\n                System.out.println(\"Cleaning Robot - \" + c.getModelName() + \" now has Cleaning Power \" + c.getCleaningPower());\n        }\n    }\n\n    public void toggleSecurityRobotsMode(){\n        for (SecurityRobot s : securityRobots) {\n                s.toggleArmedMode();\n                if(s.getisArmed() == true){\n                    System.out.println(\"Security Robot - \" + s.getModelName() + \" is now armed.\");\n                }\n                else{\n                    System.out.println(\"Security Robot - \" + s.getModelName() + \" is now unarmed.\");\n                }\n        }\n    }\n}\n\n"
    },
    {
      "id": "8964453",
      "Latte.java": "public class Latte extends BaseCoffee{\n    public String getName()\n    {\n        return \"Latte\";\n    }\n    @Override\n    public double calculatePrice() {\n        double totalPrice = 0;\n        totalPrice +=50;\n        for(CoffeeAddon x : addons)\n        {\n            totalPrice += x.getCost();\n        }\n        return totalPrice;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CoffeeMachine machine = new CoffeeMachine();\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n        System.out.println(\"\\n\");\n        CoffeeMachine.totalCoffeeMade();\n    }\n}\n",
      "Espresso.java": "import java.util.ArrayList;\n\npublic class Espresso extends BaseCoffee{\n    private boolean isHeated = false;\n    public String getName()\n    {\n        if(isHeated)\n        {\n            return \"Espresso (Sicak Fincan)\";\n        }\n        else\n        {\n            return \"Espresso\";\n        }\n    }\n\n    @Override\n    public double calculatePrice() {\n        double totalPrice = 0;\n        totalPrice +=40;\n        for(CoffeeAddon x : addons)\n        {\n            totalPrice += x.getCost();\n        }\n        return totalPrice;\n    }\n\n    public void heatCup()\n    {\n        isHeated = true;\n    }\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    @Override\n    public double getCost() {\n        return 6;\n    }\n\n    public String getName()\n    {return \"Vanilla Syrup\";}\n\n}\n",
      "CoffeeAddon.java": "public abstract interface CoffeeAddon {\n    double getCost();\n\n    String getName();\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n\n    public abstract String getName();\n\n    protected ArrayList<CoffeeAddon> addons;\n\n    BaseCoffee()\n    {\n        addons = new ArrayList<CoffeeAddon>();\n    }\n\n    public void addAddon(CoffeeAddon x){\n        addons.add(x);\n    }\n\n    public abstract double calculatePrice();\n\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee{\n\n    public String getName()\n    {\n        return \"Americano\";\n    }\n    public double calculatePrice() {\n        double totalPrice = 0;\n        totalPrice +=45;\n        for(CoffeeAddon x : addons)\n        {\n            totalPrice += x.getCost();\n        }\n        return totalPrice;\n    }\n}\n",
      "CoffeeMachine.java": "public class CoffeeMachine {\n\n    static int toplamKahveUretimi;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon)\n    {\n        if(coffee instanceof Espresso)\n        {\n            if(addon instanceof DoubleShot || addon instanceof Chocolate)\n            {\n                coffee.addAddon(addon);\n            }\n            else\n            {\n                System.out.println(\"[UYARI] \" + coffee.getName() + \" tipi kahveye \" + addon.getName() + \" eklenmez\");\n            }\n        }\n        else if(coffee instanceof Latte)\n        {\n            if(addon instanceof Milk || addon instanceof Chocolate || addon instanceof VanillaSyrup)\n            {\n                coffee.addAddon(addon);\n            }\n            else\n            {\n                System.out.println(\"[UYARI] \" + coffee.getName() + \" tipi kahveye \" + addon.getName() + \" eklenmez\");\n            }\n        }\n        else if(coffee instanceof Americano)\n        {\n            if(addon instanceof Milk || addon instanceof VanillaSyrup)\n            {\n                coffee.addAddon(addon);\n            }\n            else\n            {\n                System.out.println(\"[UYARI] \" + coffee.getName() + \" tipi kahveye \" + addon.getName() + \" eklenmez\");\n            }\n        }\n    }\n\n    public void makeCoffee(BaseCoffee coffee)\n    {\n        toplamKahveUretimi +=1;\n\n        System.out.print(\"Siprais: \" + coffee.getName());\n        for(CoffeeAddon x : coffee.addons)\n        {\n            System.out.print(\" + \");\n            System.out.print(x.getName());\n\n        }\n        System.out.println();\n        System.out.println(\"Toplam Fiyat:\" + (int) coffee.calculatePrice() + \"TL\");\n        System.out.println();\n\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee)\n    {\n        if(coffee instanceof Espresso)\n        {\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n            ((Espresso) coffee).heatCup();\n        }\n        else\n        {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    public static void totalCoffeeMade()\n    {\n        System.out.println(\"Tum fabrikalar kahve makineleri toplam \"+ toplamKahveUretimi + \" kahve uretildi\");\n    }\n\n\n\n\n\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    public double getCost()\n    {\n        return 5;\n    }\n\n    public String getName()\n    {\n        return \"Milk\";\n    }\n\n\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon{\n    @Override\n    public double getCost() {\n        return 10;\n    }\n    public String getName()\n    {\n        return \"Double Shot\";\n    }\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    @Override\n    public double getCost() {\n        return 7;\n    }\n\n    public String getName()\n    {\n        return \"Chocolate\";\n    }\n}\n"
    },
    {
      "id": "6897869",
      "Latte.java": "public class Latte extends BaseCoffee {\n    private double basePrice = 50.0;\n    {\n        type = \"Latte\";\n    }\n\n    @Override\n    public double calculatePrice() {\n        double price = basePrice;\n\n        System.out.print(\"Sipariş: \" + type + \" \");\n\n        for (CoffeeAddon addon : addons) {\n            price += addon.getCost();\n            System.out.print(\"+ \" + addon.getName() + \" \");\n        }\n\n        System.out.println();\n        CoffeMachine.allCoffees.add(this);\n        return price;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CoffeMachine machine = new CoffeMachine();\n\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n\n        CoffeMachine anotherMachine = new CoffeMachine();\n        BaseCoffee americano = new Americano();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n\n        System.out.println();\n\n        CoffeMachine.displayTotalCoffees();\n    }\n}\n",
      "Espresso.java": "\npublic class Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n    private double basePrice = 40.0;\n    {\n        type = \"Epresso\";\n    }\n\n    @Override\n    public double calculatePrice() {\n        double price = basePrice;\n\n        System.out.print(\"Sipariş: Espresso \");\n\n        if (isHeated) {\n            System.out.print(\"(Sıcak Fincan) \");\n        }\n\n        for (CoffeeAddon addon : addons) {\n            price += addon.getCost();\n            System.out.print(\"+ \" + addon.getName() + \" \");\n        }\n\n        System.out.println();\n        CoffeMachine.allCoffees.add(this);\n        return price;\n    }\n\n    public void heatCup() {\n        isHeated = true;\n    }\n\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    private double price = 6.0;\n    private String name = \"VanillaSyrup\";\n\n    @Override\n    public double getCost() {\n        return price;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n    double getCost();\n\n    String getName();\n}\n",
      "BaseCoffee.java": "import java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons;\n    String type;\n\n    BaseCoffee() {\n        addons = new ArrayList<CoffeeAddon>();\n    }\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n}\n",
      "Americano.java": "public class Americano extends BaseCoffee {\n    private double basePrice = 45.0;\n    {\n        type = \"Americano\";\n    }\n\n    @Override\n    public double calculatePrice() {\n        double price = basePrice;\n\n        System.out.print(\"Sipariş: \" + type + \" \");\n\n        for (CoffeeAddon addon : addons) {\n            price += addon.getCost();\n            System.out.print(\"+ \" + addon.getName() + \" \");\n        }\n\n        System.out.println();\n        CoffeMachine.allCoffees.add(this);\n        return price;\n    }\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    private double price = 5.0;\n    private String name = \"Milk\";\n\n    @Override\n    public double getCost() {\n        return price;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n    private double price = 10.0;\n    private String name = \"DoubleShot\";\n\n    @Override\n    public double getCost() {\n        return price;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    private double price = 7.0;\n    private String name = \"Chocolate\";\n\n    @Override\n    public double getCost() {\n        return price;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n}\n",
      "CoffeMachine.java": "import java.util.ArrayList;\n\npublic class CoffeMachine {\n\n    static ArrayList<BaseCoffee> allCoffees;\n\n    static {\n        allCoffees = new ArrayList<BaseCoffee>();\n    }\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n        if (coffee instanceof Espresso) {\n            if (addon instanceof DoubleShot || addon instanceof Chocolate) {\n                coffee.addons.add(addon);\n            } else {\n                System.out.println(\"[UYARI] \" + coffee.type + \" tipi kahveye \" + addon.getName() + \" eklenemez\");\n            }\n        } else if (coffee instanceof Latte) {\n            if (addon instanceof Milk || addon instanceof Chocolate || addon instanceof VanillaSyrup) {\n                coffee.addons.add(addon);\n            } else {\n                System.out.println(\"[UYARI] \" + coffee.type + \" tipi kahveye \" + addon.getName() + \" eklenemez\");\n            }\n        } else if (coffee instanceof Americano) {\n            if (addon instanceof Milk || addon instanceof VanillaSyrup) {\n                coffee.addons.add(addon);\n            } else {\n                System.out.println(\"[UYARI] \" + coffee.type + \" tipi kahveye \" + addon.getName() + \" eklenemez\");\n            }\n        }\n\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        double price = coffee.calculatePrice();\n        System.out.println(\"Toplam Fiyat: \" + (int) price + \"TL\\n\");\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            System.out.println(\"Espresso kahve fincanı ıstıldı\");\n            ((Espresso) coffee).heatCup();\n        } else {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    // ???\n    public static void displayTotalCoffees() {\n        System.out.println(\n                \"Tüm kahve makinaları tarafından toplam \" + allCoffees.size() + \" kahve üretildi\");\n    }\n}\n"
    },
    {
      "id": "1764665",
      "Latte.java": "\npublic class Latte extends BaseCoffee {\n    @Override\n    public void addAddon(CoffeeAddon addon) throws Exception {\n        if (addon.getName().equals(\"Milk\") || addon.getName().equals(\"Chocolate\")\n                || addon.getName().equals(\"VanillaSyrup\")) {\n            addons.add(addon);\n        } else {\n            throw new Exception(\"\");\n        }\n    }\n\n    @Override\n    public double calculatePrice() {\n        double p = 50;\n        for (CoffeeAddon elem : addons) {\n            p += elem.getCost();\n        }\n        return p;\n    }\n\n}\n",
      "Espresso.java": "\npublic class Espresso extends BaseCoffee {\n    private boolean isHeated = false;\n\n    public boolean getHeat() {\n        return isHeated;\n    }\n\n    @Override\n    public void addAddon(CoffeeAddon addon) throws Exception {\n        if (addon.getName().equals(\"DoubleShot\") || addon.getName().equals(\"Chocolate\")) {\n            addons.add(addon);\n        } else {\n            throw new Exception(\"\");\n        }\n    }\n\n    public void heatCup() {\n        isHeated = true;\n    }\n\n    @Override\n    public double calculatePrice() {\n        double p = 40;\n        for (CoffeeAddon elem : addons) {\n            p += elem.getCost();\n        }\n        return p;\n    }\n\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 6;\n    }\n\n    @Override\n    public String getName() {\n        return \"Vanilla Syrup\";\n    }\n\n}\n",
      "CoffeeAddon.java": "public interface CoffeeAddon {\n    double getCost();\n\n    String getName();\n\n}\n",
      "BaseCoffee.java": "\nimport java.util.ArrayList;\n\npublic abstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<CoffeeAddon>();\n\n    public void addAddon(CoffeeAddon addon) throws Exception {\n        this.addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n\n}\n",
      "Americano.java": "\npublic class Americano extends BaseCoffee {\n\n    @Override\n    public double calculatePrice() {\n        double p = 45;\n        for (CoffeeAddon elem : addons) {\n            p += elem.getCost();\n        }\n        return p;\n    }\n\n    @Override\n    public void addAddon(CoffeeAddon addon) throws Exception {\n        if (addon.getName().equals(\"Milk\") || addon.getName().equals(\"VanillaSyrup\")) {\n            addons.add(addon);\n        } else {\n            throw new Exception(\"\");\n        }\n    }\n\n}\n",
      "App.java": "public class App {\n    public static void main(String[] args) {\n\n        CoffeeMachine machine = new CoffeeMachine();\n        BaseCoffee espresso = new Espresso();\n        machine.addAddonToCoffee(espresso, new DoubleShot());\n        machine.addAddonToCoffee(espresso, new Milk());\n        machine.heatEspressoCup(espresso);\n        machine.makeCoffee(espresso);\n        System.out.println();\n        BaseCoffee latte = new Latte();\n        machine.addAddonToCoffee(latte, new Milk());\n        machine.addAddonToCoffee(latte, new VanillaSyrup());\n        machine.makeCoffee(latte);\n        // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve\n        // uretiyoruz.\n        CoffeeMachine anotherMachine = new CoffeeMachine();\n        BaseCoffee americano = new Americano();\n        System.out.println();\n        anotherMachine.heatEspressoCup(americano);\n        anotherMachine.makeCoffee(americano);\n        System.out.println();\n        CoffeeMachine.SayiYazdir();\n        // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n    }\n}\n",
      "CoffeeMachine.java": "public class CoffeeMachine {\n    public static int count;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n        try {\n            coffee.addAddon(addon);\n        } catch (Exception e) {\n            System.out.println(\n                    \"[UYARI] \" + coffee.getClass().getName() + \" tipi kahveye \" + addon.getName() + \" eklenemez\");\n        }\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        count++;\n        double price = coffee.calculatePrice();\n        System.out.print(\"Sipariş: \" + coffee.getClass().getName());\n        try {\n            Espresso espresso = (Espresso) coffee;\n            if (espresso.getHeat()) {\n                System.out.print(\" (Sıcak Fincan)\");\n            }\n        } catch (Exception e) {\n\n        }\n        for (CoffeeAddon elem : coffee.addons) {\n            System.out.print(\" + \" + elem.getName());\n        }\n        System.out.println(\"\");\n        System.out.println(\"Toplam Fiyat: \" + price + \"TL\");\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        try {\n            Espresso espresso = (Espresso) coffee;\n            espresso.heatCup();\n            System.out.println(\"Espresso kahve fincanı ısıtıldı\");\n        } catch (Exception e) {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n    }\n\n    public static void SayiYazdir() {\n        System.out.println(\"Tum fabrikalar kahve makineleri toplam \" + count + \" kahve uretildi\");\n    }\n\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 5;\n    }\n\n    @Override\n    public String getName() {\n        return \"Milk\";\n    }\n\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 10;\n    }\n\n    @Override\n    public String getName() {\n        return \"DoubleShot\";\n    }\n\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n\n    @Override\n    public double getCost() {\n        return 7;\n    }\n\n    @Override\n    public String getName() {\n        return \"Chocolate\";\n    }\n\n}\n"
    },
    {
      "id": "3659398",
      "Kahve.java": "public class Kahve {\n    public static void main(String[] args) {\n    CoffeeMachine machine = new CoffeeMachine();\n    BaseCoffee espresso = new Espresso();\n    machine.addAddonToCoffee(espresso, new DoubleShot());\n    machine.addAddonToCoffee(espresso, new Milk());\n    machine.heatEspressoCup(espresso);\n    machine.makeCoffee(espresso);\n    BaseCoffee latte = new Latte();\n    machine.addAddonToCoffee(latte, new Milk());\n    machine.addAddonToCoffee(latte, new VanillaSyrup());\n    machine.makeCoffee(latte);\n    // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n    CoffeeMachine anotherMachine = new CoffeeMachine();\n    BaseCoffee americano = new Americano();\n    anotherMachine.heatEspressoCup(americano);\n    anotherMachine.makeCoffee(americano);\n    System.out.println(\"\\n\");\n     // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n     CoffeeMachine.numOfCoffes();\n    }\n}",
      "Latte.java": "public class Latte extends BaseCoffee {\n    public Latte()\n    {\n     super();\n    }\n    public double calculatePrice() {\n        double res = 50;\n        for (int i = 0; i < addons.size(); i++) {\n            res = res + addons.get(i).getCost();\n        }\n        return res;\n    }\n\n    public void getcoffe() {\n\n        System.out.print(\"Siparişiniz: Latte\");\n        for (int i = 0; i < addons.size(); i++) {\n            System.out.print(\" + \" + addons.get(i).getName());\n        }\n        System.out.println();\n        System.out.println(\"Toplam Fiyat: \" + calculatePrice());\n    }\n\n    public String getcoffeName() {\n        return \"Latte\";\n    }\n\n}\n",
      "Espresso.java": "public class Espresso extends BaseCoffee {\n    private boolean isHeated;\n    public Espresso()\n    {\n        super();\n        isHeated = false;\n\n    }\n\n    public double calculatePrice() {\n        double res = 40;\n        for (int i = 0; i < addons.size(); i++) {\n            res = res + addons.get(i).getCost();\n        }\n        return res;\n    }\n\n    public void heatCup() {\n        isHeated = true;\n    }\n\n    public void getcoffe() {\n        if (isHeated)\n            System.out.print(\"Siparişiniz: Espresso (Sıcak Fincan)\");\n        else\n            System.out.print(\"Siparişiniz: Espresso\");\n        for (int i = 0; i < addons.size(); i++) {\n            System.out.print(\" + \" + addons.get(i).getName());\n        }\n        System.out.println();\n        System.out.println(\"Toplam Fiyat: \" + calculatePrice());\n    }\n\n    public String getcoffeName() {\n        return \"Espresso\";\n    }\n\n}\n",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    public double getCost() {\n        return 6.0;\n    }\n\n    public String getName() {\n        return \"VanillaSyrup\";\n    }\n\n}\n",
      "CoffeeAddon.java": "interface CoffeeAddon {\n    double getCost();\n\n    String getName();\n\n}\n",
      "BaseCoffee.java": "import java.util.*;\nabstract class BaseCoffee {\n    protected  ArrayList<CoffeeAddon> addons;\n    public BaseCoffee()\n    {\n        this.addons = new ArrayList<CoffeeAddon>();\n    }\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n    }\n\n    public abstract double calculatePrice();\n    public abstract String getcoffeName();\n    public abstract void getcoffe();\n    \n}\n",
      "Americano.java": "public class Americano extends BaseCoffee {\n    public Americano()\n    {\n        super();\n    }\n    public  double calculatePrice()\n    {\n        double res = 45;\n        for(int i = 0; i < addons.size(); i++)\n        {\n            res = res + addons.get(i).getCost();\n        }\n        return res;\n    }\n    public void getcoffe()\n    {\n        \n        System.out.print(\"Siparişiniz: Americano\");\n        for(int i = 0; i < addons.size(); i++)\n        {\n            System.out.print(\" + \" + addons.get(i).getName());\n        }\n        System.out.println();\n        System.out.println(\"Toplam Fiyat: \" + calculatePrice());\n    }\n    public String getcoffeName()\n    {\n        return \"Americano\";\n    }\n    \n}\n",
      "CoffeeMachine.java": "public class CoffeeMachine {\n    private static int coffees = 0;\n\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon adddon) {\n\n        if (((coffee instanceof Espresso) && (adddon instanceof Milk || adddon instanceof VanillaSyrup))\n                || (coffee instanceof Latte && adddon instanceof DoubleShot)\n                || ((coffee.getcoffeName().equals(\"Americano\"))\n                        && (adddon instanceof Chocolate || adddon instanceof DoubleShot))) {\n            System.out.println(\"[UYARI] \" + coffee.getcoffeName() + \" kahveye \" + adddon.getName() + \" eklenemez.\");\n        } else\n            coffee.addAddon(adddon);\n\n    }\n\n    public void makeCoffee(BaseCoffee coffee) {\n        coffee.getcoffe();\n        addCoffe();\n    }\n\n    public void heatEspressoCup(BaseCoffee coffee) {\n        if (coffee instanceof Espresso) {\n            Espresso a = (Espresso) coffee;\n            a.heatCup();\n        } else {\n            System.out.println(\"[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir\");\n        }\n\n    }\n\n    public static void numOfCoffes() {\n        System.out.println(\"Tüm kahve makinelerinde \" + coffees + \" üretilmiştir\");\n    }\n\n    public void addCoffe() {\n        coffees++;\n    }\n\n}\n",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    public double getCost() {\n        return 5.0;\n    }\n\n    public String getName() {\n        return \"Milk\";\n    }\n\n}\n",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n    public double getCost() {\n        return 10.0;\n    }\n\n    public String getName() {\n        return \"Doubleshot\";\n    }\n\n}\n",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    public double getCost() {\n        return 7.0;\n    }\n\n    public String getName() {\n        return \"Chocolate\";\n    }\n\n}\n"
    }
  ]
}