id,NaN_count,answers
7214465,2,"7214465 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac{[/CODE] [CODE]public string str;[/CODE] [CODE]public int index;[/CODE] [CODE]public int count;[/CODE] [CODE]public int say(){[/CODE] [CODE]return metod(str,0);[/CODE] } [CODE]public sayac (string str){[/CODE] this.str = str; } [CODE]public int metod(string str,int index){[/CODE] if(index == str.length()){ [CODE]return count;[/CODE] } else if(str.charat(index) == '1'){ [CODE]return 1 + metod(str,index+1);[/CODE] } else if(str.charat(index) == '0'){ [CODE]return 0 + metod(str,index+1);[/CODE] } [CODE]return 0;[/CODE] } } import java.util.scanner; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan = new scanner(system.in); int a = scan.next[CODE]int();[/CODE] [CODE]int[] arr = new int[a];[/CODE] [CODE]for (int i = 0;[/CODE] i < a; i++) { arr[i] = scan.next[CODE]int();[/CODE] } cocktailsort(arr); [CODE]for (int i = 0;[/CODE] i < a; i++) { system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } [CODE]public static void cocktailsort(int[] array){[/CODE] boolean bl = true; [CODE]for (int i = 0;[/CODE] i < array.length - 1; i++) { [CODE]if(array[i] > array[i+1]){[/CODE] bl = false; } } bubblesort(array,0,array.length-1); } [CODE]public static void bubblesort(int[] arr, int left, int right){[/CODE] [CODE]if( left >= right){[/CODE] [CODE]return ;[/CODE] } [CODE]for (int d = 0;[/CODE] d < arr.length - 1 ; d++) { [CODE]if(arr[d] > arr[d+1]){[/CODE] [CODE]int temp = arr[d];[/CODE] arr[d] = arr[d+1]; arr[d+1] = temp; } } left++; for (int d = arr.length - 1; d > 0 ; d--) { [CODE]if(arr[d] < arr[d-1]){[/CODE] [CODE]int temp = arr[d];[/CODE] arr[d] = arr[d-1]; arr[d-1] = temp; } } right--; bubblesort(arr, left, right); } } import java.util.scanner; [CODE]public class q1 {[/CODE] [CODE]static int count = 0;[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan = new scanner(system.in); int sayi = scan.next[CODE]int();[/CODE] [CODE]int cevap = collatz(sayi);[/CODE] system.out.pr[CODE]intln(cevap);[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1){[/CODE] [CODE]return count;[/CODE] } [CODE]else if(i % 2 == 0){[/CODE] collatz(i/2); count++; } [CODE]else if(i % 2 == 1){[/CODE] collatz(3*i + 1); count++; } [CODE]return count;[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.collections; import java.util.list; [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean bl = true; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki && bl == false) {[/CODE] system.out.pr[CODE]intln("" [bi̇lgi̇] ses düzeyi: yüksek"");[/CODE] bl = true; } [CODE]else if (!(sarki instanceof rocksarki) && bl == true) {[/CODE] system.out.pr[CODE]intln("" [bi̇lgi̇] ses düzeyi: normal"");[/CODE] bl = false; } sarki.oynat(); } [CODE]if (bl) {[/CODE] system.out.pr[CODE]intln("" [bi̇lgi̇] ses düzeyi: normal"");[/CODE] } } } import java.util.list; [CODE]class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } } } import java.util.arrays; import java.util.list; [CODE]public class soru1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki){[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } abstract [CODE]class sarki {[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln("" [metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln("" "" + sanatci + "" - "" + isim + "" [özellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln("" [rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln("" [klasi̇k] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. özyineleme yani bir problemin çözümünün diğer küçük parçalarla çözülmesidir. temekl kısımları temel basamak ve özyinelemeli basamaktır. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. algoritmanın durması gereken durumudur. gerekli olma sebebi algoritmanın daha fazla dönmesi yerine sonucu çıktı olarak vermesi. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? boş olurdu recursive bir metotta base case olmazsa ne olur? sonsuz döngü recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. . fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. aynı hesaplama çok kez yapılmasından tail recursion nedir, kısaca açıklayınız. bir algoritmanın kendisini son defa çağırdığı bir yöntemdir java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? metodun hangi metoda bağlanacağının sürecidir [CODE]static ve dynamic çeşitleridir hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? static : static metod, final metod, private metod / dynamic : override metodlar dinamik bağlamada jvm'nin görevi nedir? görevi metodun hangi classa ait olduğunu belirlemektir java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? performans sorunu oluşur veya hata tespiti zorlaşırdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? nedeni down casting time complexityde hataya yol açabilir. implict şekilde yapsak time complexity ve kod karmaşıklığı artar java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. evet , polimorfizmle ilişkisi dinamik bağlama ile ilgilidir. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() satırı hatalıdır / child display / dinamik binding java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class soyut sınıf demektir farkı abstractta gövdesiz metod olabilir diğerinde olamaz . abstract sınıfların constructoru olabilir ama doğrudan çağrılamaz. interfscelerin olamaz ama abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet , abstract sınıf önceki abstract metodu tanımlayıp gövdesini ekleyebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. nesne oluşturmaz implement sağlar ortak özellik tanımlar abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? kalıtım mirası, constructor, değişkenler farklarıdır. evet tip olarak kullanılabilir marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker : içinde metod bulunmayan interfacedir, etiket ile kullanılır functional : bir tane abstract metod bulunan interfacedir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet class birden çok arayüzü implement edebilri. hayır, bir interface başka bir indterfacei implement edemez ama extend edebilir. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal abstarcttır bu yüzden nesne oluşturalmaz. düzelltikten sonra output: animal: buddy wolf [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? hayır hata 2 farklı arayüzden aynı isimden metod alıyor. output: flying yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. syntax , logic ve runtime hataları exception handlingin amacı nedir? hataları daha kolay bulur ve programın çökmesini önler exception handlingde finally bloğunun amacı nedir? excepsion handling bölümünde hata olsa da olmasa da her durumda çalışır amacı kaynak yönetimi yapmak ve kesinlikle çalışmasını istediğimiz kodları koymaktır java'da 'checked' ve 'unchecked' exceptionların farkı nedir? chevked programın dış etken etkileşimiyle oluşur unchacked ise programcı hatalarından kaynaklanır java'da kendi exceptionunuzu nasıl tanımlarsınız? exception veya runtimeexception sın[CODE]ıfından oluşan bir sınıf ile yazabiliriz java'da error ve exception arasındaki fark nedir, açıklayınız error sistemsel hatayı fark eder execption yazılımsal hataları tespit eder java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? işlem devamı için başka hata yönetimi 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? alt sınıf üst sınıftan daha genis throws yapamaz static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez önce exception sonra arrayindexoutofboundsexception yakalanmıs düzeltmek için tam tersi yapılmalı çıktısı ise array exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] habitat habitat = new habitat(""antarctica "",-15.0); penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] //habitat.addpenguin(p1); //habitat.addpenguin(p2); //habitat.addpenguin(p3); p3.hunt(); // 5, 6 oldu habitat.pr[CODE]inthabitat();[/CODE] p1.pr[CODE]intpenguin();[/CODE] p2.pr[CODE]intpenguin();[/CODE] p3.pr[CODE]intpenguin();[/CODE] } } [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(string string, string string2, int i, double d) {[/CODE] this.name = [CODE]string;[/CODE] this.species = [CODE]string2;[/CODE] this.age = i; this.weight = d; } [CODE]public penguin() {[/CODE] this.name = ""willy""; this.species =""emperor""; this.age = 1; this.weight = 5.0; } [CODE]public void setname(string asd){[/CODE] name = asd; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setspecies(string species){[/CODE] this.species = species; } [CODE]public string getspecies(){[/CODE] [CODE]return species;[/CODE] } [CODE]public void setage(int age){[/CODE] this.age = age; } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public void setweight(double weight){[/CODE] this.weight = weight; } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void hunt(){[/CODE] this.weight = weight + 1.0; } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name: "" + name + "" species: "" + species + "" age: "" + age + "" years weight: "" + weight + "" kg"");[/CODE] } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature){[/CODE] this.location = location; this.temperature = temperature; } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.add(penguin); } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temperature: "" + temperature + "" °c"");[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void settemperature(double temperature){[/CODE] this.temperature = temperature; } [CODE]public double gettemperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public arraylist<penguin> getpenguins() {[/CODE] [CODE]return penguins;[/CODE] } } import java.util.scanner; [CODE]public class q1 {[/CODE] [CODE]public void parantezbas(int n){[/CODE] scanner scan = new scanner(system.in); n = scan.next[CODE]int();[/CODE] [CODE]if(n == 1){[/CODE] system.out.pr[CODE]intln(""()"");[/CODE] } char sol = '('; char sag = ')'; scan.close(); } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] double baseprice = 50; double totalprice = baseprice; [CODE]for (coffeeaddon addon : addons) {[/CODE] totalprice += addon.getcost(); } [CODE]return totalprice;[/CODE] } @override [CODE]public string tostring() {[/CODE] [CODE]stringbuilder order = new stringbuilder(""latte"");[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] order.append("" + "").append(addon.getname()); } return ""sipariş: "" + order.to[CODE]string() + "" toplam fiyat: "" + calculateprice() + "" tl"";[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine machine2 = [CODE]new coffeemachine();[/CODE] machine2.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine2.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine2.heatespressocup(espresso); machine2.makecoffee(espresso); machine2.gettotalcoffeesmade(); //... coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] // burada coffeemachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz anothermachine.gettotalcoffeesmade(); } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; [CODE]public void heatcup() {[/CODE] isheated = true; } @override [CODE]public double calculateprice() {[/CODE] double baseprice = 40; double totalprice = baseprice; [CODE]for (coffeeaddon addon : addons) {[/CODE] totalprice += addon.getcost(); } [CODE]return totalprice;[/CODE] } @override [CODE]public string tostring() {[/CODE] [CODE]string coffeename = isheated ? ""espresso (sıcak fincan)"" : ""espresso"";[/CODE] [CODE]stringbuilder order = new stringbuilder(coffeename);[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] order.append("" + "").append(addon.getname()); } return ""sipariş: "" + order.to[CODE]string() + "" toplam fiyat: "" + calculateprice() + "" tl"";[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]public interface coffeeaddon{[/CODE] [CODE]public double getcost();[/CODE] [CODE]public string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] double baseprice = 45; double totalprice = baseprice; [CODE]for (coffeeaddon addon : addons) {[/CODE] totalprice += addon.getcost(); } [CODE]return totalprice;[/CODE] } @override [CODE]public string tostring() {[/CODE] [CODE]stringbuilder order = new stringbuilder(""americano"");[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] order.append("" + "").append(addon.getname()); } return ""sipariş: "" + order.to[CODE]string() + "" toplam fiyat: "" + calculateprice() + "" tl"";[/CODE] } } [CODE]public class coffeemachine {[/CODE] private [CODE]static int totalcoffeesmade = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] coffee.addaddon(addon); } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] totalcoffeesmade++; system.out.println(""hazırlanıyor.."" + coffee.getclass().getsimplename()); system.out.println(""toplam fiyat: "" + coffee.calculateprice()); } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] ((espresso) coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } [CODE]else {[/CODE] system.out.println(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir.""); } } [CODE]public static int gettotalcoffeesmade() {[/CODE] [CODE]return totalcoffeesmade;[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 2"
9830856,2,"9830856 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab11q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(3));[/CODE] } [CODE]static int count=0;[/CODE] [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i!=1) {[/CODE] count++; [CODE]if(i%2!=0) {[/CODE] i=i*3+1; [CODE]return collatz(i);[/CODE] } [CODE]else {[/CODE] i=i/2; [CODE]return collatz(i);[/CODE] } } [CODE]else return count;[/CODE] } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int [] arr={[/CODE]5,4,1,2,3}; cocktailsort(arr); } [CODE]static int index=0;[/CODE] [CODE]static boolean soldan=true;[/CODE] [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]if(issorted(arr)) {[/CODE] [CODE]for(int a=0;[/CODE] a<arr.length; a++) { system.out.pr[CODE]int(arr[a]);[/CODE] } } [CODE]else {[/CODE] [CODE]if(soldan) {[/CODE] if(index+1!=arr.length) { [CODE]if(arr[index]>arr[index+1]) {[/CODE] [CODE]int h=arr[index];[/CODE] arr[index]=arr[index+1]; arr[index+1]=h; } index++; } [CODE]else {[/CODE] index=arr.length-1; soldan=false; } } [CODE]else {[/CODE] [CODE]if(index!=0) {[/CODE] [CODE]if(arr[index]<arr[index-1]) {[/CODE] [CODE]int h=arr[index];[/CODE] arr[index]=arr[index-1]; arr[index-1]=h; } index--; } [CODE]else {[/CODE] index=0; soldan=true; } } cocktailsort(arr); } } [CODE]public static boolean issorted(int[]arrayy) {[/CODE] boolean flag=true; [CODE]for(int i=0;[/CODE] i<arrayy.length-1; i++) { [CODE]if(arrayy[i]>arrayy[i+1]) flag=false;[/CODE] } [CODE]return flag;[/CODE] } } [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1=[CODE]new sayac(""10001"");[/CODE] sayac s2=[CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]string str;[/CODE] [CODE]int count=0;[/CODE] [CODE]int index=0;[/CODE] [CODE]public sayac(string str) {[/CODE] this.str=str; } [CODE]public int say() {[/CODE] [CODE]return result(str);[/CODE] } [CODE]public int result(string str) {[/CODE] if(index==str.length()) [CODE]return count;[/CODE] [CODE]else {[/CODE] if(str.charat(index)== '1') { count++; } index++; [CODE]return result(str);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; [CODE]public class muzikcalar {[/CODE] [CODE]public calmastratejisi strateji;[/CODE] [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""invalid"");[/CODE] } } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1=[CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykırı ve atmosferik"");[/CODE] sarki s2= [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrümantal"");[/CODE] sarki s3=[CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4=[CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5=[CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2,s3,s4,s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sıralı çalma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\n karışık çalma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\n rockçu özel çalma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\n metal özellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ( (metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim,sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""klasik""+ "" sanatçı adı: "" + sanatci + "" şarkı adı: "" + isim + "" hafif ve sakin"" );[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim,sanatci); this.metalozellik=metalozellik; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""metal"" + "" sanatçı adı: "" + sanatci + "" şarkı adı: "" + isim + "" özellik: "" + metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim,sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""rock""+ "" sanatçı adı: "" + sanatci + "" şarkı adı: "" + isim + "" huzurlu ve nostaljik"");[/CODE] } } import java.util.*; /* [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean [] issinged= new boolean[sarkilistesi.size()]; [CODE]while(varmi( issinged)) {[/CODE] double a=math.random(); [CODE]int i= (int) a * 100;[/CODE] [CODE]if(issinged[i]==false) {[/CODE] } } } [CODE]public boolean varmi(boolean[] issinged) {[/CODE] boolean flag=true; [CODE]for(int i=0;[/CODE] i<issinged.length; i++) { [CODE]if(!issinged[i]) flag=false;[/CODE] } [CODE]return flag;[/CODE] } } */ [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> karisikliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(karisikliste); [CODE]for (sarki sarki : karisikliste) {[/CODE] sarki.oynat(); } } } import java.util.*; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim, sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim=isim; this.sanatci=sanatci; } abstract [CODE]void oynat();[/CODE] } import java.util.*; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean sesyuksek = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki && !sesyuksek) { system.out.pr[CODE]intln(""alert!! ses düzeyi: yüksek"");[/CODE] sesyuksek = true; } sarkilistesi.get(i).oynat(); if (sesyuksek && (i == sarkilistesi.size() - 1 || !(sarkilistesi.get(i + 1) instanceof rocksarki))) { system.out.pr[CODE]intln(""alert!! ses düzeyi: düşük"");[/CODE] sesyuksek = false; } } } } import java.util.*; [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. bir metodun içerisinde metodun kendisinin tekrar tekrar çağırılmasıdır. uygun koşul sağlandığında metoda tekrar girmez ve metod burada sonlanır. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case, metodun kendisinin içine tekrardan girmemesini sağlayan koşulu arayan adımdır. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? metoda parametre olarak stringi ve count++ değerini gönderirim, 0la başlayan count lengthe eşit olduğunda tekrar metoda girmez bu da base caseimiz olur recursive bir metotta base case olmazsa ne olur? stack overflowla karşılaşırız recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. değişen değerler için stackte her bir veri tipi için teker teker yer açılır. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. tutulması gereken fazla sayıda değer olduğu için her birisini değiştirmek çok zor olur tail recursion nedir, kısaca açıklayınız. metodun kendisinin tekrar [CODE]return edilmesidir java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? bir metodun hangi türünün çağrılacağına karar vermesidir, static ve dynamic olarak iki çeşidi vardır hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? constructor, final ve private metotlarda static binding yapılır;[/CODE] override edilmiş metotlarda dynamic binding yapılır dinamik bağlamada jvm'nin görevi nedir? hangi sın[CODE]ıfa ait olduğunu belirler ve ona göre metodu çağırır java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? jvm ayırt edemezdi ve compilor hata verirdi java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? cevap veremedim java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. üst sınıfın access modifierı, alt sınıfın access modifierından geniş olamaz, kısıtlaması budur. polimorfizm ise doğru metodun çağrılmasını sağlar, protected bir metod override edilebilir([CODE]public olarak) private veya default metodlarda edilmez class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bağlama [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? dinamik bağlama child display child special java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlar doğrudan nesne oluşturamaz ancak alt sınıflar tarafından miras alınarak kullanılabilir(concrete classtan farklı) abstract class ve interfacelerin constructoru yoktur abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet edilebilir ancak gövdesi abstract class içinde verilmek zorundadır, ve sadece imza olarak bulunur abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract [CODE]class içinde ortak özelliğe sahip metodlar ve özellikler tanımlanabilir ve böylece alt sınıflar bu metodları tekrar etmezler başka yazmaya vaktin kalmadı abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract [CODE]class tek classı miras alabilir, interface birden fazla sınıfı implement edebilir interfaceler yalnızca abstract metodlar içerir, abstract classlar ise hem gövdeli hem gövdesiz metodlara sahiptir evet böyle bir tanımlama mümkündür marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface hiçbir metod içermez sadece bir sınıfın bir özelliğe sahip olduğunu belirtmek için kullanılır functional ise sadece bir abstract metodundan oluşan interfacedir, lambda ifadelerinden çok bahsetmiştiniz bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet bir class birden çok interfacei implement edebilir ancak bir interface başka bir interfacei implement edemez ancak extend edebilir abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract [CODE]class olan animal doğrudan nesne oluşturulmaya çalışılıyor animal a satırı hatalı çıktı animal :buddy wolf interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? bulamadım yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. syntax hatası örnek: i̇nt sayi=5 compile time hatası örnek: i̇nt sayi=""merhaba""; run time hatası örnek: [CODE]int sayi=10/0;[/CODE] exception handlingin amacı nedir? program sırasında oluşabilecek hataları kontrol altına alarak uygun şekilde çalışmasını sağlamaktır exception handlingde finally bloğunun amacı nedir? hata olsa da olmasa da her türlü çalışmasını istediğimiz parçanın çalışmasını sağlar java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked exceptionlar derleme zamanında kontrol edilir, unchecked ise runtime da kontrol edilir checked exceptionlarda [CODE]try catch blokları kullanılır java'da kendi exceptionunuzu nasıl tanımlarsınız? exception veya runtime exception classlarından derived class oluşturarak java'da error ve exception arasındaki fark nedir, açıklayınız exceptionlar bloklarla düzeltilebilecek sorunlardır genellikle ufak tefek yanlışlarla olur( örneğin syntax) errorlar ise genelde kullanıcı tarafından yakalanamaz yazılan algoritmada bir sıkıntı oluşması örnek olabilir java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? hatayı daha detaylı loglamak ve daha anlamlı bşr exception ile değiştirmek 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? daha geniş kapsamlı exception fırlatılamaz static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez, main method yazımı hatalı [CODE]catch bloklarının yazım sırası yanlış static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica"",-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature) {[/CODE] this.location=location; this.temperature=temperature; } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln("" habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temperature: ""+ temperature);[/CODE] system.out.pr[CODE]intln(""penguins living here: "");[/CODE] system.out.pr[CODE]intln(penguins);[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation() {[/CODE] system.out.pr[CODE]intln(location);[/CODE] } [CODE]public double gettemp() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void settemp() {[/CODE] system.out.pr[CODE]intln(temperature);[/CODE] } [CODE]public arraylist<penguin> getarrayyylist() {[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setarraylist() {[/CODE] system.out.pr[CODE]intln(penguins);[/CODE] } [CODE]public void addpenguin(penguin p) {[/CODE] penguins.add(p); } } [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name=name; this.age=age; this.weight=weight; this.species=species; } [CODE]public penguin() {[/CODE] this.name=""willy""; this.species=""emperor""; this.age=1; this.weight=5.0; } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]int(""penguin name: "") ;[/CODE] system.out.pr[CODE]int(name);[/CODE] system.out.pr[CODE]intln(""years weight:""+ weight + ""kg"");[/CODE] system.out.pr[CODE]int(""species: "");[/CODE] system.out.pr[CODE]int(""age: "" + age);[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public void setspecies() {[/CODE] system.out.pr[CODE]intln(species);[/CODE] } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public void setage() {[/CODE] system.out.pr[CODE]intln(age);[/CODE] } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setweight() {[/CODE] system.out.pr[CODE]intln(weight);[/CODE] } [CODE]public void hunt() {[/CODE] weight+=1.0; } } import java.util.random; [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); } [CODE]static string[] dizi= new string[99];[/CODE] [CODE]static int index=0;[/CODE] [CODE]public static void helper(string str, int n) {[/CODE] boolean flag1=parantezaçsayısı(str, n); boolean flag2=parantezsayısı(str); boolean flag3=eşitmi(str); [CODE]if(index==2*n-1) for(int i=0;[/CODE] i<dizi.length; i++) system.out.pr[CODE]int(dizi[i] + "" "");[/CODE] if(str.length()==n*2) { dizi[index]=str; str=""""; index++; helper(str,n); } random generator= [CODE]new random(1);[/CODE] if(generator.next[CODE]int()==0) {[/CODE] [CODE]if(flag1) {[/CODE] [CODE]if(flag2) {[/CODE] str+=""(""; helper(str, n); } [CODE]else helper(str, n);[/CODE] } [CODE]else {[/CODE] str=str.substring(0,str.length()-1); [CODE]if(flag2) {[/CODE] [CODE]if(!flag3) str+="")"";[/CODE] [CODE]else {[/CODE] dizi[index]=str; str=""""; index++; helper(str,n); } } } } if(generator.next[CODE]int()==1) {[/CODE] [CODE]if(flag3) helper(str, n);[/CODE] [CODE]else {[/CODE] [CODE]if(flag1&&flag2) str+="")"";[/CODE] [CODE]else helper(str, n);[/CODE] } } } [CODE]public static void parantezbas(int n) {[/CODE] helper("""", n); } [CODE]public static boolean parantezsayısı(string kelime) {[/CODE] [CODE]int a=0;[/CODE] [CODE]int b=0;[/CODE] [CODE]for(int i=0;[/CODE] i<kelime.length()-1; i++) { if(kelime.charat(i)=='(') { a++; } [CODE]else b++;[/CODE] } [CODE]if(a>b) return true;[/CODE] [CODE]else return false;[/CODE] } [CODE]public static boolean parantezaçsayısı(string s, int n) {[/CODE] [CODE]int a=0;[/CODE] [CODE]for(int i=0;[/CODE] i<s.length()-1; i++) { if(s.charat(i)=='(') { a++; } } [CODE]if(a>n) return false;[/CODE] [CODE]else return true;[/CODE] } [CODE]public static boolean eşitmi(string kelime) {[/CODE] [CODE]int a=0;[/CODE] [CODE]int b=0;[/CODE] [CODE]for(int i=0;[/CODE] i<kelime.length()-1; i++) { if(kelime.charat(i)=='(') { a++; } [CODE]else b++;[/CODE] } [CODE]if(a==b) return true;[/CODE] [CODE]else return false;[/CODE] } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] [CODE]public latte() {[/CODE] basecoffee.count++; } @override [CODE]public double calculateprice() {[/CODE] return 50.0; } [CODE]public boolean lattekontrol(coffeeaddon addons) {[/CODE] [CODE]if(addons instanceof doubleshot) return false;[/CODE] [CODE]else return true;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] anothermachine.toplamkahve(americano); } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated= false; [CODE]public espresso() {[/CODE] basecoffee.count++; } @override [CODE]public double calculateprice() {[/CODE] [CODE]if(isheated) {[/CODE] heatpr[CODE]int();[/CODE] } return 40.0; } [CODE]public void heatcup() {[/CODE] this.isheated=true; } [CODE]public void heatprint() {[/CODE] system.out.pr[CODE]intln("" espresso (sıcak fincan)"");[/CODE] } [CODE]public boolean espressokontrol(coffeeaddon addons) {[/CODE] [CODE]if(addons instanceof milk) return false;[/CODE] [CODE]else if(addons instanceof vanillasyrup) return false;[/CODE] [CODE]else return true;[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] return 6.0; } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup "";[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] [CODE]public static int count=0;[/CODE] [CODE]public abstract double calculateprice();[/CODE] protected arraylist<coffeeaddon> addons; [CODE]public arraylist<basecoffee> coffees;[/CODE] [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public boolean eklentikontrol(basecoffee coffee, coffeeaddon adddon) {[/CODE] boolean flag; if(coffee instanceof espresso) flag= ((espresso) coffee).espressokontrol(adddon); else if(coffee instanceof americano) flag= ((americano) coffee).americanokontrol(adddon); else flag= ((latte)coffee).lattekontrol(adddon); [CODE]return flag;[/CODE] } [CODE]public void eklenemezprint(basecoffee coffeee, coffeeaddon adddonn ) {[/CODE] [CODE]if(!eklentikontrol(coffeee, adddonn)) {[/CODE] system.out.println( "" [uyari]!!!! "" + coffeee + "" tipi kahveye "" + adddonn + "" eklenemez.""); } else system.out.pr[CODE]intln();[/CODE] } } [CODE]public class americano extends basecoffee {[/CODE] [CODE]public americano() {[/CODE] basecoffee.count++; } @override [CODE]public double calculateprice() {[/CODE] return 45.0; } [CODE]public boolean americanokontrol(coffeeaddon addons) {[/CODE] [CODE]if(addons instanceof doubleshot) return false;[/CODE] [CODE]else if(addons instanceof chocolate) return false;[/CODE] [CODE]else return true;[/CODE] } } [CODE]public class coffeemachine {[/CODE] double price=0; [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) {[/CODE] if(coffee.eklentikontrol(coffee,adddon)) { price+=adddon.getcost(); coffee.addaddon(adddon); } else coffee.eklenemezpr[CODE]int(coffee, adddon);[/CODE] } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] price+= coffee.calculateprice(); [CODE]if(coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln("" espresso kahve fincanı ısıtıldı"");[/CODE] ((espresso) coffee).heatcup(); } else system.out.pr[CODE]intln(""[uyari]!!! sadece espresso kahve fincanları ısıtılabilir"");[/CODE] price=0; } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if(coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] ((espresso) coffee).heatcup(); } } [CODE]public void toplamkahve(basecoffee coffee) {[/CODE] system.out.println(""tum fabrikalar kahve makineleri "" + basecoffee.count + ""toplam kahve uretildi""); } } [CODE]public class milk implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] return 5.0; } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk "";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] return 10.0; } @override [CODE]public string getname() {[/CODE] [CODE]return ""double shot "";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] return 7.0; } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate "";[/CODE] } } 2"
8435496,0,"8435496 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. package lab.lab1; [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] private [CODE]string string;[/CODE] private [CODE]int length;[/CODE] [CODE]public sayac(string string) {[/CODE] this.[CODE]string = string;[/CODE] this.length = string.length(); } [CODE]public int say() {[/CODE] [CODE]return birsay(0);[/CODE] } private [CODE]int birsay(int start) {[/CODE] [CODE]if (start == length) return 0;[/CODE] if (string.charat(start) == '1') { [CODE]return 1 + birsay(start + 1);[/CODE] } [CODE]return birsay(start + 1);[/CODE] } } package lab.lab1; [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5, 4, 1, 2, 7, 3, 15, -1}; cocktailsort(arr); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] bubbletoright(arr); } [CODE]public static void bubbletoright(int[] arr) {[/CODE] [CODE]int changes = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; changes++; } } [CODE]if (changes == 0) return;[/CODE] bubbletoleft(arr); } [CODE]public static void bubbletoleft(int[] arr) {[/CODE] [CODE]int changes = 0;[/CODE] for (int i = arr.length - 1; i > 0; i--) { [CODE]if (arr[i - 1] > arr[i]) {[/CODE] [CODE]int temp = arr[i - 1];[/CODE] arr[i - 1] = arr[i]; arr[i] = temp; changes++; } } [CODE]if (changes == 0) return;[/CODE] bubbletoright(arr); } } package lab.lab1; [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(3));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) return 0;[/CODE] [CODE]if (i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]return 1 + collatz(3 * i + 1);[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab.lab2; import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } package lab.lab2; import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } package lab.lab2; [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(); super.isim = isim; super.sanatci = sanatci; } @override [CODE]void oynat() {[/CODE] system.out.println(""[klasik] "" + super.sanatci + "" - "" + super.isim + "" (haf[CODE]if ve sakin)"");[/CODE] } } package lab.lab2; [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(); super.isim = isim; super.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.println(super.sanatci + "" - "" + super.isim +"" [ozellik: "" + this.metalozellik + ""]""); } @override [CODE]void oynat() {[/CODE] system.out.println(""[metal] "" + super.sanatci + "" - "" + super.isim + "" ("" + this.metalozellik + "")""); } } package lab.lab2; [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(); super.isim = isim; super.sanatci = sanatci; } @override [CODE]void oynat() {[/CODE] system.out.println(""[rock] "" + super.sanatci + "" - "" + super.isim + "" (huzurlu ve nostaljik)""); } } package lab.lab2; import java.util.arraylist; import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilar = [CODE]new arraylist<>();[/CODE] [CODE]for(sarki sarki : sarkilistesi) {[/CODE] sarkilar.add(sarki); } collections.shuffle(sarkilar); [CODE]for (sarki sarki : sarkilar) {[/CODE] sarki.oynat(); } } } package lab.lab2; import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } package lab.lab2; [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } package lab.lab2; import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean rockmode = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (!rockmode && sarki instanceof rocksarki) {[/CODE] rockmode = true; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } [CODE]if (rockmode && !(sarki instanceof rocksarki)) {[/CODE] rockmode = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } sarki.oynat(); } [CODE]if (rockmode) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } } package lab.lab2; import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. kendini çağıran metot. base case: kendini çağırmayı sonlandırdığı durum. i̇şlemi yaptığı yer ve birleştirdiği yer. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. sonsuz kere kendisini çağırmasını önlemek için. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? stringin 1 karakter olması base case. subtring(1) + baştaki karakteri recursive bir metotta base case olmazsa ne olur? stack overflow recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. yeni metotun kwndi değişkenleri ve parametreleri stacke ekleneir fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. n-1 ve n-2 yi ayrı ayrı hesaplarkan aynı değeri birden fazla kez hesapladığından tail recursion nedir, kısaca açıklayınız. recursive call un fonksiyonun yağtığı en son işlem olması. loop a kolayca çevrilebilir abstraction kavramını açıklayınız. kodun nasıl çalıştığını bilmemize gerek olmadan bir parçayı kendi başına kullanılabilecek şekilde programın parçalara ayrılması.. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? i̇nheritance dır.extends gerekir. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? default ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? c ve a java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? önce parent class ı initialize edip sonra kendisini eder. yazmazsak parent classın parametresiz olan constructor ı çağırılır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır metot overriding ve overloading kavramlarını açıklayınız. overriding alt classlarda o class için metodun implementationın değiştirilmesi. overloading metotun imzasını değiştirerek aynı isimle metodun yazılması. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog /n bark [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle /n 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? çağırılan metodun implement edildiği yer ile bağlanmasıdır. hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? override edilen metotlar dynamic bind olur. final static ve private olan metotlar kesinlikle static bind olur. dinamik bağlamada jvm'nin görevi nedir? class larda yukarı giderek metodun ilk karşılaştığı implementation ını metodun çsğırıldığı yere bağlamak. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? gereksiz bir şekilde yavaş olurdu. java'da down casting explicit şekilde yapılır, bunun nedeni nedir; implicit şekilde yaparsak ne olur? o class ın ne olduğunu bizim bilip ona göre cast etmemz gerekir çünkü cast edeceğim class ta o classa özgü olan özellikler olabilir. java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. hayır çünkü o classın belirli yetkilere sahip olan yerlerden erişilebilen özelliği olmaktan çıkrsa override olmaz. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? animal sound /n bark /n animal sound /n meov /n bark /n meov (dynamic) [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special(); hata verir output: child display (static) java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class içinde implementasyonu yapılmamış metot veya metotlar bulunan class tır. constructor ları olamaz çünkü implementasyonu yapılmayan bir özellik kullanılamayacağından objeleri oluşturulmaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? extend edilfiğinde bazı abstract metotlar implement edilebilir. eğer abstarct metot hala varsa extend edilmiş olan class da abstract kalmak zorunda. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. belli bir grup objenin bir metodunu bir yerde tanımplayıp her obje için farklı implent etme. birden fazla exrend yapamadığımızdan ortak özellikleri olan ama birbirlerini extend etöeyen classlarda ortak özelliklerin bulunmasını sağlama. bir yerde ihyiyacımız olan metodu tanımlayıp sonra implement etme. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? i̇nterfaceler implement edilebilir classlar edilemez. evet o özelliklere sahip objeleri tutabilirler. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker içinde metot olmayan interface, tag gibi kullanılır. functional da içinde bir metot olan lambda olarak oluşturulabilirler. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet .i̇mplement edemez çünkü class değil ama extend edwbiliriz. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal abstract olduğundan objesi oluşturulamaz new dog yazarsak düzelir. animal: buddy /n woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? evet. swimming java'da inner class nedir, avantajları nelerdir? classın içinde class. dış class olmadan anlamı olmayan classlar için kullanılabilir. dış class oluşturmadan inner oluşturulmamasını sağlar. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? staticten obje üretilimez ve içine inner eklenemez. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? bir kerelik kullanalıcak olan class. başka class veya interface ten extend edilebilir. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet. değiştirebilir. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? evet static final değişken (constant yani). anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? hayır. anonim sadece bir kere kullanılır. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? private olmayan class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? mainde ilk outer objesi oluşturulup o obje.[CODE]new yapılmalı value: 10 class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? static classtan obje üretilmez. mainde sadece staticinner.showvount(); count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 2 compile time, örnek: syntax hatası. runtime: array index out of bounds hatası. exception handlingin amacı nedir? hata olduğunda program tamamen durmaz. o hata handle edilir ve devam edilebilir. exception handlingde finally bloğunun amacı nedir? her zaman çalışır. hata olsa da olmasa da try catch ten sonra çaışır. (system.exit() yapmazsak) java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked in kodda handle edilmesi compiler tarafıdan zorunlu tutulur. unchecked in tutulmaz. java'da kendi exceptionunuzu nasıl tanımlarsınız? yeni class açıp exception veya onun child classlarından bitini extend ederim. java'da error ve exception arasındaki fark nedir, açıklayınız error throwable değil java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? çağırılan metotlar stack inde her yerde handle etmek. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? extend edilen throwable orijinal metotta edilen den dar (edilenin child ı) olamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? hata yok exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg package quiz.quiz1; import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public void addpenguin(penguin penguin) {[/CODE] penguins.add(penguin); } [CODE]public void printhabitat() {[/CODE] system.out.println(""habitat location: "" + this.location + ""\naverage temperature: "" + this.temperature + ""°c""); system.out.pr[CODE]intln(""penguins living here:"");[/CODE] [CODE]for (penguin p : penguins) {[/CODE] p.pr[CODE]intpenguin();[/CODE] system.out.pr[CODE]intln();[/CODE] } } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public double gettemperature() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void settemperature(double temperature) {[/CODE] this.temperature = temperature; } [CODE]public arraylist<penguin> getpenguins() {[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setpenguins(arraylist<penguin> penguins) {[/CODE] this.penguins = penguins; } } [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin() {[/CODE] this.name = ""willy""; this.species = ""emperor""; this.age = 1; this.weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public void hunt() {[/CODE] weight += 1; } [CODE]public void printpenguin() {[/CODE] system.out.print(""penguin name: "" + this.name + "" species: ""+ this.species + "" age: "" + this.age + "" years weight: "" + this.weight +"" kg""); } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public void setspecies(string species) {[/CODE] this.species = species; } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public void setage(int age) {[/CODE] this.age = age; } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setweight(double weight) {[/CODE] this.weight = weight; } } package quiz.quiz1; import java.util.arraylist; [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); // n:13 olduğunda çok vakit harcamaya başlıyor. } [CODE]public static void parantezbas(int n) {[/CODE] [CODE]if (n < 0) {[/CODE] system.out.pr[CODE]intln(""??? parantezbas("" + n + "") ???"");[/CODE] [CODE]return;[/CODE] } arraylist<[CODE]string> parantezler = parantezbul(n);[/CODE] int length = parantezler.size(); [CODE]for (int i = 0;[/CODE] i < length - 1; i++) { system.out.print(parantezler.get(i) + "", ""); } if (length > 0) system.out.print(parantezler.get(length - 1)); } private [CODE]static arraylist<string> parantezbul(int n) {[/CODE] arraylist<[CODE]string> p = new arraylist<>();[/CODE] [CODE]if (n == 0) return p;[/CODE] [CODE]if (n == 1) {[/CODE] p.add(""()""); [CODE]return p;[/CODE] } [CODE]for (string s : parantezbul(n - 1)) {[/CODE] if (!p.contains(""("" + s + "")"")) p.add(""("" + s + "")""); if (!p.contains(s + ""()"")) p.add(s + ""()""); if (!p.contains(""()"" + s)) p.add(""()"" + s); } [CODE]return p;[/CODE] } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 package quiz.quiz2; [CODE]public class latte extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] double price = 50; system.out.pr[CODE]int(""sipariş: latte"");[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] price += addon.getcost(); system.out.print("" + "" + addon.getname()); } system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""latte"";[/CODE] } } package quiz.quiz2; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] coffeemachine.pr[CODE]inttimes();[/CODE] } } package quiz.quiz2; [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; @override [CODE]public double calculateprice() {[/CODE] double price = 40; system.out.pr[CODE]int(""sipariş: "");[/CODE] [CODE]if (isheated) {[/CODE] system.out.pr[CODE]int(""espresso (sıcak fincan)"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]int(""espresso"");[/CODE] } [CODE]for (coffeeaddon addon : addons) {[/CODE] price += addon.getcost(); system.out.print("" + "" + addon.getname()); } system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""espresso"";[/CODE] } [CODE]public void heatcup() {[/CODE] isheated = true; system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } } package quiz.quiz2; [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } package quiz.quiz2; [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] // todo: } package quiz.quiz2; import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons; [CODE]public basecoffee() {[/CODE] addons = [CODE]new arraylist<>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string getname();[/CODE] } package quiz.quiz2; [CODE]public class americano extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] double price = 45; system.out.pr[CODE]int(""sipariş: americano"");[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] price += addon.getcost(); system.out.print("" + "" + addon.getname()); } system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""americano"";[/CODE] } } package quiz.quiz2; [CODE]public class coffeemachine {[/CODE] private [CODE]static int times = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if (coffee instanceof espresso && addon instanceof milk) {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenemez""); [CODE]return;[/CODE] } coffee.addaddon(addon); } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] double price = coffee.calculateprice(); system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl\n"");[/CODE] times++; } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] ((espresso) coffee).heatcup();; } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static void printtimes() {[/CODE] system.out.pr[CODE]intln(""tum kahve makineleri tarafindan toplam "" + times + "" kahve uretildi"");[/CODE] } } package quiz.quiz2; [CODE]public class milk implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } package quiz.quiz2; [CODE]public class doubleshot implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } package quiz.quiz2; [CODE]public class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 0"
8783086,0,"8783086 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 4, 1, 2, }; coctailsort(arr); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static void coctailsort(int[] arr) {[/CODE] boolean issorted = bubble(arr); [CODE]if (issorted == true) {[/CODE] for (int i = arr.length - 1; i > 0; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int x = arr[i];[/CODE] arr[i] = arr[i - 1]; arr[i - 1] = x; } } coctailsort(arr); } } [CODE]public static boolean bubble(int[] arr) {[/CODE] boolean flag = false; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int x = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = x; flag = true; } } [CODE]return flag;[/CODE] } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i != 1) {[/CODE] [CODE]if ((i % 2) == 0) {[/CODE] count += 1; [CODE]return count + collatz(i / 2);[/CODE] } [CODE]else {[/CODE] count += 1; [CODE]return count + collatz((3 * i) + 1);[/CODE] } } [CODE]return count;[/CODE] } } [CODE]public class q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]string x;[/CODE] sayac([CODE]string x) {[/CODE] this.x = x; } [CODE]public int say() {[/CODE] [CODE]int count = 0;[/CODE] if (x.length() >= 1) { if (x.charat(0) == '1') { count += 1; } x = subof(x); [CODE]return count + say();[/CODE] } [CODE]return 0;[/CODE] } [CODE]public string subof(string x) {[/CODE] return x.sub[CODE]string(1);[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi s; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.s = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] s.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellik(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + ""( hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellik() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + ""( huzurlu ve nostaljik)"");[/CODE] } } import java.util.list; import java.util.arraylist; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilistesi1 = [CODE]new arraylist<sarki>();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi1.add(sarkilistesi.get(i)); } [CODE]for (sarki sarki : sarkilistesi1) {[/CODE] sarki.oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean flag = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki && flag == false) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] flag = true; } if (i != 0 && sarkilistesi.get(i - 1) instanceof rocksarki && !(sarkilistesi.get(i) instanceof rocksarki)) { flag = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. problemi parçalayarak daha küçük problemler üzerinden büyük problemi çözmek recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. döngüden çıkabilmesi için gereken şart bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? base case string ==“” olurdu indexi birer birer arttırarak substringle methodu yeniden çağırıp 0. elemanı print ettirirdim recursive bir metotta base case olmazsa ne olur? stack overflow recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. üst üste katman halinde veriler stackte birikir fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. çok fazla katman oluşur tail recursion nedir, kısaca açıklayınız. . abstraction kavramını açıklayınız. detayları göstermeyip sadece işlevleri göstermek ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? bir classın diğer classın subclassı olması lazım bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a, b java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü subclassın çalışabilmesi için önce base classının constructorunun çalışması lazım java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? mümkün değil çünkü her classın sadece 1 atası olabilir metot overriding ve overloading kavramlarını açıklayınız. overloading methodun signiture kısmını değiştirip bambaşka bir method gibi yazılması override ise birebir aynı methodun farklı işlem yapmasını sağlamak [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? methodların bağlanması [CODE]static dynamic hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? overload static, override dynamic dinamik bağlamada jvm'nin görevi nedir? method override edilmiş mi diye kontrol etmek java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? program daha yavaş çalışırdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? classlar bağlı olmayabilir java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. var edilemez [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov dinamik bağlama [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? göremedim child display child special dinamik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlar inherit edilemez constructorları olamaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilemez abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract [CODE]classlar inherit edilemez abstract metotlar var olması istenen ama sonradan görevi belli olacak methodlarda kullanılabilir abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? kullanılabilir mümkün marker [CODE]interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface içinde method bulunmaz functionalda ise 1 method bulunur bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? ikiside edilebilir abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? obje animal olduğu için sound methodu çalışmaz objeyi dog a çevirerek düzeltilebilir [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? compile edilemez move methodu hem swimmable hem flyable içinde var java'da inner [CODE]class nedir, avantajları nelerdir? class içinde class kodu düzenlemeye yarar statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik olan inner classı oluşturmak için outer objecte gerek yok anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? anlık olarak method implement etmek için oluşturulan class interface ve abstract classlar ile oluşturulabilir inner classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? erişebilir çünkü zaten o [CODE]classın içinde statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? tanımlanamaz çünkü inner class için obje gerekir anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olamaz hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? public inner classlar ile yaratılabilir class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? başta outer objesi oluşturulması lazım output = value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? statik inner class için objeye gerek yok count static olduğu için ordada sıkıntı yok output = count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 2 çeşit error exception file io exception handlingin amacı nedir? hatayı bulup düzeltmek için exception handlingde finally bloğunun amacı nedir? try catchten sonra her türlü çalıştırmak istenilen kod için kullanılır java'da 'checked' ve 'unchecked' exceptionların farkı nedir? cheked exceptionlar runtime a geçmeden zaten kontrol edilmiş olur java'da kendi exceptionunuzu nasıl tanımlarsınız? exception klasını extend ederek tanımlanabilir java'da error ve exception arasındaki fark nedir, açıklayınız . java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? catch edile bloğun dışında başka bir catch bloğu olabilir 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? return type ın throwable olması lazım static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica "", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin() {[/CODE] this.name = ""willy""; this.species = ""emperor""; this.age = 1; this.weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public string getname() {[/CODE] [CODE]string namecopy = name;[/CODE] [CODE]return namecopy;[/CODE] } [CODE]public string getspecies() {[/CODE] [CODE]string speciescopy = species;[/CODE] [CODE]return speciescopy;[/CODE] } [CODE]public int getage() {[/CODE] [CODE]int agecopy = age;[/CODE] [CODE]return agecopy;[/CODE] } [CODE]public double getweight() {[/CODE] double weightcopy = weight; [CODE]return weightcopy;[/CODE] } [CODE]public void setname(string newname) {[/CODE] name = [CODE]newname;[/CODE] } [CODE]public void setspecies(string newspecies) {[/CODE] species = [CODE]newspecies;[/CODE] } [CODE]public void setage(int newage) {[/CODE] age = [CODE]newage;[/CODE] } [CODE]public void setweight(double newweight) {[/CODE] weight = [CODE]newweight;[/CODE] } [CODE]public void hunt() {[/CODE] weight += 1; } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins = [CODE]new arraylist<>();[/CODE] [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temperature: "" + temperature);[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]string locationcopy = location;[/CODE] [CODE]return locationcopy;[/CODE] } [CODE]public double gettemperature() {[/CODE] double temperaturecopy = temperature; [CODE]return temperaturecopy;[/CODE] } [CODE]public void addpenguin(penguin penguin) {[/CODE] penguins.add(penguin); } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln(""penguins living here: "");[/CODE] [CODE]for (int i = 0;[/CODE] i < penguins.size(); i++) { system.out .println(""penguin name: "" + penguins.get(i).getname() + "" species: "" + penguins.get(i).getspecies() + "" age: "" + penguins.get(i).getage() + "" weight: "" + penguins.get(i).getweight()); } } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); } [CODE]public static void parantezbas(int n) {[/CODE] [CODE]if (n > 0) {[/CODE] system.out.pr[CODE]int(""("");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int("")"");[/CODE] } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] [CODE]public double calculateprice() {[/CODE] double price = 50.0; [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { price += addons.get(i).getcost(); } [CODE]return price;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); } } import java.util.arraylist; [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; [CODE]public double calculateprice() {[/CODE] double price = 40.0; [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { price += addons.get(i).getcost(); } [CODE]return price;[/CODE] } [CODE]public setheat(boolean heat) {[/CODE] isheated = heat; } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 6.0; } [CODE]public string getname() {[/CODE] [CODE]return ""vanillasyrup"";[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] [CODE]public double calculateprice() {[/CODE] double price = 45.0; [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { price += addons.get(i).getcost(); } [CODE]return price;[/CODE] } } [CODE]public class coffeemachine {[/CODE] boolean heat = false; [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if (coffee instanceof espresso && (addon instanceof milk || addon instanceof vanillasyrup)) {[/CODE] system.out.println(""[uyari] espresso tipi kahveye "" + addon.getname() + "" eklenemez""); } [CODE]else if (coffee instanceof latte && addon instanceof doubleshot) {[/CODE] system.out.println(""[uyari] latte tipi kahveye "" + addon.getname() + "" eklenemez""); } [CODE]else if (coffee instanceof americano && (addon instanceof doubleshot || addon instanceof chocolate)) {[/CODE] system.out.println(""[uyari] americano tipi kahveye "" + addon.getname() + "" eklenemez""); } [CODE]else {[/CODE] coffee.addaddon(addon); } } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] heat = true; } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] sadece espresso fincanları ısıtılabilir"");[/CODE] } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso && heat == true) {[/CODE] system.out.pr[CODE]int(""sipariş: espresso (sıcak fincan) "");[/CODE] [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { system.out.print("" + "" + coffee.addons.get(i).getname()); } } [CODE]else if (coffee instanceof espresso) {[/CODE] system.out.pr[CODE]int(""sipariş: espresso "");[/CODE] [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { system.out.print("" + "" + coffee.addons.get(i).getname()); system.out.pr[CODE]intln();[/CODE] system.out.println(""toplam fiyat:"" + coffee.calculateprice()); } } [CODE]else if (coffee instanceof americano) {[/CODE] system.out.pr[CODE]int(""sipariş: americano "");[/CODE] [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { system.out.print("" + "" + coffee.addons.get(i).getname()); system.out.pr[CODE]intln();[/CODE] system.out.println(""toplam fiyat:"" + coffee.calculateprice()); } } [CODE]else if (coffee instanceof latte) {[/CODE] system.out.pr[CODE]int(""sipariş: latte "");[/CODE] [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { system.out.print("" + "" + coffee.addons.get(i).getname()); system.out.pr[CODE]intln();[/CODE] system.out.println(""toplam fiyat:"" + coffee.calculateprice()); } } } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 5.0; } [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 10.0; } [CODE]public string getname() {[/CODE] [CODE]return ""doubleshot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 7.0; } [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 0"
4731282,0,"4731282 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]string sayilacak;[/CODE] [CODE]int count = 0;[/CODE] sayac([CODE]string s) {[/CODE] sayilacak = s; } [CODE]public int say() {[/CODE] return say(0, this.sayilacak); } [CODE]public int say(int count, string s) {[/CODE] if (s.length() == 1) { if (s.charat(0) == '1') { [CODE]return count + 1;[/CODE] } [CODE]else return count;[/CODE] } if ((s.charat(0)) + 0 == '1') { return say(count + 1, s.sub[CODE]string(1));[/CODE] } [CODE]else {[/CODE] return say(count, s.sub[CODE]string(1));[/CODE] } } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] array = {[/CODE] 1, 5, 4, 2 }; cocktailsort(array); [CODE]for (int k = 0;[/CODE] k < array.length; k++) { system.out.pr[CODE]int(array[k] + "" "");[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktailsort(arr, true); } [CODE]public static int[] cocktailsort(int[] arr, boolean flag) {[/CODE] [CODE]int temp = 0;[/CODE] boolean arrflag = true; [CODE]if (flag == true) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] temp = arr[i + 1]; arr[i + 1] = arr[i]; arr[i] = temp; arrflag = false; } } } [CODE]if (flag == false) {[/CODE] for (int j = arr.length - 1; j > 0; j--) { [CODE]if (arr[j] < arr[j - 1]) {[/CODE] temp = arr[j]; arr[j] = arr[j - 1]; arr[j - 1] = temp; arrflag = false; } } } [CODE]if (flag == false) flag = true;[/CODE] [CODE]if (flag == true) flag = false;[/CODE] [CODE]if (arrflag == true) {[/CODE] [CODE]return arr;[/CODE] } [CODE]else {[/CODE] [CODE]return cocktailsort(arr, flag);[/CODE] } } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int num = 9455;[/CODE] system.out.pr[CODE]intln(collatz(num));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]return counter(0, i);[/CODE] } [CODE]public static int counter(int count, int x) {[/CODE] [CODE]if (x == 1) {[/CODE] [CODE]return count;[/CODE] } [CODE]if (x % 2 == 0) {[/CODE]// ç[CODE]iftse return counter(count + 1, x / 2);[/CODE] } [CODE]else {[/CODE] // tekse [CODE]return counter(count + 1, 3 * x + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumental"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } system.out.pr[CODE]intln();[/CODE] } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super.isim = isim; super.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + isim + "" - "" + sanatci + "" ("" + metalozellik + "")"");[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.println(isim + "" - "" + sanatci + "" ("" + this.metalozellik + "")""); } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]string rockozellik = ""huzurlu ve nostaljik"";[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] super.isim = isim; super.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + isim + "" - "" + sanatci + "" ("" + rockozellik + "")"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasikozellik = ""hafif ve sakin"";[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] super.isim = isim; super.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + isim + "" - "" + sanatci + "" ("" + klasikozellik + "")"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> locallist = [CODE]new arraylist<sarki>(sarkilistesi) ;[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { int rand = (int) math.random() * sarkilistesi.size(); sarki temp = locallist.get(rand); locallist.set(rand, locallist.get(i)); locallist.set(i, temp); } [CODE]for (int i = 0;[/CODE] i < locallist.size(); i++) { locallist.get(i).oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean yukseldi = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { if (sarkilistesi.get(i + 1) instanceof rocksarki && yukseldi == false) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi : yuksek"");[/CODE] yukseldi = true; } } [CODE]else if (yukseldi == true) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi : normal"");[/CODE] yukseldi = false; } sarkilistesi.get(i).oynat(); } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi c) {[/CODE] this.strateji = c; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursionun temeli bir metodun tekrar kendini çağırmasıdır. recursion kodlarında bir base case (kodun sonsuz döngüye girmemesi için) olmalıdır, recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case, metoda girilen parametrenin her iterasyonda yaklaştığı bir durum olmalıdır ki kod sonsuz döngüye girmesin. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? if string length < 1 recursive bir metotta base case olmazsa ne olur? kod sonsuz döngüye girer ve stack overflow gerçekleşir recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. yeni çağırılan metotlar üst üste biner, en son base case'e ulaşılınca sırayla operasyonlar gerçekleştirilir. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. büyük sayılarla uğraşırken bilgisayar ne kadar hesaplama yapacağını bilmediği için for döngüsü ile yapılan hesaplamalar daha büyük sayılara ulaşabilir tail recursion nedir, kısaca açıklayınız. tek tek printlemek yerine tüm operasyonları return statementte yapan recursion abstraction kavramını açıklayınız. belli bir konudaki önemli detayları soyutlayarak kullanıcının algıladığı karmaşıklığı azaltmak ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? is a ilişkisi java'da extends ile sağlanır. is-a ilişkisi ata class ve subclass arasında olur bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? b veya a java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? ata classın constructoru çalışmadan ata classın instance variable'ları initialize edilemez, bulunulan classta kullanılamaz java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır, sadece bir kez extendlenebilir metot overriding ve overloading kavramlarını açıklayınız. overloading'de signature'ın parametreleri farklı, metod adı aynıdır; overriding'de farklı bir metod adı aynıdır, kullanılan [CODE]class farklıdır class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? metodun hangi parametrelere ve classa göre çalışacağının belirlenmesidir. çeşitler dynamic binding ve static binding'dir. hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? static binding olması için static, final veya private keywordleri kullanılır. metod override'lanmadıysa static binding gerçekleşir, compile edilirken bindlanır. metod başka bir classta da var ise dynamic binding gerçekleşir. dinamik bağlamada jvm'nin görevi nedir? jvm dinamik bağlamada metodun hangi classtan çağırılacağını runtime'da belirler. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? metodlardan önce final veya static yazmamızın bir anlamı kalmazdı, bütün yük runtime'a yüklenirdi. java'da down casting explicit şekilde yapılır, bunun nedeni nedir; implicit şekilde yaparsak ne olur? . java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. private bir metod override edilemez. protected metodların içine subclasslar da dahil olduğu için override edilebilir. alt classların üst classlara ait metodları inherit etmesi polimorfizmin özelliğidir. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() çalışmaz' çünkü parent classında special metodu yoktur. silmeliyiz. output: ""child display"" dynamic binding gözlemlenir java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classtan veya interfaceden obje üretilemeyeceği için constructor bulunmaz. abstract classlarda metodlar, metodu başka bir classta implement edilmek üzere yazılır. concrete classtan farkı metodların implement edilmemesi ve obje üretilememesidir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstract metodların implement edilmesi concrete classlarda gerçekleşir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. 1) abstract classtan obje üretilmez 2) abstract metodlar genel bir metodun yazılması ve farklı classlarda farklı şekilde implement edilmesine yarar. 3) abstract metod bulunan bir class otomatik olarak abstracttır. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interface reference data type olarak kullanılabilir, abstract class objesi yazılamaz. abstract class ile interface arasında implementation farkları bulunur. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface bir interface taslağıdır, functional interface'in kullanılabilir metodları bulunur. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden çok interface'i implement edebilir ve bir interface başka bir interface'i implement edebilir. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? a.printname() çalışmaz, animal dog = new animal(""buddy"") yazarsak çalışır. output: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? super.move() compile edilemez, çünkü iki interfacede de bulunduğu için hangisiyle bindlanacağına karar verilemez. instanceof ile ayrı ayrı neyi implement ettiğine bakılarak flying swimming benzeri bir output alınabilir. java'da inner class nedir, avantajları nelerdir? başka bir classın içinde declare edilen classlara inner class denir. kodun daha düzenli olmasını ve birbiriyle bağlantılı classların grup halinde yazılmasını sağlar statik ve statik olmayan (member) inner class arasındaki temel fark nedir? member inner classların kullanılması için outer class objesine ihtiyaç vardır, statik inner classlarda ihtiyaç yoktur. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? anonymous classlar tek seferlik oluşturulan classlardır. objesinde referans bulunumaz. new yazıldıktan sonra kodun alt satırlarında metodlar ve değişkenleri tanımlanır. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? ulaşabilir ve değiştirebilir. bu, iki classın yakın ilişkide olmasını sağlar statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır, çünkü statik olmayan inner classların yaşaması için outer class objesine ihtiyaç vardır. statik keywordu ise obje olmadan kullanılacak variable/method tanımlar anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olamaz, çünkü başka bir yerde objesi oluşturulamaz. inner classlardan obje oluşturulabileceği için constructor bulunabilir. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? public, static class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? private olduğu için dışarıdan ulaşılamaz, getvalue() yazmalıyız veya private'ı silmeliyiz. output: value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? showcount metodunu variable adıyla değil class adıyla çağırmalıyız. compile edilmez. private variable'ı public veya getcount ile almalıyız. output: count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 3 çeşit hata vardır, error(), exception(null pointer exception), exception handlingin amacı nedir? kod hata verdiğinde debuglamanın kolay olması ve şık bir şekilde kullanıcıya anlatılmasıdır. exception handlingde finally bloğunun amacı nedir? exception verse de vermese de en son runlanan kod, finally bloğunun içindeki koddur. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked exceptionların throwlanacağı biliniyorsa try-catch bloğu veya throws keywordu ile handlelanmalıdır. unchecked exceptionlar handlelanmasa bile kod çalışır. java'da kendi exceptionunuzu nasıl tanımlarsınız? class olarak tanımlanır ve extends exception keywordleri yazılır. java'da error ve exception arasındaki fark nedir, açıklayınız . java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? bir exception varsa ve bu exception varken belli kod bloklarının çalışması istenmiyorsa try-catchten sonra tekrar catch görene kadar kodun çalışmaması için tekrar fırlatılabilir. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? . [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? kodda yazılan ikinci catch bloğuna kod hiçbir zaman girmez, çünkü throwlanabilecek her exception üstteki blokta yakalanır. output: exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally -1 oops 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica "", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public penguin() {[/CODE] this.name = ""willy""; this.species = ""emperor""; this.age = 1; this.weight = 5.0; } [CODE]public string getname(penguin p) {[/CODE] return p.name; } [CODE]public string getspecies(penguin p) {[/CODE] return p.species; } [CODE]public int getage(penguin p) {[/CODE] return p.age; } [CODE]public double getweight(penguin p) {[/CODE] return p.weight; } [CODE]public void setname(penguin p, string s) {[/CODE] p.name = s; } [CODE]public void setspecies(penguin p, string s) {[/CODE] p.species = s; } [CODE]public void setage(penguin p, int a) {[/CODE] p.age = a; } [CODE]public void setweight(penguin p, double w) {[/CODE] p.weight = w; } [CODE]public void hunt() {[/CODE] this.weight += 1; } [CODE]public void printpenguin() {[/CODE] system.out.println(""penguin name : "" + this.name); system.out.println(""penguin species : "" + this.species); system.out.println(""penguin age : "" + this.age + "" year(s)""); system.out.println(""penguin weight : "" + this.weight + "" kg""); } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins = [CODE]new arraylist<penguin>();[/CODE] private [CODE]int length = 0;[/CODE] [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; } [CODE]public string getlocation(habitat h) {[/CODE] return h.location; } [CODE]public double gettemperature(habitat h) {[/CODE] return h.temperature; } [CODE]public arraylist<penguin> getpenguins(habitat h) {[/CODE] return h.penguins; } [CODE]public void setlocation(habitat h, string l) {[/CODE] h.location = l; } [CODE]public void settemperature(habitat h, double t) {[/CODE] h.temperature = t; } [CODE]public void setpenguins(habitat h, arraylist<penguin> p) {[/CODE] h.penguins = p; } [CODE]public void addpenguin(penguin penguin) {[/CODE] (this.penguins).add(penguin); length++; } [CODE]public void printhabitat() {[/CODE] system.out.println(""habitat location: "" + this.location); system.out.println(""average temperature: "" + this.temperature); system.out.pr[CODE]intln(""penguins living here: "");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]for (int i = 0;[/CODE] i < length; i++) { (this.penguins.get(i)).pr[CODE]intpenguin();[/CODE] system.out.pr[CODE]intln();[/CODE] } } } import java.util.scanner; [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan = new scanner(system.in); system.out.pr[CODE]intln(""enter n:"");[/CODE] int n = scan.next[CODE]int();[/CODE] parantezbas(n); } [CODE]public static void parantezbas(int n) {[/CODE] } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 import java.util.arraylist; [CODE]public class quiz2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] system.out.println(coffeemachine.totalcoffees()); } } abstract [CODE]class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<coffeeaddon>();[/CODE] [CODE]public void addaddon(coffeeaddon addon) {[/CODE] this.addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]class espresso extends basecoffee {[/CODE] private boolean isheated = false; double price = 0; [CODE]public double calculateprice() {[/CODE] [CODE]for (int i = 0;[/CODE] i < this.addons.size(); i++) { this.price += (this.addons.get(i)).getcost(); } this.price += 40; return this.price; } [CODE]public void heatcup() {[/CODE] this.isheated = true; } [CODE]public boolean getheatedvalue() {[/CODE] [CODE]return isheated;[/CODE] } } [CODE]class latte extends basecoffee {[/CODE] double price = 0; [CODE]public double calculateprice() {[/CODE] [CODE]for (int i = 0;[/CODE] i < this.addons.size(); i++) { this.price += (this.addons.get(i)).getcost(); } this.price += 50; return this.price; } } [CODE]class americano extends basecoffee {[/CODE] double price = 0; [CODE]public double calculateprice() {[/CODE] [CODE]for (int i = 0;[/CODE] i < this.addons.size(); i++) { this.price += (this.addons.get(i)).getcost(); } this.price += 45; return this.price; } } [CODE]class coffeemachine {[/CODE] [CODE]static int counter = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] [CODE]if (addon instanceof milk) {[/CODE] system.out.pr[CODE]intln(""[uyari] espresso tipi kahveye milk eklenemez"");[/CODE] } [CODE]if (addon instanceof vanillasyrup) {[/CODE] system.out.pr[CODE]intln(""[uyari] espresso tipi kahveye vanilla syrup eklenemez"");[/CODE] } [CODE]else {[/CODE] coffee.addaddon(addon); } } [CODE]if (coffee instanceof latte) {[/CODE] [CODE]if (addon instanceof doubleshot) {[/CODE] system.out.pr[CODE]intln(""[uyari] latte tipi kahveye double shot eklenemez"");[/CODE] } [CODE]else {[/CODE] coffee.addaddon(addon); } } [CODE]if (coffee instanceof americano) {[/CODE] [CODE]if (addon instanceof chocolate) {[/CODE] system.out.pr[CODE]intln(""[uyari] americano tipi kahveye chocolate eklenemez"");[/CODE] } [CODE]if (addon instanceof doubleshot) {[/CODE] system.out.pr[CODE]intln(""[uyari] americano tipi kahveye double shot eklenemez"");[/CODE] } [CODE]else {[/CODE] coffee.addaddon(addon); } } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] [CODE]string theorder = """";[/CODE] if (coffee instanceof espresso && ((espresso) coffee).getheatedvalue() == true) { theorder += ""sipariş: espresso (sıcak fincan)""; [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { theorder += ""+"" + (coffee.addons.get(i)).getname(); } system.out.pr[CODE]intln(theorder);[/CODE] system.out.println(""toplam fiyat: "" + coffee.calculateprice() + "" tl""); system.out.pr[CODE]intln();[/CODE] counter++; } if (coffee instanceof espresso && ((espresso) coffee).getheatedvalue() == false) { theorder += ""sipariş: espresso ""; [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { theorder += ""+"" + (coffee.addons.get(i)).getname(); } system.out.pr[CODE]intln(theorder);[/CODE] system.out.println(""toplam fiyat: "" + coffee.calculateprice() + "" tl""); system.out.pr[CODE]intln();[/CODE] counter++; } [CODE]if (coffee instanceof latte) {[/CODE] theorder += ""sipariş: latte ""; [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { theorder += ""+"" + (coffee.addons.get(i)).getname(); } system.out.pr[CODE]intln(theorder);[/CODE] system.out.println(""toplam fiyat: "" + coffee.calculateprice() + "" tl""); system.out.pr[CODE]intln();[/CODE] counter++; } [CODE]if (coffee instanceof americano) {[/CODE] theorder += ""sipariş: americano ""; [CODE]for (int i = 0;[/CODE] i < coffee.addons.size(); i++) { theorder += ""+"" + (coffee.addons.get(i)).getname(); } system.out.pr[CODE]intln(theorder);[/CODE] system.out.println(""toplam fiyat: "" + coffee.calculateprice() + "" tl""); system.out.pr[CODE]intln();[/CODE] counter++; } } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] ((espresso) coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static string totalcoffees() {[/CODE] [CODE]return ""tüm kahve makinelerinden toplam "" + counter + "" kahve üretildi"";[/CODE] } } [CODE]interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } [CODE]class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return "" milk "";[/CODE] } } [CODE]class chocolate implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return "" chocolate "";[/CODE] } } [CODE]class vanillasyrup implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return "" vanilla syrup "";[/CODE] } } [CODE]class doubleshot implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return "" double shot "";[/CODE] } } 0"
6202193,0,"6202193 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac s1 = [CODE]new sayac(""“10001110011”"");[/CODE] system.out.println(s1.say()); } [CODE]public static void cocktailsort(int[] arr){[/CODE] } } [CODE]class sayac {[/CODE] [CODE]string string;[/CODE] sayac([CODE]string metin){[/CODE] this.[CODE]string=metin;[/CODE] } [CODE]public int say(){[/CODE] [CODE]int count = 0;[/CODE] [CODE]for(int i = 0;[/CODE]i<string.length();i++) { if(string.charat(i)=='1')count+=1; } [CODE]return count;[/CODE] } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] arr = {[/CODE]5,15,4,1,2,6,11,35,1}; cocktailsort(arr); } [CODE]public static void cocktailsort(int[] arr){[/CODE] boolean flag = true; [CODE]int temp= 1;[/CODE] [CODE]for(int i = 1;[/CODE]i<arr.length;i++) { [CODE]if(arr[i]<arr[i-1]) {[/CODE] temp=arr[i]; arr[i]=arr[i-1]; arr[i-1]=temp; flag = false; } } [CODE]if(flag){[/CODE] [CODE]for(int i=0;[/CODE]i<arr.length;i++) { system.out.pr[CODE]int(arr[i]);[/CODE] } } [CODE]else cocktailsort(arr);[/CODE] } } import java.util.scanner; [CODE]public class vize2soru2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(3516));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1) {[/CODE] [CODE]return i;[/CODE] } [CODE]if(i%2==0){[/CODE] [CODE]return collatz(i/2);[/CODE] } [CODE]else return collatz((i*3)+1);[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arrays; import java.util.list; [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] // bu kismi cikti ornegini saglayacak sekilde doldurun [CODE]if(sarki instanceof metalsarki){[/CODE] metalsarki temp = (metalsarki)sarki; temp.gostermetalozellikleri(); } } } } abstract [CODE]class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] [CODE]public string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim=isim; this.sanatci=sanatci; this.metalozellik=metalozellik; } [CODE]public void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatci+"" - ""+isim+"""");[/CODE] } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] ""+sanatci+"" - ""+isim+"" (""+metalozellik+"")"");[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] rocksarki([CODE]string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] ""+sanatci+"" - ""+isim+"" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki{[/CODE] klasiksarki([CODE]string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasi̇k] ""+sanatci+"" - ""+isim+"" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(int i =0;[/CODE]i<sarkilistesi.size();i++){ sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] int[] a = new int[sarkilistesi.size()]; [CODE]int count = 0;[/CODE] while(count<sarkilistesi.size()){ int b = 1+(int)(math.random()*sarkilistesi.size()); boolean flag = true; [CODE]for(int i = 0;[/CODE]i<a.length;i++){ [CODE]if(a[i]==b)flag=false;[/CODE] } [CODE]if(flag){[/CODE] a[count]=b; count++; } } [CODE]for(int i =0;[/CODE]i<sarkilistesi.size();i++){ sarkilistesi.get(a[i]-1).oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] boolean flag = false; boolean temp = false; [CODE]for(int i =0;[/CODE]i<sarkilistesi.size();i++){ if(sarkilistesi.get(i).getclass()==new rocksarki(null, null).get[CODE]class()&&flag==false){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] flag=true; sarkilistesi.get(i).oynat(); } else if(sarkilistesi.get(i).getclass()!=new rocksarki(null, null).get[CODE]class()&&flag==true){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sarkilistesi.get(i).oynat(); flag=false; } else sarkilistesi.get(i).oynat();; } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s){[/CODE] this.strateji=s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursion, metodun kendisini kendi içinde çağırmasıdır. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case, base condition barındırır. her recursion gerçekleştiğinde bu belirli base conditiona yaklaşır ve en sonunda zinciri tamamlar bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? baştaki ve sondaki harfleri birbiriylr değiştirip bu işlemi kaç defa yaptığımı sonraki recursiona elde ettiğim stringle gönderirdim. i̇şlem sayısı string uzunluğunun yarısından büyük olması base condition olurdu. recursive bir metotta base case olmazsa ne olur? stack overflow recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. mevcut stackin üstüne yeni bir katman oluşturulur. sonraki çağırmalar da böyle sürer. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. her bir sayı için yeni bir stack oluşturulur ve en sonunda bütün stackler silinip başa dönüldüğünde sonuç rlde edilir. tail recurdion kullanılsa bile java bunun için optimize edilmemiştir. for döngüsü gibi ilkel çözümler daha pratik olabilir. tail recursion nedir, kısaca açıklayınız. tail recursion, base condition'un yerine getirilfiği anda hedeflenen işlemin zaten hazır ve elde olmasıdır. abstraction kavramını açıklayınız. soyutlama. nesneleri ortak özelliklerine göre ilişkilendirme ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? is a , bir classın başka bir klasın alt klası veya kendisi olması durumudur. java da inheritance of ile kontrol edilir. o classın subclasslarından biri veya kendisi olması is a ilişkisi için yeterlidir bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? default ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? c class java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü parent classların hepsi initialize edilmeden kendisi hakkında bir şey uapamayız java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? değil metot overriding ve overloading kavramlarını açıklayınız. overload, aynı isim ve farklı paramtereye sahip metod, override, oarent [CODE]classtan aldığımız methodla aynı signatureda başka bir metod yazmak class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dogbark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? dynamic ve static olarak ikiye ayrılır. çağırılacak bir metodun hangi classtan nasıl çağırılacağının belirlenmesi ve bağlantı kurmasıdır. hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? eğer bir metoda override yapılamazsa static binding yapılır. static, private ve final dinamik bağlamada jvm'nin görevi nedir? dinamik bağlamada kodun mevcut durumuna göre merodun çalışması runtimeda belirlenir. static bağlamada compiler işi en başta halleder. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? dinamik olsaydı değiştirilmesini istemediğimiz metodlara override yapılabilirdi java'da down casting explicit şekilde yapılır, bunun nedeni nedir; implicit şekilde yaparsak ne olur? yeni bir obje oluşturup downcast etmek gerekir çünkü subclassta olan metod ve instance variable lar parent classta olmayabilir. bu yüzden implicit yapılsaydı sorunlar çıkardı. java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. hayır. erişilmesini istemediğimiz metodlar bu sefer oluşturulan parent [CODE]classlardan erişilebilir olur class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meow dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? yanlışlık yok, child display child special, dinamic binding java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlarda implement edilmemiş metodlar bulunabilir ve obje çağırılamaz. abstract classların constructorları olmalıdır fakat interfacelerde olmaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilebilir, eğer abstract classta hala implement edilmemiş başka metodlar bulunuyorsa ve class o interfaceden extend ediliyorsa olur abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. i̇mplement edilmemişlerdir obje çağırılamaz sonradan implement edilirler yapılacağı kesin olan ama nasıl yapılacağı henüz belirli olmayan metod ve classlar için esnek bir yöntemdir. soyutlanada çok işe yarar abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlarda implement edilmiş metod bulunabilir fakat interfacelerde bulunamaz. a. classların constructorları vardır ama interfacelerin yoktur. myabstractclassobj eğer metodlwrı sonradan inplement edilmişse çağırılabilir ama interfacelerde bu mümkün değildir marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interfacelerin metodu yoktur, functionalların tek bir metodu vardır. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class bir den çok edebilir. i̇nterface de edebilir abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal objesi çağırılamaz. bunun yerine new dog(""buddy"") kullanılmalıydı. output: animal : buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? eğer move metodu interfacelerde tanımlanmasaydı hata oluşmazdı ama default ile tanımlanmış durumda. öyle olunca duck içindeki super.move çağırılınca compiler hangi ata interface e gideceğini bilemez ve hata verir. bunun yerine ya move metodu interfacelerde abstract bırakılıp duckta tanımlanmalıydı ya da iki interfaceden yalnızca biri ata interface olmalıydı. metod signaturelarını interfacelerde farklı yapmak da olur. output tercih edilen ata interface e göre swimming veya flying şeklinde olurdu. java'da inner class nedir, avantajları nelerdir? classların içine gömülü başka classlardır. outer classa ait private ögelere erişimi vardır. inner classlar static ve private da olabilir. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik inner classın constructoru direkt çağırılabilirken member inner classın constructoru outer class objesi aracılığıyla çağırılır. static inner class outer classın sadece static metot ve variable larına erişim sağlayabilir. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? anonim class, anlık ihtiyaçlardan ötürü bir obje çağırılırken ona özgü behaviourlar atanmasıdır. kendi classı yoktur. yanına süslü parantez açılıp istenen metot ve değişkenler tanımlanır. çağırılan objelerden anonim sınıf yapılabilir. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet erişebilir. evet değiştirebilir. class içi düzenin sağlanması için kullanılır. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? evet tanımlanabilir. i̇nner classa ait başka bir statix inner class oluşturulduğu durumda bu static metot veya variable a erişim sağlanabilir. anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? hayır olamaz. inner classlardan farkı anonymous classların hangi class olduğu bilinmez. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? static class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? inner class static olmasığı için constructor çağırılma şekli yanlıştır. outer objesindrn çağırılmalıdır. output value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? yanlışlık: static inner objenin çağırılna şekli yanlıştır. direkt inner class constructoru çağırılmalıdır. output count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. compile error, int a = 1.0 type mismatch, runtime, [CODE]int[] a = new int[3];[/CODE] a[4] arrayindexoutofbounds, exception, 1/0, arithmetic exception error, null pointer exception handlingin amacı nedir? bir kodda oluşan hatanın sonraki kodları da engellemesinin önüne geçmek exception handlingde finally bloğunun amacı nedir? exception atılsa da atılmasa da run edilir. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? birinin handle edilmesi zorunluyken diğeri değildir java'da kendi exceptionunuzu nasıl tanımlarsınız? throwable [CODE]classtan extend ederek kendi exception classımızı tanımlar ve örneğin throw new myexception() deriz java'da error ve exception arasındaki fark nedir, açıklayınız errorlar daha çok compiler ve bilgisayara özgü hatalar iken exceptionlar daha çok alınan imputların beklenenden farklı olmasıyla ilişkilidir java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? exception ile olan işimiz daha bitmemiş olabilir, exception durumunda birden çok alanda düzeltmeler yapılması gerekebilir 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? throwable class veya alt classları throw edilebilir static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? hayır. birden fazla catch vardır. i̇ki catchtan biri silindiğinde kalan catch run edilir çünkü kodda oluşan hata hem arrayindexoutofbounds heö de ecceptiondır. silinen metoda göre exception caught veya array exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught fi̇nally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] penguin a = new penguin(""enes"",""enes"",10,5.0); a.pr[CODE]intpenguin();[/CODE] habitat b = [CODE]new habitat(""ankara"", -10);[/CODE] b.addpenguin(a); } } [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(){[/CODE] name=""willy""; species=""emperor""; age =10; weight= 10.0; } [CODE]public penguin(string name,string species,int age,double weight){[/CODE] this.name = name; this. age = age; this. weight=weight; this.species=species; } [CODE]public void hunt(){[/CODE] weight+=1; } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies(){[/CODE] [CODE]return species;[/CODE] } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name :""+name+"" species: ""+species+"" age: ""+age+"" years weight:""+weight+"" kg"");[/CODE] } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; private [CODE]int penguincount =0;[/CODE] [CODE]public habitat(string location, double temperature){[/CODE] this.temperature=temperature; this.location=location; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public arraylist<> getlist(){[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.addpenguin(penguin); penguincount+=1; } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""penguins living here:"");[/CODE] /* arraylist nasıl çalışır bilmiyorum :( muhtemelen [CODE]for(int i =0;[/CODE]i<penguincount;i++){ system.out.pr[CODE]intln();[/CODE] penguins[i].parantezbas(); } tarzı bir şey olacak. array listi import etmem de gerekilir bilmiyorum dediğim gibi. kolay gelsin. */ } } import java.lang.reflect.array; [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] parantezbas(1); } [CODE]public static void parantezbas(int n){[/CODE] a(n, 0, 0, """"); } [CODE]public static void a(int n,int sag,int sol,string output){[/CODE] if(sag==sol&&sol==n)system.out.pr[CODE]int(output+"", "");[/CODE] [CODE]else if(sag==0)a(n, sag+1, sol, output+""("");[/CODE] [CODE]else if(sag==n)a(n, sag, sol+1, output+"")"");[/CODE] [CODE]else{[/CODE] a(n, sag+1, sol, output+""(""); [CODE]if(sag>sol)a(n, sag, sol+1, output+"")"");[/CODE] } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 import java.util.arraylist; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] anothermachine.getallcoffees(); } } [CODE]class milk implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return 5;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]class chocolate implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return 7;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return ""chocolate"";[/CODE] } } [CODE]class vanillasyrup implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return 6;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]class doubleshot implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return 10;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]class espresso extends basecoffee{[/CODE] private boolean isheated=false; [CODE]public void heatcup(){[/CODE] isheated=true; system.out.println(""espresso kahve fincanı ısıtıldı.""); } @override [CODE]public double calculateprice() {[/CODE] if(isheated)system.out.pr[CODE]int(""(sıcak fincan) + "");[/CODE] [CODE]int total = 0;[/CODE] total+=40; [CODE]for(int i =0;[/CODE]i<addonlist.size();i++){ total+=addonlist.get(i).getcost(); } [CODE]return total;[/CODE] } } [CODE]class americano extends basecoffee{[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int total = 0;[/CODE] total+=45; [CODE]for(int i =0;[/CODE]i<addonlist.size();i++){ total+=addonlist.get(i).getcost(); } [CODE]return total;[/CODE] } } [CODE]class latte extends basecoffee{[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int total = 0;[/CODE] total+=50; [CODE]for(int i =0;[/CODE]i<addonlist.size();i++){ total+=addonlist.get(i).getcost(); } [CODE]return total;[/CODE] } } [CODE]class coffeemachine{[/CODE] [CODE]static int coffeesmade=0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] [CODE]if(addon instanceof doubleshot||addon instanceof chocolate){[/CODE] coffee.addaddon(addon); } else system.out.println(""[uyari] espresso tipi kahveye ""+addon.getname()+"" eklenemez""); } [CODE]else if(coffee instanceof latte){[/CODE] [CODE]if(addon instanceof doubleshot){[/CODE] system.out.pr[CODE]intln(""[uyari] latte tipi kahveye double shot eklenemez"");[/CODE] } else coffee.addaddon(addon); } [CODE]else if(coffee instanceof americano){[/CODE] [CODE]if(addon instanceof milk||addon instanceof vanillasyrup){[/CODE] coffee.addaddon(addon); } else system.out.println(""[uyari] americano tipi kahveye ""+addon.getname()+"" eklenemez""); } } [CODE]public void makecoffee(basecoffee coffee){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] system.out.pr[CODE]int(""sipraiş: espresso "");[/CODE] double temp = coffee.calculateprice(); [CODE]for(int i =0;[/CODE]i<coffee.addonlist.size();i++){ system.out.print(coffee.addonlist.get(i).getname()); if(i!=coffee.addonlist.size()-1)system.out.pr[CODE]int( "" + "");[/CODE] } system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""toplam fiyat: ""+(int)temp+""tl"");[/CODE] coffeesmade+=1; } [CODE]if(coffee instanceof latte){[/CODE] system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]int(""sipraiş: latte "");[/CODE] [CODE]for(int i =0;[/CODE]i<coffee.addonlist.size();i++){ system.out.print(coffee.addonlist.get(i).getname()); if(i!=coffee.addonlist.size()-1)system.out.pr[CODE]int( "" + "");[/CODE] } system.out.pr[CODE]intln();[/CODE] double temp = coffee.calculateprice(); system.out.pr[CODE]intln(""toplam fiyat: ""+(int)temp+""tl"");[/CODE] coffeesmade+=1; } [CODE]if(coffee instanceof americano){[/CODE] system.out.pr[CODE]intln(""sipraiş: americano "");[/CODE] [CODE]for(int i =0;[/CODE]i<coffee.addonlist.size();i++){ system.out.print(coffee.addonlist.get(i).getname()); if(i!=coffee.addonlist.size()-1)system.out.pr[CODE]int( "" + "");[/CODE] } system.out.println(""toplam fiyat: "" +(int)coffee.calculateprice()+""tl""); coffeesmade+=1; } } [CODE]public void heatespressocup(basecoffee coffee){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] ((espresso)coffee).heatcup(); } [CODE]else {[/CODE] system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public void getallcoffees(){[/CODE] system.out.pr[CODE]intln(""tum kahve makineleri tarafindan toplam ""+coffeesmade+"" kahve uretildi"");[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee{[/CODE] protected arraylist<coffeeaddon> addonlist= [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addon){[/CODE] if(addonlist.equals(null)){ addonlist= [CODE]new arraylist<>();[/CODE] } addonlist.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } 0"
7817361,1,"7817361 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public lab1q3(string str){[/CODE] say(); } [CODE]public int say(){[/CODE] [CODE]return 0;[/CODE] } [CODE]public int helper(){[/CODE] [CODE]return 0;[/CODE] } } [CODE]class ana{[/CODE] [CODE]public static void main(string[] args){[/CODE] lab1q3 s1 = [CODE]new lab1q3(""10001"");[/CODE] lab1q3 s2 = [CODE]new lab1q3(""1111"");[/CODE] } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; [CODE]for (int i = 0;[/CODE] i+1< arr.length; i++){ [CODE]if (arr[i]< arr[i+1]){[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i+1]; arr[i+1] = temp; } } cocktailsort(arr); [CODE]for(int j = 0;[/CODE] j<arr.length; j++){ system.out.pr[CODE]intln(arr[j]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] int s = arr.length-1; [CODE]if(arr[s-2]>arr[s-1]){[/CODE] [CODE]int temp = arr[s-1];[/CODE] arr[s-1] = arr[s-2]; arr[s-2] = temp; straightsort(arr); s--; } } [CODE]public static void straightsort(int[] arr){[/CODE] [CODE]int s = 0;[/CODE] [CODE]if (arr[s]> arr[s+1]){[/CODE] [CODE]int temp = arr[s+1];[/CODE] arr [s+1] = arr[s]; arr[s] = temp; cocktailsort(arr); s++; } } } import java.util.scanner; [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] scanner scan = new scanner(system.in); int i = scan.next[CODE]int();[/CODE] [CODE]int result = collatz(i);[/CODE] system.out.pr[CODE]intln(result);[/CODE] } [CODE]public static int collatz (int i){[/CODE] [CODE]int count = 0;[/CODE] [CODE]if(i== 1){[/CODE] [CODE]return count;[/CODE] } [CODE]else if(i%2 == 0){[/CODE] collatz(i/2); count++; } [CODE]else if (i%2 != 0){[/CODE] collatz(i*3 + 1); count++; } [CODE]return count;[/CODE] } [CODE]public static int sayac(int s){[/CODE] s++; [CODE]return s;[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab3;[/CODE] [CODE]public class muzikcalar {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class main {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class klasiksarki {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class metalsarki {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class rocksarki {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class karisikcalma {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class siralicalma {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class sarki {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class rockcuozelcalma {[/CODE] } [CODE]package lab3;[/CODE] [CODE]public class calmastratejisi {[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursion bir metodun kendini çağırarak farklı katmanlar oluşturması ve bu katmanlar arasında tek tek bir diğerine geçerek işlevini gerçekleştirmesidir. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case metodun sonunda istenen sonuca ulaşılmasında ger katmanda tekrar eden durumdur. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? return içerisinde metodu çağırdıktan sonra harfi print ederek yazardım. charat(n) recursive bir metotta base case olmazsa ne olur? stack overload recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. yeni bir katman açar sonuna ulaştıgında tek tek bu katmanları terk eder. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. optimize çalışmaz.fazla kaynak harcar. tail recursion nedir, kısaca açıklayınız. return'ün içinde sonraki katmana geçişte gereken değişkenin değişimini sağlar. abstraction kavramını açıklayınız. black box. kullanıcının kodun istediğimiz kısımlarını göstermemizi anlatan kavram. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? extends syntax'ı ile kontrol edilir. bir class'ın diğer class'ı içermesini ifade eder. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya b. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? class ilişkileri icinde karışmayı önlemek icin. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır. metot overriding ve overloading kavramlarını açıklayınız. override, bir class'ın miras aldığı başka bir class içindeki aynı isimdeki metodu kullanmak yerine kendi içindeki metodun kullanılmasını ifade eder. overload isimleri aynı ancak parametreleri farklı iki metodu ifade eder. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? method bağlama anlamına gelir. abstraction hangi tür metotlarda [CODE]static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? a dinamik bağlamada jvm'nin görevi nedir? a java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? bilgiler korunamazdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? a java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. örnek olarak public bir method private olarak override edilebilir ancak tersi yapılamaz. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? child display child special dinamik java'da inner class nedir, avantajları nelerdir? class içinde class. kodun düzenlenmesinde avantaj sağlar. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? static olmayanlara diğer class'lardan da ulaşılabilirken statiklere ulaşılabilir. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? anonymous class ismi belli olmayan, yaptıracağımız işi class'ı kurduğumuz an yaptıgımız class'lardır. [CODE]new a{[/CODE]...}.uyguladığımız kod inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet, değiştiremez. verilerin belli düzeyde kullanılabilmesini sağlar. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır. class static olmadığı için içindekilere erişilebilmewi herekir. anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olabilir. inner class'ların içindekilerin adı bellidir, sonradan kullanılabilir. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? public class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? gözlemleyemiyorum. value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? compile edilemez. static class'a ait obje üretilemez. count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 2. exception ve error. run time error out od bound exception exception handlingin amacı nedir? exception'ları giderip kodları çalıstırmak. exception handlingde finally bloğunun amacı nedir? her türlü çalışmasını istediğimiz kodları girdigimiz bölüm. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? a java'da kendi exceptionunuzu nasıl tanımlarsınız? exception e = new ioexception gibi java'da error ve exception arasındaki fark nedir, açıklayınız a java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? belli şartlar altında çalışmasını istediğimiz kodları çalıştırabilmek icin. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? a [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir. exception caught. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught, -1, finally, oops, done bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.scanner; [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] scanner scan = new scanner (system.in); int n = scan.next[CODE]int();[/CODE] parantezbas(n); } [CODE]public static void parantezbas(int n){[/CODE] parantezbas(n,n,n,n); } [CODE]public static void parantezbas(int i, int j, int l,int m){[/CODE] [CODE]if(l!=0){[/CODE] [CODE]if(i>0){[/CODE] system.out.pr[CODE]int(""("");[/CODE] parantezbas(--i,j,l,m); } [CODE]if(j>=0){[/CODE] system.out.pr[CODE]int("")"");[/CODE] parantezbas(i,--j,l,m); } [CODE]if (i == 0 && j == 0){[/CODE] i = --l; j = m-i; parantezbas(i,j,l,m); } } } } import java.util.arraylist; [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] penguin p1 = new penguin(""pingu"",""emperor"",5,12.5); penguin p2 = new penguin(""skipper"",""adelie"",3,9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antartica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(){[/CODE] name = ""willy""; species= ""emperor""; age = 1; weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight){[/CODE] this.name = name; this.species=species; this.age=age; this.weight = weight; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies(){[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setname(string newname){[/CODE] name = [CODE]newname;[/CODE] } [CODE]public void setspecies(string newspecies){[/CODE] species = [CODE]newspecies;[/CODE] } [CODE]public void setage(int newage){[/CODE] age = [CODE]newage;[/CODE] } [CODE]public void setname(double newweight){[/CODE] weight = [CODE]newweight;[/CODE] } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name: "" + name +"" species: ""+ species +"" age: ""+ age + "" weight: ""+ weight);[/CODE] } [CODE]public void hunt(){[/CODE] weight++; } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature){[/CODE] this.location = location; this.temperature=temperature; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public double temperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void setlocation(string newlocation){[/CODE] location= [CODE]newlocation;[/CODE] } [CODE]public void settemperature(double newtemperature){[/CODE] temperature = [CODE]newtemperature;[/CODE] } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.add(penguin); } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""habitat location: ""+ location +""\naverage temperature: ""+ temperature+ ""°c"");[/CODE] [CODE]for(int i= 0;[/CODE] i< penguins.size(); i++){ penguins.get(i).pr[CODE]intpenguin();[/CODE] } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]package quiz2;[/CODE] [CODE]public class latte extends basecoffee {[/CODE] [CODE]public double calculateprice(){[/CODE] return 50.0; } [CODE]public string getcoffeename(){[/CODE] [CODE]return ""latte"";[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args){[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.println(""tüm kahve makineleri tarafından toplam ""+ machine.say() + "" kere üretildi""); // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]package quiz2;[/CODE] [CODE]public class espresso extends basecoffee{[/CODE] private boolean isheated = false; [CODE]public double calculateprice(){[/CODE] return 40.0; } [CODE]public void heatcup(){[/CODE] isheated = true; } [CODE]public string getcoffeename(){[/CODE] [CODE]return ""espresso"";[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] [CODE]public double getcost(){[/CODE] return 6.0; } [CODE]public string getname(){[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]interface coffeeaddon{[/CODE] double getcost(); [CODE]string getname();[/CODE] } [CODE]package quiz2;[/CODE] import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addon){[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string getcoffeename();[/CODE] } [CODE]package quiz2;[/CODE] [CODE]public class americano extends basecoffee {[/CODE] [CODE]public double calculateprice(){[/CODE] return 45.0; } [CODE]public string getcoffeename(){[/CODE] [CODE]return ""americano"";[/CODE] } } [CODE]package quiz2;[/CODE] import java.util.arraylist; [CODE]public class coffeemachine {[/CODE] [CODE]public boolean isheated = false;[/CODE] public double toplamtutar = 0.0; [CODE]int count = 0;[/CODE] [CODE]int m;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon){[/CODE] isheated = false; if ((addon.getname().equals(""milk"") || addon.getname().equals( ""vanilla syrup""))&& coffee.getcoffeename().equals(""espresso"")){ system.out.println(""[uyari] espresso tipi kahveye "" + addon.getname() + "" eklenemez.""); } if ((addon.getname().equals(""double shot"") || addon.getname().equals( ""chocolate""))&& coffee.getcoffeename().equals(""americano"")){ system.out.println(""[uyari] americano tipi kahveye "" + addon.getname() + "" eklenemez.""); } if (addon.getname().equals(""double shot"") && coffee.getcoffeename().equals(""latte"")){ system.out.println(""[uyari] latte tipi kahveye "" + addon.getname() + "" eklenemez.""); } coffee.addons.add(addon); } [CODE]public void makecoffee(basecoffee coffee){[/CODE] system.out.print(""sipariş: "" + coffee.getcoffeename()); [CODE]if(isheated == true){[/CODE] system.out.pr[CODE]intln("" (sıcak fincan) "");[/CODE] } [CODE]for(int i = 0;[/CODE] i < coffee.addons.size() ; i++){ system.out.print("" + "" + coffee.addons.get(i).getname()); toplamtutar = toplamtutar + coffee.addons.get(i).getcost(); } system.out.println(""\ntoplam fiyat: "" + (toplamtutar + coffee.calculateprice())); say(); } [CODE]public void heatespressocup(basecoffee coffee){[/CODE] isheated = false; if(coffee.getcoffeename().equals(""espresso"")){ system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] espresso espresso = (espresso)coffee; espresso.heatcup(); isheated = true; } [CODE]else{[/CODE] system.out.println(""[uyari] yalnızca espresso tipi kahve fincanları ısıtılabilir.""); } } [CODE]public int say(){[/CODE] count++; [CODE]return count;[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class milk implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] return 5.0; } [CODE]public string getname(){[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class doubleshot implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] return 10.0; } [CODE]public string getname(){[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class chocolate implements coffeeaddon{[/CODE] [CODE]public double getcost(){[/CODE] return 7.0; } [CODE]public string getname(){[/CODE] [CODE]return ""chocolate"";[/CODE] } } 1"
6897869,0,"6897869 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package hafta1;[/CODE] [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""10001"";[/CODE] [CODE]string str2 = ""1111"";[/CODE] a a1 = [CODE]new a(str);[/CODE] a a2 = [CODE]new a(str2);[/CODE] system.out.println(a1.say()); system.out.println(a2.say()); } } [CODE]class a {[/CODE] [CODE]string str;[/CODE] [CODE]int count;[/CODE] a() { system.out.pr[CODE]intln(""err"");[/CODE] } a([CODE]string str) {[/CODE] this.str = str; count = 0; } [CODE]public int say() {[/CODE] [CODE]return fun(0);[/CODE] } private [CODE]int fun(int index) {[/CODE] if (index >= str.length()) { [CODE]return 0;[/CODE] } if (str.charat(index) == '1') { [CODE]return 1 + fun(index + 1);[/CODE] } [CODE]else {[/CODE] [CODE]return fun(index + 1);[/CODE] } } } [CODE]package hafta1;[/CODE] [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 4, 2, 1 }; cocktailsort(arr); // *************** [CODE]string str = ""["";[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { str += arr[i] + "",""; } if (arr.length != 0) { str += arr[arr.length - 1]; } str += ""]""; system.out.pr[CODE]intln(str);[/CODE] // ************** } [CODE]public static void cocktailsort(int[] arr) {[/CODE] fun(arr, true); } [CODE]public static void fun(int[] arr, boolean flag) {[/CODE] [CODE]if (flag) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] arr[i] = arr[i] + arr[i + 1]; arr[i + 1] = arr[i] - arr[i + 1]; arr[i] = arr[i] - arr[i + 1]; } } } [CODE]else {[/CODE] for (int i = arr.length - 2; i >= 0; i--) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] arr[i] = arr[i] + arr[i + 1]; arr[i + 1] = arr[i] - arr[i + 1]; arr[i] = arr[i] - arr[i + 1]; } } } [CODE]if (!check(arr)) {[/CODE] fun(arr, !flag); } } [CODE]public static boolean check(int[] arr) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]return false;[/CODE] } } [CODE]return true;[/CODE] } } [CODE]package hafta1;[/CODE] [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]else if (i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz(3 * i + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykırı ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumental"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sıralı çalma"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karışık çalma"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu özel çalma"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal özellikleri :"");[/CODE] [CODE]for (sarki s : sarkilistesi) {[/CODE] [CODE]if (s instanceof metalsarki) {[/CODE] metalsarki m = (metalsarki) s; system.out.println(m.sanatci + "" "" + m.isim + "" [özellik: "" + m.metalozellik + ""]""); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } import java.util.arraylist; import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] arraylist<sarki> [CODE]newlist = new arraylist<>();[/CODE] [CODE]for (sarki s : sarkilistesi) {[/CODE] newlist.add(s); } collections.shuffle([CODE]newlist);[/CODE] [CODE]for (sarki s : newlist) {[/CODE] s.oynat(); } system.out.pr[CODE]intln();[/CODE] } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki s : sarkilistesi) {[/CODE] s.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""şarkı çalıyor"");[/CODE] } } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] if (sarkilistesi.size() > 0) { if (sarkilistesi.get(0) instanceof rocksarki) { system.out.pr[CODE]intln(""[bi̇lgi̇] ses düzeyi: yüksek"");[/CODE] sarkilistesi.get(0).oynat(); } [CODE]else {[/CODE] sarkilistesi.get(0).oynat(); } } [CODE]for (int i = 1;[/CODE] i < sarkilistesi.size(); i++) { sarki bu = sarkilistesi.get(i); sarki evvelki = sarkilistesi.get(i - 1); [CODE]if (bu instanceof rocksarki) {[/CODE] [CODE]if (evvelki instanceof rocksarki) {[/CODE] bu.oynat(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[bi̇lgi̇] ses düzeyi: yüksek"");[/CODE] bu.oynat(); } } [CODE]else {[/CODE] [CODE]if (evvelki instanceof rocksarki) {[/CODE] system.out.pr[CODE]intln(""[bi̇lgi̇] ses düzeyi: normal"");[/CODE] bu.oynat(); } [CODE]else {[/CODE] bu.oynat(); } } } system.out.pr[CODE]intln();[/CODE] } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. kendi kendini çağıran metotlar özyinelemelidir. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. metodun ne zaman kendini çağırmayı bırakıp bir değer döndüreceğini belirleyen koşul. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? stringin 1. indexten itibaren sonuna kadar olan kısmı ile kendini tekrar çağıran, çıktıya stringin ilk karakterini ekleyip döndüren bir metot yazarım. temel koşul string uzunluğu 2 den küçük ise stringin kendisini döndürmesi. recursive bir metotta base case olmazsa ne olur? sonsuz döngüye girer. sürekli yeni metot çağırıldığından stack bellekte yer kalmaz. recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. yeni bir yer ayırılıp stack belleğin tepesine yerleştirilir. metot çalışmayı bitirene kadar hafıza serbest bırakılmaz. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. bellekte çok fazla yer kaplar. yavaş çalışır tail recursion nedir, kısaca açıklayınız. . abstraction kavramını açıklayınız. sınıflandırma. benzer kod parçalarını gruplayıp ortak özelliklerini taşıyan bir üst class oluşturmak. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? bir alt class aynı zamanda ata class dır. subclass is a baseclass. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a,b,object java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? alt class olusturken önce üst class constructor ı çalıştırılmak zorunda. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? mümkün değil. metot overriding ve overloading kavramlarını açıklayınız. overriding üst calss ta tanımlanan fonksiyonu alt class ta değiştirmek. overloading metodun parametre tip yada sayılarını değiştirip yeni metod oluşturmak. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 12.56 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? associating method calls and method implementations. static binding for static and final methods. dynamic binding for others hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? static ve final niteleyicilerle tanımlanan metotlar static binding ile ilişkilendirilir. private da dahil diğer metotlar dynamic binding ile ilişkilendirilir. dinamik bağlamada jvm'nin görevi nedir? program çalışırken çağrılan metodun hangi tanımının kullanılacağına bakmak. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? programlar daha yavaş çalışırdı. nesne değiskenleri üzerinden çağrılan static metotlar farklı davranırdı. java'da down casting explicit şekilde yapılır, bunun nedeni nedir; implicit şekilde yaparsak ne olur? down cast uygulanan nesnenin alt classın bir örneği olup olmadığını kontrol etmemiz gerekir. implicit şekilde yanlıs bir dönüşum yapmaya çalışırsak runtime error ile karşılaşılır. java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. alt class da tekrar yazıla metodun acsess modifier ı üst klasta kullanılandan dar olamaz. protected metod overriding ile [CODE]public tanımlanabilir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov. dinamik bağlama [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? parent tipi referanstan child finksiyonuna erişilmez java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? nesnesi üretilemeyean class tır. içinde abstract metotlar bulunabilir. abstract classların constructor ı olabilir. interfacelerin olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet başka bir abstract class ı genişleten başka bir abstract class ata classın metodunun tanımını içerebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract classların nesnesi oluşturulamaz. abstract metotların sadece başlıkları olur, alt class ta tanımlanırlar. abstract classın tüm alt classlarının metoda sahip olduğundan emin oluruz ama tanımlana kadar tanımlarını bilmeyiz. programcıya böylece kolaylık sağlar abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interface bir class değildir. bir alt class 2 ata classı genişletemez ama 2 veya fazla interface i gerçekleştirebilir. ikiside tip olarak kullanılabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface metot içermez sadece classın belli bir gruba dahil olduğunu belirtir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet. [CODE]interface başka interface yi genisletebilir, extends abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? . [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? . java'da inner class nedir, avantajları nelerdir? başka class içinde tanımlanan classlar statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik inner class bir outer classa bağlı olmadan oluşturulabilir. non static inner class bir outer classa bağımlı olmalı. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? objesi oluşturulurken tanımlanan classlardır. genellikle interface lerden ayrıca abstract nonabstract classlardan oluşturulabilirler. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet erişebilir değiştirebilir. staticse erişemez sadece. programın daha düzenli olmasını sağlar. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? değişken tanımlanabilir. anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olamaz. anonymus class için class dosyası oluşturulmaz, kendi referans tipi olmaz. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? public olanlar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? outer class olusturulmadan inner class oluşturulamaz. hata düzelirse output value :10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? static inner class outer class dan bağımsız olur. düzeltilirse count:5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. runtime errors, örnek null pointer exception. compiler errors, index outofbound exception. locigal errors, programcının yaptığı hatalar. exception handlingin amacı nedir? olağanüstü durumlarda programın düzgün çalışmasını sağlamak. dosya bulunamadığında hata verip devam etmesi gibi. exception handlingde finally bloğunun amacı nedir? hatayla karşılasılsa da karşılasılmasa da çalışacak kod parçasını belirtmek için. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked, catch bloğu ile yakalanıp düzeltmek için bazı işlemler yapılan exceptionlardır. java'da kendi exceptionunuzu nasıl tanımlarsınız? önceden tanımlı bir exception classı extend ederek. en az iki constructor yazmak ve ata classın constructorunu çağırmak uygun olur. java'da error ve exception arasındaki fark nedir, açıklayınız error jvm in temel işlevlerinde meydana gelen programcının genelde düzeltemeyeceği hatalardır. exception olağanüstü durumlarda oluşan düzeltmesi daha basit hatalardır. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? programın daha üst bloğunda düzeltilmedi gerekiyordur. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? ata classın fırlatmadığı bir exceptionu subclsss fırlatamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir. output exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int n = 4;[/CODE] parantezbas(n); } [CODE]public static void parantezbas(int n) {[/CODE] arraylist<[CODE]string> arr = new arraylist<string>();[/CODE] fun("""", n, arr); system.out.pr[CODE]int(""n = "" + n + "" "");[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.size() - 1; i++) { system.out.print(arr.get(i) + "",""); } if (arr.size() != 0) { system.out.print(arr.getlast()); } } private [CODE]static void fun(string str, int n, arraylist<string> arr) {[/CODE] if (str.length() == n * 2) { arr.add(str); } [CODE]else {[/CODE] [CODE]int close = 0;[/CODE] [CODE]int open = n;[/CODE] [CODE]for (int i = 0;[/CODE] i < str.length(); i++) { if (str.charat(i) == '(') { close++; open--; } [CODE]else {[/CODE] close--; } } [CODE]if (open > 0) {[/CODE] fun(str + ""("", n, arr); } [CODE]if (close > 0) {[/CODE] fun(str + "")"", n, arr); } } } } import java.util.arraylist; [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; // constructors [CODE]public penguin() {[/CODE] name = ""willy""; species = ""emperor""; age = 1; weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } // methods [CODE]public void hunt() {[/CODE] weight += 1.0; } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]int(""penguin name:"" + name);[/CODE] system.out.pr[CODE]int("" species:"" + species);[/CODE] system.out.pr[CODE]int("" age:"" + age);[/CODE] system.out.pr[CODE]int("" weight:"" + weight);[/CODE] } // getters [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } // setters [CODE]public void setname(string name) {[/CODE] if (name.length() < 21) { this.name = name; } } [CODE]public void setspecies(string species) {[/CODE] if (species.length() < 101) { this.species = species; } } [CODE]public void setage(int age) {[/CODE] [CODE]if (age < 100) {[/CODE] this.age = age; } } [CODE]public void setweight(double weight) {[/CODE] if (weight < 50.0) { this.weight = weight; } } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double tempreture; private arraylist<penguin> penguins; [CODE]public habitat(string location, double tempreture) {[/CODE] this.penguins = [CODE]new arraylist<penguin>();[/CODE] this.tempreture = tempreture; this.location = location; } [CODE]public void addpenguin(penguin p) {[/CODE] [CODE]if (p != null) {[/CODE] penguins.add(p); } } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""avarage tempreture: "" + tempreture + "" c degrees"");[/CODE] if (penguins.size() > 0) { system.out.pr[CODE]intln(""penguins living here:"");[/CODE] [CODE]for (penguin p : penguins) {[/CODE] p.pr[CODE]intpenguin();[/CODE] system.out.pr[CODE]intln();[/CODE] } } } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettempreture() {[/CODE] [CODE]return tempreture;[/CODE] } [CODE]public arraylist<penguin> getpenguins() {[/CODE] arraylist<penguin> out = [CODE]new arraylist<penguin>();[/CODE] [CODE]for (penguin p : penguins) {[/CODE] out.add(p); } [CODE]return out;[/CODE] } [CODE]public void settempreture(double tempreture) {[/CODE] [CODE]if (tempreture >= -273) {[/CODE] this.tempreture = tempreture; } } [CODE]public void setlocation(string location) {[/CODE] if (location.length() < 101) { this.location = location; } } } [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // p2.hunt(); habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] private double baseprice = 50.0; { type = ""latte""; } @override [CODE]public double calculateprice() {[/CODE] double price = baseprice; system.out.pr[CODE]int(""sipariş: "" + type + "" "");[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] price += addon.getcost(); system.out.print(""+ "" + addon.getname() + "" ""); } system.out.pr[CODE]intln();[/CODE] coffemachine.allcoffees.add(this); [CODE]return price;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffemachine machine = [CODE]new coffemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln();[/CODE] coffemachine.displaytotalcoffees(); } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; private double baseprice = 40.0; { type = ""epresso""; } @override [CODE]public double calculateprice() {[/CODE] double price = baseprice; system.out.pr[CODE]int(""sipariş: espresso "");[/CODE] [CODE]if (isheated) {[/CODE] system.out.pr[CODE]int(""(sıcak fincan) "");[/CODE] } [CODE]for (coffeeaddon addon : addons) {[/CODE] price += addon.getcost(); system.out.print(""+ "" + addon.getname() + "" ""); } system.out.pr[CODE]intln();[/CODE] coffemachine.allcoffees.add(this); [CODE]return price;[/CODE] } [CODE]public void heatcup() {[/CODE] isheated = true; } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] private double price = 6.0; private [CODE]string name = ""vanillasyrup"";[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons; [CODE]string type;[/CODE] basecoffee() { addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] private double baseprice = 45.0; { type = ""americano""; } @override [CODE]public double calculateprice() {[/CODE] double price = baseprice; system.out.pr[CODE]int(""sipariş: "" + type + "" "");[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] price += addon.getcost(); system.out.print(""+ "" + addon.getname() + "" ""); } system.out.pr[CODE]intln();[/CODE] coffemachine.allcoffees.add(this); [CODE]return price;[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] private double price = 5.0; private [CODE]string name = ""milk"";[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] private double price = 10.0; private [CODE]string name = ""doubleshot"";[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] private double price = 7.0; private [CODE]string name = ""chocolate"";[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } } import java.util.arraylist; [CODE]public class coffemachine {[/CODE] [CODE]static arraylist<basecoffee> allcoffees;[/CODE] [CODE]static {[/CODE] allcoffees = [CODE]new arraylist<basecoffee>();[/CODE] } [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] [CODE]if (addon instanceof doubleshot || addon instanceof chocolate) {[/CODE] coffee.addons.add(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.type + "" tipi kahveye "" + addon.getname() + "" eklenemez""); } } [CODE]else if (coffee instanceof latte) {[/CODE] [CODE]if (addon instanceof milk || addon instanceof chocolate || addon instanceof vanillasyrup) {[/CODE] coffee.addons.add(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.type + "" tipi kahveye "" + addon.getname() + "" eklenemez""); } } [CODE]else if (coffee instanceof americano) {[/CODE] [CODE]if (addon instanceof milk || addon instanceof vanillasyrup) {[/CODE] coffee.addons.add(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.type + "" tipi kahveye "" + addon.getname() + "" eklenemez""); } } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] double price = coffee.calculateprice(); system.out.pr[CODE]intln(""toplam fiyat: "" + (int) price + ""tl\n"");[/CODE] } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln(""espresso kahve fincanı ıstıldı"");[/CODE] ((espresso) coffee).heatcup(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } // ??? [CODE]public static void displaytotalcoffees() {[/CODE] system.out.println( ""tüm kahve makinaları tarafından toplam "" + allcoffees.size() + "" kahve üretildi""); } } 0"
1764665,0,"1764665 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class app {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] sayac s1 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); [CODE]int[] arr = {[/CODE] 5, 4, 1, 2}; cocktailsort(arr); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static int collatz(int i){[/CODE] [CODE]if (i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]if (i%2 == 0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]if (i % 2 == 1) {[/CODE] [CODE]return 1 + collatz(i *3 +1);[/CODE] } [CODE]return -1;[/CODE] } [CODE]public static void cocktailsort(int[] arr){[/CODE] cocktailsortdüz(arr); } [CODE]public static void cocktailsortdüz(int[] arr){[/CODE] boolean flag = false; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i + 1];[/CODE] arr[i + 1] = arr[i]; arr[i] = temp; flag = true; } } [CODE]if (flag != false){[/CODE] cocktailsortters(arr); } } [CODE]public static void cocktailsortters(int[] arr) {[/CODE] boolean flag = false; for (int i = arr.length-1; i > 0 ; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i-1]; arr[i-1] = temp; flag = true; } } [CODE]if (flag != false) {[/CODE] cocktailsortdüz(arr); } } } [CODE]public class sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public sayac (string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] [CODE]return recursivesay (str);[/CODE] } [CODE]public int recursivesay (string str){[/CODE] if(str.length() == 0){ [CODE]return 0;[/CODE] } if (str.charat(0) == '1'){ return 1 + recursivesay(str.sub[CODE]string(1));[/CODE] }[CODE]else{[/CODE] return recursivesay(str.sub[CODE]string(1));[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozelilk;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozelilk = metalozellik; } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + isim + ""]"");[/CODE] } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozelilk + "")"");[/CODE] } } import java.util.arrays; import java.util.list; [CODE]public class app {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if (sarki.getclass().getname().equals(""metalsarki"")) { metalsarki song = (metalsarki) sarki; song.gostermetalozellikleri(); } } } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.arraylist; import java.util.list; import java.util.random; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilist = [CODE]new arraylist<sarki>();[/CODE] sarkilist.addall(sarkilistesi); random r = [CODE]new random();[/CODE] while (!sarkilist.isempty()) { int a = r.nextint(0, sarkilist.size()); sarkilist.get(a).oynat(); sarkilist.remove(a); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki curr : sarkilistesi) {[/CODE] curr.oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim, sanatci;[/CODE] [CODE]public abstract void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean rock = false; [CODE]for (sarki curr : sarkilistesi) {[/CODE] if (curr.getclass().getname().equals(""rocksarki"")) { [CODE]if (!rock) {[/CODE] rock = true; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } } [CODE]else {[/CODE] [CODE]if (rock) {[/CODE] rock = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } curr.oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursion yenilemeye dayalı bir problem çözme yöntemidir. bu yöntem problemin belli bir kısmını çözen bir methodun kendini tekrar çağırmasına dayanır. her yeniden çağırma problemi biraz daha çözer. recursive bir methodun parçaları base case recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case problem çözümünde sona gelip gelmediğini kontrol eden kısımdır. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? bios recursive bir metotta base case olmazsa ne olur? stackoverflow hatası ile karşılaşılır. recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. yeni bir stack açılır, bu stack yerel değişkenleri ve önceki adımda nerede kaldığımız gibi bilgileri içerir. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. çünkü tail recursion nedir, kısaca açıklayınız. methodun kendini çağırdığı kısmın sonda olmasıdır. önceki stackte okunacak hiç kod kalmaz abstraction kavramını açıklayınız. konuyu bakış açımıza göre daha basit parçalara ayırma ve bu basit parçalar üzerinden konuyu tanımlamaya denir. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? is a ilişkisi inheritence kavramalı için kullanılır. eğer bir class başka bir classin subclassi ise bu class aynı zamanda üst classdir. yani iki inherit class arasında subclass aynı zamanda superclassdir. ama süper class, subclassdir denemez. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? b olabilir. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü önce süper classlar instance edilir. subclasslar bundan sonra instance olmalıdır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır. metot overriding ve overloading kavramlarını açıklayınız. override, subclassin super class da olan bir methodu yeniden yazmasıdir. override da modifier ve signature superclassla aynıdır. ama overloadda signature farklıdır. overload aynı adda ama farklı parametrede yeni bir method oluşturmaya yarar. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 4pi java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? static ve dinamik binding olarak ikiye ayrılır. method class a özgü ve objesiz calisabiliyorsa static objeye bağımlı ise dinamik olarak adlandırılır. staticler override edilemez dinamikler edilebilir. hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? eğer override edilmesi istenmiyor ve çalışmasi için obje gerekmiyorsa static, eğer her subclass ın bu methodu farklı şekilde çalıştırması gerekiyorsa (override a ihtiyaç varsa) dinamic yapılır. static methodun modifierlari private olamaz. dinamik bağlamada jvm'nin görevi nedir? methodlarin çağırıldigi referans tipine göre doğru override edilmiş methodu getirme java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? matematik sın[CODE]ıfi gibi objesiz çalışması gereken classlar calisamazdi java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? tüm özelliklerin olduğunu garanti etmemiz gerekir o yüzden explicittir. implicit yaparsak runtime error yaşanabilir. java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. evet yapılabilir, ama override edilen methodun modifierlari daraltilamaz. mesela public olan bir method override ile protected yapilamaz. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? parent classı special methoduna sahip değil dolayısıyla p.special çalışmaz. bu satır silinirse, ""parent display"" yazılacaktır. burada dinamik binding var çünkü override yapılmış. java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstrack class içerisinde henüz implement edilmemiş. farklı classlarda farklı şekilde overridelanacak olan methodlar içeren classlara denir. henüz tamamlanmadiklari için obje oluşturmazlar. extend edilip eksik yerlerin tamamlanması gerekir. concrete classlar tamamlamış classlardir ve obje üretebilirler. interfacelerin constructerı olmaz ama abstracklarin olmak zorundadır. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstract classlar abstract classlardan extend edilebilir. abstract bir classdan extend edilmiş bir abstract classda daha önceki classin abstract methodlari implement edilmiş olabilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. polymorphism sağlar. yazılım mimarlarının henüz kod yazilamişken classlarin nasıl çalışacağını planlamasını sağlar. soyutlama yapmaya yarar. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar extend edilerek kullanılır. classlarin tabii olduğu limitler sebebiyle iki classdan extend yapılamaz. interfacelerde böyle bir kısıtlama yoktur. interfaceler önceden hazırlanmış bazı özelliklerin classda eklenmesini sağlar. ikisi de tip olarak kullanılabilir. hatta bunu yapmaya yarayan marker interfaceler kullanilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface o interfacei kullanarak farklı atadan gelen objeleri tutmaya yarar. marker interfaceler kendi icinde kod tutmaz. functional interfaceler daha önceden hazırlanmış bir özelliği koda eklemeye yarar. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden fazla interface implement edebilir. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal calssı abstract bir calssdir obje olarak kullanılamaz. obje üretmek için o class extend edilip abstract methodlari implement edilmelidir. burda animal yerine dog classi obje olarak kullanılırsa sorun giderilir. output: animal: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? compile edilemez. çünkü ata classda move methodu yoktur. java'da inner class nedir, avantajları nelerdir? class içerisinde tanımlanan classa denir. kodun düzenli olması için kullanılabilir. builder class olarak kullanılabilir. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? i̇kisi de üst objeye ihtiyaç duyar. ama static olan inner classdan üretilecek objeye ihtiyaç duymaz. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? tanimlanip tanimlandigi anda tek seferde kullanılan classlara anonymous class denir. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? erişebilirler. dışardaki classlarin görmemesi gereken sadece o iki classla alakalı bilgilerin iletilmesini sağlar. mesela builder classlar bu şekilde çalışır. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? tanımlanabilir anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olamaz. inner classlar isimleri olan tekrar kullanılabilir yapilar iken anonymous classlar isme sahip değildir sadece o kod yapısı içinde tek sefer kulllanilir. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? static classlar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? outer.inner diyerek referans tipi olusturulamaz. i̇nnner class private durumdadır. disardan goruntulenemez. eğer inner class public yapılırsa ve kullanılmadan önce outer class instantiate edilirse çalışır. çıktı: value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? static inner class üst class üzerinden newlenmez. o kısım outer.statici̇nner() şeklinde düzeltilmeli. çıktı: count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. compile time exception örneğin: syntax hataları, runtime exception örneğin: out of bound, logical exception örneğin: yanlış çözüm yolları kullanmak. exception handlingin amacı nedir? exception bir durumla karşılaşıldığında programın çökmesine sebep olmadan sorunu çözmeye yarar exception handlingde finally bloğunun amacı nedir? exception olsa da olmasa da çalışır. her şeyin sonunda o kısım okunur. örneğin aldığımız memoryi geri vermemiz gerekiyorsa bu kısim kullanılır. genel amacı her şeye rağmen çalışması gereken şeylerin exception halinde calismamasina engel olmaktir. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked exception try catch ile yapılır unchecked signatureda belirtilir java'da kendi exceptionunuzu nasıl tanımlarsınız? exception sınıfından extend edilmiş bir class tabimlariz java'da error ve exception arasındaki fark nedir, açıklayınız error bir hata iken exception hata değil kodun çalışmadığı istisnai durumlardır. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? exceptionlar bazı durumların bilgisini aktarmakta da kullanılabilir. bu durumda bunu yapariz 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? var olan exception ya çözülmeli ya da daraltılmalidir exception genisletilemez. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez, arraylist 5 indexinde bir değere sahip değil. i̇ndex azaltılabilir ya da arraylist uzatılabilir. girilen indexteki değer yazdırılır. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class habitat {[/CODE] private [CODE]string location;[/CODE] private arraylist<penguin> penguins = [CODE]new arraylist<penguin>();[/CODE] private double temperature; [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string str) {[/CODE] this.location = str; } [CODE]public double gettemperature() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void settemperature(int str) {[/CODE] this.temperature = str; } [CODE]public arraylist<penguin> getpenguins() {[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setpenguins(arraylist<penguin> liste) {[/CODE] this.penguins = liste; } [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; } [CODE]public void addpenguin(penguin penguin) {[/CODE] penguins.add(penguin); } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temprature: "" + temperature + ""°c"");[/CODE] system.out.pr[CODE]intln(""penguins living here: "");[/CODE] [CODE]for (penguin elem : penguins) {[/CODE] elem.pr[CODE]intpenguin();[/CODE] system.out.pr[CODE]intln();[/CODE] } } } import java.util.arraylist; [CODE]public class app {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] // q1 parantezbas(3); // q2 penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } [CODE]public static void parantezbas(int n) {[/CODE] arraylist<[CODE]string> result = new arraylist<>();[/CODE] parantezac(n, n, """", result); system.out.pr[CODE]intln(result);[/CODE] } [CODE]public static void parantezac(int ac, int kapat, string curr, arraylist<string> result) {[/CODE] [CODE]if (ac == 0 && kapat == 0) {[/CODE] result.add(curr); [CODE]return;[/CODE] } [CODE]if (ac > 0) {[/CODE] parantezac(ac - 1, kapat, curr + ""("", result); } [CODE]if (kapat > ac) {[/CODE] parantezac(ac, kapat - 1, curr + "")"", result); } } } [CODE]public class penguin {[/CODE] private [CODE]string name, species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin() {[/CODE] this.name = ""willy""; this.species = ""emperor""; this.age = 1; this.weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]int(""penguin name: "" + name);[/CODE] system.out.pr[CODE]int("" species: "" + species);[/CODE] system.out.pr[CODE]int("" age: "" + age);[/CODE] system.out.pr[CODE]int("" weight: "" + weight + ""kg"");[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string str) {[/CODE] this.name = str; } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public void setspecies(string str) {[/CODE] this.species = str; } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public void setage(int str) {[/CODE] this.age = str; } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setweight(int str) {[/CODE] this.weight = str; } [CODE]public void hunt() {[/CODE] weight += 1; } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] @override [CODE]public void addaddon(coffeeaddon addon) throws exception {[/CODE] if (addon.getname().equals(""milk"") || addon.getname().equals(""chocolate"") || addon.getname().equals(""vanillasyrup"")) { addons.add(addon); } [CODE]else {[/CODE] throw [CODE]new exception("""");[/CODE] } } @override [CODE]public double calculateprice() {[/CODE] double p = 50; [CODE]for (coffeeaddon elem : addons) {[/CODE] p += elem.getcost(); } [CODE]return p;[/CODE] } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; [CODE]public boolean getheat() {[/CODE] [CODE]return isheated;[/CODE] } @override [CODE]public void addaddon(coffeeaddon addon) throws exception {[/CODE] if (addon.getname().equals(""doubleshot"") || addon.getname().equals(""chocolate"")) { addons.add(addon); } [CODE]else {[/CODE] throw [CODE]new exception("""");[/CODE] } } [CODE]public void heatcup() {[/CODE] isheated = true; } @override [CODE]public double calculateprice() {[/CODE] double p = 40; [CODE]for (coffeeaddon elem : addons) {[/CODE] p += elem.getcost(); } [CODE]return p;[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<coffeeaddon>();[/CODE] [CODE]public void addaddon(coffeeaddon addon) throws exception {[/CODE] this.addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] double p = 45; [CODE]for (coffeeaddon elem : addons) {[/CODE] p += elem.getcost(); } [CODE]return p;[/CODE] } @override [CODE]public void addaddon(coffeeaddon addon) throws exception {[/CODE] if (addon.getname().equals(""milk"") || addon.getname().equals(""vanillasyrup"")) { addons.add(addon); } [CODE]else {[/CODE] throw [CODE]new exception("""");[/CODE] } } } [CODE]public class app {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); system.out.pr[CODE]intln();[/CODE] basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve // uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] system.out.pr[CODE]intln();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln();[/CODE] coffeemachine.sayiyazdir(); // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]public class coffeemachine {[/CODE] [CODE]public static int count;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]try {[/CODE] coffee.addaddon(addon); } [CODE]catch (exception e) {[/CODE] system.out.println( ""[uyari] "" + coffee.getclass().getname() + "" tipi kahveye "" + addon.getname() + "" eklenemez""); } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] count++; double price = coffee.calculateprice(); system.out.print(""sipariş: "" + coffee.getclass().getname()); [CODE]try {[/CODE] espresso espresso = (espresso) coffee; if (espresso.getheat()) { system.out.pr[CODE]int("" (sıcak fincan)"");[/CODE] } } [CODE]catch (exception e) {[/CODE] } for (coffeeaddon elem : coffee.addons) { system.out.print("" + "" + elem.getname()); } system.out.pr[CODE]intln("""");[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]try {[/CODE] espresso espresso = (espresso) coffee; espresso.heatcup(); system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } [CODE]catch (exception e) {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static void sayiyazdir() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar kahve makineleri toplam "" + count + "" kahve uretildi"");[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""doubleshot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 0"
6275288,2,"6275288 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatci + "" "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]public string metalozellik;[/CODE] @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal]"" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } [CODE]public void gostermetalozellik() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { (sarkilistesi.get(i)).oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]public string isim, sanatci;[/CODE] sarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } import java.util.arrays; import java.util.collections; import java.util.list; [CODE]public class q3s1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { system.out.pr[CODE]intln(""the type of this song is huzurlu ve nostaljik"");[/CODE] } if (sarkilistesi.get(i) instanceof metalsarki) { metalsarki a = (metalsarki) sarkilistesi.get(i); system.out.pr[CODE]int(""the type of this song is "");[/CODE] a.gostermetalozellik(); } if (sarkilistesi.get(i) instanceof klasiksarki) { system.out.pr[CODE]intln(""the type of this song is hafif ve sakin"");[/CODE] } } } } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]int a = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { a = i; } } [CODE]if (a == 0) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } [CODE]else {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { [CODE]if (i == a) {[/CODE] sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } [CODE]else {[/CODE] sarkilistesi.get(i).oynat(); } } } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursion metodun içinde kendisini çağırdığımız metod biçimidir. recursive metodun temel kısımları base case ve metod işlemlerinin olduğu kısımlar ve birleştirme aşamasıdır. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case recursive metodu sonlandırmamıza yarayan koşuldur. bu koşulu doğru belirlememiz metodun sonsuz defa çalışmasını önler. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? base case stringin uzunluğuyla ilgili olurdu. her defasında elimizdeki stringin son harfini alırdım ve yazardım. recursive bir metotta base case olmazsa ne olur? base case olmazsa metod sonlanmaz ve çıktı alamazsın. recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. her defasında bir çerçeve açılır. parametreleri ve nerde bulunduğumuz bilgisini tutarız. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. bu konuda fikrim var ama doğru olduğunu düşünmüyorum tail recursion nedir, kısaca açıklayınız. bilmiyorum abstraction kavramını açıklayınız. herkes kendi bakış açısından problemi veya amacı soyutlar. arabanın şöförünün arabaya bakış açısıyla mühendisin bakış açısı aynı değildir. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? i̇nstanceof il kontrol edilir. i̇ki class arasında bağ olup olmadığı görülür. mesela lion classının bir objesi olan lion1 aynı zamanda bir hayvandır. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? default ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a ve c, a is a ve c is a java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? zorunda değildir bence. eğer süper yazmazsak ata classın parametresiz constructoru çalışır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır. metot overriding ve overloading kavramlarını açıklayınız. override ata classta bulunan methodu yavru classta yeniden düzenlemek yeni özellikler eklemek. overload is aynı ada sahip ama farklı parametreler alan methodlar yazmaktır. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? generic generic 8.0 java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class abstract metod içerebilen, kendisinden obje üretilemeyen(concreteden farkı), kendisini extend eden classın (eğer varsa) abstract metodu implement etmesi gereken classtır. constructor bulundurmak zorundadır. abstract metod bulundurmak zorunda değil.i̇nterface ise tamamen abstract olmuş classtır. i̇çine yazılan her metod abstract olmalı. i̇nstance variable final ve static olmalı. constructor bulundurmalı. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? ata classta implement edilmemiş abstract metod yavru classta implement edilebilir. yavru class çok başka bir abstract metod içeriyosa(zorunlu değil abstract keywordü ile declar, define edilmesi yeterli) o da abstract olur. böylece abstract metod abstract classta implement edilmiş olur. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. ortak özelliğin ne olduğunu verir biz o özelliği yavru classta implement ederiz. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interface içinde abstract olmayan metod bulunduramaz. i̇nterface implement edilir. abstract extend. 1 classı extend edersin ama implement için sınır yok. tip olarak kullanılamazlar bence. marker interface ve functional interface kavramları nedir, nasıl kullanılır? . bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet sınırsız implement olabilir. bir interface diğer bir interfacei implement edemez. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal objesi oluşturamazsın çünlü abstract. new animali new dog yaparım. çıktı animal: buddy ve woof olur. [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? i̇nterfacelerde metod implement edilmez. çıktı swimming olur. java'da inner class nedir, avantajları nelerdir? inner class bir başka classın içinde tanımlanan classtır. kodun düzenini arttırır. pizza-builder örneğinde olduğu gibi dışardan müdahaleyi engelleyebilir. public private static olabilir. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? static inner class için outer objesine gerek yok member inner class için var. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? bir classı extend, ya da interfaci implement edip anında kullanan classtır. classı açıp hemen implementasyonu yaparız. ama başka classlar bundan etkilenmez. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet erişebilir çünkü o classın içinde ve final değilse değiştirir. bu inner classları geliştiren bir özellik. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır çünkü static keywordu obje zorunluluğunu kaldırır. ama class static değilse objeye ihtiyacımız var. anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olmaz çünkü obje oluşturmuyoruz. inner classlardan farkı objeleri yok bir classın içinde değiliz. hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? public ve static. [CODE]class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? i̇nner static class olmalı ki obje oluştururken outer class objesine ihtiyaç duymayalım. ve valueyi static yapalım.önemli 10 çıktı. [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? hata yok. 5 output. yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 1-) compile tim error: int i=5 ve int i=6 yazarsak mesela. 2-) runtime error: arrayoutofboundexeption mesela. logical error: mantıksal hatadır. exception handlingin amacı nedir? oluşabilecek hatalara karşı önlem alma ve hatayı engelleme. exception handlingde finally bloğunun amacı nedir? her türlü çalışmasını istediğimiz kod parçasını oraya yazarız o da çalışır. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked excpetionlar için ya declare işlemi ya da handle işlemi yapmalıyız. unchecked exceptionlar için yapmayız. java'da kendi exceptionunuzu nasıl tanımlarsınız? class oluşturup exceptionu extend ederim. java'da error ve exception arasındaki fark nedir, açıklayınız error jvm ile exceptionlar genellikle kullanıcı girişiyle alakalıdır. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? o exceptionun handle işleminin eksiksiz olmasını isteriz belki. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? verdiğimiz hata türünü genişletemeyiz. throws arrayoutofboundexeption verdiysek override sonrası throws exception diyemeyiz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir.hataların kaynağı indexin arrayin sınırınj aşması. hataları düzeltmek için öncelikle catch bloklarının yeri değişmeli. üst alta gelcek şekilde.arrayoutofboundexeption alacağız o yüzden ya arrayin boyutunu arttıralım ya da indexi azaltalım. i̇ndex 4 olursa output 5 olur. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class q1s2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica "", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin {[/CODE] private [CODE]string name, species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setspecies(string species) {[/CODE] this.species = species; } [CODE]public void setage(int age) {[/CODE] this.age = age; } [CODE]public void setweight(double weight) {[/CODE] this.weight = weight; } [CODE]public void hunt() {[/CODE] weight = weight + 1.0; } penguin() { name = ""willy""; species = ""emperor""; age = 1; weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]intln( ""penguin name="" + name + "" species="" + species + "" age="" + age + "" years weight="" + weight + "" kg"");[/CODE] } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double tempereature) {[/CODE] this.location = location; this.temperature = tempereature; penguins = [CODE]new arraylist<>();[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public arraylist<penguin> getpenguins() {[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void settemperature(double temperature) {[/CODE] this.temperature = temperature; } [CODE]public void setpenguins(arraylist<penguin> penguins) {[/CODE] this.penguins = penguins; } [CODE]public void addpenguin(penguin penguin1) {[/CODE] penguins.add(penguin1); } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln(""habitat location="" + location);[/CODE] system.out.pr[CODE]intln(""aberage temperature is="" + temperature);[/CODE] system.out.pr[CODE]intln(""penguens living here are:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < penguins.size(); i++) { penguins.get(i).pr[CODE]intpenguin();[/CODE] } } } [CODE]public class q1s1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); } [CODE]public static void parantezbas(int n) {[/CODE] [CODE]if (n == 1) {[/CODE] system.out.pr[CODE]int(""()"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]int(""("");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int("")"");[/CODE] system.out.pr[CODE]int(""()"");[/CODE] parantezbas(n - 1); } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] [CODE]public double calculateprice() {[/CODE] return 50.0; } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; [CODE]public boolean getter() {[/CODE] [CODE]return isheated;[/CODE] } [CODE]public double calculateprice() {[/CODE] return 40.0; } [CODE]public void heatcup() {[/CODE] isheated = true; } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] return 6.0; } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanillasyrup"";[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] [CODE]public double getcost();[/CODE] [CODE]public string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); coffeemachine.count++; } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] [CODE]public double calculateprice() {[/CODE] return 45.0; } } [CODE]public class coffeemachine {[/CODE] [CODE]public static int count = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if (coffee instanceof espresso && (addon instanceof vanillasyrup || addon instanceof milk)) {[/CODE] system.out.println(""[uyari̇] espresso ti̇pi̇ kahveye "" + addon.getname() + "" eklenemez""); } [CODE]if (coffee instanceof latte && (addon instanceof doubleshot)) {[/CODE] system.out.println(""[uyari̇] latte ti̇pi̇ kahveye"" + addon.getname() + ""eklenemez""); } [CODE]if (coffee instanceof americano && (addon instanceof chocolate || addon instanceof doubleshot)) {[/CODE] system.out.println(""[uyari̇] ameri̇cano ti̇pi̇ kahveye"" + addon.getname() + ""eklenemez""); } [CODE]else {[/CODE] coffee.addaddon(addon); } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof latte) {[/CODE] system.out.pr[CODE]int(""sipariş: latte"");[/CODE] int i = coffee.addons.size(); [CODE]for (int y = 0;[/CODE] y < i; y++) { system.out.print(""+"" + coffee.addons.get(y).getname()); } double z = 0.0; system.out.pr[CODE]intln();[/CODE] [CODE]for (int y = 0;[/CODE] y < i; y++) { z = z + coffee.addons.get(y).getcost(); } z = z + coffee.calculateprice(); system.out.pr[CODE]intln(""toplam fiyat:"" + z);[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]if (coffee instanceof americano) {[/CODE] system.out.pr[CODE]int(""sipariş: americano"");[/CODE] int i = coffee.addons.size(); [CODE]for (int y = 0;[/CODE] y < i; y++) { system.out.print(""+"" + coffee.addons.get(y).getname()); } system.out.pr[CODE]intln();[/CODE] double z = 0.0; [CODE]for (int y = 0;[/CODE] y < i; y++) { z = z + coffee.addons.get(y).getcost(); } z = z + coffee.calculateprice(); system.out.pr[CODE]intln(""toplam fiyat:"" + z);[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]if (coffee instanceof espresso) {[/CODE] if (((espresso) coffee).getter()) system.out.pr[CODE]int(""si̇pari̇s:espresso (sicak fi̇ncan)"");[/CODE] else system.out.pr[CODE]int(""si̇pari̇s:espresso normal"");[/CODE] int i = coffee.addons.size(); [CODE]for (int y = 0;[/CODE] y < i - 1; y++) { system.out.print(""+"" + coffee.addons.get(y).getname()); } system.out.pr[CODE]intln();[/CODE] double z = 0.0; [CODE]for (int y = 0;[/CODE] y < i; y++) { z = z + coffee.addons.get(y).getcost(); } z = z + coffee.calculateprice(); system.out.pr[CODE]intln(""toplam fiyat:"" + z);[/CODE] system.out.pr[CODE]intln();[/CODE] } } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln(""espresso coffee isitildi"");[/CODE] ((espresso) coffee).heatcup(); } [CODE]else {[/CODE] system.out.println(""[uyari]sadece espresso tipi kahve isitilabilir.""); } } [CODE]public void getcount() {[/CODE] system.out.pr[CODE]intln(""bu kadar kahve üreti̇ldi̇:"" + (count - 1));[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 5.0; } [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class mainim {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve // uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln();[/CODE] // burada coffeemachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz machine.getcount(); } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] return 10.0; } @override [CODE]public string getname() {[/CODE] [CODE]return ""doubleshot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 7.0; } [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 2"
6194008,1,"6194008 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.collections; import java.util.list; abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"" );[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilistesitemp = [CODE]new arraylist<>();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesitemp.add(i, sarkilistesi.get(i)); } collections.shuffle(sarkilistesitemp); [CODE]for (int i = 0;[/CODE] i < sarkilistesitemp.size(); i++) { sarkilistesitemp.get(i).oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { [CODE]if (i-1 >= 0) {[/CODE] if (i == sarkilistesi.size()-1 && sarkilistesi.get(i) instanceof rocksarki && sarkilistesi.get(i-1) instanceof rocksarki) { sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln(""ses duzeyi: normal"");[/CODE] } else if (i == sarkilistesi.size()-1 && sarkilistesi.get(i) instanceof rocksarki) { system.out.pr[CODE]intln(""ses duzeyi: yuksek"");[/CODE] sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln(""ses duzeyi: normal"");[/CODE] } else if (sarkilistesi.get(i) instanceof rocksarki && sarkilistesi.get(i-1) instanceof rocksarki ) { sarkilistesi.get(i).oynat(); continue; } else if (sarkilistesi.get(i) instanceof rocksarki) { system.out.pr[CODE]intln(""ses duzeyi: yuksek"");[/CODE] sarkilistesi.get(i).oynat(); } else if (sarkilistesi.get(i-1) instanceof rocksarki) { system.out.pr[CODE]intln(""ses duzeyi: normal"");[/CODE] sarkilistesi.get(i).oynat(); } [CODE]else {[/CODE] sarkilistesi.get(i).oynat(); } } [CODE]else {[/CODE] if (sarkilistesi.get(i) instanceof rocksarki) { system.out.pr[CODE]intln(""ses duzeyi: yuksek"");[/CODE] sarkilistesi.get(i).oynat(); } [CODE]else {[/CODE] sarkilistesi.get(i).oynat(); } } } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. bir metodun kendini tekrar çağırmasıdır. base case recursion gerektirmeyen gerçekleşmesi en kolay olan koşuldur. decompile case de recursion içeren kısımdır. compile case çağrılmasıdır ( benim anladığım.) recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case recursion içermeyen kısımdır ve bu recursiondan çıkmak için gereklidir. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? base case 1 karakter olması olurdu. substring alırdım birden itibaren ve bunu geri metoda koyup recursion yaptırırdım sonra da artı charat 0 derdim. recursive bir metotta base case olmazsa ne olur? recursiondan çıkılamaz sonsuz döngü recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. objeleri falan tutar ve üstteki çizgi falan atılır metod burda fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. çünkü recursion loopa göre daha çok donanım kullanır bu yüzden verimsizdir tail recursion nedir, kısaca açıklayınız. recursionun olduğu case de returnde sadece recursion olmasıdır loopa en kolay döndürülen recurpn tipidir abstraction kavramını açıklayınız. soyutlama demektir. gereksiz bilgili yerleri göstermemedir. (black box) ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? birinin birine extend edilmesi gerekir. (inheritance) diyelim ki a bi class ve b extends a olsun. b is an a olur. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? c olabilir çünkü a c yi kapsar ama b olamaz çünkü a b yi kapsamaz java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? i̇lk önce atadan başlanır çünkü java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? değildir tek bir classı extend edebilir metot overriding ve overloading kavramlarını açıklayınız. method overriding bi classtaki metodun subclasslarında değiştirilmesidir. overloading ise bir metodun ismini falan koruyarak sadece parametrelerini değiştirmedir [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? statik dinamik metot bağlama çeşitlendirmesidir hangi tür metotlarda [CODE]static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? i̇lk baş tanımlanan şeyler static binding, çalıştırıldığında olanlar dinamik dinamik bağlamada jvm'nin görevi nedir? is java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? dk java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? down casting mesela animal animal = new dog() demek de implicit explicit bilmiyorum java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. hayır edilemez [CODE]public ama protected olarak override edilebilir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bağlama [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special silinmeli parent display dinamik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class soyut classtır ve içindeki metotlar tanımlanmadan yazılır. (; ile) constructorları olabilir ama interfacelerin olamax abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? başına abatract yzarak edilebilir abstract metotlar sadece abstract classlarda olur abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. sonradan tanımlamayı (tanımlamayı geciktirmeyi) sağlar i̇nheritance yardımcı oluyor i̇leride metodun yazılacağını garanti eder(sözleşme) abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? i̇nterfaceler bi özelliği belirtirken abstract classlar tam manasıyla soyut classlardır myclass myabstractclass’ın altındaki bi class olsun ve abstract olmasın. myabstract[CODE]class obj1;[/CODE] deyip onu sonradan [CODE]new myclass diyebilitiz marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker boştur functionalin içinde metotlar vardır bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir interface başka bir interface i extend edebilir implement edemez bir class birden çok interface implement edebilir abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal a = [CODE]new animal hatalıdır bunu animal a = new dog diyerek düzeltebiliriz buddy woof interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? duck un süper [CODE]classı yoktur oraya öyle denmez aynı şekilde duckun implemenr ettiği 2 interface vardır o yüzden hangiainden alınacağı bilinemez flyabledan aldırırsak flying java'da inner class nedir, avantajları nelerdir? classın içindeki classtır statik ve statik olmayan (member) inner class arasındaki temel fark nedir? static classa class ismiyle ulaşılabilir tabi outer class yoluyla ama diğer classlara öyle ulaşılamaz anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? bilmiyorum inner classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet ve bu inner [CODE]classların düzenlemeye katkısını açıklar statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır çünkü mantığa aykırı anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? bilmiyorum hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? staticler class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? outer.inner.display olmalıydı value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? outer.new staticinner olmalı outer.inner.showcount olmalı count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. errorlar ve exceptionlar vardır. errorlar handle edilemez exceptionlar handle edilebilir exception handlingin amacı nedir? exceptionları yakalamak ve bunun üzerinden uygun işlemleri gerçekleştirmek exception handlingde finally bloğunun amacı nedir? exception yakalansa da yakalanmasa da çalışan bir bloktur bu işlemler için kullanılır java'da 'checked' ve 'unchecked' exceptionların farkı nedir? birinde metoda throws exception türü yazılır ama öbüründe gerek yoktur (checked da gerek yoktur) java'da kendi exceptionunuzu nasıl tanımlarsınız? extends denir ve özellik belirtilir [CODE]classın içinde java'da error ve exception arasındaki fark nedir, açıklayınız error handle edilemez ama exception handle edilebilir java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? daha sonraki bi basamakta handle edilmesini sağlamak (geciktirmek) 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? error throws yazılamaz ve checkedleri throws yazılamaz static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir ama exception out of bounds olmasına rağmen normal exception [CODE]catch ine girer array out of bounds catch ine girmesi gerekirken hatayı catch exception la catch array index out of bounda exceptionun yerini değiştirerek düzeltebiliriz ve düzeltilmiş sonuç “array exception caught” olur static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(""antarctica"",-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins = [CODE]new arraylist<penguin>();[/CODE] [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void setlocation(string location1) {[/CODE] location = location1; } [CODE]public void settemperature(double temperature1) {[/CODE] temperature = temperature1; } [CODE]public void addpenguin(penguin penguin) {[/CODE] penguins.add(penguin); } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.err.pr[CODE]intln(""average temperature: "" + temperature);[/CODE] system.out.pr[CODE]intln(""penguins living here: "");[/CODE] [CODE]for (int i = 0;[/CODE] i < penguins.size(); i++) { system.out.println(""penguin name: "" + (penguins.get(i)).getname() + "" species: "" + (penguins.get(i)).getspecies() + "" age: "" + (penguins.get(i)).getage() + "" years"" + "" weight: "" + (penguins.get(i)).getweight() + "" kg""); } } } [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin() {[/CODE] name = ""willy""; species = ""emperor""; age = 1; weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public void hunt() {[/CODE] weight = weight+1; } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] system.out.pr[CODE]intln(species);[/CODE] system.out.pr[CODE]intln(age);[/CODE] system.out.pr[CODE]intln(weight);[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name1) {[/CODE] name = name1; } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public void setspecies(string species1) {[/CODE] species = species1; } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public void setage(int age1) {[/CODE] age = age1; } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setweight(double weight1) {[/CODE] weight = weight1; } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); } [CODE]public static void parantezbas(int n) {[/CODE] [CODE]string a = """";[/CODE] parantezbas1(n,a); } [CODE]public static void parantezbas1(int n, string a) {[/CODE] if (a.length() == n*2) { system.out.pr[CODE]intln(a);[/CODE] } [CODE]int acma = 0;[/CODE] [CODE]int kapama = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < a.length(); i++) { if (a.charat(i) == '(') { acma++; } [CODE]else {[/CODE] kapama++; } } if (acma > kapama && n*2 - a.length() <= acma) { a = a + ')'; parantezbas1(n, a); } [CODE]else {[/CODE] [CODE]string temp = a;[/CODE] a = a + ')'; parantezbas1(n, a); parantezbas1(n, temp); } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 import java.util.arraylist; [CODE]interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } [CODE]class milk implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } [CODE]class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]class doubleshot implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } abstract [CODE]class basecoffee {[/CODE] protected arraylist<coffeeaddon> addon = [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addons) {[/CODE] addon.add(addons); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]class espresso extends basecoffee {[/CODE] private boolean isheated = false; @override [CODE]public double calculateprice() {[/CODE] [CODE]int totaladdonsprice = 0;[/CODE] [CODE]for (coffeeaddon a : addon) {[/CODE] totaladdonsprice += a.getcost(); } [CODE]return 40 + totaladdonsprice;[/CODE] } [CODE]public void heatcup() {[/CODE] isheated = true; } [CODE]public boolean getisheated() {[/CODE] [CODE]return isheated;[/CODE] } } [CODE]class latte extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int totaladdonsprice = 0;[/CODE] [CODE]for (coffeeaddon a : addon) {[/CODE] totaladdonsprice += a.getcost(); } [CODE]return 50 + totaladdonsprice;[/CODE] } } [CODE]class americano extends basecoffee {[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int totaladdonsprice = 0;[/CODE] [CODE]for (coffeeaddon a : addon) {[/CODE] totaladdonsprice += a.getcost(); } [CODE]return 45 + totaladdonsprice;[/CODE] } } [CODE]class coffeemachine {[/CODE] [CODE]static int toplamkahveuretimi = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addons) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] [CODE]if (addons instanceof doubleshot || addons instanceof chocolate) {[/CODE] coffee.addaddon(addons); } [CODE]else {[/CODE] system.out.println(""[uyari] ""+ coffee.getclass() + "" tipi kahveye "" + addons.getname() + "" eklenemez""); } } [CODE]else if (coffee instanceof latte) {[/CODE] [CODE]if (addons instanceof vanillasyrup || addons instanceof chocolate || addons instanceof milk) {[/CODE] coffee.addaddon(addons); } [CODE]else {[/CODE] system.out.println(""[uyari] ""+ coffee.getclass() + "" tipi kahveye "" + addons.getname() + "" eklenemez""); } } [CODE]else if (coffee instanceof americano) {[/CODE] [CODE]if (addons instanceof milk || addons instanceof vanillasyrup) {[/CODE] coffee.addaddon(addons); } [CODE]else {[/CODE] system.out.println(""[uyari] ""+ coffee.getclass() + "" tipi kahveye "" + addons.getname() + "" eklenemez""); } } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] toplamkahveuretimi++; [CODE]string ab = """";[/CODE] for (coffeeaddon a : coffee.addon) { ab += "" + "" + a.getname(); } [CODE]if (coffee instanceof espresso) {[/CODE] if (((espresso) coffee).getisheated() == true) { system.out.pr[CODE]intln(""sipariş: espresso (sıcak fincan)"" + ab);[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""sipariş: espresso"" + ab);[/CODE] } } [CODE]else if (coffee instanceof latte) {[/CODE] system.out.pr[CODE]intln(""sipariş: latte"" + ab);[/CODE] } [CODE]else if (coffee instanceof americano) {[/CODE] system.out.pr[CODE]intln(""sipariş: americano"" + ab);[/CODE] } system.out.println(""toplam fiyat: "" + coffee.calculateprice() + ""tl""); system.out.pr[CODE]intln();[/CODE] } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] ((espresso) coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static void totalcoffee() {[/CODE] system.out.pr[CODE]intln(""tüm kahve makineleri tarafindan toplam "" + toplamkahveuretimi + "" kahve üretildi"");[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] coffeemachine.totalcoffee(); } } 1"
3659398,1,"3659398 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k]"" + sanatci + ""-"" + isim + "" (hafif ve sakin)"");[/CODE] } } import java.util.*; [CODE]public class muzikcalarsorusu {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal]"" + sanatci + ""-"" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock]"" + sanatci + ""-"" + isim + "" (huzurlu ve atmosferik)"");[/CODE] } } import java.util.*; [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean[] arr = { false, false, false, false, false }; [CODE]for (int i = 0;[/CODE] i < 5; i++) { int a = (int) (math.random() * 5); [CODE]if (arr[a] == false) {[/CODE] sarkilistesi.get(a).oynat(); arr[a] = true; } [CODE]else i--;[/CODE] } } } import java.util.*; [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.*; [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (i == 0 && sarkilistesi.get(i) instanceof rocksarki) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } [CODE]if (i != 0) {[/CODE] if (sarkilistesi.get(i - 1) instanceof rocksarki && !(sarkilistesi.get(i - 1) instanceof rocksarki)) system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } [CODE]if (i != 0) {[/CODE] if (sarkilistesi.get(i) instanceof rocksarki && !(sarkilistesi.get(i) instanceof rocksarki)) system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal\r"");[/CODE] } sarkilistesi.get(i).oynat(); } } } import java.util.*; [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursion ozyinelemedir. döngü içinde döngü mantığına benzer. 3 kısımdan oluşur. bunlardan ilki base case: stack overflow olmasını engeller bizim onkosulumuzdur. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case stack overflow olmasını engelleyen temel koşulumuzdur. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? base case str.length() == 1 şeklinde if statement olurdu. stringin ilk harfini alır geri kalanını tersten yazdirmasjni sagliyacak bir recursive metod yazardım. recursive bir metotta base case olmazsa ne olur? stack overflow recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. stack memory de üst üste yerler açılır ve en üstteki kapanmaya başladığında sırasıyla hepsi kapanır. fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. çünkü fibonaccide recursive mthodta iki bilinmeyen olacağından stack memoryde oldukça yer kaplar ve verimli olmaz. tail recursion nedir, kısaca açıklayınız. . abstraction kavramını açıklayınız. soyutlama demek komleksiteyi azaltmak için ve güvenlik için kullanıyoruz. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? i̇s a ilişkisi inheritance için kullanılır bir class diğerinin genellikle atasidir. totoloji de olabilir. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? default ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? c ve a java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü ilk önce ata classlar tanımlanmalıdır java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır metot overriding ve overloading kavramlarını açıklayınız. overriding aynı signature ama işlev değişir overload farklı signature (parametreler farklı) aynı dönüş için kullanılır. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? animal \t generic animal sound [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle \t 8 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? bağlama anlamına geliyor 2 çeşit bağlama vardır static ve dynamic early compile zamanı çalışır dynamic run time zamanı çalışır makinenin karar mekanizması içindir. hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? static metodlar olduğunda static binding uygulanır override olduğunda dynamic bindic kullanilir. dinamik bağlamada jvm'nin görevi nedir? hangi methodun kullanılacağına karar verir. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? efekt[CODE]if olmazdi java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? çünkü downcast edildiginde override edilmiş bir metodda çocuk classin özelliklerini taşıması için açık bir şekilde downcast edilir. java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. kümeleme olarak aşağı gidilebilir yani public bir method protected override edilebilir ama tam tersi mümkün değildir. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? child display child special output olur burada override olduğundan dinamiktir java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class soyut sınıf anlamına gelir concrete classtan farkı objesini olusturamamaktir abstrac classin constructreri olabilir interfacin olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. objeleri olusturulmaz. metotlar implement edilmesi kendi class içinde. override etmek zorunludur. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class extend edilir interfaceler implement edilir ve abstract classin constructreri olurkeen interfacin olmaz. i̇kisinde de obje olusturulamaz marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface içinde method olmayan boş interfacelere denir functional interface sadece 1 tane abstract methodu olan interfacelere denir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? i̇lki evet ikinisi hayır implement etmez extend eder. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal obje olusturamaz onun yerien dog diye olusuturlmasi gerekiuro. output:animal buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? edilmez çünkü ata class yokken süper çağrılmış. ve iki interface de move diye defaultethod girilmiş bu methodlarin ismi değişmeli ya da ikisinden biri implement edilmemeli öyle bir durumda swimming ya da flying outputu cikacaktir java'da inner class nedir, avantajları nelerdir? i̇nner class class içine class yazmaktır birincil amacı daha duzgun bir kod yazmaktır. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik class outer classin instance a bağlı olmadan çalışabilir ve erisilirebilir. anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? bir classi newleyip metodları override ederek bir blok içerisinde yazıldığında isimsiz class üretilir. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? outer innera erişebilir inner outera erisemez statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? tanımlanamaz çünkü static olması bağımsız olması anlamına gelir ama class static olmadan outer classa bağlı olduğundan static tanımına aykırıdır. anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? constructor olmaz. i̇nner [CODE]classtan farkı constructor olmaması ve bağımsız bir class olmasidir hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? public inner classlar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? outer [CODE]classta private değişken tanımlanmış public olmalı ve çıktı olarka value 10 class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? static inner class static değilmiş gibi çağrılmış compile edilmez. sonuç olarak count 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. compile error örnek olarak tanımlanmamış bir değişken kullanımı olabilir. runtime error array out of index olabilir. ve logical errors yanlış algoritma kullanımı olmak üzere 3 tane hata türü vardır. exception handlingin amacı nedir? oluşabilecek istisnai hataları kontrol etmek. exception handlingde finally bloğunun amacı nedir? exception olsun olmasın execute edilmesini sağlar icindekinin. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked compile zamanı oluşan exceptionlardir unchecked exceptionlar runtime zamanı oluşan exceptionlardir. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception sınıfından ya da throwable sınıfından extend ettiğim bir class olustururum ve super(mesaj) şeklinde atasını implement ederim. java'da error ve exception arasındaki fark nedir, açıklayınız error sistem düzeyindeki haftalardır exceptionlar compile ve runtime hatalaridir. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? bu şekilde daha üste atılır ve üstte işlem gormeisni sağlar. method dışı ya da class dışı. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? ata sinifindan extend edildiyse daha genel bir hata oluşturamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? array exception caught çıktı olur. dizi indeksi 0dan baslamalkdir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.*; [CODE]public class penguinhabitat {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(""antartica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]public class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; this.penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void setname(string location) {[/CODE] this.location = location; } [CODE]public void settemperature(double temperature) {[/CODE] this.temperature = temperature; } [CODE]public void addpenguin(penguin penguin) {[/CODE] penguins.add(penguin); } [CODE]public void printhabitat() {[/CODE] [CODE]for (int i = 0;[/CODE] i < penguins.size(); i++) system.out.println(penguins.get(i).pr[CODE]intpenguin());[/CODE] } } [CODE]public class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin() {[/CODE] this.setname(""willy""); this.setspecies(""emperor""); this.setage(1); this.setweigth(5.0); } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.weigth = weight; this.age = age; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweigth() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setspecies(string species) {[/CODE] this.species = species; } [CODE]public void setage(int age) {[/CODE] this.age = age; } [CODE]public void setweigth(double weigth) {[/CODE] this.weigth = weigth; } [CODE]public void hunt() {[/CODE] setweigth(weight + 1); } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]intln(getname());[/CODE] system.out.pr[CODE]intln(getspecies());[/CODE] system.out.pr[CODE]intln(getage());[/CODE] system.out.pr[CODE]intln(getweigth());[/CODE] } } import java.util.*; [CODE]public class parantez {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner klavye = new scanner(system.in); parantez obj = [CODE]new parantez();[/CODE] obj.parantezbas(klavye.next[CODE]int());[/CODE] } [CODE]public void parantezbas(int n) {[/CODE] if (n == 0) system.out.pr[CODE]int("""");[/CODE] if (n == 1) system.out.pr[CODE]int(""()"");[/CODE] [CODE]if (n == 2) {[/CODE] system.out.pr[CODE]int(""()"");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int(""("");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int("")"");[/CODE] } [CODE]if (n > 2) {[/CODE] system.out.pr[CODE]int(""()"");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int(""("");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int("")"");[/CODE] parantezbas(n - 1); system.out.pr[CODE]int(""()"");[/CODE] } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class kahve {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] // burada coffeemachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz coffeemachine.numofcoffes(); } } [CODE]public class latte extends basecoffee {[/CODE] [CODE]public latte() {[/CODE] super(); } [CODE]public double calculateprice() {[/CODE] double res = 50; [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { res = res + addons.get(i).getcost(); } [CODE]return res;[/CODE] } [CODE]public void getcoffe() {[/CODE] system.out.pr[CODE]int(""siparişiniz: latte"");[/CODE] [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { system.out.print("" + "" + addons.get(i).getname()); } system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + calculateprice());[/CODE] } [CODE]public string getcoffename() {[/CODE] [CODE]return ""latte"";[/CODE] } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated; [CODE]public espresso() {[/CODE] super(); isheated = false; } [CODE]public double calculateprice() {[/CODE] double res = 40; [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { res = res + addons.get(i).getcost(); } [CODE]return res;[/CODE] } [CODE]public void heatcup() {[/CODE] isheated = true; } [CODE]public void getcoffe() {[/CODE] if (isheated) system.out.pr[CODE]int(""siparişiniz: espresso (sıcak fincan)"");[/CODE] else system.out.pr[CODE]int(""siparişiniz: espresso"");[/CODE] [CODE]for (int i = 0;[/CODE] i < addons.size(); i++) { system.out.print("" + "" + addons.get(i).getname()); } system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + calculateprice());[/CODE] } [CODE]public string getcoffename() {[/CODE] [CODE]return ""espresso"";[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 6.0; } [CODE]public string getname() {[/CODE] [CODE]return ""vanillasyrup"";[/CODE] } } [CODE]interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.*; abstract [CODE]class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons; [CODE]public basecoffee() {[/CODE] this.addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string getcoffename();[/CODE] [CODE]public abstract void getcoffe();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] [CODE]public americano() {[/CODE] super(); } [CODE]public double calculateprice() {[/CODE] double res = 45; [CODE]for(int i = 0;[/CODE] i < addons.size(); i++) { res = res + addons.get(i).getcost(); } [CODE]return res;[/CODE] } [CODE]public void getcoffe() {[/CODE] system.out.pr[CODE]int(""siparişiniz: americano"");[/CODE] [CODE]for(int i = 0;[/CODE] i < addons.size(); i++) { system.out.print("" + "" + addons.get(i).getname()); } system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + calculateprice());[/CODE] } [CODE]public string getcoffename() {[/CODE] [CODE]return ""americano"";[/CODE] } } [CODE]public class coffeemachine {[/CODE] private [CODE]static int coffees = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) {[/CODE] if (((coffee instanceof espresso) && (adddon instanceof milk || adddon instanceof vanillasyrup)) || (coffee instanceof latte && adddon instanceof doubleshot) || ((coffee.getcoffename().equals(""americano"")) && (adddon instanceof chocolate || adddon instanceof doubleshot))) { system.out.println(""[uyari] "" + coffee.getcoffename() + "" kahveye "" + adddon.getname() + "" eklenemez.""); } else coffee.addaddon(adddon); } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] coffee.getcoffe(); addcoffe(); } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] espresso a = (espresso) coffee; a.heatcup(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static void numofcoffes() {[/CODE] system.out.pr[CODE]intln(""tüm kahve makinelerinde "" + coffees + "" üretilmiştir"");[/CODE] } [CODE]public void addcoffe() {[/CODE] coffees++; } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 5.0; } [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 10.0; } [CODE]public string getname() {[/CODE] [CODE]return ""doubleshot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] return 7.0; } [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 1"
6094496,2,"6094496 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package lab1111;[/CODE] [CODE]public class cocktailshaker {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5, 4, 1, 2}; cocktailsort(arr); system.out.pr[CODE]intln(""ouput:"");[/CODE] pr[CODE]intarray(arr);[/CODE] } [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktailrecursive(arr, 0, arr.length - 1); } private [CODE]static void cocktailrecursive(int[] arr, int baslangic, int bitis) {[/CODE] [CODE]if (baslangic >= bitis) {[/CODE] [CODE]return;[/CODE] } boolean changed = false; [CODE]for (int i = baslangic;[/CODE] i < bitis; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] change(arr, i, i + 1); changed = true; } } [CODE]if (!changed) {[/CODE] [CODE]return;[/CODE] } changed = false; [CODE]for (int i = bitis - 1;[/CODE] i > baslangic; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] change(arr, i, i - 1); changed = true; } } cocktailrecursive(arr, baslangic + 1, bitis - 1); } private [CODE]static void change(int[] arr, int i, int j) {[/CODE] [CODE]int x = arr[i];[/CODE] arr[i] = arr[j]; arr[j] = x; } private [CODE]static void printarray(int[] arr) {[/CODE] [CODE]for (int num : arr) {[/CODE] system.out.pr[CODE]int(num + "" "");[/CODE] } system.out.pr[CODE]intln();[/CODE] } } [CODE]package lab1111;[/CODE] [CODE]public class stringsay {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]package lab1111;[/CODE] [CODE]public class sayac {[/CODE] private [CODE]string string;[/CODE] [CODE]public sayac(string string) {[/CODE] this.[CODE]string = string;[/CODE] } [CODE]public int say() {[/CODE] return sayacbir(string, string.length() - 1); } private [CODE]int sayacbir(string string, int sira) {[/CODE] [CODE]if (sira < 0) {[/CODE] [CODE]return 0;[/CODE] } if (string.charat(sira) == '1') { [CODE]return 1 + sayacbir(string, sira - 1);[/CODE] } [CODE]else {[/CODE] [CODE]return sayacbir(string, sira - 1);[/CODE] } } } [CODE]package lab1111;[/CODE] [CODE]public class lab1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int x = 7;[/CODE] system.out.pr[CODE]intln (collatz(x));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]if (i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz((3 * i) + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab1111;[/CODE] import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; // çalma stratejisini ayarla [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } // seçilen stratejiye göre şarkıları çal [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else {[/CODE] system.out.println(""çalma stratejisi belirleyin!.""); } } } [CODE]package lab1111;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farklı türde şarkılar oluşturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykırı ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrümantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // şarkılar çalma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // müzik çalar nesnesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sıralı çalma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karışık çalma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu özel çalma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal şarkıların özelliklerini göster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]package lab1111;[/CODE] [CODE]public class klasiksarki extends sarki{[/CODE] private [CODE]string klasikozellik = (""hafif ve sakin"");[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" ("" + klasikozellik + "")"");[/CODE] } } [CODE]package lab1111;[/CODE] [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); // sarki classından this.metalozellik = metalozellik; } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln("" sanatci "" + sanatci +"" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]package lab1111;[/CODE] [CODE]public class rocksarki extends sarki {[/CODE] private [CODE]string rockozellik = (""huzurlu ve nostaljik"");[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" ("" + rockozellik + "")"");[/CODE] } } [CODE]package lab1111;[/CODE] import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] system.out.pr[CODE]intln(""şarkılar karışık bir şekilde çalınacak !"");[/CODE] collections.shuffle(sarkilistesi); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]package lab1111;[/CODE] import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] system.out.pr[CODE]intln(""şarkılar sıralı bir şekilde çalacak!"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]package lab1111;[/CODE] [CODE]public abstract class sarki {[/CODE] protected [CODE]string isim;[/CODE] protected [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]package lab1111;[/CODE] import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] system.out.pr[CODE]intln(""rock şarkılar için özel şarkı listesi çalınacak!"");[/CODE] boolean isrock = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] system.out.pr[CODE]intln(""ses seviyesi : yüksek"");[/CODE] sarki.oynat(); isrock = true; } [CODE]else {[/CODE] [CODE]if (isrock) {[/CODE] system.out.pr[CODE]intln(""ses seviyesi normale döndü"");[/CODE] } sarki.oynat(); isrock = false; } } } } [CODE]package lab1111;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } abstraction kavramını açıklayınız. javada tanımladığımız nesnelerin bazı özelliklerini gözardı etmemize abstraction denir. soyutlama da denir dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? - protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? - java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? olabilir. bir classın iki tane parent classı olabilir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? b a'nın parent classıdır veya base classıdır metot overriding ve overloading kavramlarını açıklayınız. - [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static binding overloading;[/CODE] dynamic binding override zamanı kullanılır java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? static baktığımızda override edilemez. private kendi sınıfına özel o da override edilemez. final değiştirilemez o yüzden override edilemez. o yüzden static binding ile bağlanır overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading yaparken static override yaparken dynamic bining dinamik bağlamada jvm'nin görevi nedir? nesnenin türünü belirlemek ve ona uygun metotu call etmek java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? upcast yapacağımızda daha genel bir şeye çeviriyoruz. down castte durum farklı. daha özel bir şeye çeviriyoruz. down castte implicit bir şekilde yapamayız java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? -- [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dynamic bağlama ( override) [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? javada abstract classlar hem gövdeli hem gövdesiz metodlar barındırabilir. concrete classların tüm metotların gövdesi olan tanımlanmış ve nesne oluşturabilen bir sınıftır. i̇nterfacelerin constructorları yoktur. çünkü nesne oluşturamazlar. abstract classların vardır abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır edilemez. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. soyutluk sağlarlar. ortak özellikleri bir arada tutarlar. kendinden türetilen sınıfların farklılaşmasını kolaylaştırır. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? extends ve implents temel farklardır yani biri genişletmek biri ise uygulamak için kullanılır. tip olarak kullanılabilir ama referans görevi görür bizim için marker interface ve functional interface kavramları nedir, nasıl kullanılır? --- bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden çok interfaceyi implement edebilir. bir interface başka bir interface i implent edemez extend edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? shape c = [CODE]new circle();[/CODE] yazsaydık düzelirdi hatadan sonra drawing circle displaying çıktısı alırız [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? hocam hatayı bulamadım ama çıktı a olur. bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package lab1111;[/CODE] [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 0 ile 100 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean operational) {[/CODE] this.isoperational = operational; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + "" isoperational: "" + isoperational);[/CODE] } } [CODE]package lab1111;[/CODE] [CODE]public class ana {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory(r1);[/CODE] factory.pr[CODE]intfactory(r2);[/CODE] factory.pr[CODE]intfactory(r3);[/CODE] } } [CODE]package lab1111;[/CODE] import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public void factory(string name, string location) {[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public void factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); // robots arrayine ekliyoruz } [CODE]public void chargeallrobots(robot robot) {[/CODE] robot.charge(); } [CODE]public void work(robot robot1) {[/CODE] int newbatterylevel = robot1.getbatterylevel() - 15; [CODE]if (newbatterylevel < 0) {[/CODE] [CODE]newbatterylevel = 0;[/CODE] // 0 ın altına inerse şarjı 0 döndürür } } [CODE]public void printfactory(robot robot3) {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name);[/CODE] system.out.pr[CODE]intln(""factory location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots in factory:"");[/CODE] robot3.pr[CODE]introbot();[/CODE] } } [CODE]package lab1111;[/CODE] [CODE]public class test {[/CODE] [CODE]public static void kontrol(char[] a, int index) {[/CODE] if (index == a.length) { system.out.pr[CODE]int(new string(a));[/CODE] } char character = a[index]; [CODE]if ((character >= 'a' && character <= 'z') || (character >= 'a' && character <= 'z')) {[/CODE] a[index] = character.tolowercase(character); //küçükse kontrol(a, index + 1); a[index] = character.touppercase(character); //büyükse kontrol(a, index + 1); } [CODE]else {[/CODE] // rakamsa eğer devam eder kontrol(a, index + 1); } } [CODE]public static void print(string str) {[/CODE] kontrol(str.tochararray(), 0); } [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] pr[CODE]int(s);[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package lab1111;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] // batarya ömrünü döndürür [CODE]void recharge();[/CODE] // bataryayı yeniler } [CODE]package lab1111;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] system.out.println(modelname + "" recharged to full battery.""); } [CODE]public abstract void performtask();[/CODE] } [CODE]package lab1111;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\nrobot sayımızı gösteriyoruz"");[/CODE] anotherfactory.showrobotsayac(); // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]package lab1111;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; //robotun silahlı olup olmadığını tutuyoruz [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public boolean geti̇sarmed() {[/CODE] [CODE]return isarmed;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10) {[/CODE] system.out.println(modelname + ""scanning for threats..."" + ""armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(modelname + ""not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } } [CODE]package lab1111;[/CODE] [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] // robotun temizlik gücü [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10) {[/CODE] system.out.println(modelname + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(modelname + "" not enough battery to scan threats...""); } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] this.cleaningpower += miktar; system.out.pr[CODE]intln(modelname + "" cleaning power boosted by "" + miktar);[/CODE] } } [CODE]package lab1111;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private [CODE]static int robotsayac = 0;[/CODE] private arraylist<abstractrobot> robots; // üretilen robotları saklar [CODE]public robotfactory() {[/CODE] this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot robot = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add(robot); robotsayac++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed ) {[/CODE] securityrobot robot = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add(robot); robotsayac++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] system.out.println(""cleaningrobot - model: "" + robot.getmodelname() + "", battery: "" + robot.getbatterylife() + "", cleaning power: "" + ((cleaningrobot) robot).getcleaningpower()); } [CODE]else if (robot instanceof securityrobot) {[/CODE] system.out.println(""securityrobot model: "" + robot.getmodelname() + "", battery: "" + robot.getbatterylife() + "", armed: "" + ((securityrobot) robot).geti̇sarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(miktar); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); } } } [CODE]public void showrobotsayac() {[/CODE] system.out.pr[CODE]intln(""tüm fabrikalar tarafından toplam"" + robotsayac + "" robot üretildi"");[/CODE] } } //+ ((securityrobot) robot).isarmed 2"
7732416,1,"7732416 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] system.out.pr[CODE]intln();[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); system.out.pr[CODE]intln();[/CODE] [CODE]int[] ornek = {[/CODE]5,4,1,2} ; cocktailsort(ornek); [CODE]for (int arrs : ornek){[/CODE] system.out.pr[CODE]intln(arrs);[/CODE] } } [CODE]public static int collatz(int i){[/CODE] [CODE]if (i == 1){[/CODE] [CODE]return 0 ;[/CODE] } [CODE]if (i % 2 == 0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]return 1 + collatz(3*i + 1);[/CODE] } [CODE]public static void cocktailsort(int[] arr){[/CODE] [CODE]int direction = 1 ;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { [CODE]if (i%2 == 0) direction = 1 ;[/CODE] [CODE]else direction = -1 ;[/CODE] ekstra(arr,direction); } } private [CODE]static void ekstra(int[] arr, int direction){[/CODE] [CODE]if (direction == 1) {[/CODE] [CODE]for (int i = 0, j = 1;[/CODE] j < arr.length; i++, j++) { [CODE]if (arr[i] > arr[j]){[/CODE] [CODE]int temp = arr[i] ;[/CODE] arr[i] = arr[j] ; arr[j] = temp ; } } } [CODE]if (direction == -1){[/CODE] for (int i = arr.length-2, j = arr.length-1; i > 0 ; i--, j--) { [CODE]if (arr[i] > arr[j]){[/CODE] [CODE]int temp = arr[i] ;[/CODE] arr[i] = arr[j] ; arr[j] = temp ; } } } } } [CODE]public class sayac {[/CODE] [CODE]string s ;[/CODE] [CODE]public sayac(string s) {[/CODE] this.s = s; } [CODE]public int say(){[/CODE] return yardimci(this.s.length()-1,this.s); } private [CODE]static int yardimci(int index, string s){[/CODE] [CODE]if (index == 0){[/CODE] if (s.charat(index) == '1'){ [CODE]return 1;[/CODE] } [CODE]return 0 ;[/CODE] } if (s.charat(index)== '1'){ [CODE]return 1 + yardimci(index-1,s);[/CODE] } [CODE]return yardimci(index-1,s);[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s){[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki){[/CODE] metalsarki m = (metalsarki)sarki; m.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.setisim(isim); this.setsanatci(sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + getsanatci() +"" - "" + getisim() + ""(hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.setisim(isim); this.setsanatci(sanatci); this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(getsanatci() + "" - "" + getisim() + ""[özellik: "" + metalozellik + ""]"");[/CODE] } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + getsanatci() +"" - "" + getisim() + ""("" + metalozellik+ "")"");[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.setisim(isim); this.setsanatci(sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" +getsanatci() +"" - "" + getisim() + ""(huzurlu ve nostaljik)"");[/CODE] } } import java.util.arraylist; import java.util.list; import java.util.collections; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<[CODE]integer> numbers = new arraylist<>();[/CODE] [CODE]for (int i = 0 ;[/CODE] i < sarkilistesi.size() ; i++){ numbers.add(i); } collections.shuffle(numbers); [CODE]for (int index : numbers) {[/CODE] sarkilistesi.get(index).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } abstract [CODE]class sarki {[/CODE] private [CODE]string isim ;[/CODE] private [CODE]string sanatci ;[/CODE] abstract [CODE]void oynat();[/CODE] [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public string getsanatci() {[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } [CODE]public void setsanatci(string sanatci) {[/CODE] this.sanatci = sanatci; } } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki){ if ((i > 0) && !(sarkilistesi.get(i-1) instanceof metalsarki)){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } } if (!(sarkilistesi.get(i) instanceof metalsarki)){ if ((i > 0) && (sarkilistesi.get(i-1) instanceof metalsarki)){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun kendisini çağırmasıdır recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. 3 kısımdan oluşur. base case , composition, decomposition jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. metod her çağırıldığında stack frame eklenir [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. hız anlamında daha az verimlidir. recursive metotlar daha fazla yer kaplar ve daha yavaştır bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? base case substringin boyutunun 0 olduğu noktadır. geri kalan durumlarda ise stringin ilk elemanı alınır ve geri kalan kısmının reverse esilmiş halinin üstüne eklenir. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack local variable ları sakladığımız alan. eğer stackin alabileceğinden daha fazla stack call yapılırsa stack taşar tail recursion nedir, kısaca açıklayınız. recursive bir metoddaki returnler sonrası ekstra bir işlem yapılmaması ile olur. en son tail kısımda sonuç dönülür abstraction kavramını açıklayınız. abstraction gerçek hayat problemlerinin soyutlanması. yani dijitalde temsil etmemiz. sınıfları ise contexte göre bilgileri gösterecek şekilde tasarlamamız dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür çünkü hourly employee i̇s a employee. fakat tam tersi olamaz çünkü employee bir hourly employee değildir protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? default daha yakındır çünkü erişebilen sınıf sayısı protected a göre daha sınırlı (subclasslar erişemiyor) java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü üst sınıfın özellikleri doldurulmalıdır. en önce üst sınıf şeklinde yaratılıp sonra özellikler eklenir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? edemez çünkü başka sınıflarda metot veya variable isimleri aynıysa bu karışıklığa sebebiyet verir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? subclass olup olmamasını kontrol eder. a, b nin subclassı dır metot overriding ve overloading kavramlarını açıklayınız. overriding alt sınıfta üst sınıfın metodunu tekrar tanımlamaya denir ve signature aynıdır. overloading ise aynı isimli metotların farklı parametrelere sahip olmasıdır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static bindind compilerın işlemi yapmayı bildiği durumlarda yani hangi metodun kullanılabileceğini bildiğimiz durumda dynamic ise polymorphism gibi sonradan bakmamız gereken durumlarda kullanılır java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? çünkü en baştaki durumların sonradan değiştirilmesi istenmiyor veya ulaşılmasıyla alakalı kısıtlamaları var. dolasıyı ile mekanizmada sonradan karar verilecek bir durumları yok. ortak özellikleri ise override edilememeleri overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading dynamic overriding ise static yapılır override mekanizmasında objenin polymorphism özellikleri olmasından kaynaklı sonradan karar verilir fakat overloading de her şey önceden bellidir dinamik bağlamada jvm'nin görevi nedir? . java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü is a bağlantısı vardır. down casting implicit yapılamaz çünkü triangle is a shape ama a shape is not a triangle java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? daha önceden belirlenmemiş bilgiler kullanılamazdı [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik çünkü p referansının p mi yoksa onun child sın[CODE]ıfını mı barındırdığını runtime da bilebiliyoruz class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik çünkü display metodunun hangisinin çağrılacağı aslında item objesinin gerçek tipine bağlı java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class objesi yaratılamayan bir sınıftır içinde abstract ya da değil metotlar bulundurabilir. constructor sahibi olabilirler çünkü alt sınıfların constructor ı çağırması gerekebilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? implement edildiyse zaten abstract değildir. ama abstract bir sınıfın içinde abstract olmayan bir metot bulunabilir abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. obje yaratmadan sınıf yaratma. signature belirleyip hiyerarşinin ilerisinde implement etme özgürlüğü. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract sınıflar abstraction seviyesi 0 ile 100 arasında iken interfacelerde 100 dür. tip olarak kullanılabilirler marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface ler metot veya fieldları olmayan interfaceler. functional interfaceler ise sadece bir abstract metodu olan interfacelerdir bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? class birden fazla implement edebilir fakat bir interface başka bir interface i implement etmez extend eder. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? c objesi yaratılamaz abstract class olduğu için. ya sın[CODE]ıfı ve draw metodunu abstract den çıkartacağız ya da alt bir sınıfın objesini kullanacağız interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? i̇ki tane aynı isimli metod ve farklı interfacelerden geliyorlar. kesinlilik yok bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name ;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel ;[/CODE] private boolean isoperational ; [CODE]public robot(string name, string type, int batterylevel, boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public void charge(){[/CODE] this.batterylevel = 100 ; } [CODE]public void printrobot(){[/CODE] system.out.println(""robot name: "" + this.name + "" robot type: "" + this.type + "" battery level: "" + this.batterylevel + ""% is operationalt: "" + this.isoperational); } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setoperational(boolean operational) {[/CODE] isoperational = operational; } } import java.lang.module.findexception; import java.net.bindexception; [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"" ;[/CODE] system.out.pr[CODE]intln(kombinasyon(str, 0, str));[/CODE] } [CODE]public static string kombinasyon(string s, int index, string modified){[/CODE] if (index == s.length()-1){ [CODE]return modified + olustur(s,index) ;[/CODE] } [CODE]return kombinasyon(s,index + 1, modified + olustur(s, index) + boundcontrol(olustur(s, index),index));[/CODE] } private [CODE]static string olustur(string s, int index){[/CODE] if ((s.charat(index) >= 65) && (s.charat(index) <= 90)){ return "" "" + s.substring(1,index) + (char)(s.charat(index)+32) + s.sub[CODE]string(index+1);[/CODE] } if ((s.charat(index) >= 97) && (s.charat(index) <= 122)){ return "" "" + s.substring(0,index) + (char)(s.charat(index)-32) + s.sub[CODE]string(index+1);[/CODE] } [CODE]return """" ;[/CODE] } private [CODE]static string boundcontrol(string s, int index){[/CODE] if (index < s.length()-1){ [CODE]return """" ;[/CODE] } [CODE]return """" ;[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon"" ; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).charge(); } } [CODE]public void printfactory(){[/CODE] system.out.println(""factory name: "" + this.name + "" location: "" + this.location); system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel() - 15); } } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public static int toplamroboturetimi;[/CODE] [CODE]public abstract void performtask();[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public static int gettoplamroboturetimi() {[/CODE] [CODE]return toplamroboturetimi;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.totalrobots(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; toplamroboturetimi++; } [CODE]public void togglearmedmode(){[/CODE] [CODE]if (isarmed) {[/CODE] isarmed = false; system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now unarmed"");[/CODE] }[CODE]else {[/CODE] isarmed = true; system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now armed"");[/CODE] } } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10){[/CODE] system.out.println(""[""+ modelname +""] scanning for threats... armed: "" + isarmed ); this.batteryl[CODE]ife -= 10;[/CODE] }[CODE]else{[/CODE] system.out.println(""[""+ modelname +""] not enough battery to scan threats...""); } } @override [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife += 10;[/CODE] } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; toplamroboturetimi++; } [CODE]public void boostcleaningpower(int miktar){[/CODE] cleaningpower += miktar; system.out.pr[CODE]intln(""cleaningrobot - ""+ modelname +"" now has cleaning power: ""+ cleaningpower);[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10){[/CODE] system.out.println(""[""+ modelname +""] cleaning in progress... cleaning power: "" + cleaningpower ); this.batteryl[CODE]ife -= 10;[/CODE] }[CODE]else{[/CODE] system.out.println(""[""+ modelname +""] not enough battery to clean...""); } } @override [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife += 10;[/CODE] } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks(){[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof cleaningrobot){[/CODE] cleaningrobot a = (cleaningrobot) robot; system.out.println(""cleaningrobot - model: "" + a.getmodelname() + "", battery: "" + a.getbatterylife() + "", cleaning power: "" + a.getcleaningpower()); } [CODE]if (robot instanceof securityrobot){[/CODE] securityrobot b = (securityrobot) robot; system.out.println(""securityrobot - model: "" + b.getmodelname() + "", battery: "" + b.getbatterylife() + "", armed: "" + b.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof cleaningrobot){[/CODE] cleaningrobot a = (cleaningrobot) robot; a.boostcleaningpower(miktar); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof securityrobot){[/CODE] securityrobot a = (securityrobot) robot; a.togglearmedmode(); } } } [CODE]public static void totalrobots(){[/CODE] system.out.println( ""tum fabrikalar tarafindan toplam ""+ abstractrobot.gettoplamroboturetimi() +"" robot uretildi""); } } 1"
2384475,1,"2384475 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int arr[] = {[/CODE] 5, 4, 1, 2 }; cocktailsort(arr, true); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr, boolean x) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; } } if (arr.length < 2) [CODE]return;[/CODE] { [CODE]if (x) {[/CODE] arr = bubble1(arr); x = false; } [CODE]else {[/CODE] arr = bubble2(arr); x = true; } cocktailsort(arr, x); } } [CODE]public static int[] bubble1(int[] arr) {[/CODE] int newarr[] = new int[arr.length - 1]; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]newarr[i] = arr[i];[/CODE] } [CODE]for (int i = 0;[/CODE] i < newarr.length - 1; i++) { [CODE]if (newarr[i] > newarr[i + 1]) {[/CODE] [CODE]int temp = newarr[i];[/CODE] [CODE]newarr[i] = newarr[i + 1];[/CODE] [CODE]newarr[i + 1] = temp;[/CODE] } } [CODE]return newarr;[/CODE] } [CODE]public static int[] bubble2(int[] arr) {[/CODE] int newarr[] = new int[arr.length - 1]; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]newarr[i] = arr[i];[/CODE] } for (int i = newarr.length - 1; i > 0; i--) { [CODE]if (newarr[i] < newarr[i - 1]) {[/CODE] [CODE]int temp = newarr[i];[/CODE] [CODE]newarr[i] = newarr[i - 1];[/CODE] [CODE]newarr[i - 1] = temp;[/CODE] } } [CODE]return newarr;[/CODE] } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(2));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i == 1) return count;[/CODE] [CODE]if (i % 2 == 0) count = 1 + collatz(i / 2);[/CODE] [CODE]else if (i % 2 == 1) count = 1 + collatz(i * 3 + 1);[/CODE] [CODE]return count;[/CODE] } } [CODE]class sayac {[/CODE] [CODE]public string x;[/CODE] [CODE]public sayac(string x) {[/CODE] this.x = x; } [CODE]public int say() {[/CODE] [CODE]int res = say2(x);[/CODE] [CODE]return res;[/CODE] } [CODE]public int say2(string x) {[/CODE] [CODE]int res = 0;[/CODE] if (x.length() < 1) [CODE]return res;[/CODE] if (x.charat(0) != '1') { res = res + say2(x.sub[CODE]string(1));[/CODE] } else if (x.charat(0) == '1') res = res + 1 + say2(x.sub[CODE]string(1));[/CODE] [CODE]return res;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(sarki.sanatci + ""-"" + sarki.isim + "" [ozellik: "" + met.metalozellik + ""]""); } // bu kismi cikti ornegini saglayacak sekilde doldurun } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] sarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]string rocko;[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); this.rocko = ""huzurlu ve nostaljik""; } @override [CODE]void oynat() {[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasiko;[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); this.klasiko = ""haf[CODE]if ve sakin"";[/CODE] } @override [CODE]void oynat() {[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] // karısık calma yapamadım :( tersten caldırdım. sarkilistesi = sarkilistesi.reversed(); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.pr[CODE]intln(""[bilgi] ses duzeyi : yuksek"");[/CODE] system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); system.out.pr[CODE]intln(""[bilgi] ses duzeyi : normal"");[/CODE] } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji instanceof siralicalma) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else if (strateji instanceof karisikcalma) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else if (strateji instanceof rockcuozelcalma) {[/CODE] strateji.cal(sarkilistesi); } } } abstraction kavramını açıklayınız. i̇htiyacımız olan şeylerin dışındakileri yok saymaktır. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür cünkü hourlye is a e ama tam tersi degil cunku e is not a hourlye. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? package access daha yakındır. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? üst classların instance variablelarını parametre olarak gecirmek icin. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır,mümkün değil. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? verilen objenin bizim istedigimiz türden bir obje olup olmadigini kontrol eder. b objesi a objesiyle ayni class a aittir. metot overriding ve overloading kavramlarını açıklayınız. overriding signature ı aynı olan metotlar icin kullanılır. overlode ismi aynı ama parametreleri farkli metotlar icin kullanilir. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 10 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? signatureları farklı olan methodlarda static binding aynı olanlarda dynamic binding kullanılır. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? bu metotlar değiştirilemez ve override edilemez. bu yüzden static bindingle bağlanır. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloadingde static binding overridingde dynamic binding gerçekleşir. dinamik bağlamada jvm'nin görevi nedir? run time sırasında karar verir. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? ana classın referans variable ı alt classın objesini refer ettiği için. downcast implicit yapılamaz. typecating ile yapılır. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? run time sırasında vakit kaybederdik. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dinamik bağlama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇çinde abstract method(implement edilmemis) bulunduran ya da bulundarmayan classlardır. abstract classlarda constructur olabilir.interfacde olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? bir abstract classın methodu başka bir abstract classda implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. daha sonra kesin olarak implement edileceğini bildiğimiz bir methodu tanımlamamızı sağlar. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler class değil bir tiptir. abstract classlardan obje üretilmez. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interfacelerin içi boştur. functionallarda implement edilmeyi bekleyen methodlar vardır. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? classlar birden fazla interface implement edebilir. i̇nterface başka bir interfacei extend edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract classtan obje üretilmez. shape c = [CODE]new circle();[/CODE] olmalı drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? edilemez çünkü hangisini çalıştiracagıni bilemez. super olmamalıydı. new b().show; yapabiliriz. output: b java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir. io ve runtime exception java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? trowable olmak zorundadır ve override edildiğinde kendisi ve subclassları throws edilebilir. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? her koşulda kod bloğunu çalıştırır. exception atılıp atılmaması önemli değildir. java'da kendi exceptionunuzu nasıl tanımlarsınız? i̇stediğimiz türdeki exception classını extend ederiz ve şu koşul gerçekleşirse exception fırlat deriz. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? . [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done -1 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? normalde specific olandan olmayana doğru catch ederiz ama böylede çalışır trying m1 caught2 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] [CODE]int i = 0;[/CODE] factory.addrobot(r1, i++); factory.addrobot(r2, i++); factory.addrobot(r3, i++); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private robot[] robots = [CODE]new robot[100];[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public void addrobot(robot robot, int index) {[/CODE] robots[index] = robot; } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { robots[i].charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + getname1() + "" location: "" + getlocation1());[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { if (robots[i] != null) system.out.println("" robot name: "" + robots[i].getname() + "" robot type: "" + robots[i].gettype() + "" battery level: "" + robots[i].getbattery() + "" is operational: "" + robots[i].getopera()); } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { int x = robots[i].getbattery() - 15; system.out.pr[CODE]intln(x);[/CODE] } } [CODE]public string getname1() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation1() {[/CODE] [CODE]return location;[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational;// bataryası varsa true robot() { this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel, boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getopera() {[/CODE] [CODE]return isoperational;[/CODE] } } [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string x = ""a1b2"";[/CODE] [CODE]string[] ar = method(x);[/CODE] [CODE]for (int i = 0;[/CODE] i < ar.length; i++) { system.out.pr[CODE]intln(ar[i]);[/CODE] } } [CODE]public static string[] method(string x) {[/CODE] x = x.touppercase(); string[] arr = new string[2 ^ (x.length() / 2)]; [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { arr[i] = x.substring(0, i) + x.substring(i).tolowercase(); } [CODE]return arr;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package robot;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package robot;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] abstractrobot([CODE]string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] final [CODE]int temp = batterylife;[/CODE] this.batteryl[CODE]ife = temp;[/CODE] system.out.pr[CODE]intln(batterylife);[/CODE] } } [CODE]package robot;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.robotnumber(); // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]package robot;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]package robot;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power:"" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower = cleaningpower + 10; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } [CODE]package robot;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int number;[/CODE] robotfactory() { robots = [CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot x = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] number++; robots.add(x); } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot x = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] number++; robots.add(x); } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] r.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof cleaningrobot) {[/CODE] cleaningrobot x = (cleaningrobot) r; system.out.println(""- model: "" + x.modelname + "", battery: "" + x.batterylife + "", cleaning power: "" + x.getcleaningpower()); } [CODE]else if (r instanceof securityrobot) {[/CODE] securityrobot x = (securityrobot) r; system.out.println( ""- model: "" + x.modelname + "", battery: "" + x.batterylife + "", armed: "" + x.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof cleaningrobot) {[/CODE] cleaningrobot x = (cleaningrobot) r; x.boostcleaningpower(); system.out .println(""cleaningrobot - "" + x.modelname + "" now has cleaning power: "" + x.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof securityrobot) {[/CODE] securityrobot x = (securityrobot) r; x.togglearmedmode(); system.out.print(""securityrobot - "" + x.modelname + "" is now ""); if (x.getisarmed()) { system.out.pr[CODE]intln(""armed"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""unarmed"");[/CODE] } } } } [CODE]public static void robotnumber() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + number + "" robot uretildi"");[/CODE] } } 1"
2786122,5,"2786122 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; coctailsort(arr); } [CODE]public static void coctailsort(int[] arr){[/CODE] [CODE]int count = 1;[/CODE] [CODE]int a = 0;[/CODE] int b = arr.length; [CODE]int[] arrmin = arr;[/CODE] [CODE]for(int x = 0;[/CODE] x < arrmin.length; x++){ [CODE]for(int y = 0;[/CODE] y < arrmin.length - 1;y++){ [CODE]if(arrmin[y] > arrmin[y + 1]){[/CODE] [CODE]int temp = arrmin[y];[/CODE] arrmin[y] = arrmin[y + 1]; arrmin[y + 1] = temp; } } } [CODE]int min = arrmin[0];[/CODE] [CODE]int index;[/CODE] [CODE]if(count % 2 == 0){[/CODE] index = a; a++; } [CODE]else{[/CODE] index = b; b--; } [CODE]for(int x = index;[/CODE] x < arr.length - 1; x++){ [CODE]if(arr[x] > arr[x + 1]){[/CODE] [CODE]int temp = arr[x];[/CODE] arr[x] = arr[x + 1]; arr[x + 1] = temp; } } [CODE]for(int x = 0;[/CODE] x < arr.length;x++){ system.out.pr[CODE]int("" "" + arr[x]);[/CODE] } system.out.pr[CODE]intln();[/CODE] [CODE]if(arr[0] != min){[/CODE] for(int x = arr.length - 2; x > 0; x--){ [CODE]if(arr[x] < arr[x - 1]){[/CODE] [CODE]int temp = arr[x - 1];[/CODE] arr[x - 1] = arr[x]; arr[x] = temp; } } [CODE]if(arr[0] != min){[/CODE] coctailsort(arrmin); count++; } } } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(4));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]int a = 0;[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return a;[/CODE] } [CODE]else{[/CODE] [CODE]if(i % 2 == 0){[/CODE] a++; [CODE]return a + collatz(i / 2);[/CODE] } [CODE]else{[/CODE] a++; [CODE]return a + collatz(i * 3 + 1);[/CODE] } } } } [CODE]public class sayac {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] [CODE]int a = 0;[/CODE] if(str.length() == 1){ if(str.charat(0) == '1') a++; [CODE]return a;[/CODE] } [CODE]else{[/CODE] if(str.endswith(""1"")) a++; str = str.substring(0,str.length() - 1); [CODE]return a + say();[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s){[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki.getclass().getname() == ""metalsarki""){ system.out.print(sarki.sanatci + "" - "" + sarki.isim + "" [ozellik: ""); metalsarki s = (metalsarki) sarki; s.gostermetalozellikleri(); system.out.pr[CODE]int(""]"");[/CODE] system.out.pr[CODE]intln();[/CODE] } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]int(""[klasi̇k] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]string nitelik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]int(metalozellik);[/CODE] } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]int(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]int(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.list; import java.util.random; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]int count;[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] random random = [CODE]new random();[/CODE] while(count < sarkilistesi.size()){ int x = random.nextint(sarkilistesi.size()); sarkilistesi.get(x).oynat(); count += 1; system.out.pr[CODE]intln();[/CODE] } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln();[/CODE] } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat(){[/CODE] } } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean d = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { string str = sarkilistesi.get(i).getclass().getname(); [CODE]if(str == ""rocksarki"" && d == false){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] d = true; } if(d == true && str != ""rocksarki"") system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln();[/CODE] } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name,string type,int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; isoperational = true; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + getname());[/CODE] system.out.pr[CODE]intln(""robot type: "" + gettype());[/CODE] system.out.pr[CODE]intln(""battery level: "" + getbatterylevel());[/CODE] system.out.pr[CODE]intln(""is operational: "" + getisoperational());[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] char[] harfler = new char[str.length()]; [CODE]int harfcount = 0;[/CODE] char[] diger = new char[str.length()]; [CODE]for(int x = 0;[/CODE] x < str.length(); x++) { int asci = str.charat(x); [CODE]if(asci >= 65 && asci <= 97+32) {[/CODE] harfler[x] = str.charat(x); harfcount++; } else diger[x] = str.charat(x); } int dongucount = (int)math.pow(2, harfcount); boolean a = false; [CODE]for(int x = 0;[/CODE] x < dongucount; x++) { [CODE]for(int y = 0;[/CODE] y < str.length(); y++) { [CODE]if(harfler[y] >= 65 && harfler[y] <= 97+32){[/CODE] [CODE]if(x >= dongucount/2 && a == false) {[/CODE] system.out.pr[CODE]int((char)(harfler[y] - 32));[/CODE] a = true; } else system.out.pr[CODE]int(harfler[y]);[/CODE] } else system.out.pr[CODE]int(diger[y]);[/CODE] } system.out.pr[CODE]intln();[/CODE] a = false; } } } import java.util.arraylist; [CODE]class factory extends robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; this.robots = null; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(int x = 0;[/CODE] x < robots.size(); x++) { robots.get(x).charge(); } } [CODE]public void work() {[/CODE] [CODE]for(int x = 0;[/CODE] x < robots.size(); x++) { robots.get(x).setbatterylevel(robots.get(x).getbatterylevel() - 15); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + getname());[/CODE] system.out.pr[CODE]intln(""location: "" + getlocation());[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int x = 0;[/CODE] x < robots.size(); x++) { robots.get(x).pr[CODE]introbot();[/CODE] } } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""produced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""upgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""toggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""final robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln();[/CODE] factory.robotcount(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; private [CODE]int yedekbatterylife;[/CODE] [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; this.yedekbatteryl[CODE]ife = batterylife;[/CODE] } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } else system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; if(isarmed == true) system.out.pr[CODE]intln(""armed"");[/CODE] else system.out.pr[CODE]intln(""unarmed"");[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = yedekbatterylife;[/CODE] } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] private [CODE]int yedekbatterylife;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; this.yedekbatteryl[CODE]ife = batterylife;[/CODE] } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } else system.out.println(""["" + modelname + ""] not enough battery to clean...""); } [CODE]public void boostcleaningpower(int miktar) {[/CODE] system.out.pr[CODE]intln(cleaningpower += miktar);[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = yedekbatterylife;[/CODE] } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist <abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int count = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname,int batterylife, int cleaningpower) {[/CODE] cleaningrobot r1 = [CODE]new cleaningrobot(modelname,batterylife,cleaningpower);[/CODE] robots.add(r1); setcount(count + 1); } [CODE]public void producesecurityrobot(string modelname,int batterylife, boolean isarmed) {[/CODE] securityrobot r1 = [CODE]new securityrobot(modelname,batterylife,isarmed);[/CODE] robots.add(r1); setcount(count + 1); } [CODE]public void performalltasks() {[/CODE] [CODE]for (int x = 0;[/CODE] x < robots.size(); x++) { robots.get(x).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int x = 0;[/CODE] x < robots.size(); x++) { system.out.print(robots.get(x).getclass().getname() + "" - model: "" + robots.get(x).modelname + "", battery: "" + robots.get(x).batteryl[CODE]ife + "", "");[/CODE] if(robots.get(x).getclass().getname() == ""cleaningrobot""){ cleaningrobot c1 = (cleaningrobot) robots.get(x); system.out.println(""cleaning power: "" + c1.getcleaningpower()); } [CODE]else{[/CODE] securityrobot s1 = (securityrobot) robots.get(x); system.out.println(""armed: "" + s1.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int x = 0;[/CODE] x < robots.size(); x++) { if(robots.get(x).getclass().getname() == ""cleaningrobot""){ cleaningrobot c1 = (cleaningrobot) robots.get(x); system.out.print(c1.getclass().getname() + "" - model: "" + c1.modelname + "" now has cleaning power: ""); c1.boostcleaningpower(miktar); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int x = 0;[/CODE] x < robots.size(); x++) { if(robots.get(x).getclass().getname() == ""securityrobot""){ securityrobot s1 = (securityrobot) robots.get(x); system.out.print(s1.getclass().getname() + "" - model: "" + s1.modelname + "" is now ""); s1.togglearmedmode(); } } } [CODE]public int getcount() {[/CODE] return robotfactory.count; } [CODE]public void setcount(int count) {[/CODE] robotfactory.count = count; } [CODE]public void robotcount() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + getcount() + "" robot uretildi"");[/CODE] } } 5"
9367691,6,"9367691 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. import java.util.scanner; [CODE]public class collatz {[/CODE] [CODE]public static void main(string[] args){[/CODE] scanner input= new scanner(system.in); system.out.pr[CODE]intln(""enter a number :"");[/CODE] int i= input.next[CODE]int();[/CODE] int result= collatz.collatz(i); system.out.pr[CODE]intln(""result = ""+ result);[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i%2==0){[/CODE] i=i/2; [CODE]return collatz(i)+1;[/CODE] } [CODE]else{[/CODE] i=(3*i+1); [CODE]return collatz(i)+1;[/CODE] } } } [CODE]public class count {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); } } [CODE]public class sayac{[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str=str; } [CODE]public int say(){[/CODE] if(str.indexof(""1"")==-1){ [CODE]return 0;[/CODE] } str=str.substring(str.indexof(""1"")+1,str.length()); [CODE]return say()+1;[/CODE] } } [CODE]public class cocktail {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] array= {[/CODE]5,4,1,2}; cocktailsort(array); } [CODE]public static void cocktailsort(int[] arr){[/CODE] boolean control=true; [CODE]for(int i=0;[/CODE] i<arr.length-1; i++){ [CODE]if(arr[i]>arr[i+1]){[/CODE] control=false; } } [CODE]if(control){[/CODE] [CODE]for(int i=0;[/CODE] i<arr.length; i++){ system.out.pr[CODE]int("" ""+arr[i]);[/CODE] } } [CODE]else{[/CODE] [CODE]for(int i=0;[/CODE] i<arr.length-1; i++){ [CODE]if(arr[i]>arr[i+1]){[/CODE] [CODE]int tut=arr[i+1];[/CODE] arr[i+1]=arr[i]; arr[i]=tut; } } cocktailsort(arr); } } } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun kendi içinde kendini çağırmasıdır recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. metodun kendisi, kendini çağırdığı kısım ve base case jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. her çağırmada yeni bir stack olarak üst üste ekliyor. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif olarak daha verimlidir çünkü yeni stack açmak zorunda kalmadan tek bir döngüde yapılabilir. bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? - stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. i̇şlemin hafızada tutulduğu yerdir. bu yerler yetersiz gelip taşmasına overflow denir. eğer metot base case'e ulaşamazsan overflow olur. tail recursion nedir, kısaca açıklayınız. - bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class q1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]string s=""a1b2"";[/CODE] int i=s.length(); combinations(s,i); } [CODE]public static void combinations(string s, int i){[/CODE] [CODE]if(i==0){[/CODE] system.out.pr[CODE]intln();[/CODE] } string first=s.sub[CODE]string(0,i-1);[/CODE] string last=s.substring(i-1,s.length()); system.out.println(first.tolowercase()+last); system.out.println(first.touppercase()+last); while((s.charat(i-1)<'z' || s.charat(i-1)>'a') && i>0){ i--; } combinations(s,i); } } import java.util.arraylist; [CODE]public class q1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] name=""wall-e""; type=""trash""; batterylevel=100; isoperational=true; } [CODE]public void setfeatures(string name, string type, int batterylevel, boolean isoperational ){[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; this.isoperational=isoperational; } private [CODE]string getname(){[/CODE] [CODE]return name;[/CODE] } private [CODE]string gettype(){[/CODE] [CODE]return type;[/CODE] } private [CODE]int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } private boolean getisoperational(){ [CODE]return isoperational;[/CODE] } [CODE]public void charge(){[/CODE] batterylevel=100; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""name: ""+getname()+"" robot type: ""+gettype()+"" batterylevel: ""+getbatterylevel()+""% isoperational: ""+getisoperational());[/CODE] } } [CODE]class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name=name; this.location=location; [CODE]if(name="""" && location=""""){[/CODE] this.name= ""factory1""; this.location=""moon""; } } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] } [CODE]public void printfactory(){[/CODE] r1.pr[CODE]introbot();[/CODE] r2.pr[CODE]introbot();[/CODE] r3.pr[CODE]introbot();[/CODE] } [CODE]public void work(){[/CODE] } } 6"
2179244,1,"2179244 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); // 2 basacak. system.out.println(s2.say()); // 4 basacak. } } [CODE]class sayac{[/CODE] [CODE]public string sayi;[/CODE] [CODE]public sayac(string sayi){[/CODE] this.sayi=sayi; } [CODE]public int say(){[/CODE] if(sayi.length()!=0){ if(sayi.substring(0,1).equals(""1"")){ return 1 + new sayac(sayi.substring(1)).say(); } [CODE]else{[/CODE] return new sayac(sayi.substring(1)).say(); } } [CODE]else{[/CODE] [CODE]return 0;[/CODE] } } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] } [CODE]public static void cocktailsort(int[] arr){[/CODE] } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int i=3;[/CODE] system.out.pr[CODE]intln(collatz(i));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i%2==0){[/CODE] [CODE]return 1+ collatz(i/2);[/CODE] } [CODE]else if(i==1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else{[/CODE] [CODE]return 1+ collatz((i*3) + 1);[/CODE] } } } /* [CODE]if(i == 1){[/CODE] [CODE]return 1;[/CODE] } [CODE]else if(i % 2 == 0){[/CODE] [CODE]return collatz(i/2);[/CODE] } [CODE]else{[/CODE] [CODE]return collatz(3*i +1);[/CODE] } */ müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; abstract [CODE]class sarki{[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]public string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim+""(""+metalozellik+"")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln( sanatci + "" - "" + isim+ "" [ozellik: ]""+metalozellik);[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim+""(huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } //*************************************************************/ [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> karisikliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(karisikliste); [CODE]for (sarki sarki : karisikliste) {[/CODE] sarki.oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] boolean sesyukseltildi=false; [CODE]for (int i=0;[/CODE] i < sarkilistesi.size(); i++) { sarki sarki=sarkilistesi.get(i); //***** [CODE]if (sarki instanceof rocksarki) {[/CODE] [CODE]if (!sesyukseltildi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sesyukseltildi = true; } sarki.oynat(); } [CODE]else {[/CODE] [CODE]if (sesyukseltildi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesyukseltildi = false; } sarki.oynat(); } } [CODE]if (sesyukseltildi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } } [CODE]class muzikcalar{[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s){[/CODE] this.strateji=s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } //*****************************************************************/ //mai̇n [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // şarkılar oluşturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // şarkı listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // müzik çalar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali çalma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik çalma stratejisi system.out.pr[CODE]intln(""\nkarisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu özel çalma stratejisi system.out.pr[CODE]intln(""\nrockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal şarkıların özelliklerini gösterme system.out.pr[CODE]intln(""\nmetal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } abstraction kavramını açıklayınız. gereksiz değerlerin çıkarılmasıyla kullanıcıya yalın bir kod sunmaktır. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? java kendisi object sınıfı oluşturur ve kendisi super oluşturur. bir üst sınıfın class ın çağrılması için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değildir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a nesnesinin b türünden olması metot overriding ve overloading kavramlarını açıklayınız. overloading: aynı class içerisinde metodun farklı parametre isimleri veya sayılarıyla çağrılması demektir. overriding ise inheritance gerektirir ve bir üst classtaki metodun subclassta çağrılmasıdır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? . [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? . java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? static, private ve final metotlar kullanıldığında static bindingle bağlanır. diğer zamanlarda dynamic binding yapılır. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? override edilemezler overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic binding dinamik bağlamada jvm'nin görevi nedir? jvm hangi metodun veya sınıfın çağrılacağına karar verir java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? 1. çünkü java otomatik olarak bir üst class özelliklerini subclass a da ekler. 2. hayır java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? değişmemesini istediğimiz metotlar da değişirdi [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dynamic [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dynamic java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class obje oluşturamaz. concrtete ve abstract methodlar bulundyrabilir. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet. abstract içinde abstract atarsak conctrete metodu da implement etmek zorundayız abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. 1concrete metotlar bulundurabilir 2. concrete olmayan method bulundurabilir 3. obje oluşturamaz abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? evet reference type olarak olabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? market interface içinde metot bulunmaz functional interface içinde 1 abstract metot bulunur. bir [CODE]class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet evet abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abatract class ta obje oluşmaz. display circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? hayır super shpw metodu hatalı a.super.show() olmalı a java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. checked exception, unchecked exception, errors java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked exception throw ediliyorsa, override edilen metotta aynı ya da alt türden ecception olmalı finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? kaynakları serbest bırakmak ve temizlemek için kullanılır çalışır java'da kendi exceptionunuzu nasıl tanımlarsınız? [CODE]class myexception extends exception {[/CODE] [CODE]public myexception(string message) {[/CODE] super(message); } } java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? i̇şlenmiş exceptionu dışarı throw etmek için static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? ioexception zaten exception’ın alt sınıfı olduğundan aynı try bloğunda iki kez catch edilemez. catch(ioexception e) bloğunu silmek veya exception’ı daha sonra catch etmek. trying m1 finally caught1 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class delfin_kütükcü_quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] //factory name: factory1 location: moon robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] // factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = batterylevel > 0; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; this.isoperational = batterylevel > 0; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void charge() {[/CODE] this.batterylevel = 100; this.isoperational = true; } [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: ""+name+""robot type: ""+type + "" batterylevel: "" + batterylevel+ "" isoperational: ""+ isoperational);[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots ; [CODE]public factory() {[/CODE] name=""factory1""; location=""moon""; } //getter setterlar [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } //************************************************/ [CODE]public void addrobot(robot robot){[/CODE] [CODE]if (robots == null) {[/CODE] robots = [CODE]new arraylist<>();[/CODE] } robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.charge(); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.pr[CODE]introbot();[/CODE] } } } [CODE]public class delfin_kütükcü_quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] chars(s); //s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] } [CODE]public static void chars(string s){[/CODE] kombinasyon(s.tochararray(),0); } [CODE]public static void kombinasyon(char[] chars, int index){[/CODE] if(index==chars.length){ system.out.pr[CODE]intln(chars);[/CODE] } [CODE]else if(chars[index] >= 65 && chars[index] <= 90) {[/CODE] chars[index] += 32; kombinasyon(chars, index + 1); chars[index] -= 32; kombinasyon(chars, index + 1); } [CODE]else if(chars[index] >= 97 && chars[index] <= 122) {[/CODE] chars[index] -= 32; kombinasyon(chars, index + 1); chars[index] += 32; kombinasyon(chars, index + 1); } [CODE]else{[/CODE] kombinasyon(chars, index+1); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 // withbattery [CODE]interface public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } // abstractrobot [CODE]class public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } //? [CODE]public abstract void performtask();[/CODE] //soyut metod. cleaningrobot ve securityrobot sınıfları tarafından tanımlanacak. } // securityrobot [CODE]class public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(modelname+"" scanning for threats... armed: ""+isarmed); batteryl[CODE]ife-=10;[/CODE] } [CODE]else{[/CODE] system.out.println(modelname+ "" not enough battery to scan threats..."" ); } } [CODE]public void togglearmedmode(){[/CODE] isarmed=!isarmed; } [CODE]public string displayarmedmode(){[/CODE] [CODE]return (isarmed ? ""armed"" : ""unarmed"");[/CODE] } } // cleaningrobot [CODE]class public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } /*[CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; }*/ [CODE]public void performtask() {[/CODE] [CODE]if (batterylife>=10) {[/CODE] system.out.println(modelname + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife-=10;[/CODE] } [CODE]else {[/CODE] system.out.println(modelname + "" not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower +=10; } } // main [CODE]class public class main_quiz2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); //yeni̇ robot robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.displaytotalrobotproduction(); system.out.pr[CODE]intln(""\n"");[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int toplamroboturetimi = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] toplamroboturetimi++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] toplamroboturetimi++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] system.out.println(""cleaningrobot- model: "" + robot.getmodelname() + "", battery: "" + robot.getbatterylife()+ "", cleaning power: "" + ((cleaningrobot) robot).getcleaningpower()); } [CODE]else if (robot instanceof securityrobot) {[/CODE] system.out.println(""securityrobot- model: "" + robot.getmodelname() + "", battery: "" + robot.getbatterylife()+ "", armed: "" + ((securityrobot) robot).getisarmed()); } } } [CODE]public void upgradecleaningrobots(int amount) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(); system.out.println(""cleaningrobot - "" + robot.getmodelname() + "" now has cleaningpower: ""+ ((cleaningrobot) robot).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); system.out.println(""securityrobot - "" + robot.getmodelname() + "" is now "" + ((securityrobot) robot).displayarmedmode()); } } } //??? [CODE]public static void displaytotalrobotproduction() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + toplamroboturetimi + "" robot uretildi"");[/CODE] } } 1"
6343320,0,"6343320 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package pkg;[/CODE] [CODE]public class hello {[/CODE] [CODE]public static void main(string args[]) {[/CODE] [CODE]int x = 5;[/CODE] system.out.pr[CODE]int(collatz(x));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int adım = 0;[/CODE] [CODE]if(i != 1 ) {[/CODE] [CODE]if(i%2 == 0) {[/CODE] i = i/2; } [CODE]else {[/CODE] i = i * 3 + 1; } adım++; collatz(i, adım); } [CODE]return (adım);[/CODE] } [CODE]public static int collatz(int sayı, int adım) {[/CODE] [CODE]if(sayı != 1 ) {[/CODE] [CODE]if(sayı%2 == 0) {[/CODE] sayı = sayı/2; } [CODE]else {[/CODE] sayı = sayı * 3 + 1; } adım++; collatz(sayı, adım); } [CODE]return (adım);[/CODE] } } [CODE]package pckg;[/CODE] [CODE]public class lab1 {[/CODE] [CODE]public static void main(string args[]) {[/CODE] [CODE]int [] arr = {[/CODE]5, 4, 1, 2}; cocktailsort(arr); [CODE]for(int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]int(arr[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] int uzunluk = arr.length; [CODE]int start = 0;[/CODE] [CODE]if(start%2 == 0) {[/CODE] [CODE]for(int i = 1;[/CODE] i < uzunluk; i++) { [CODE]if(arr[start] > arr[i] ) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[start]; arr[start] = temp; } } start++; } [CODE]else {[/CODE] cocktailsort(arr, start); start++; } } [CODE]public static void cocktailsort(int[] arr, int x) {[/CODE] int uzunluk = arr.length - 2; [CODE]for(;[/CODE]x > 0 ;uzunluk --) { [CODE]if(arr[x] > arr[uzunluk]) {[/CODE] [CODE]int temp = arr[x];[/CODE] arr[x] = arr[uzunluk]; arr[uzunluk] = temp; } } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package pckg;[/CODE] import java.util.arrays; import java.util.list; import java.util.random; [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // todo auto-generated method stub sarki s1 = [CODE]new metalsarki(""years of silence"",""thurisaz"",""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"",""death"",""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"",""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"",""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"",""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); müzikcalar muzikcalar = [CODE]new müzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new sıralıcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metak ozellikleri:"");[/CODE] [CODE]for(sarki sarki : sarkilistesi) {[/CODE] } } } abstract [CODE]class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public void oynat() {[/CODE] } } [CODE]class metalsarki extends sarki{[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string name, string singer , string tür){[/CODE]} metalsarki([CODE]string name, string singer){[/CODE]} [CODE]public void gostermetalozellikleri(string isim, string sanatci, string metalozellik) {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] rocksarki([CODE]string name, string singer, string tür){[/CODE]} rocksarki([CODE]string name, string singer){[/CODE]} } [CODE]class klasiksarki extends sarki{[/CODE] klasiksarki([CODE]string name, string singer, string tür){[/CODE]} klasiksarki([CODE]string name, string singer){[/CODE]} } [CODE]class calmastratejisi{[/CODE] [CODE]public static void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(sarki m : sarkilistesi) {[/CODE] system.out.pr[CODE]intln(m);[/CODE] } } } [CODE]class sıralıcalma extends calmastratejisi{[/CODE] [CODE]for(sarki s : sarkilistesi) {[/CODE] system.out.println(s.sanatci + ""-"" + s.isim); } } [CODE]class karisikcalma extends calmastratejisi{[/CODE] [CODE]for (sarki s : sarkilistesi) {[/CODE] random sayı = [CODE]new random(2);[/CODE] } } [CODE]class rockcuozelcalma extends calmastratejisi{[/CODE] private [CODE]string ses_duzeyi = ""normal"";[/CODE] [CODE]for(sarki s : sarkilistesi) {[/CODE] if(s.equals(""rock"")) { ses_duzeyi = ""yüksek""; } [CODE]else {[/CODE] ses_duzeyi = ""normal""; } } } [CODE]class müzikcalar{[/CODE] calmastratejisi calmayöntemi; [CODE]public void setstrateji(calmastratejisi a) {[/CODE] calmayöntemi = a; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] if(calmayöntemi.equals(""siralicalma"")) { for(sarki s : sarkilistesi) system.out.println(s.sanatci + ""-"" + s.isim); } [CODE]else {[/CODE] for(sarki s : sarkilistesi) system.out.println(s.sanatci + ""-"" + s.isim); } } } ""recursion"" kavramı nedir, kısaca açıklayınız. metodun içinde o metodun aynısını kullanarak döngü yaratmaktır recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case, stack jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. . [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak daha verimli çalışır çünkü stackte çok fazla birikme olmiyacağı için bilgisayar daha az yorulur bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? string i ilk eleman ve geri kalanlar diye iki string e bölerdim ve her metoda girdiğinde ilk stringin boyutunu bir arttırıp ikinciyi bir azaltırdım ve bu metodun içinde length diye bir değişken tutup onu her bu metoda girildiğinde 1 arttırırdım stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack bir metodda veya bir döngüde kodların hangi sırayla çalışacağını tutar. tail recursion nedir, kısaca açıklayınız. . abstraction kavramını açıklayınız. . dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? hayır çünkü override etmek için metodların signature ve isim kısmı aynı olmalı protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü eğer super olursa erişimi kısıtlamış oluruz java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır ama eğer b c yi extend etmişse ve a da b yi extend ediyorsa a otomatikmen c yi de extend etmiş olur java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b midir yani extend edilmiş mi diye bakar metot overriding ve overloading kavramlarını açıklayınız. override bir metodu farklı bir [CODE]classın içinde aynı signature ve isimle tekrardan yazmaktır, overload ise metodu fazladan yüklemektir class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 101 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static binding yapmamız gerekenler ilk olarak kullanılmasını istediklerimizdir dynamicler ise öncelik vermek istemediklerimizdir java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? static ile bağlanmazsa değer değiştirme recursion gibi şeylerin yapılabilir olması gerekir ortak özellikleri bu methodlara recursion uygulanamamasıdır overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic çünkü static olursa override veya overload yapamayız dinamik bağlamada jvm'nin görevi nedir? . java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? . java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? hepsi atama sırasına göre stackde sıralanırdı istediğimize öncelik veremezdik [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? hata verir çünkü parent ile child a ait obje üretemeyiz [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilebilir, abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. . abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract soyutlama yapılarak çalışırken, interface nesneyle çalışır marker interface ve functional interface kavramları nedir, nasıl kullanılır? . bir [CODE]class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? 1-evet ,2-evet abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? b java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 3 çeşittir out of bound io exception arithmetic exception java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? . finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu exception catch edilse bile çalışan blokdur. evet çalışır java'da kendi exceptionunuzu nasıl tanımlarsınız? exception [CODE]class ından yeni bir exception object i oluşturarak java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? o exception haricinde bir exception var mı yok mu bunu bulmak için static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez çünkü bu metotlar hiçbir yerde çağırılmıyor bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package pkg;[/CODE] [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] } } [CODE]public class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public string getname() {[/CODE] this.name = name; } [CODE]public static void setname(string name) {[/CODE] } [CODE]public string gettype() {[/CODE] this.type = type; } [CODE]public static void settype(string type) {[/CODE] } [CODE]public int getbatterylevel() {[/CODE] this.batterylevel = batterylevel; } [CODE]public static void setbatterylevel(int batterylevel) {[/CODE] } [CODE]public boolean getisoperational() {[/CODE] this.isoperational = isoperational; } [CODE]public static void setisoperational(boolean isoperational) {[/CODE] } [CODE]public void charge() {[/CODE] this.batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.println(""robot name: "" + robot.getname() + ""robot type: "" + robot.gettype() + ""batterylevel: "" + get.batterylevel() + ""isoperational: "" + get.isoperational()); } } [CODE]public class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] } [CODE]public void addrobot(robot robot) {[/CODE] } [CODE]public void chargeallrobots() {[/CODE] } [CODE]public void printfactory() {[/CODE] } [CODE]public void work() {[/CODE] robot.setbatterylevel(batterylevel - 15); } } [CODE]package pkg;[/CODE] [CODE]public class quiz1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // todo auto-generated method stub [CODE]string str = ""a1b2"";[/CODE] changecase(str); } [CODE]public static void changecase(string str) {[/CODE] [CODE]string[] string = string[100];[/CODE] char[] arr = arr[str.length()]; [CODE]int loc = 0;[/CODE] [CODE]int sayac = 0;[/CODE] if(str.length() != 0) { [CODE]for(int i = 0;[/CODE] i < str.length() ; i++) { [CODE]int control = 0;[/CODE] if(str.charat(i) < 96 && str.charat(i) > 65) { sayac++; control = 1; arr[i] = (char)(str.charat(i) + 32); } else if(str.charat(i) < 129 && str.charat(i) > 96) { sayac++; control = 1; arr[i] = (char)(str.charat(i) - 32); } [CODE]if(control == 1) {[/CODE] [CODE]string[loc] = str;[/CODE] loc++; } [CODE]else {[/CODE] [CODE]string[loc] = """";[/CODE] loc++; } system.out.pr[CODE]intln(string[i]);[/CODE] } } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]interface withbattery{[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]string getvariety();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery{[/CODE] [CODE]string modelvariety;[/CODE] [CODE]string modelname;[/CODE] [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE]} [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public string getvariety() {[/CODE] [CODE]return modelvariety;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } } [CODE]public class quiz2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduce robots: "");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks: "");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots: "");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes: "");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status: "");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] anotherfactory.numberofrobots(); } } [CODE]class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] } [CODE]public void performtask() {[/CODE]} [CODE]public void togglearmedmode() {[/CODE] [CODE]if(isarmed == false) isarmed = true;[/CODE] [CODE]else isarmed = false;[/CODE] } } [CODE]class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10) {[/CODE] system.out.println( modelname + ""cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(modelname + ""not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower += 10; } } [CODE]class robotfactory{[/CODE] private arraylist<abstractrobot> robots; [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { system.out.println(""model"" + robots.get(i).getmodelname() +"", battery:"" + robots.get(i).getbatteryl[CODE]ife());[/CODE] } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { } } [CODE]public void numberofrobots() {[/CODE] system.out.println(""tüm fabrikalar tarafından toplam "" + (robots.size() - 1) + "" robot üretildi""); } } 0"
4275079,1,"4275079 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. import java.util.arrays; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.println(q1.collatz(6)); system.out.println(q1.collatz(7)); sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] sayac s3 = [CODE]new sayac(""1120393129211"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); system.out.println(s3.say()); [CODE]int arr[] = {[/CODE]12, 43, 1, 5, 241, 56, 532, 0}; [CODE]int arr1[] = {[/CODE]18, 132, 51, 57, 261, 516, 932, 3}; q2.coctailsort(arr); q2.coctailsort(arr1); } } import java.util.arrays; //ek method gerekmedi. [CODE]public class q2 {[/CODE] [CODE]public static void coctailsort(int []arr){[/CODE] [CODE]int minindex=0;[/CODE] [CODE]for(int i=0;[/CODE]i<arr.length-1;i++){ [CODE]if( arr[i]>arr[i+1]){[/CODE] [CODE]int temp=arr[i];[/CODE] arr[i]=arr[i+1]; arr[i+1]=temp; minindex++; } } [CODE]if(minindex!=0) {[/CODE] coctailsort(arr); } else system.out.println(arrays.to[CODE]string(arr));[/CODE] } } [CODE]public class q1 {[/CODE] [CODE]public static int collatz(int n){[/CODE] [CODE]if(n==1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else{[/CODE] [CODE]if(n%2==0){[/CODE] [CODE]return 1+collatz(n/2);[/CODE] } [CODE]else if(n%2==1){[/CODE] [CODE]return 1+collatz(n*3+1);[/CODE] } [CODE]else return 0;[/CODE] } } } [CODE]public class sayac {[/CODE] [CODE]public string number;[/CODE] [CODE]public sayac(string str){[/CODE] this.number=str; } [CODE]public int say() {[/CODE] if (number.length() == 0) { [CODE]return 0;[/CODE] } [CODE]else {[/CODE] if (number.charat(0) == ('1')) { number= number.sub[CODE]string(1);[/CODE] [CODE]return 1 + say();[/CODE] } [CODE]else {[/CODE] number= number.sub[CODE]string(1);[/CODE] [CODE]return say();[/CODE] } } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s){[/CODE] this.strateji=s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } //rockçu özel çalma hariç her şey doğru çalışıyor. import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] system.out.pr[CODE]intln(s3);[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi){[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); }} } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim,sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[ klasik ] ""+isim+"" - ""+sanatci+"" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[ metal ] ""+sanatci+"" - ""+isim+"" ( ""+metalozellik +"" )"");[/CODE] } metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] super(isim,sanatci); this.metalozellik=metalozellik; } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatci+"" - ""+isim+"" [ozellik: ""+metalozellik +"" ]"");[/CODE] } [CODE]public string getmetalozellik() {[/CODE] [CODE]return metalozellik;[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim,sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[ rock ] ""+isim+"" - ""+sanatci+"" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]int i=0;[/CODE] [CODE]int x;[/CODE] while(i<sarkilistesi.size()){ x= (int) (math.random()*5+0); sarkilistesi.get(x).oynat(); i++; } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++){ sarkilistesi.get(i).oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim ;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.sanatci=sanatci; this.isim=isim; } abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean d; [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++){ string str=""rocksarki.java""; if (sarkilistesi.get(i).getclass().getname().equals(str)){ d=true; [CODE]if(d){[/CODE] system.out.pr[CODE]intln( ""[bilgi] ses duzeyi: yuksek"");[/CODE] } [CODE]else d=false;[/CODE] [CODE]if(!d){[/CODE] system.out.pr[CODE]intln( ""[bilgi] ses duzeyi: normal"");[/CODE] } } sarkilistesi.get(i).oynat(); }} } import java.util.list; [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } abstraction kavramını açıklayınız. ihtiyac duyulmayan methodların soyutlanarak kullanici tarafindan gorulmesini engeller. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür ama tersi mümkün değildir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? default daha yakindir. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? java da bir class sadece bir üst classına erisebildigi icin 2 üst class erismek recursive bir durum alır bunun uygulanabilmesi icin de her classin ilk satiri super olmalidir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a, b nin upper classidir. metot overriding ve overloading kavramlarını açıklayınız. overriding ayni signatura sahip metotlarin farkli [CODE]classlar icin farkli gorevler icin kullanilmasidir ancak overloading ayni classta farkli parametreler alarak farkli gorevlerde kullanilmasi icindir class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? output yok. [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 10 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? object olusturulacaksa dinamik sınıfın tamamı çagrilaracaksa statik binding yapilir. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? metotlar sınıf ismi ile çağrılır.override edilemez . overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic gerçekleşir.object olusturularak kullanilir. dinamik bağlamada jvm'nin görevi nedir? ? java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? down classlar upper classtaki metotlara sahiptir o yüzden implicit casting yapilabilir ancak tam tersi gecerli degildir. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? degismeyen metotlar elde edemezdik sinifi cagiramazdik. bilgi güvenliği saglanmazdı. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? parent, dinamik. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product \n product , dinamik. java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class soyutlanmış class olarak bilinir. abstract classlarda constructer olabilir ancak interfacelerde yoktur. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. kullanicinin ihtiyaci olmayan methodları saklar abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler ile obje oluşturulamaz .abstract classlar ile oluşturulabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? . bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet,evet. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? shape deki draw methodu abstract yapilmalidir hata duzeldikten sonra output drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? compile edilemez . implements edilen iki methodda overriding olmamalidir sadece implements a derse mesela output a olarak cikti verir yani tek implement yapilmali ya da interfacelerin birinden show methodu silinmeli ya da signature degismelidir. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çesit checked ve unchecked java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? . finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? catchden sonra try catch blogunda kapanistan once yapilmasi gereken seyler icin kullanilir . java'da kendi exceptionunuzu nasıl tanımlarsınız? throwable bir exception objesi olusturarak. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? baska bir try catch metodu icin bir isleve sahip olabilir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally -1 oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez cunku excepti̇on io excepti̇onun üst sınfı olmasina rağmen daha once olan bir catch blogunda yakalamistir eger catch bloklari yer degistirirse hata düzelir. output: tryi̇ng m1 caught1 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.batterylevel = batterylevel; this.name = name; this.type = type; } [CODE]public robot() {[/CODE] this.batterylevel = 100; this.name = ""wall-e""; this.type = ""trash""; this.isoperational = true; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + getname() + ""robot type"" + gettype() + ""batterylevel : "" + getbatterylevel() + ""isopeational : "" + isoperational(this));[/CODE] } [CODE]public boolean isoperational(robot robot) {[/CODE] if (robot.getbatterylevel() > 0) { [CODE]return true;[/CODE] } [CODE]else return false;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setoperational(boolean operational) {[/CODE] isoperational = operational; } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] factory factory1 = [CODE]new factory(""okul"",""dünya"");[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory1.addrobot(r1); factory1.addrobot(r2); factory.addrobot(r3); factory.chargeallrobots(); factory1.work(); r1.pr[CODE]introbot();[/CODE] r2.charge(); r2.pr[CODE]introbot();[/CODE] factory1.pr[CODE]intfactory();[/CODE] } } [CODE]public class q1 {[/CODE] [CODE]public string[] perm(string s,int index,string[] strs){[/CODE] [CODE]for(int i=0;[/CODE]i<s.length();i++){ strs[index]=s; if (toupperortolower(s.charat(0))) { toupperortolower(s.charat(0)); strs[index + 1] = s; } } [CODE]return null;[/CODE] } [CODE]public boolean toupperortolower(char c){[/CODE] [CODE]if(c<='z'&&c>='a'){[/CODE] c= (char) (c+'a'-'a'); [CODE]return true;[/CODE] } [CODE]else if(c<='z'&&c>='a'){[/CODE] c= (char) (c+'a'-'z'); [CODE]return true;[/CODE] } [CODE]else return false;[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name,string location){[/CODE] this.name=name; this.location=location; } //burda eklemeden kaynaklı bir hata alıyorum ve kodun factory fonksiyonları this.robots null olduğundan çalışmıyor.düzelirse her şey doğru çalışıyor. [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public factory(){[/CODE] this.name=""factory1""; this.location=""moon""; } [CODE]public void chargeallrobots(){[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.setbatterylevel(100); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name:""+getname()+"" location:"" +getlocation());[/CODE] } [CODE]public void work(){[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.setbatterylevel(robot.getbatterylevel() - 15); } } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } import java.lang.reflect.constructor; abstract [CODE]class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] protected [CODE]int batterylife2;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] this.batteryl[CODE]ife2=batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife2() {[/CODE] [CODE]return batterylife2;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] //toplam üretilen robot sayısı için yazdığım fonksiyonum. robotfactory.numofrobots(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed ; [CODE]public securityrobot(string modelname, int batterylife,boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public void performtask(){[/CODE] [CODE]if(getbatterylife()>=10){[/CODE] system.out.println( ""[""+modelname+""] scanning for threats... armed: ""+isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""] not enough battery to scan threats....""); } } [CODE]public void togglearmedmode(){[/CODE] [CODE]if(isarmed){[/CODE] isarmed=false; } [CODE]else{[/CODE] isarmed=true; } } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=getbatterylife();[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife,int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; } [CODE]public void performtask(){[/CODE] [CODE]if(getbatterylife()>=10){[/CODE] system.out.println(""[""+ modelname +""] cleaning in progress... cleaning power: ""+cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar){[/CODE] cleaningpower+=miktar; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=getbatterylife2();[/CODE] } } import java.awt.*; import java.util.arraylist; [CODE]public class robotfactory {[/CODE] [CODE]static int numberofrobots;[/CODE] arraylist<abstractrobot> robots; robotfactory(){ this.robots=[CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname,batterylife,cleaningpower));[/CODE] numberofrobots++; } //toplam üretilen robot sayısı için yazdığım fonksiyonum. [CODE]public static void numofrobots(){[/CODE] system.out.pr[CODE]intln("" tum fabrikalar tarafindan toplam ""+numberofrobots+"" robot uretildi"");[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname,batterylife,isarmed));[/CODE] numberofrobots++; } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(miktar); system.out.println("" cleaningrobot - ""+robot.modelname+"" now has cleaning power: ""+((cleaningrobot) robot).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); if (((securityrobot) robot).isarmed() == false) { system.out.println(""securityrobot - "" + robot.modelname + "" is now unarmed""); } else system.out.println(""securityrobot - "" + robot.modelname + "" is now armed""); } } } [CODE]public void displayrobots(){[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if(robot instanceof cleaningrobot){[/CODE] system.out.println( robot.getclass().getname() +"" - model: ""+robot.getmodelname()+ "", battery: ""+robot.batterylife +"", cleaning power: ""+((cleaningrobot) robot).getcleaningpower()); } [CODE]else if(robot instanceof securityrobot){[/CODE] system.out.println( robot.getclass().getname() +"" - model: ""+robot.getmodelname()+ "", battery: ""+robot.batterylife +"", cleaning power: ""+ ((securityrobot) robot).isarmed()); } } } [CODE]public void performalltasks(){[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } } 1"
7374887,0,"7374887 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class cocktailshakersort {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 4, 1, 2 }; cocktailsort(arr); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]if (!issorted(arr)) {[/CODE] [CODE]int temp = 0;[/CODE] [CODE]for (int j = 0;[/CODE] j < arr.length - 1; j++) { [CODE]if (arr[j] > arr[j + 1]) {[/CODE] temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } [CODE]if (!issorted(arr)) {[/CODE] for (int j = arr.length - 1; j > 0; j--) { [CODE]if (arr[j] < arr[j - 1]) {[/CODE] temp = arr[j]; arr[j] = arr[j - 1]; arr[j - 1] = temp; } } [CODE]if (!issorted(arr)) {[/CODE] cocktailsort(arr); } } } } [CODE]public static boolean issorted(int[] arr) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]return false;[/CODE] } } [CODE]return true;[/CODE] } } [CODE]public class collatz {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(6));[/CODE]// 6-> 3 ->10 ->5-> 16-> 8 ->4-> 2 ->1 system.out.pr[CODE]intln(collatz(5));[/CODE]// 5 -> 16 -> 8 -> 4 -> 2 -> 1 } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]if (i % 2 == 0) {[/CODE] i = i / 2; } [CODE]else {[/CODE] i = i * 3 + 1; } count++; count += collatz(i); [CODE]return count;[/CODE] } } [CODE]public class sayac {[/CODE] [CODE]string input;[/CODE] sayac([CODE]string input) {[/CODE] this.input = input; } [CODE]public int say() {[/CODE] if (this.input.length() == 0) { [CODE]return 0;[/CODE] } if (this.input.charat(0) == '1') { this.input = this.input.sub[CODE]string(1);[/CODE] return 1 + this.say(); } [CODE]else {[/CODE] this.input = this.input.sub[CODE]string(1);[/CODE] return this.say(); } } [CODE]public static void main(string[] args) {[/CODE] sayac x1 = [CODE]new sayac(""10001"");[/CODE]// 2 sayac x2 = [CODE]new sayac(""1111"");[/CODE]// 4 sayac x3 = [CODE]new sayac(""681611161651816541"");[/CODE]// 8 system.out.println(x1.say()); system.out.println(x2.say()); system.out.println(x3.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; import java.util.random; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi sarki[] x = { s1, s2, s3, s4, s5 }; list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if (sarki.getclass() == metalsarki.[CODE]class) {[/CODE] metalsarki temp = (metalsarki) sarki; system.out.println(sarki.sanatci + "" - "" + sarki.name + "" [ozellik:"" + temp.metalozellik + ""]""); } } } } abstract [CODE]class sarki {[/CODE] [CODE]string name;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.name = isim; this.metalozellik = metalozellik; this.sanatci = sanatci; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]int(metalozellik);[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + name + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string name, string sanatci) {[/CODE] this.name = name; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + name + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string name, string sanatci) {[/CODE] this.name = name; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + name + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarki song = sarkilistesi.get(i); song.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] arraylist<sarki> arr = [CODE]new arraylist<sarki>();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { arr.add(sarkilistesi.get(i)); } random gen = [CODE]new random();[/CODE] while (arr.size() != 0) { int x = gen.nextint(arr.size()); arr.get(x).oynat(); arr.remove(x); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean isvol = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { [CODE]if (!(isvol)) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] isvol = true; } sarkilistesi.get(i).oynat(); } [CODE]else {[/CODE] [CODE]if (isvol) {[/CODE] isvol = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } sarkilistesi.get(i).oynat(); } } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; muzikcalar() { } [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } ""recursion"" kavramı nedir, kısaca açıklayınız. recursion bir fonkisyonun kendini çağırarak işlem yapmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. problemin çözebildiğimiz kısmı olan base case,çözmeye çalıştığımız ana problem ve bu ikisi arasında bağ kuran recursive calls jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. bir recursive call a geldiğinde stack de tüm local variablelar in yeni alan açar ve base case e kadar devam eder base case e ulaşınca tüm local variablelar silinir [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. eğer kuvveti hesaplarken küçük parçalara bölersek recursive daha hızlıdır. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? stringi tek tek karakterlere bölersek 1 karakterin uzunluğunu bildiğimizden base case olarak kullanabiliriz. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack overflow hatası stack memory de saklanan local variable ların stack memorynin boyutunu aşması sonuvu ortaya çıkar tail recursion nedir, kısaca açıklayınız. - abstraction kavramını açıklayınız. abstraction sadece bizim için önemli olan kısımları kullanıp diğer kısımların nasıl çalıştığına bakmadan kullanmak dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkün değildir ancak tersi mümkündür protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? üst classının constructorını öncrlikli olarak çalıştırıp düzgün bir şekilde initialze olabilmesi için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değildir her bir class tek bir classı extend edebilir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a ve b nin aynı tipte olup olmadığına bakar ve bunu yaparken sub-super class ilişkisinide kontrol eder birbirinin sub super classı olan classlarda true sonucu verir metot overriding ve overloading kavramlarını açıklayınız. overriding super classtan bir methodu ad veya signature ı değiştirmeden sub classta içeriğini değiştirmek .overloading ise aynı classta aynı isim farklı signature ile methotlar yapmaktır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? static binding hangi metodun çalıştırılacağı runtimedan önce belli olan methotlarda olur örneğin static veya final methotlar dynamic binding ise runtime da belli olan methotlarda olur. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? çünkü bu methotlar override edilemez dolayısıyla binding problemi yoktur overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloadingde static binding gerçekleşir çünkü methot signature ı farklı olduğundan kargaşa yoktur overridingde ise dynamic binding gerçekleşir dinamik bağlamada jvm'nin görevi nedir? önce reference typeta methodun olup olmadığına bakmak varsa o methodun en son override edildiği yere kadar gidip o methodu çalıştırmak java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü alt classın objesi üst kcassında objesidir. downcasting implicit şeklide yapılamaz çünkü üst class alt classın tüm özelliklerini taşımadığından java izin vermez java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? bir anlamı olmazdı çünkü static bindingdeki methotlar zaten override edilemediği için sadece zaman kaybı olurdu. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child .dinamik bağlama vardır. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class içinde abstract metot içerir.abstract metot tamamlanmamış metottur sadece metodun signatureı vardır.abstract metotların constructorı olabilir.i̇nterface in constructorı olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? eğer abstract metot class a ata classtan geliyorsa implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract classtan obje oluşturulamaz.abstract classların alt classları da abstract metot implement edilmediği sürece abstract olur.şuanda nasıl implement edeceğini bilmediğimiz metotların gelecekte biri tarafından implement edilmesini kesinleştirmiş oluruz. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? i̇nterfaceler class değildir.i̇çlerinde oluşturulan tüm attributelar final ve privatedır.hem abstract class hemde interfaceler tip olarak kullanılabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface bir classın bir özelliğe sahip olduğunu belirtmek için kullanılabilir.functional interface classlara yetenekler sağlar. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? i̇kiside mümkün. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? shape classı abstracttır obje oluşturulamaz.shape c = [CODE]new circle();[/CODE] yaparak hata düzeltilir. drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? c classında ata class yoktur bu yüzden kod çalışmaz. c classındaki show metodunda başka system.out.pr[CODE]intln(""c"");[/CODE]yazılabilir. c java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. i̇o exceptions örneğin filenotfound,runtime exceptions örn arrayoutofbounds, java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws keywordundan sonra yazacağımız şeyin ""throwable"" olması gerekir.override da ise overrde ettiğimiz metottan daha genel bir exception fırlatamayız örneğin ata classın metotunda i̇o exception fırlatırken override ettiğimiz metotta exception fırlatamayız. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu her şekilde çalışır exception bulunsada bulunmasada. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception classını extend eden bir class yazarak java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? yapılan işlem hatayı düzeltmek için yeterli olmama ihtimali varsa olabilir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? m2() metotundaki 2.catch bloğu erişilemez kod olduğundan kod çalışmaz catch bloklarının yerleri değiştirilerek çözülebilir.output tryi̇ng m1 caught2 fi̇nally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE]// 100 ile 0 arasında bir değer private boolean isoperational;// bataryası varsa true robot() { this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel) {[/CODE] this.type = type; this.name = name; [CODE]if (batterylevel >= 0 && batterylevel <= 100) {[/CODE] this.batterylevel = batterylevel; } [CODE]if (batterylevel > 0 && batterylevel < 100) {[/CODE] this.isoperational = true; } } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name:"" + getname() + "" robot type:"" + gettype() + "" batterylevel :"" + getbatterylevel() + "" isoperational:"" + getisoperational());[/CODE] } [CODE]public string getname() {[/CODE] return this.name; } [CODE]public string gettype() {[/CODE] return this.type; } [CODE]public int getbatterylevel() {[/CODE] return this.batterylevel; } [CODE]public boolean getisoperational() {[/CODE] return this.isoperational; } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] [CODE]if (batterylevel >= 0 && batterylevel <= 100) {[/CODE] this.batterylevel = batterylevel; } } [CODE]public void setisoperational(boolean value) {[/CODE] this.isoperational = value; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<robot>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.location = location; this.name = name; } [CODE]public factory() {[/CODE] this.location = ""moon""; this.name = ""factory1""; } [CODE]public void addrobot(robot robot) {[/CODE] this.robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).charge(); } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robot x = robots.get(i); x.setbatterylevel(x.getbatterylevel() - 15); } } [CODE]public void printfactory() {[/CODE] system.out.println(""factory name: "" + this.name + "" location: "" + this.location); system.out.pr[CODE]intln(""robots operating here:"");[/CODE] if (robots.size() > 0) { [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } else system.out.pr[CODE]intln(""none"");[/CODE] } [CODE]public string getname() {[/CODE] return this.name; } [CODE]public string getlocation() {[/CODE] return this.location; } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] private final [CODE]int originalbatterylevel;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] originalbatterylevel = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = originalbatterylevel;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]int(""\n"");[/CODE] robotfactory.displayrobotcount(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] if (this.batteryl[CODE]ife >= 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + ""scanning for threats... armed:"" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""]"" + ""not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; [CODE]if (isarmed) {[/CODE] system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now armed"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now unarmed"");[/CODE] } } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] if (this.batteryl[CODE]ife >= 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + ""cleaning in progress... cleaning power:"" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""]"" + ""not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int x) {[/CODE] this.cleaningpower += x; system.out.pr[CODE]intln(""cleaningrobot - "" + modelname + "" now has cleaning power: "" + cleaningpower);[/CODE] } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private [CODE]static int robotcount = 0;[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<abstractrobot>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] robotcount++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] robotcount++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot abstractrobot : robots) {[/CODE] abstractrobot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { abstractrobot abstractrobot = robots.get(i); if (abstractrobot.getclass() == securityrobot.[CODE]class) {[/CODE] securityrobot k = (securityrobot) abstractrobot; system.out.println(""securityrobot - model: "" + k.modelname + "", battery: "" + k.getbatterylife() + "", armed: "" + k.getisarmed()); } [CODE]else {[/CODE] cleaningrobot k = (cleaningrobot) abstractrobot; system.out.println(""cleaning robot - model: "" + k.modelname + "", battery: "" + k.getbatterylife() + "", armed: "" + k.getcleaningpower()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot abstractrobot : robots) {[/CODE] if (abstractrobot.getclass() == cleaningrobot.[CODE]class) {[/CODE] cleaningrobot k = (cleaningrobot) abstractrobot; k.boostcleaningpower(miktar); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot abstractrobot : robots) {[/CODE] if (abstractrobot.getclass() == securityrobot.[CODE]class) {[/CODE] securityrobot k = (securityrobot) abstractrobot; k.togglearmedmode(); } } } [CODE]public static void displayrobotcount() {[/CODE] system.out.println(""tum fabrikalar tarafindan toplam "" + robotfactory.robotcount + "" robot uretildi""); } } 0"
6539697,0,"6539697 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(""collatz: ""+collatz(5));[/CODE] [CODE]int[] arr ={[/CODE]5,4,1,2}; cocktailsort(arr); system.out.pr[CODE]int(""cocktail sort: "");[/CODE] for(int n : arr) system.out.pr[CODE]int(n + "" "");[/CODE] system.out.pr[CODE]intln();[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(""say 10001: ""+s1.say()); system.out.println(""say 1111: ""+s2.say()); } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1) return 0;[/CODE] [CODE]else if(i%2==0) return 1+collatz(i/2);[/CODE] [CODE]return 1+collatz(3*i+1);[/CODE] } [CODE]public static void cocktailsort(int[] arr){[/CODE] bubblesort(arr,0); } [CODE]public static int[] bubblesort(int[] arr,int target){[/CODE] [CODE]for(int i=target+1;[/CODE] i<arr.length;i++) { [CODE]if(arr[target]>=arr[i]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[target]; arr[target] = temp; bubblesort(arr,target+1); i=target; } } [CODE]return arr;[/CODE] } } [CODE]class sayac {[/CODE] [CODE]string s;[/CODE] [CODE]public sayac(string s) {[/CODE] this.s = s; } [CODE]public int say() {[/CODE] if (s.isempty()) [CODE]return 0;[/CODE] else if (s.charat(0) == '1') return 1 + new sayac(s.substring(1)).say(); return new sayac(s.substring(1)).say(); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1,s2,s3,s4,s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] for(sarki sarki : sarkilistesi) if (sarki instanceof metalsarki) system.out.println(sarki.sanatci + "" - "" + sarki.isim + "" [ozellik: "" + ((metalsarki) sarki).metalozellik + ""]""); } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasikozellik;[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.klasikozellik = ""haf[CODE]if ve sakin"";[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] ""+sanatci+"" - ""+isim+"" (""+klasikozellik+"")"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim,string sanatci,string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] ""+sanatci+"" - ""+isim+"" (""+metalozellik+"")"");[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]string rockozellik;[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.rockozellik = ""huzurlu ve nostaljik""; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] ""+sanatci+"" - ""+isim+"" (""+rockozellik+"")"");[/CODE] } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean[] calindi = new boolean[sarkilistesi.size()]; [CODE]while(!bitti(calindi)) {[/CODE] int sayi = (int)(math.random()*sarkilistesi.size()); sarki sarki = sarkilistesi.get(sayi); [CODE]if(!calindi[sayi]) {[/CODE] sarki.oynat(); calindi[sayi] = true; } } } [CODE]public boolean bitti(boolean[] calindi) {[/CODE] [CODE]for(boolean sarkicalindi : calindi) if(!sarkicalindi) return false;[/CODE] [CODE]return true;[/CODE] } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] for (sarki sarki : sarkilistesi) sarki.oynat(); } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean rockcaliyor = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof rocksarki && !rockcaliyor) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] rockcaliyor = true; } [CODE]else if(!(sarki instanceof rocksarki) && rockcaliyor) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] rockcaliyor = false; } sarki.oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun tekrar tekrar kendini çağırması recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. metottan çıkabilmek için en temel çözüm olan base case, jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. jvm için normal bir metottan farksız olarak çalışır [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak daha verimli olduğunu düşünüyorum çünkü tekrar tekrar değişken oluşturmak yerine bir değişkeni sürekli değiştirmek daha verimli olacaktır bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? string boş olduğunda metottan çıkacak şekilde stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack bellekte metot değişkenlerinin bulunduğu bölgedir, çok sayıda değişken oluşturulması sonucu overflow olur, örneğin recursive bir metodun base case'e hiç girmemesi buna sebep olabilir tail recursion nedir, kısaca açıklayınız. recursive metodun yaptığı işlemin sonucunun en sonda tekrar geri geri gelmek yerine direkt return edilmesi abstraction kavramını açıklayınız. gerekli verileri kullanıp önemli olmayanları göz ardı etmek dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür ancak tersi mümkün değildir çünkü her hourlyemployee aynı zamanda bir employee'dir ancak her employee bir hourlyemployee değildir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? her class parent classının özelliklerini taşımak durumundadır java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değildir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a'nın b'nin subclassı olup olmadığını kontrol eder, eğer true dönüyor ise a classı b'nin bir subclassıdır metot overriding ve overloading kavramlarını açıklayınız. override= parent [CODE]classtaki bir metot ile aynı signature'a sahip ancak farklı işlemler yapacak bir metot yazmak, overloading=parent class'taki bir metot ile aynı isme sahip fakat farklı parametreleri alan bir metot yazmak class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? metot override edilmiş ise dynamic binding, yoksa static binding yapılır java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? bu metotlar override edilemeyeceğinden ötürü her zaman static binding ile bağlanırlar overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading -> static binding overriding -> dynamic binding overload edilmiş bir metot çalışırken compile zamanında hangisinin çalışacağı bellidir ancak override edilmiş bir metot için hangi kod parçasının çalışacağı program çalıştırılırken belirlenir dinamik bağlamada jvm'nin görevi nedir? objeye en yakın olan override'ı bulup o metodu çalıştırmak java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? b, a'nın subclass'ı olsun. her b objesi aynı zamanda bir a olduğundan upcasting yaparken sorun yaşanmaz ancak her a objesi aynı zamanda b olmak zorunda değildir bu sebeple downcasting yapılırken sorun yaşanır java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? - [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dinamik bağlama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class en az bir metodu abstract olan classtır. bu metodun ne yapacağı belli olmadığından abstract class objesi oluşturulamaz. abstract class ve interfacelerin objesi oluşturulamadığından constructoru olmasının bi anlamı yoktur. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstract a classı olsun. abstract b extends a classı olsun. a'daki bir abstract metodu b'de implement edip b'de başka bir abstract metot yazarsak hem abstractlığını bozmamış oluruz hem de parent classından aldığı abstract metodu implement etmiş oluruz. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract classları bir reference type olarak kullanabiliriz. abstract metotlar parent [CODE]classta gerekli olmayan ancak subclasslarda override edilecek metotları çağırmamızı sağlar abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar tip olarak kullanılabilirken interfaceler tip olarak kullanılamaz marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker=işlevi yok,sınıflandırma vs. amaçlı functional=metotları, değişkenleri bulunur bir [CODE]class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet evet abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract classın objesi oluşturulmaya çalışılmış, mümkün değildir. shape c = [CODE]new circle();[/CODE] şeklinde yazılmalıydı. output : drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? hayır, hangi metodun çalışacağı belli değildir. super.show(); yerine a.show(); ya da b.show(); yazılmalıdır. bunlara göre output: a -ya da- b olur. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. run-time exception = outofboundexception java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? override ederken bir üstteki metottan daha genel veya farklı tür bir exception atamayız. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu exception atılsa da atılmasa da en sonda çalışır java'da kendi exceptionunuzu nasıl tanımlarsınız? exception e = [CODE]new exception();[/CODE] ile yeni exception objesi oluşturulabilir, class myexception extends exception ile yeni bir exception classı oluşturulabilir java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? o metodun çağırıldığı diğer metotların da bu exception karşısında yapması gereken işlemler vardır, onların da görebilmesi için tekrar aynı exception fırlatılabilir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done -1 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? 2 tane catch bloğu olduğu ve exception türü ikisine de uyduğu için hangisini çalıştıracağını bilemez, ikisinden biri silinirse kod çalışacaktır. output da buna göre trying m1 caugth1 ya da trying m1 caught2 olabilir. bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; // çınar şahin 241101012 [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] factory.work(); factory.pr[CODE]intfactory();[/CODE] factory.chargeallrobots(); factory.pr[CODE]intfactory();[/CODE] [CODE]string s = ""a1b2"";[/CODE] pr[CODE]intall(s,0);[/CODE] } [CODE]public static void printall(string s,int index) {[/CODE] if(index+1==s.length()) { system.exit(0); } else if(s.charat(index)>64 & s.charat(index)<91) { system.out.println(s.substring(0, index+1).tolowercase() + s.sub[CODE]string(index+1));[/CODE] } else if(s.charat(index)>96 & s.charat(index)<123) { system.out.println(s.substring(0, index+1).touppercase() + s.sub[CODE]string(index+1));[/CODE] } else system.out.pr[CODE]intln(s);[/CODE] pr[CODE]intall(s,index+1);[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name,string type,int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; isoperational = true; } [CODE]public string getname() {[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return new string(type);[/CODE] } [CODE]public int getbatterylevel() {[/CODE] [CODE]int x = batterylevel;[/CODE] [CODE]return x;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] boolean x = isoperational; [CODE]return x;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]int(""robot name: ""+name);[/CODE] system.out.pr[CODE]int("" robot type: ""+type);[/CODE] system.out.pr[CODE]int("" battery level: ""+batterylevel+""%"");[/CODE] system.out.pr[CODE]intln("" operational?: ""+isoperational);[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name,string location) {[/CODE] this.name = name; this.location = location; robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] for(robot robot : robots) robot.setbatterylevel(100); } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]int(""factory name: ""+name);[/CODE] system.out.pr[CODE]intln("" location: ""+location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] for(robot robot : robots) robot.pr[CODE]introbot();[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public void work() {[/CODE] [CODE]for(robot robot : robots) {[/CODE] robot.setbatterylevel(robot.getbatterylevel()-15); if(robot.getbatterylevel()<0) robot.setbatterylevel(0); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 150;[/CODE] } [CODE]public boolean hasenoughbattery() {[/CODE] [CODE]return batterylife >= 10;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""produced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln();[/CODE] robotfactory.gettotalrobots(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(hasenoughbattery()) {[/CODE] system.out.println(""[""+modelname+""]""+"" scanning for threats... armed: ""+isarmed); batteryl[CODE]ife -= 10;[/CODE] } else system.out.println(""[""+modelname+""]""+"" not enough battery to scan threats...""); } [CODE]public void togglearmedmode() {[/CODE] if(isarmed) system.out.pr[CODE]intln(""security robot - ""+modelname+"" is now unarmed"");[/CODE] else system.out.pr[CODE]intln(""security robot - ""+modelname+"" is now armed"");[/CODE] isarmed = !isarmed; } protected boolean getisarmed() { [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if(hasenoughbattery()) {[/CODE] system.out.println(""[""+modelname+""]""+"" cleaning in progress... cleaning power: ""+cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } else system.out.println(""[""+modelname+""]""+"" not enough battery to clean...""); } [CODE]public void boostcleaningpower(int miktar) {[/CODE] cleaningpower += miktar; system.out.pr[CODE]intln(""cleaningrobot - ""+modelname+"" now has cleaning power: ""+cleaningpower);[/CODE] } protected [CODE]int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; private [CODE]static int totalrobots;[/CODE] [CODE]public robotfactory() {[/CODE] this.robots = [CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname,batterylife,cleaningpower));[/CODE] totalrobots++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname,batterylife,isarmed));[/CODE] totalrobots++; } [CODE]public void performalltasks() {[/CODE] for(abstractrobot robot : robots) robot.per[CODE]formtask();[/CODE] } [CODE]public void displayrobots() {[/CODE] for(abstractrobot robot : robots) if(robot instanceof cleaningrobot) system.out.println(""cleaningrobot - model: ""+robot.modelname+"",""+"" battery: ""+robot.batterylife+"",""+"" cleaning power: ""+ ((cleaningrobot) robot).getcleaningpower()); else system.out.println(""securityrobot - model: ""+robot.modelname+"",""+"" battery: ""+robot.batterylife+"",""+"" armed: ""+ ((securityrobot) robot).getisarmed()); } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] for(abstractrobot robot : robots) if(robot instanceof cleaningrobot) ((cleaningrobot) robot).boostcleaningpower(miktar); } [CODE]public void togglesecurityrobotsmode() {[/CODE] for(abstractrobot robot : robots) if(robot instanceof securityrobot) ((securityrobot) robot).togglearmedmode(); } [CODE]public static void gettotalrobots() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam ""+totalrobots+"" robot uretildi"");[/CODE] } } 0"
9905145,1,"9905145 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class soru3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] count s1 = [CODE]new count(""10001"");[/CODE] count s2 = [CODE]new count(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class count{[/CODE] [CODE]public string numbers;[/CODE] [CODE]public count(string str) {[/CODE] this.numbers = str; } [CODE]public int say() {[/CODE] if(numbers.length() == 0) { [CODE]return 0;[/CODE] } if(numbers.charat(0) == '1') { numbers = numbers.sub[CODE]string(1);[/CODE] [CODE]return 1 + say();[/CODE] } [CODE]else {[/CODE] numbers = numbers.sub[CODE]string(1);[/CODE] [CODE]return say();[/CODE] } } } [CODE]public class soru2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; cocktailsort(arr); } [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length-1; i++) { [CODE]if(arr[i] > arr[i+1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i+1]; arr[i+1] = temp; count++; } } [CODE]if(count == 0) {[/CODE] [CODE]for(int j = 0;[/CODE] j < arr.length; j++) { system.out.pr[CODE]int(arr[j]);[/CODE] } } [CODE]else {[/CODE] cocktailsort(arr); } } } [CODE]public class soru1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int x = 5;[/CODE] system.out.pr[CODE]intln(collatz(x));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]else if ( i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz((i*3) + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] [CODE]if(s instanceof karisikcalma) {[/CODE] strateji = [CODE]new karisikcalma();[/CODE] } [CODE]else if(s instanceof siralicalma) {[/CODE] strateji = [CODE]new siralicalma();[/CODE] } [CODE]else if(s instanceof rockcuozelcalma) {[/CODE] strateji = [CODE]new rockcuozelcalma();[/CODE] } } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki) {[/CODE] sarki.oynat(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim,sanatci); } [CODE]void gosterklasikozellikleri() {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik]"" + sanatci + "" "" + isim + ""(hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim,sanatci); } [CODE]void gostermetalozellikleri() {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; system.out.pr[CODE]intln(metalozellik);[/CODE] } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal]"" + sanatci + "" "" + isim + ""("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim,sanatci); } [CODE]void gosterrockozellikleri() {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock]"" + sanatci +"" ""+ isim + ""(huzurlu ve nostaljik)"");[/CODE] } } import java.util.list; import java.util.random; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]int x = 0;[/CODE] [CODE]int i = 0;[/CODE] while(i<sarkilistesi.size()) { x = (int) (math.random()*5+0); sarkilistesi.get(x).oynat(); i++; } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]public abstract void cal(list<sarki> sarkilistesi);[/CODE] } abstraction kavramını açıklayınız. bize gerektigi kadariyla görmek geri kalanini önemsememek (blackbox) dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mumkundur employee, hourlyemp in ata classidir o yuzden hourlyemp de bir employedir ancak tam tersi mumkun degil protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier daha yakindir(default) çünkü package ve classtan erisimi var java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? ata class daki verileri kullanmak icin super olmasi gerekiyor ve her class en sonunda objecte baglandigi icin super olmasi gerek java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? edemez çünkü b ve c nin ortak ozellikleri var ise b c yi extend ederdi veya c b yi ederdi java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a ve b nin birbirinin alt classi olup olmadigini kontrol eder metot overriding ve overloading kavramlarını açıklayınız. metot overriding ayni ismi ve parametreleri kullanan 2 metotu kasteder, overloading ise ayni ismi kullanan ancak farkli parametreleri olan metotlari kasteder [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? sonradan degistirmek istiyorsan dynamic kullanmamiz gerek (overwriting), static icindekileri sonradan degistiremiyoruz java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? overwriting yapilamadiklari icin static ile baglanirlar(üçününde ortak ozelligi) overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overridingde dynamic, loadingde static ve dynamic dinamik bağlamada jvm'nin görevi nedir? overwriting yazilan metotlari ve classlari kontrol etmesi, hangisinin kullanilacagina karar verilmesi java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? java otomatik olarak upcastingi gerceklestirir ancak bunun downcasting olarak algilanmasi icin parantez icinde bunu belirtmemiz gerek java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? kullandigimiz seyler daha onceden yaratilmadigindan onlari kullanmak mumkun olmazdi veya bütün olarak düzgün bir siraya koymamiz gerekirdi runtimeda oluşup kullanilmasi icin class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? parent statik baglama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dinamik baglama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract sonradan degistirilebilen, ici sonradan doldurulabilen classlar icin kullanilir. evet olabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilebilir, abstract metotismi(parametreler) seklinde yazabiliyoruz abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. sonradan degistirilebilme, overwrite, farkli yerlerde farklı kullanimlar abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler tip olarak kullanilabilir ancak abstract kullanilamaz. my[CODE]interface obj2 mumkundur marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? iki sorunun cevabida evet abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? c.draw() obje shape de acildigi icin calismiyor bu yuzden circle c = [CODE]new circle() yaparsak output: drawing circle displaying interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? super.show metodunun a ve b interfacelerinden hangisini sececegi belirsiz bu yuzden compile etmez,o yuzden c implements a diye duzeltirsek output: a java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2, checked ve unchecked java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws komudu icin atilan seyin throwable olmasi gerekiyor, override edilen metotlara sirayla bakmak gerekir finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bolugu scan gibi sonrasinda kapanmasi gereken metodlari kapatmak icin kullanilabilir, finally blogu her durumda çalışır java'da kendi exceptionunuzu nasıl tanımlarsınız? yazdigimiz [CODE]classi extends exception yaparak java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? sorunu tam olarak cozebilmek icin tekrar firlatilmasi gerekiyor olabilir, veya baska bir yerde hataya sebep olup olmadigina bakmak icin static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finalyy oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir ancak catch blogunda en uste exception u koydugumuz icin altindaki ioexception hicbir sey yakalayamaz(exception daha genel oldugu icin kendisi tutar) trying m1 caught 1 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] [CODE]int y = 2*uzunluk(str);[/CODE] sort(str,y); // sonuncusu neden null dönüyor çözemedim, ilk başta yanlış anladığım tarafı yorum satına alıp // aşağısına başka bir çözüm yapmak zorunda kaldım } /*[CODE]public static string sort(string str) {[/CODE] if(str.length() == 0) { [CODE]return """";[/CODE] } [CODE]else {[/CODE] int x = str.charat(0); [CODE]if(x <= 9) {[/CODE] str = str.sub[CODE]string(1);[/CODE] } } if(str.length() != 0) { string s1 = str.sub[CODE]string(0,1);[/CODE] string s2 = str.sub[CODE]string(1);[/CODE] char a = str.charat(0); [CODE]int b = (int) a;[/CODE] [CODE]if(b < 97) {[/CODE] s1.tolowercase(); } [CODE]else if(b > 97) {[/CODE] s1.touppercase(); } str = s1 + s2; } [CODE]return"""";[/CODE] } */ [CODE]public static int uzunluk(string str) {[/CODE] string str1 = str.touppercase(); [CODE]int x = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < str.length(); i++) { if(str1.charat(i) >= 65 && str1.charat(i) < 97) { x++; } } [CODE]return x;[/CODE] } [CODE]public static void sort(string str, int y) {[/CODE] [CODE]string[] arr = new string[y];[/CODE] arr[0] = str; [CODE]int t = 1;[/CODE] [CODE]for(int i = 1;[/CODE] i < y+1; i++) { if(str.charat(i-1) >= 65 && str.charat(i-1) < 97) { string str2 = str.tolowercase(); string s1 = str.sub[CODE]string(0,i-1);[/CODE] string s2 = str2.sub[CODE]string(i-1,i);[/CODE] string s3 = str.sub[CODE]string(i);[/CODE] arr[t] = s1 + s2 + s3; t++; } else if(str.charat(i-1) >= 97) { string str3 = str.touppercase(); string s1 = str.sub[CODE]string(0,i-1);[/CODE] string s2 = str3.sub[CODE]string(i-1,i);[/CODE] string s3 = str.sub[CODE]string(i);[/CODE] arr[t] = s1 + s2 + s3; t++; } } [CODE]for(int i = 0;[/CODE] i < y; i++) { system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } } import java.util.arraylist; [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public void charge() {[/CODE] this.batterylevel = 100; } robot() { this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel) {[/CODE] isoperational = true; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: ""+name+""robot type: ""+type+""batterylevel: ""+batterylevel+""isoperational: ""+isoperational);[/CODE] } } [CODE]class factory extends robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location) {[/CODE] } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public void addrobot(robot robot) {[/CODE] //arraylist kullanımını bilmediğim için oluşan robotları burda ekleyemiyorum } [CODE]public void chargeallrobots() {[/CODE] //super.batterylevel = 100 yapmam gerekiyor ama aynı şekil arraylisti bilmiyorum } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] //system.out.pr[CODE]intln(""robot name: ""+ +""type: ""+ +""battery level: ""+ +""isoperational: ""+);[/CODE] } [CODE]public void work() {[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] } [CODE]public string getmodelname() {[/CODE] return this.modelname = modelname; } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] // burada robotfactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz system.out.pr[CODE]intln(""\ntoplam üretilen robot sayısı:"");[/CODE] factory.toplamroboturetimi(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.isarmed = isarmed; } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + ""scanning for threats..."" + ""armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""]"" + ""not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] [CODE]if(!isarmed) {[/CODE] isarmed = true; } [CODE]else if(isarmed) {[/CODE] isarmed = false; } } [CODE]public string getmodelname() {[/CODE] return this.modelname = modelname; } [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public boolean getisarmed() {[/CODE] return this.isarmed = isarmed; } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + ""cleaning in progress..."" + ""cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""]"" + ""not enough battery to clean...""); } } [CODE]public string getmodelname() {[/CODE] return this.modelname = modelname; } [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public int getcleaningpower() {[/CODE] return this.cleaningpower = cleaningpower; } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower += 10; } } import java.awt.*; import java.util.arraylist; import java.util.list; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; robotfactory() { robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot cleaningrobot = [CODE]new cleaningrobot(modelname,batterylife,cleaningpower);[/CODE] robots.add(cleaningrobot); } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot securityrobot = [CODE]new securityrobot(modelname,batterylife,isarmed);[/CODE] robots.add(securityrobot); } [CODE]public void performalltasks() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { robots.get(i).per[CODE]formtask();[/CODE] } else if(robots.get(i) instanceof securityrobot) { robots.get(i).per[CODE]formtask();[/CODE] } } } [CODE]public void displayrobots() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { string modelname = robots.get(i).getmodelname(); int batterylife = ((cleaningrobot) robots.get(i)).getbatteryl[CODE]ife();[/CODE] int cleaningpower = ((cleaningrobot) robots.get(i)).getcleaningpower(); system.out.pr[CODE]intln(""cleaningrobot - model: "" + modelname + ""battery: "" + batterylife + ""cleaning power: "" + cleaningpower);[/CODE] } else if(robots.get(i) instanceof securityrobot) { string modelname = robots.get(i).getmodelname(); int batterylife = ((securityrobot) robots.get(i)).getbatteryl[CODE]ife();[/CODE] boolean isarmed = ((securityrobot) robots.get(i)).getisarmed(); system.out.pr[CODE]intln(""securityrobot - model: "" + modelname + ""battery: "" + batterylife + ""armed: "" + isarmed);[/CODE] } } } [CODE]public void upgradecleaningrobots() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { ((cleaningrobot) robots.get(i)).boostcleaningpower(); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof securityrobot) { ((securityrobot) robots.get(i)).togglearmedmode(); } } } [CODE]public void toplamroboturetimi() {[/CODE] system.out.println(""tüm fabrikalar tarafından toplam "" + robots.size() + "" robot üretildi""); } } 1"
5902250,3,"5902250 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class cocktailshakersort {[/CODE] private [CODE]static boolean yon = false;[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; cocktailsort(arr); system.out.pr[CODE]int(""sorted array: "");[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } [CODE]public static int[] cocktailsort(int[] arr) {[/CODE] [CODE]if(issorted(arr)) {[/CODE] [CODE]return arr;[/CODE] } [CODE]if(yon) {[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length-1; i++) { [CODE]if(arr[i] > arr[i+1]) {[/CODE] [CODE]int temp = arr[i+1];[/CODE] arr[i+1] = arr[i]; arr[i] = temp; } } } [CODE]else {[/CODE] for(int i = arr.length-1; i > 1; i--) { [CODE]if(arr[i] < arr[i-1]) {[/CODE] [CODE]int temp = arr[i-1];[/CODE] arr[i-1] = arr[i]; arr[i] = temp; } } } yon = !yon; [CODE]return cocktailsort(arr);[/CODE] } [CODE]public static boolean issorted(int[] arr) {[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length-1; i++) { [CODE]if(arr[i] > arr[i+1]) return false;[/CODE] } [CODE]return true;[/CODE] } } import java.util.scanner; [CODE]public class collatz {[/CODE] [CODE]static int count = 0;[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan = new scanner(system.in); system.out.pr[CODE]int(""enter a number: "");[/CODE] int number = scan.next[CODE]int();[/CODE] collatz(number); system.out.pr[CODE]int(""the result is: "" + count);[/CODE] scan.close(); } [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i == 1) {[/CODE] [CODE]return 1;[/CODE] } count++; [CODE]if(i%2 == 0) {[/CODE] [CODE]return collatz(i/2);[/CODE] } [CODE]else {[/CODE] [CODE]return collatz(3*i + 1);[/CODE] } } } [CODE]public class sayac {[/CODE] [CODE]string word;[/CODE] [CODE]int birler, index;[/CODE] sayac([CODE]string word){[/CODE] this.word = word; this.birler = 0; this.index = 0; } [CODE]int say() {[/CODE] if(word.charat(index) == '1') { birler++; } if(index == word.length()-1) { [CODE]return birler;[/CODE] } index++; [CODE]return say();[/CODE] } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""110000111"");[/CODE] system.out.println(s1.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab2;[/CODE] import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] this.strateji.cal(sarkilistesi); } } [CODE]package lab2;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] // bu kismi cikti ornegini saglayacak sekilde doldurun [CODE]if(sarki instanceof metalsarki) {[/CODE] system.out.println(sarki.getartist() + ""-"" + sarki.getname() + ""[ozellik: "" + ((metalsarki) sarki).getozellik() + ""]""); } } } } [CODE]package lab2;[/CODE] [CODE]public class klasiksarki extends sarki{[/CODE] private [CODE]string klasikozellik;[/CODE] klasiksarki([CODE]string isim, string sanatci, string klasikozellik){[/CODE] this.isim = isim; this.sanatci = sanatci; this.klasikozellik = klasikozellik; } [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.klasikozellik = ""haf[CODE]if ve sakin"";[/CODE] } [CODE]void gosterklasikozellikleri() {[/CODE] system.out.println(""("" + this.klasikozellik + "")""); } @override [CODE]void oynat() {[/CODE] system.out.print(""[klasik] "" + this.sanatci + "" - "" + this.isim); gosterklasikozellikleri(); } [CODE]string getozellik(){[/CODE] return this.klasikozellik; } [CODE]string getname() {[/CODE] return this.isim; } [CODE]string getartist() {[/CODE] return this.sanatci; } } [CODE]package lab2;[/CODE] [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } metalsarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = ""bagiranadamlar""; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.println(""("" + this.metalozellik + "")""); } @override [CODE]void oynat() {[/CODE] system.out.print(""[metal] "" + this.sanatci + "" - "" + this.isim); gostermetalozellikleri(); } [CODE]string getozellik(){[/CODE] return this.metalozellik; } [CODE]string getname() {[/CODE] return this.isim; } [CODE]string getartist() {[/CODE] return this.sanatci; } } [CODE]package lab2;[/CODE] [CODE]public class rocksarki extends sarki {[/CODE] private [CODE]string rockozellik;[/CODE] rocksarki([CODE]string isim, string sanatci, string rockozellik){[/CODE] this.isim = isim; this.sanatci = sanatci; this.rockozellik = rockozellik; } rocksarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; this.rockozellik = ""huzurlu ve nostaljik""; } [CODE]void gosterrockozellikleri() {[/CODE] system.out.println(""("" + this.rockozellik + "")""); } @override [CODE]void oynat() {[/CODE] system.out.print(""[rock] "" + this.sanatci + "" - "" + this.isim); gosterrockozellikleri(); } [CODE]string getozellik(){[/CODE] return this.rockozellik; } [CODE]string getname() {[/CODE] return this.isim; } [CODE]string getartist() {[/CODE] return this.sanatci; } } [CODE]package lab2;[/CODE] import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]package lab2;[/CODE] [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] //getter ve setter'lar serbest brakld. abstract [CODE]string getname();[/CODE] abstract [CODE]string getartist();[/CODE] abstract [CODE]string getozellik();[/CODE] } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean lastwasrock = false; [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarki siradakisarki = sarkilistesi.get(i); [CODE]if(lastwasrock) {[/CODE] [CODE]if(siradakisarki instanceof rocksarki) {[/CODE] siradakisarki.oynat(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] siradakisarki.oynat(); lastwasrock = false; } } [CODE]else {[/CODE] [CODE]if(siradakisarki instanceof rocksarki) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yksek"");[/CODE] lastwasrock = true; } siradakisarki.oynat(); } } } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir işlemi tekrar tekrar çağırarak problemleri adım adım çözmektir recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. i̇stenen sonuca ulaşılıp ulaşılmadığını kontrol eden bir kod parçası ve eğer hedefe ulaşılmadıysa “parçalar” üzerinde istenen işlemi yapan kısım. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. bir stack üzerinde tekrar tekrar yeni işlemler açıyor, sonsuz/beklenenden uzun recursive döngüye girildiğinde ise stackoverflow ile çıkış yapıyor [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. her iki şekilde de yapılabilir fakat iteratif olarak daha verimlidir. i̇teratif yolla basit şekilde yapılabilen kodlar recursive yapılırsa kod verimsiz çalışabilir. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? if(str.length() == 1) stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack, işlemlerin ayrı ayrı, kabaca üst üste konulduğu ve ayrı ayrı çalıştırıldığı hafızadır. bu hafızaya çok fazla işlem girerse overflow olur. örnek sonsuz recursion tail recursion nedir, kısaca açıklayınız. - abstraction kavramını açıklayınız. hide states, reveal behaviour. gerekli olan bilgileri paylaşırken diğer bilgileri saklamak. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür fakat tersi mümkün değildir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? default, no modifier java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? nasıl her aslan bir hayvansa, her child class kendi super classına üyedir. super class nesnesi oluşturmak zorundadır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a, b classı veya b’den türetilmiş bir class demektir. metot overriding ve overloading kavramlarını açıklayınız. override, metodun yaptığı işi, ismini, return type’ını, signature’ını tamamiyle yeni yazacağımız kodla değiştirmek demek. overload ise, metodun sadece signature’ını değiştirebildiğimiz ve içine yeni kod yazabildiğimiz bir yöntem. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent 1020 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static binding, compile time’da;[/CODE] dynamic binding ise runtime’da gerçekleşir. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? sonradan @override edilmeleri gibi bi durum yoktur. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overload static, @override ise runtime’da gerçekleşir. metod overload edildiğinde metodu nereden çağıracağımız, signature’dan bellidir. fakat override işinde java, tek tek kodu gezer, kodu bağlayan en son @override şeklini bulur. bulamazsa bulduğunu çağırır. onu da bulamazsa yapacak bişey yok dinamik bağlamada jvm'nin görevi nedir? kodu gezip, çağırılan elemanın nerede çağırıldığına bağlı olarak, bir scope dahilinde adım adım o elemanı aramaktır. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? türkçe anlatırsak, her aslan bir hayvandır ve hayvanların her özelliğini gösterir. fakat her hayvan aslan değildir. bir aslan objesi oluşturduğumuzda aslan olmanın her özelliğini yerine getirmesini bekleriz fakat heap’te hayvan objesine bağlarsak, hayvan sınıfı, aslan sınıfının gerektirdiklerini karşılayamaz. aslan daha detaylıdır çünkü. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? kodumuzu başlatmak, çalıştırmak hep uzun sürerdi. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child. dinamik bağlama var. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book i̇lk objede statik, ikinci objede dinamik bağlama var. robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package quiz2;[/CODE] [CODE]interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package quiz2;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] return this.modelname; } [CODE]public abstract void performtask();[/CODE] [CODE]public void recharge() {[/CODE] if(this.batterylife < 100) this.batteryl[CODE]ife = 100;[/CODE] else this.batteryl[CODE]ife += 10;[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""produced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.gettotalproduction(); // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]package quiz2;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife >= 10) {[/CODE] system.out.println(""["" + this.getmodelname() + ""] scanning for threats...armed: "" + this.getar()); this.batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + this.getmodelname() + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] this.isarmed = !this.isarmed; system.out.println(""securityrobot - "" + this.getmodelname() + "" is now "" + this.strarmed()); } [CODE]public boolean getar() {[/CODE] return this.isarmed; } @override [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } [CODE]public string strarmed() {[/CODE] if(this.isarmed) [CODE]return ""armed"";[/CODE] [CODE]return ""unarmed"";[/CODE] } } [CODE]package quiz2;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife >= 10) {[/CODE] system.out.println(""["" + this.getmodelname() + ""] cleaning in progress...cleaning power: "" + this.getcp()); this.batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + this.getmodelname() + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] this.cleaningpower += miktar; system.out.println(""cleaningrobot - "" + this.getmodelname() + "" now has cleaning power: "" + this.getcp()); } [CODE]public int getcp() {[/CODE] return this.cleaningpower; } @override [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } } [CODE]package quiz2;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int toplamroboturetimi = 0;[/CODE] // bu ekilde ???'ni hallettim. robotfactory() { this.robots = [CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] toplamroboturetimi++; // byle } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] toplamroboturetimi++; // byle } [CODE]public void performalltasks() {[/CODE] for(abstractrobot robot : robots) robot.per[CODE]formtask();[/CODE] } [CODE]public void displayrobots() {[/CODE] [CODE]for(abstractrobot robot : robots) {[/CODE] [CODE]if(robot instanceof cleaningrobot) {[/CODE] cleaningrobot cr = (cleaningrobot) robot; system.out.println(""cleaningrobot - model: "" + cr.getmodelname() + "", battery: "" + cr.getbatterylife() + "", cleaning power: "" + cr.getcp()); } [CODE]else if(robot instanceof securityrobot) {[/CODE] securityrobot sr = (securityrobot) robot; system.out.println(""securityrobot - model: "" + sr.getmodelname() + "", battery: "" + sr.getbatterylife() + "", armed: "" + sr.getar()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof cleaningrobot) {[/CODE] cleaningrobot cr = (cleaningrobot) robot; cr.boostcleaningpower(miktar); cr.recharge(); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof securityrobot) {[/CODE] securityrobot sr = (securityrobot) robot; sr.togglearmedmode(); sr.recharge(); } } } [CODE]public static void gettotalproduction() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan "" + toplamroboturetimi + "" robot uretildi"");[/CODE] } } 3"
4810237,2,"4810237 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package collatz;[/CODE] import java.util.scanner; [CODE]public class main {[/CODE] [CODE]static int adim_sayisi=0;[/CODE] [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i==1){[/CODE] [CODE]return adim_sayisi;[/CODE] } [CODE]if(i%2==0) {[/CODE] i/=2; adim_sayisi++; collatz(i); } [CODE]else {[/CODE] i=i*3+1; adim_sayisi++; collatz(i); } [CODE]return adim_sayisi;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(""sayı giriniz"");[/CODE] scanner scanner=new scanner(system.in); int sayi=scanner.next[CODE]int();[/CODE] [CODE]if(sayi<=0) {[/CODE] system.out.pr[CODE]intln(""geçersiz sayı"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(sayi+"" sayısı ""+collatz(sayi)+"" adımda 1 sayısına dönüyor"");[/CODE] } } } [CODE]package coctail;[/CODE] [CODE]public class main {[/CODE] [CODE]static int i=0;[/CODE] [CODE]static int j=1;[/CODE] [CODE]static int k=0;[/CODE] [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]if(dogrumu(arr)==1){[/CODE] system.out.pr[CODE]intln(arr);[/CODE] } [CODE]else {[/CODE] while(arr[j]<arr[arr.length]) { [CODE]if(arr[i]>arr[j]){[/CODE] [CODE]int gecici=arr[i];[/CODE] arr[i]=arr[j]; arr[j]=gecici; i=j; j++; cocktailsort(arr); } [CODE]else {[/CODE] j++; cocktailsort(arr); } } i=0; j=1; cocktailsort(arr); } } [CODE]public static int dogrumu(int []dizi) {[/CODE] while(dizi[k]<dizi[dizi.length]) { [CODE]if(dizi[k]>dizi[k+1]) {[/CODE] [CODE]return -1;[/CODE] } [CODE]else {[/CODE] k++; dogrumu(dizi); } } [CODE]return 1;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] [CODE]int [] dizi= {[/CODE]5,4,1,2}; cocktailsort(dizi); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package muzikcalar;[/CODE] import java.util.list; [CODE]public class muzikcalar {[/CODE] muzikcalar() { } private calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji=s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] if(strateji.equals([CODE]new siralicalma())) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] system.out.println(""[""+sarki.getclass()+""] ""+sarki.getsanatci()+"" - ""+sarki.getisim()); } } } else if(strateji.equals([CODE]new karisikcalma())) {[/CODE] sarkilistesi.listiterator(); system.out.pr[CODE]intln(sarkilistesi);[/CODE] } [CODE]else {[/CODE] } } } [CODE]package muzikcalar;[/CODE] [CODE]public class main {[/CODE] } [CODE]package muzikcalar;[/CODE] [CODE]public class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] super(isim,sanatci); } [CODE]void gosterklasikozellik() {[/CODE] system.out.println(""[""+sarki.); } } [CODE]package muzikcalar;[/CODE] [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super(isim,sanatci); this.setmetalozellik(metalozellik); } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(getisim());[/CODE] system.out.pr[CODE]intln(getsanatci());[/CODE] system.out.pr[CODE]intln(getmetalozellik());[/CODE] } [CODE]public string getmetalozellik() {[/CODE] [CODE]return metalozellik;[/CODE] } [CODE]public void setmetalozellik(string metalozellik) {[/CODE] this.metalozellik = metalozellik; } } [CODE]package muzikcalar;[/CODE] [CODE]public class rocksarki {[/CODE] } [CODE]package muzikcalar;[/CODE] [CODE]public class karisikcalma {[/CODE] } [CODE]package muzikcalar;[/CODE] [CODE]public class siralicalma {[/CODE] siralicalma() { } void.cal(){ } } [CODE]package muzikcalar;[/CODE] [CODE]public abstract class sarki {[/CODE] private [CODE]string isim;[/CODE] private [CODE]string sanatci;[/CODE] sarki([CODE]string isim, string sanatci) {[/CODE] this.setisim(isim); this.setsanatci(sanatci); } [CODE]public void oynat() {[/CODE] } [CODE]public string getsanatci() {[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setsanatci(string sanatci) {[/CODE] this.sanatci = sanatci; } [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } } [CODE]package muzikcalar;[/CODE] [CODE]public class rockcuozelcalma {[/CODE] } [CODE]package muzikcalar;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] default [CODE]void cal(list<sarki> sarkilistesi) {[/CODE] } } ""recursion"" kavramı nedir, kısaca açıklayınız. geçen hafta derse gelmedim bilmiyorum. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. geçen hafta derse gelmedim bilmiyorum jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. geçen hafta derse gelmedim bilmiyorum [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. geçen hafta derse gelmedim bilmiyorum bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? geçen hafta derse gelmedim bilmiyorum stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. geçen hafta derse gelmedim bilmiyorum tail recursion nedir, kısaca açıklayınız. geçen hafta derse gelmedim bilmiyorum abstraction kavramını açıklayınız. abstraction kavramı java gibi nesne tabanlı olan dillerde kullanıcılara ihtiyaçları olan kadar bilgi vermeyi sağlar. kullanıcılar sadece onlarla alakalı olan bilgilere erişebilir ve bu da karmaşıklığı önler. black box bunun en önemli örneklerinden biridir. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? bilmiyorum protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? package access private modifierına daha yakındır. erişimin en az sıralandığından en çok sıralandığına göre sıra public protected package ve private şeklindedir. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü classın constructor'unun classın java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? bilmiyorum java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b'nin bir örneğiyse b bir nesnedir(object) ve a da b nesnesinin bir örneğidir. metot overriding ve overloading kavramlarını açıklayınız. method overloading parametreleri farklı olan metodların isimleri aynı olarak yazılabilmesidir. bu da signature'ları farklı isimleri aynı olan metotların tanımlanmasını sağlar. metot overriding ise signature'ları aynı olan metotların isimleri farklı olarak tanımlanabilmesidir. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? bilmiyorum [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? bilmiyorum java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? static binding method overloading kullanıldığı durumlarda yapılır. yani aynı sınıfta aynı isimde farklı parametrelerle metod tanımlandığında.dynamic binding ise method overriding kullanıldığı durumlarda yapılır.yani farklı classlarda aynı isimde ve parametrelerde method tanımlandığı durumlarda. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? static,private ve final metodların ortak özelliği parent classtan sub classlara aktarılmasıdır. alt classlara aktarılmadığı için metod overriding işlemi gerçekleşemez dolayısıyla dynamic bindingle bağlanamaz. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading yaparken static binding overriding yaparken dynamic binding gerçekleşir. overloading durumlarında binding compiler aşamasında çözülür. overriding durumlarında ise run time aşamasında çözülür. dinamik bağlamada jvm'nin görevi nedir? bilmiyorum java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? bilmiyorum java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? aynı [CODE]class içerisinde aynı isimle sadece parametrelerin farklı olduğu metodları tanımlayamazdık class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package robotfactory;[/CODE] [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE]// 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(){[/CODE] name=""wall-e""; type=""trash""; batterylevel=100; isoperational=true; } [CODE]public robot(string name ,string type,int batterylevel) {[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; } [CODE]public robot(string name ,string type,int batterylevel,boolean isoperational) {[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; this.isoperational=isoperational; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]int(""robot name:""+name);[/CODE] system.out.pr[CODE]int(""robot type:""+type);[/CODE] system.out.pr[CODE]int(""batterylevel:""+batterylevel);[/CODE] system.out.pr[CODE]int(""isoperational:""+isoperational);[/CODE] } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void charge(int nekadar) {[/CODE] batterylevel+=nekadar; } } [CODE]package robotfactory;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]package robotfactory;[/CODE] import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location) {[/CODE] this.location=location; this.name=name; } [CODE]public factory() {[/CODE] name=""factory1""; location=""moon""; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name:""+name);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void workchargeallrobots() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void work() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).charge(-15); } } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=getbatterylife();[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife>=10) {[/CODE] system.out.println(""|""+modelname+""| scanning for threats... armed:""+isarmed); batteryl[CODE]ife=-10;[/CODE] } [CODE]else {[/CODE] system.out.println(""|""+modelname+""| not enough battery to sean threads...""); } } [CODE]public void togglearmedmode() {[/CODE] [CODE]if(isarmed==false) {[/CODE] isarmed=true; } [CODE]else {[/CODE] isarmed=false; } } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife>=10) {[/CODE] system.out.println(""|""+modelname+""| cleaning in progress... cleaning power:""+cleaningpower); batteryl[CODE]ife=-10;[/CODE] } [CODE]else {[/CODE] system.out.println(""|""+modelname+""| not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int i) {[/CODE] cleaningpower=+i; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot a = [CODE]new cleaningrobot(modelname,batterylife,cleaningpower);[/CODE] robots.add(a); } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot b=[CODE]new securityrobot(modelname,batterylife,isarmed);[/CODE] robots.add(b); } [CODE]public void performalltasks() {[/CODE] securityrobot[] a = (securityrobot[]) robots.toarray(); [CODE]for(int i=0;[/CODE]i<a.length;i++) { a[i].per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] object[] a = robots.toarray(); [CODE]for(int i=0;[/CODE]i<a.length;i++) { system.out.pr[CODE]intln(a[i]);[/CODE] } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] cleaningrobot[] a = (cleaningrobot[]) robots.toarray(); [CODE]for(int i=0;[/CODE]i<a.length;i++) { a[i].boostcleaningpower(miktar); } } [CODE]public void togglesecurityrobotsmode() {[/CODE] securityrobot[] a = (securityrobot[]) robots.toarray(); [CODE]for(int i=0;[/CODE]i<a.length;i++) { a[i].togglearmedmode(); } } [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] } } 2"
9245287,0,"9245287 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] a = {[/CODE] 5, 4, 1, 2, 6 }; cocktailsort(a); for (int x : a) system.out.pr[CODE]intln(x);[/CODE] } [CODE]public static void helper(int i, int[] arr) {[/CODE] if (i + 1 == arr.length) // eger son elemana geldiysek [CODE]return;[/CODE] [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; } helper(i + 1, arr); } [CODE]public static void helper2(int i, int[] arr) {[/CODE] [CODE]if (i == 0) // eger ilk elemana geldiysek - base return;[/CODE] [CODE]if (arr[i - 1] > arr[i]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i - 1]; arr[i - 1] = temp; } helper2(i - 1, arr); } [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length / 2; i++) { helper(i, arr); helper2(arr.length - 1 - i, arr); } } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) return 0;[/CODE] [CODE]if (i % 2 == 0) return collatz(i / 2) + 1;[/CODE] [CODE]else return collatz(3 * i + 1) + 1;[/CODE] } } [CODE]public class q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]string s;[/CODE] [CODE]public sayac(string s) {[/CODE] this.s = s; } [CODE]public int say() {[/CODE] if (s.length() == 1) { // base condition if (s.charat(0) == '1') [CODE]return 1;[/CODE] [CODE]else return 0;[/CODE] } sayac d = new sayac(s.sub[CODE]string(1));[/CODE] if (s.charat(0) == '1') return 1 + d.say(); else return d.say(); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki m = (metalsarki) sarki; system.out.print(m.sanatci + "" - "" + m.name + "" ""); m.gostermetalozellikleri(); } } } } abstract [CODE]class sarki {[/CODE] [CODE]string name;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.name = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(""[ozellik: "" + metalozellik + ""]"");[/CODE] } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + name + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.name = isim; this.sanatci = sanatci; } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + name + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.name = isim; this.sanatci = sanatci; } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + name + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] arraylist<[CODE]integer> a = new arraylist<>();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { a.add(i); } [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { int randomnum = (int) (math.random() * (sarkilistesi.size() - i)); int index = a.get(randomnum); sarkilistesi.get(index).oynat(); a.remove(randomnum); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] private [CODE]string sesduzeyi;[/CODE] [CODE]public rockcuozelcalma() {[/CODE] sesduzeyi = ""normal""; } @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { if (!sesduzeyi.equals(""yuksek"")) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } sesduzeyi = ""yuksek""; } [CODE]else {[/CODE] if (!sesduzeyi.equals(""normal"")) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } sesduzeyi = ""normal""; } sarkilistesi.get(i).oynat(); } } } [CODE]class muzikcalar {[/CODE] calmastratejisi s; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.s = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (s instanceof karisikcalma) {[/CODE] new karisikcalma().cal(sarkilistesi); } [CODE]else if (s instanceof siralicalma) {[/CODE] new siralicalma().cal(sarkilistesi); } [CODE]else if (s instanceof rockcuozelcalma) {[/CODE] new rockcuozelcalma().cal(sarkilistesi); } } } ""recursion"" kavramı nedir, kısaca açıklayınız. bir fonksiyonun kendini çağırması recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case(olmazsa stackoverflow) kodun kendini cagiracagi kisim(recursion) jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stackler halinde işliyor [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iteratif daha verimlidir bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? string.substring(1) ile ilk karakteri çıkararak recursive halde cagiririm.base case [CODE]string length=0 stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. memorye eklenen islemler eger ust uste ramin kaldiramayacagindan fazla stack gelirse stackoverflow olur tail recursion nedir, kısaca açıklayınız. en sonda kendini cagiran recursive fonksiyon abstraction kavramını açıklayınız. kullaniciya sadece ise yarar kadar bilgi veriyoruz. kullanicinin isine yaramayan arka planda bilgisayar tarafindan calistirilan bazi kodlar soyutlanir dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mumkundur cunku hourlyemployee bir employeedir ama tersi mumkun degil protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier(default) private daha yakindir java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? cunku classin metodlarin ve degiskenlerin duzgun calisabilmesi icin oncelikle parent classtaki degiskenler initialize edilmelidir. aksi halde parent classindan inherit ettigi bir degiskeni duzgun kullanamaz java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mumkun degil. her classin bir tane parenti vardir ancak bir parentin birden fazla cocugu(child) olabilir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a, b objenin turu veya subclassi mi diye bakar. yani kalitim agacinda a, b ye esit veya asagi bir classta mi. ornegin animal mammal dog diye olsa dog instance of animal true doner. metot overriding ve overloading kavramlarını açıklayınız. overriding: parentindan aldigi bir metodu ayni signatureda kalmak sartiyla yeniden yazilmasidir, polymorphisim ile iliskilidir. overload: ayni metod ismini parametrelerini degistirerek tekrar yazmaktir ornegin num([CODE]int a) ve num(int a, int b) bir overloadingtir class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? eğer programda o metottan veya degiskenden sadece bir tane varsa static binding yapilir. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? static final ve private override edilemez overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic binding gerceklesir, çünkü program çalışırken polymorphism den dolayı dinamik bağlamada jvm'nin görevi nedir? program çalışırken binding işlemini gerçekleştirmek java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? upcasting yaparken upcasting yapılan classin veya değişkenin bütün özellikleri direkt upcastlenerek aktarılabilir. ama downcasting de ise veri kaybı olabileceğinden izin verilmez. örneğin long değişkenin tuttuğu bir veriyi [CODE]int her zaman tutamayacagindan explicit olarak belirtmek gerekir java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? programın çalışma zamanı artardi program yavaşlardi cost artardi class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dynamic ve output child [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlar daha sonra bir başka subclassta override edilip metodlarin ozellikleri subclassta tanimlanir. abstract classlarin constructori olabilir ancak direkt cagirilamaz, alt classlarin constructorina diğer aktarmak için kullanılabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet edilebilir ancak abatract metodlarin içi boş olmali. adı üstünde soyut classlar abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. üzerinden direkt olarak object olusturulamaz, abstract metodlarin içi boş olmalıdır, sub[CODE]classlarda abstract metodlar override edilmelidir abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler %100 soyut classlar iken abstract classlarin soyutluklari %0-100 arasındadır. tip olarak kullanılabilir çünkü hala onlardan object instantiate etmedik marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interfacede içinde metod bulunmazken functional interface içinde yalnızca bir tane metod bulunur. serializable bir marker interface türüdür. bir [CODE]class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? ikisi de mumkundur abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? [CODE]new shape() hata verir bunun yerine shape c = new circle();[/CODE] yapsak düzelir output drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? compile edilemez super.show() hata verir çünkü fonksiyon iki tane interface implement etmiş. onun yerine a.show() yazarsak çıktı a olur java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. iki çeşittir. checked ve unchecked exceptions.ornegin runtime checked exception iken compile time unchecked exception. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws sadece throwable objeler için geçerlidir. method override edilirken throws yazmak zorunlu değil. eğer yazılırsa parent classin throws ettiği classa eşit veya daha alt seviyede bir exception türü yazılmalıdır. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally blogu hata olsa da olmasa da çalışır. exception atılmayan durumlarda da çalışır. java'da kendi exceptionunuzu nasıl tanımlarsınız? myexception extends throwable or myexception extends exception. yani throwable olan bir objeyi extend ederim. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? exception düzeltiğinden emin olmak. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally done -1 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? unreaceble code trying m1 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; // default olarak isoperational true aldim cunku parametreli constructorda // isoperational icin bir alan verilmemis } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" type: "" + type + "" batterylevel: "" + batterylevel + ""% isoperational: "" + isoperational);[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void isoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string s) {[/CODE] name = s; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string s) {[/CODE] location = s; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> r) {[/CODE] robots = r; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { int b = robots.get(i).getbatterylevel(); robots.get(i).setbatterylevel(b - 15); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot r : robots) {[/CODE] r.pr[CODE]introbot();[/CODE] } } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] pr[CODE]int(s, """", 0);[/CODE] } [CODE]public static void print(string s, string sub, int ind) {[/CODE] if (sub.length() == s.length()) { system.out.pr[CODE]intln(sub);[/CODE] [CODE]return;[/CODE] } if (s.charat(ind) <= '9' && s.charat(ind) >= '0') { print(s, sub + s.charat(ind), ind + 1); } else if (s.charat(ind) <= 'z' && s.charat(ind) >= 'a') { print(s, sub + s.charat(ind), ind + 1); string r = sub + (char) (s.charat(ind) - 32); pr[CODE]int(s, r, ind + 1);[/CODE] } else if (s.charat(ind) <= 'z' && s.charat(ind) >= 'a') { print(s, sub + s.charat(ind), ind + 1); string r = sub + (char) (s.charat(ind) + 32); pr[CODE]int(s, r, ind + 1);[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] protected [CODE]int initialbattery = 100;[/CODE] // default deger 100 alindi [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.initialbattery = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = initialbattery;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.mymethod(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife < 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } } [CODE]public void togglearmedmode() {[/CODE] [CODE]if (isarmed) {[/CODE] isarmed = false; system.out.pr[CODE]intln(""securityrobot - "" + getmodelname() + "" is now unarmed"");[/CODE] } [CODE]else {[/CODE] isarmed = true; system.out.pr[CODE]intln(""securityrobot - "" + getmodelname() + "" is now armed"");[/CODE] } } [CODE]public string tostring() {[/CODE] [CODE]return ""securityrobot - model: "" + modelname + "", battery: "" + batterylife + "", armed: "" + isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] // super koymazsak hata veriyor sebebini arastir this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife < 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean...""); // super.modelname } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] cleaningpower += miktar; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } @override [CODE]public string tostring() {[/CODE] [CODE]return ""cleaningrobot - model: "" + modelname + "", battery: "" + batterylife + "", cleaning power: "" + cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int totalnum = 0;[/CODE] [CODE]public robotfactory() {[/CODE] robots = [CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalnum += 1; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalnum += 1; } [CODE]public void performalltasks() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot a : robots) {[/CODE] system.out.pr[CODE]intln(a);[/CODE] } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { cleaningrobot c = (cleaningrobot) robots.get(i); c.boostcleaningpower(miktar); system.out.println( ""cleaning robot - "" + c.modelname + "" now has cleaning power: "" + c.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof securityrobot) { securityrobot s = (securityrobot) robots.get(i); s.togglearmedmode(); } } } [CODE]public static void mymethod() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalnum + "" robot uretildi"");[/CODE] } } 0"
3963286,2,"3963286 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. import java.util.scanner; [CODE]public class collatz {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan=new scanner(system.in); system.out.println(collatz(scan.next[CODE]int()));[/CODE] scan.close(); } [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i==1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i%2==0) {[/CODE] [CODE]return collatz(i/2)+1;[/CODE] } [CODE]else {[/CODE] [CODE]return collatz(i*3+1)+1;[/CODE] } } } [CODE]public class birler {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s=[CODE]new sayac(""10001"");[/CODE] system.out.println(s.say()); } } [CODE]class sayac {[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str) {[/CODE] this.str=str; } [CODE]public int say() {[/CODE] if(str.equals("""")) { [CODE]return 0;[/CODE] } else if(str.charat(0)=='1') { str=str.sub[CODE]string(1);[/CODE] [CODE]return 1+say();[/CODE] } [CODE]else {[/CODE] str=str.sub[CODE]string(1);[/CODE] [CODE]return 0+say();[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.list; import java.util.random; [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi arraylist<sarki> sarkilistesi =[CODE]new arraylist<>();[/CODE] sarkilistesi.add(s1); sarkilistesi.add(s2); sarkilistesi.add(s3); sarkilistesi.add(s4); sarkilistesi.add(s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] ((metalsarki) s1).gostermetalozellikleri(); } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatçi;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim,string sanatçi,string metalozellik ) {[/CODE] this.isim=isim; this.sanatçi=sanatçi; this.metalozellik=metalozellik; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal]""+sanatçi+""-""+isim+""(""+metalozellik+"")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatçi+""-""+isim+"" [özellik:""+metalozellik+""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim,string sanatçi) {[/CODE] this.isim=isim; this.sanatçi=sanatçi; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock]""+sanatçi+""-""+isim+ ""(huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim,string sanatçi ) {[/CODE] this.isim=isim; this.sanatçi=sanatçi; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k]""+sanatçi+""-""+isim+"" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(arraylist<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi) {[/CODE] [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++) { sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi) {[/CODE] arraylist<sarki> fakelist=sarkilistesi; random random=[CODE]new random();[/CODE] while(fakelist.size()!=0) { int i=random.nextint(fakelist.size()); fakelist.get(i).oynat(); fakelist.remove(i); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] boolean rock=true; [CODE]public void cal(arraylist<sarki> sarkilistesi) {[/CODE] [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++) { if(rock&&sarkilistesi.get(i) instanceof rocksarki) { system.out.pr[CODE]intln("" [bilgi] ses duzeyi: yuksek"");[/CODE] sarkilistesi.get(i).oynat(); rock=true; } else if((!rock&&sarkilistesi.get(i) instanceof rocksarki)) { sarkilistesi.get(i).oynat(); } [CODE]else if(!rock) {[/CODE] system.out.pr[CODE]intln("" [bilgi] ses duzeyi: normal"");[/CODE] sarkilistesi.get(i).oynat(); rock=true; } [CODE]else {[/CODE] sarkilistesi.get(i).oynat(); } } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji=s; } [CODE]void muzikcal(arraylist<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } ""recursion"" kavramı nedir, kısaca açıklayınız. sonuc olarak kendini dönen metoddur. bu islemi istenilen en kucuk parçaya kadar yapar. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case, recursive call kısmı jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. ramde,steak kısmında üst üste yıkarak cağırmasıyla [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif olarak daha verimlidir.çünkü bilgisayar recursive metodu cağirirken daha maliyetlidir. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? i̇f blogunun icinde string.length==1 kosulu saglandiginda base case olacak sekilde, 1 sayisini döner.recursive call kiminda 1+recursive([CODE]string,n+1) döner stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. ramin medot islemlerini yaptigi kismidir. eger recursiveden cikalamdiginda dolar. tail recursion nedir, kısaca açıklayınız. donulecej cevabin en sonda hesaplandigi recursion tipidir. abstraction kavramını açıklayınız. projelerimizde,sadece kullanıcıya ihtiyacı oldugu kadarıyla sisteme erisim vermektir. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür,sadece super classın metodu cocugunuda override edildiginde return type değisebilir.tersi mümkün değildir protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? ... java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değildir,sadece bir class ,baska bir classı extend edebilir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? seçilen atadan itibaren classların aynı olup olmadıgını kontrol eder,yani a dan itibaren bnin a nın subclassı olup olmadigini kontrol eder. metot overriding ve overloading kavramlarını açıklayınız. overloading:metodların signaturelerı farklı,yaptıkları farklı.overridingde tek farkı metodun üste extra işlevler yüklenmesidir. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent30 java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? soyut bir klasik ifade eder.obje olarak çağrılması ve en az bir metodu overide edilerek implement edilir. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilemez abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. prensiplerimizden ilan abstraction sağlaması,encapsulation ve polimorfizum sağlamı. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler absttqct classinin daha da soyutlama halidir.extra olarak interfaceler bir den fazla clasa extent edilebilirler. i̇kinci sorusu mümkündür. marker interface ve functional interface kavramları nedir, nasıl kullanılır? ... bir [CODE]class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? i̇kisinin cevabı: edebilir olacaktır abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? c değişkenin shape üzerinden tanimladigimizdan draw metodu override edilemedi abstract olarak jaldi [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? edemez,hata java hangi iterface in metodunu alacağını bilemez hata verir.o yüzden hangi interface i kullanacagini süperdi belirtmeniz lazım. cevap hangisini belirtecegimize bağlı olark a veya b olacak java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 tanedir io(dosya okuma) ve run time (outofbound) java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws attığımızda mutlaka hatayı geri yakalamaĺıyız finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? try yapısında en sonda mutlaka yapılan işlemdir. her durumda çalışır. java'da kendi exceptionunuzu nasıl tanımlarsınız? [CODE]class myexeption extend exception java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? hata oluştuğunda belili işlemleri yaptırıp ,sorunu ertelemek static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? .. bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class quziz1q1 {[/CODE] [CODE]public static void alfanumaratik(string str) {[/CODE] [CODE]string ilk="""";[/CODE] [CODE]if(str=="""") {[/CODE] system.out.pr[CODE]int("" "");[/CODE] } else if(str.charat(0)<='9'&&str.charat(0)>='0') { ilk+=str.charat(0); alfanumaratik(str.sub[CODE]string(1),ilk);[/CODE] } [CODE]else {[/CODE] string s=str.charat(0)+""""; ilk+=s.tolowercase(); alfanumaratik(str.sub[CODE]string(1),ilk);[/CODE] ilk=ilk.substring(0,ilk.length()-1)+s.touppercase(); alfanumaratik(str.sub[CODE]string(1),ilk);[/CODE] } } [CODE]public static void alfanumaratik(string str,string ilk) {[/CODE] [CODE]if(str=="""") {[/CODE] system.out.pr[CODE]int(ilk+"" "");[/CODE] } else if(str.charat(0)<='9'&&str.charat(0)>='0') { ilk+=str.charat(0); alfanumaratik(str.sub[CODE]string(1),ilk);[/CODE] } [CODE]else {[/CODE] string s=str.charat(0)+""""; ilk+=s.tolowercase(); alfanumaratik(str.sub[CODE]string(1),ilk);[/CODE] ilk=ilk.substring(0,ilk.length()-1)+s.touppercase(); alfanumaratik(str.sub[CODE]string(1),ilk);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] alfanumaratik(""a1b2c""); } } import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] r1.pr[CODE]introbot();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; robot() { name=""wall-e""; type=""trash""; batterylevel=100; isoperational=true; } robot([CODE]string name,string type,int batterylevel) {[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; isoperational=true; } [CODE]public void charge() {[/CODE] batterylevel=100; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatetery() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name:"" +name+"" robot type:""+type+"" batterylevel :"" +batterylevel+"" isoperationalt:"" +isoperational);[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name=name; } [CODE]public void settype(string name) {[/CODE] this.type=name; } [CODE]public void setbatterylevel(int name) {[/CODE] this.batterylevel=name; } [CODE]public void setoperation(boolean name) {[/CODE] this.isoperational=name; } } [CODE]class factory {[/CODE] private [CODE]string name ;[/CODE] private [CODE]string location ;[/CODE] private arraylist<robot> robots=[CODE]new arraylist<>();[/CODE] [CODE]public factory() {[/CODE] this.name=""factory1""; this.location=""moon""; } [CODE]public factory(string name,string location) {[/CODE] this.name=name; this.location=location; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name=name; } [CODE]public void setlocation(string name) {[/CODE] this.location=name; } [CODE]public void setrobots(arraylist<robot> name) {[/CODE] this.robots=name; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name:""+name+"" factory1 location:"" +location);[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i).getbatetery()<0) { robots.get(i).setbatterylevel(0); } [CODE]else {[/CODE] robots.get(i).setbatterylevel(robots.get(i).getbatetery()-15); } } } } 2"
1889298,2,"1889298 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr ={[/CODE]5,4,1,2}; cocktailsort(arr); } [CODE]public static void cocktailsort(int[] arr){[/CODE] righttoleft(arr); } //==========================================================================================0 [CODE]public static void righttoleft(int[] arr){[/CODE] boolean y = false; [CODE]for(int x = 0;[/CODE] x<arr.length;x++){ [CODE]for(int i =x+1;[/CODE]i<arr.length-x;i++){ [CODE]int temp = 0;[/CODE] [CODE]if(arr[x]>arr[i]){[/CODE] temp=arr[x]; arr[x]=arr[i]; arr[i]=temp; } } [CODE]if (issorted(arr)){[/CODE] y=true; [CODE]if (y){[/CODE] [CODE]for(int i=0;[/CODE]i<arr.length;i++){ system.out.pr[CODE]int(arr[i]);[/CODE] } } [CODE]else{[/CODE] lefttoright(arr); } } } } //==========================================================================================0 [CODE]public static void lefttoright(int[] arr){[/CODE] boolean y = false; for(int x = arr.length; 0<x;x--){ [CODE]for(int i =x-1;[/CODE]i>0;i--){ [CODE]int temp = 0;[/CODE] [CODE]if(arr[x]<arr[i]){[/CODE] temp=arr[x]; arr[x]=arr[i]; arr[i]=temp; } } [CODE]if (issorted(arr)){[/CODE] y=true; [CODE]if (y){[/CODE] [CODE]for(int i=0;[/CODE]i<arr.length;i++){ system.out.pr[CODE]int(arr[i]);[/CODE] } } [CODE]else{[/CODE] righttoleft(arr); } } } } //==========================================================================================0 [CODE]public static boolean issorted(int[] arr){[/CODE] boolean boo = true; [CODE]for(int i = 0;[/CODE]i<arr.length-1;i++){ [CODE]for(int j = i+1;[/CODE]j<arr.length;j++) [CODE]if(arr[i]>arr[j]){[/CODE] boo = false; } } [CODE]if(boo){[/CODE] [CODE]return true;[/CODE] } [CODE]else{[/CODE] [CODE]return false;[/CODE] } } //==========================================================================================0 } import java.util.*; [CODE]class q1{[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan = new scanner(system.in); int x = scan.next[CODE]int();[/CODE] system.out.pr[CODE]intln(collatz(x));[/CODE] scan.close(); } [CODE]public static int collatz (int i){[/CODE] [CODE]if(i%2==0){[/CODE] i=i/2; } [CODE]else{[/CODE] i=3*i+1; } [CODE]if (i==1){[/CODE] [CODE]return 1;[/CODE] } [CODE]else{[/CODE] [CODE]return 1+collatz(i);[/CODE] } } } [CODE]public class q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] s1.say(); } } [CODE]class sayac{[/CODE] [CODE]public string str;[/CODE] [CODE]public string getstr() {[/CODE] [CODE]return str;[/CODE] } [CODE]public sayac(string str){[/CODE] this.str=str; } [CODE]public int say() {[/CODE] [CODE]string string = getstr();[/CODE] [CODE]return sayanadam(string, 1);[/CODE] } [CODE]public int sayanadam(string str,int x){[/CODE] string f = str.substring(0,str.length()-x); string h = str.substring(str.length()-x, str.length()-x+1); if(f.length()==1){ if(h.equals(""1"")){ [CODE]return 1;[/CODE] } [CODE]else{[/CODE] [CODE]return 0;[/CODE] } } [CODE]else{[/CODE] if(h.equals(""1"")){ return 1 + f.say(); } [CODE]else{[/CODE] return f.say(); } } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 public abstract class sarki{[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] [CODE]void oynat(){[/CODE]}; } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]public string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim=isim; this.sanatci=sanatci; this.metalozellik=metalozellik; } [CODE]void oynat(){[/CODE] system.out.pr[CODE]int(isim+""- ""+sanatci+"" (""+metalozellik+"") "");[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public string rockozellik = "" (huzurlu ve nostaljik)"";[/CODE] rocksarki([CODE]string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } [CODE]void oynat(){[/CODE] system.out.pr[CODE]int(isim+""- ""+sanatci+ rockozellik);[/CODE] } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public string klasikozellik = "" (hafif ve sakin)"";[/CODE] klasiksarki([CODE]string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } [CODE]void oynat(){[/CODE] system.out.pr[CODE]int(isim+""- ""+sanatci+klasikozellik);[/CODE] } } [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++){ sarkilistesi.get(i).oynat(); } } } [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++){ int x = math.random(sarkilistesi.size()-i); sarkilistesi.get(x).oynat(); sarkilistesi.remove(x); } } } [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] boolean flag=true; [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++){ sarki r = new rocksarki(sarkilistesi.get(i).isim,sarkilistesi.get(i).sanatci); if(sarkilistesi.get(i)== r){ [CODE]if(flag){[/CODE] system.out.println(""ses yükseltiliyor...""); } sarkilistesi.get(i).oynat(); system.out.pr[CODE]int("" (huzurlu ve nostaljik)"");[/CODE] flag=false; } [CODE]else{[/CODE] [CODE]if(!flag){[/CODE] system.out.println(""ses normal düzeye döndürülüyor...""); } sarkilistesi.get(i).oynat(); flag=true; } } } } [CODE]public class muzikcalar {[/CODE] [CODE]public calmastratejisi strateji;[/CODE] [CODE]void setstrateji(calmastratejisi s){[/CODE] strateji=s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(); } } ""recursion"" kavramı nedir, kısaca açıklayınız. belirli bir metodun içerisinde sınırlar dahilinde (if ile sınırlayarak) metodu tekrar kullanarak bir fonksiyon oluşturmak recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case ve recursive case jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stackte üste doğru depoluyor ve sınır değere ulaştığında tekrardan sonuçları ters yönde stackten siliyor [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif olarak daha verimlidir bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? int n=0 sayacı tanımlayarak başta stringin kendisine substring(n,str.length()) olarak kendi içerisine metodu tekrar yazarım [CODE]if koşulu ule substringden çıktı gelmediğindede sayac değerinin uzunluğa eşit olduğu değeri çıktı olarak veririm stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack recursionda verilerin geçici olarak depolanmasını sağlar overflow olmasının nedeni ise recursionun if koşulu ile sınırlandırılmaması sonucu tail recursion nedir, kısaca açıklayınız. - abstraction kavramını açıklayınız. kodun sadece belirli bir kısmını kullanıcının değiştirmesine açık kılmak dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? hourlyemployee tipi bir objeden employee döndürürsek eksikler kalır ama tersi bir durum geçerli olabilir (hourlyemployee employeeyi kapsıyor çünkü) protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier yani default modifier daha yakındir java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? base class ve kullandığımız classın atası olan subclasslardaki metod ve parametreleri korumak için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? c b'nin subclassıysa a extends c şeklinde edebilir ama üstteki gibi bir kullanım olamaz java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a'nın b'nin subclassı olup olmadığını kontrol eder metot overriding ve overloading kavramlarını açıklayınız. overriding signiture kısmı aynı overloading ise signiture kısmı farklı olan metodları tekrar sub[CODE]classda kullanmaktır class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classların olabilirken interfacelerin olamaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstract bir metod abstract bir classta implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. 1-abstract [CODE]classlar bize sonradan belirleyeceğimiz metodlar için bir cerçeve oluşturur 2-abstract classlar inherit edilebildikleri için önceden belirlenmemiş bir fonksiyonu tekrar override edebilmemizi sağlar 3- abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstarct classlar belirlenmemiş metodların yanında belirlenmiş metodlar da içerebilirken interfacelerde bu durum gözlenmez. interfaceler tip olarak kullanılabilirken abstract classlar kullanılamaz. i̇ki türlü declarationlar mümkün değildir marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker belirlemek amaçlı functional ise sonradan kullanılmak amaçlı yazılır (?) bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet bir class birden fazla interface implement edebilir. evet bir interface başka bir interface implement edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? hata shape c = [CODE]new shape kısmindadır bu kısmı shape c = new circle();[/CODE] seklinde yazarsak outout ""drawing circle"" ""displaying"" şeklinde olur. [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? - bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } //==================================================================================0 [CODE]public class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; robot(){ this.name=""wall-e""; this.type=""trash""; this.batterylevel=100; this.isoperational=true; } robot([CODE]string name, string type, int batterylevel,boolean isoperational) {[/CODE] this.batterylevel=batterylevel; this.isoperational=isoperational; this.type=type; this.name=name; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] this.batterylevel = 100; } [CODE]public void printrobot(){[/CODE] system.out.println(""robot name: ""+this.name + ""robot type: "" + this.type + ""batterylevel: "" + this.batterylevel+""% isoperational: "" + this.isoperational ); } //=============================================================================================== [CODE]public class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name=name; this.location=location; } [CODE]public factory(){[/CODE] this.name=""factory1""; this.location=""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++){ robots.get(i).charge(); } } [CODE]public void printfactory(){[/CODE] system.out.println(""factory name: "" + this.name + "" location: "" + this.location); system.out.pr[CODE]intln(""robots operating here: "");[/CODE] [CODE]for(int i =0;[/CODE]i<robots.size();i++){ robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++){ robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } } } import java.util.arraylist; [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str=""a1b2"";[/CODE] char[] ch = str.tochararray(); arraylist<[CODE]string> arraylist = new arraylist<string>();[/CODE] arraylist.add(str); [CODE]for(int i = 0;[/CODE]i<ch.length;i++){ [CODE]if (detectletter(ch[i])){[/CODE] string temp1 = str.sub[CODE]string(i, i+1);[/CODE] string temp2 = temp1.touppercase(); [CODE]if(temp1==temp2){[/CODE] temp2=temp1.tolowercase(); } string newstr = str.substring(0, i) + temp2 + str.substring(i+1, str.length()); arraylist.add([CODE]newstr);[/CODE] } } str = str.touppercase(); char[] ch2 = str.tochararray(); arraylist.add(str); [CODE]for(int i = 0;[/CODE]i<ch2.length;i++){ [CODE]if (detectletter(ch2[i])){[/CODE] string temp1 = str.sub[CODE]string(i, i+1);[/CODE] string temp2 = temp1.touppercase(); [CODE]if(temp1==temp2){[/CODE] temp2=temp1.tolowercase(); } string newstr = str.substring(0, i) + temp2 + str.substring(i+1, str.length()); arraylist.add([CODE]newstr);[/CODE] } } [CODE]for(int i =0;[/CODE] i<arraylist.size()-1;i++){ [CODE]for (int j =i+1;[/CODE] j<arraylist.size();j++){ if(arraylist.get(i).equals(arraylist.get(j))){ arraylist.remove(j); } } } system.out.pr[CODE]intln(arraylist);[/CODE] } [CODE]public static boolean detectletter (char c){[/CODE] [CODE]int i = (int) (c);[/CODE] [CODE]if(i<80 && i>=65){[/CODE] [CODE]return true;[/CODE] } [CODE]else if(i<123 && i>=97){[/CODE] [CODE]return true;[/CODE] } [CODE]else{[/CODE] [CODE]return false;[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 import java.util.*; [CODE]public class quizq1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] anotherfactory.fonksiyon();// burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisini }[/CODE] } [CODE]interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge(){[/CODE] this.batteryl[CODE]ife=100;[/CODE] } } [CODE]class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] setcleaningpower(cleaningpower); } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(modelname+"" cleaning in progress...""+"" cleaning power: ""+ getcleaningpower()); batteryl[CODE]ife=batterylife-10;[/CODE] } } [CODE]public void boostcleaningpower(){[/CODE] setcleaningpower(getcleaningpower()+10); } } [CODE]class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setarmed(boolean isarmed) {[/CODE] this.isarmed = isarmed; } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(modelname+"" cleaning in progress...""+"" armed: ""+ isarmed()); batteryl[CODE]ife=batterylife-10;[/CODE] } } securityrobot([CODE]string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] setarmed(isarmed); } [CODE]public void togglearmedmode(){[/CODE] setarmed(!isarmed()); } } [CODE]class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public arraylist<abstractrobot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] getrobots().add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] getrobots().add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i=0;[/CODE]i<getrobots().size();i++){ getrobots().get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (int i=0;[/CODE]i<getrobots().size();i++){ if(getrobots().get(i) instanceof cleaningrobot){ cleaningrobot c = (cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: "" + c.modelname+"", battery: ""+c.batterylife+ ""cleaning power: ""+ c.getcleaningpower()); } [CODE]else{[/CODE] securityrobot s = (securityrobot) robots.get(i); system.out.println(""securityrobot - model: "" + s.modelname+"", battery: ""+s.batterylife+ ""armed: ""+ s.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i=0;[/CODE]i<getrobots().size();i++){ if(getrobots().get(i) instanceof cleaningrobot){ cleaningrobot cl = (cleaningrobot) robots.get(i); cl.setcleaningpower(cl.getcleaningpower()+10); system.out.println(""cleaningrobot - ""+cl.modelname+"" now has cleaning power:""+ cl.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++){ if(getrobots().get(i) instanceof securityrobot){ securityrobot se = (securityrobot) robots.get(i); se.togglearmedmode(); if(se.isarmed()){ system.out.println(""securityrobot - ""+se.modelname+"" is now armed""); } [CODE]else{[/CODE] system.out.println(""securityrobot - ""+se.modelname+"" is now unarmed""); } } } } [CODE]public void fonksiyon(){[/CODE] system.out.println(""tüm fabrikalar tarafından toplam ""+ getrobots().size()+ "" robot üretildi.""); } } 2"
6494434,2,"6494434 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public sayac(string str) {[/CODE] this.str = str; } [CODE]public int say() {[/CODE] [CODE]return sayrecursive(str);[/CODE] } private [CODE]int sayrecursive(string str) {[/CODE] if (str.length() == 0) { [CODE]return 0;[/CODE] // boş [CODE]string }[/CODE] int count = (str.charat(0) == '1') ? 1 : 0; return count + sayrecursive(str.sub[CODE]string(1));[/CODE] } } [CODE]public class lab1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] system.out.pr[CODE]intln(collatz(8));[/CODE] system.out.pr[CODE]intln(""------------"");[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] sayac s3 = [CODE]new sayac(""0101001"");[/CODE] system.out.pr[CODE]intln(""------------"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); system.out.println(s3.say()); system.out.pr[CODE]intln(""------------"");[/CODE] [CODE]int [] array1 = {[/CODE]5,4,1,2}; cocktailsort(array1); pr[CODE]intarr(array1);[/CODE] [CODE]int [] array2 = {[/CODE]6,4,8,1,3,9}; cocktailsort(array2); pr[CODE]intarr(array2);[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] // 1'e ulaştığımızda adım sayısı 0'dır. } [CODE]if (i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz(3 * i + 1);[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktailsort2(arr, 0, arr.length - 1); } [CODE]public static void cocktailsort2(int[] arr, int start, int end) {[/CODE] [CODE]if (start >= end) {[/CODE] [CODE]return;[/CODE] // işlem tamam } boolean degistimi = false; // soldan sağa bubble sort [CODE]for (int i = start;[/CODE] i < end; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; degistimi = true; } } // degistimi = false ise dizi sıralıdır [CODE]if (!degistimi) {[/CODE] [CODE]return;[/CODE] } degistimi = false; // sağdan sola bubble sort [CODE]for (int i = end - 1;[/CODE] i > start; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i - 1]; arr[i - 1] = temp; degistimi = true; } } // baş ve son hari̇ci̇ tekrar bak cocktailsort2(arr, start + 1, end - 1); } [CODE]public static void printarr(int[] arr) {[/CODE] [CODE]for (int i : arr) {[/CODE] system.out.pr[CODE]int(i + "" "");[/CODE] } system.out.pr[CODE]intln();[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]class muzikcalar{[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji){[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] [CODE]if(strateji != null){[/CODE] strateji.cal(sarkilistesi); } } } import java.util.list; import java.util.arrays; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki){[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]class klasiksarki extends sarki{[/CODE] private [CODE]string klasikstring = "" (hafif ve sakin)"";[/CODE] [CODE]public klasiksarki(string isim,string sanatci){[/CODE] super(isim,sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatci + "" - ""+ isim + klasikstring);[/CODE] } } [CODE]class metalsarki extends sarki {[/CODE] [CODE]public string metalozellik;[/CODE] [CODE]public metalsarki(string isim,string sanatci,string metalozellik){[/CODE] super(isim,sanatci); this.metalozellik = metalozellik; } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]public void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] private [CODE]string rockstring = "" (huzurlu ve nostaljik)"";[/CODE] [CODE]public rocksarki(string isim,string sanatci){[/CODE] super(isim,sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + rockstring);[/CODE] } } import java.util.collections; import java.util.list; import java.util.arraylist; [CODE]class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] list<sarki> karisikliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(sarkilistesi); [CODE]for(sarki sarki : sarkilistesi){[/CODE] sarki.oynat(); } } } import java.util.list; [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(sarki s : sarkilistesi){[/CODE] s.oynat(); } } } abstract [CODE]class sarki {[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] [CODE]public sarki(string isim,string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } import java.util.list; [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] boolean sesyuksek = false; [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean sesyuksek = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { [CODE]if (!sesyuksek) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses düzeyi: yüksek"");[/CODE] sesyuksek = true; } } [CODE]else {[/CODE] [CODE]if (sesyuksek) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses düzeyi: normal"");[/CODE] sesyuksek = false; } } sarkilistesi.get(i).oynat(); } [CODE]if (sesyuksek) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses düzeyi: normal"");[/CODE] } } } import java.util.list; [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir fonksiyonun kendi kendini çağırarak problemi çözdüğü yöntemdir. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case ve recursive case jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. . [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. recursive olarak daha verimli bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? . stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack girdiğimiz verileri tutan ve ilk giren veriyi son çıkartan bir yapıdır. sonsuz döngüye girerse mesela overflow olur tail recursion nedir, kısaca açıklayınız. recursionun sadece parametresini azaltarak veya arttırarak çağırma yapılması. java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? dynamic binding override edilen metotlarla kullanılır. static binding overloading için kullanılır. derleme zamanında belirlenir. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? ortak noktaları override edilemez olmaları. bu yüzden de dynamic binding yapamazlar. static binding yaparlar. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloadingde static binding çünkü derleme aşamasında oluyor. overrisidingde dynamic binding çünkü çalışma zamanında oluyor. dinamik bağlamada jvm'nin görevi nedir? çalışma zamanında nesnenin gerçek türünü belirler ve uygun metodu çağırır. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? upcasting daha genel türe çevirme bu yüzden implicit. downcasting daha özel türe çevirme bu yüzden explicit java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? per[CODE]formans düşerdi çünkü her metod çalışma zamanında belirlenlemesi gerekirdi class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dynamic binding [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? ""product"" ve ""book"" dynamic binding java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class en az bir abstract metot içeren ve direkt olarak örneklendirilemeyen bir sınıftır. concrete class ise tüm metotları tanımlı olan new operatörü ile nesnesi oluşturulanilen sınıflardır. abstract classların constructoru olabilir. i̇nterfacelerin construturu olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. hem soyut hem somut metotlar bulunur. new ile nesne oluşturulumaz. override edilmek zorundadır. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classda somut metotlar olabilir. i̇nterface ise tamamen soyuttur. evet tip olarak kullanılabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface içinde metot olmayan. functional interface ise tek adet abstract metot içerendiir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? 1.soru cevap evet 2.soru cevap hayır ama extends edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? shape c = [CODE]new shape();[/CODE] satırı hatalı. shape c = [CODE]new circle();[/CODE] yaparak düzeltilir. output: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? hayır. abstract classdan nesne oluşturmaya çalışmış. böyle bir şey olmaz. [CODE]public void show() {[/CODE]a.super.show();} output: a bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // batarya var ise true [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = batterylevel > 0; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational){[/CODE] this.isoperational = isoperational; } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; this.isoperational = true; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""% is operational: "" + isoperational);[/CODE] } } [CODE]class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // varsayılan robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class q1 {[/CODE] [CODE]public static void recursive(string str, int index, string simdiki) {[/CODE] if (index == str.length()) { system.out.pr[CODE]int(simdiki + "" "");[/CODE] [CODE]return;[/CODE] } char ch = str.charat(index); // harf i̇se if (character.isletter(ch)) { recursive(str, index + 1, simdiki + character.tolowercase(ch)); recursive(str, index + 1, simdiki + character.touppercase(ch)); } [CODE]else {[/CODE] // rakam i̇se recursive(str, index + 1, simdiki + ch); } } [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] recursive(s, 0, """"); system.out.pr[CODE]intln();[/CODE] [CODE]string str = ""ab12cd"";[/CODE] recursive(str,0,""""); } } import java.util.arraylist; [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (robot r : robots) {[/CODE] r.charge(); } } [CODE]public void work() {[/CODE] [CODE]for (robot r : robots) {[/CODE] [CODE]int n = 0;[/CODE] n = r.getbatterylevel(); r.setbatterylevel(n-15); if(r.getbatterylevel() <= 0 ){ r.setisoperational(false); } } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot r : robots) {[/CODE] r.pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void setmodelname(string modelname) {[/CODE] this.modelname = modelname; } [CODE]public void setbatterylife(int batterylife) {[/CODE] this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } } [CODE]class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterlife, boolean isarmed) {[/CODE] super(modelname,batterl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setarmed(boolean isarmed) {[/CODE] this.isarmed = isarmed; } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] }[CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } } [CODE]class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] //robot temizlik güç [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10 ){[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress ... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] }[CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar){[/CODE] cleaningpower += miktar; } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } } import java.util.arraylist; [CODE]class robotfactory {[/CODE] private arraylist<abstractrobot> robots; private [CODE]static int toplamrobotlar = 0;[/CODE] [CODE]public robotfactory() {[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] toplamrobotlar++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] toplamrobotlar++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if(robot instanceof securityrobot) {[/CODE] system.out.println(""securityrobot - model: "" + robot.getmodelname() + "", battery: "" + robot.getbatterylife() + "", armed: "" + ((securityrobot) robot).getisarmed()); }[CODE]else if (robot instanceof cleaningrobot) {[/CODE] system.out.println(""cleaningrobot - model: "" + robot.getmodelname() + "", battery: "" + robot.getbatterylife() + "", cleaning power: "" + ((cleaningrobot) robot).getcleaningpower()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(miktar); system.out.println(""cleaningrobot- "" + robot.modelname + ""now has cleaning power: "" + ((cleaningrobot) robot).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(abstractrobot robot : robots) {[/CODE] [CODE]if(robot instanceof securityrobot) {[/CODE] ((securityrobot) robot ).togglearmedmode(); if(((securityrobot) robot).getisarmed() == true){ system.out.println(""security robot - "" + robot.modelname + "" is now armed""); }[CODE]else{[/CODE] system.out.println(""security robot - "" + robot.modelname + "" is now unarmed""); } } } } [CODE]public static void displaytoplamroboturetimi() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + toplamrobotlar + "" robot uretildi"");[/CODE] } } [CODE]public class quizmain {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.displaytoplamroboturetimi(); } } 2"
8857652,1,"8857652 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; cocktailsort(arr); [CODE]for(int arrs : arr){[/CODE] system.out.pr[CODE]int(arrs);[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] [CODE]int count=1;[/CODE] [CODE]for(int i=0;[/CODE] i<arr.length; i++){ [CODE]if(i%2==0){[/CODE] count=1; } [CODE]else{[/CODE] count=0; } cocktailsort(arr,count); } } private [CODE]static void cocktailsort(int[] arr, int count){[/CODE] [CODE]if(count==1){[/CODE] [CODE]int temp=0;[/CODE] [CODE]for(int i=0, j=1;[/CODE] j<arr.length; i++,j++){ [CODE]if(arr[i]>arr[j]){[/CODE] temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } [CODE]if(count==0){[/CODE] [CODE]int temp=0;[/CODE] for(int i=arr.length-2, j=arr.length-1; i>0; i--,j--){ [CODE]if(arr[i]>arr[j]){[/CODE] temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } } /* [CODE]public static void up(int[] arr){[/CODE] //[CODE]int index=0;[/CODE] } */ /* [CODE]public static void down(int[] arr){[/CODE] //[CODE]int index=0;[/CODE] } */ } /* [CODE]public static void bubblesortup(int[] arr) {[/CODE] int n = arr.length; [CODE]int temp = 0;[/CODE] [CODE]for(int i=0;[/CODE] i < n; i++){ [CODE]for(int j=1;[/CODE] j < (n-i); j++){ [CODE]if(arr[j-1] > arr[j]){[/CODE] temp = arr[j-1]; arr[j-1] = arr[j]; arr[j] = temp; } } } count=0; } */ [CODE]public class sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str=str; } [CODE]public int say(){[/CODE] [CODE]return(say(str));[/CODE] } private [CODE]static int say(string str){[/CODE] if(str.length()<1){ [CODE]return 0;[/CODE] } else if(str.charat(0)!='1'){ return 0 + say(str.sub[CODE]string(1));[/CODE] } [CODE]else{[/CODE] return 1 + say(str.sub[CODE]string(1));[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] system.out.println(s1.say()); } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(1));[/CODE] //collatz(16); system.out.pr[CODE]intln(collatz(16));[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i%2==0){[/CODE]//i even ise [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else {[/CODE] //i odd ise [CODE]return 1 + collatz((3*i)+1);[/CODE] } //[CODE]return collatz(i);[/CODE] // [CODE]return i;[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; /* [CODE]public muzikcalar(calmastratejisi strateji){[/CODE] this.strateji=strateji; } */ [CODE]public calmastratejisi getstrateji() {[/CODE] [CODE]return strateji;[/CODE] } [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } /* [CODE]void setstrateji(calmastratejisi s){[/CODE] } */ [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] //if(getstrateji().equals(""sirali calma"")){ //} strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki){[/CODE] //sarki.oynat(); sarki = (metalsarki) sarki; metalsarki temp=(metalsarki) sarki; system.out.println("""" + sarki.getsanatci() + "" - "" + sarki.getisim() + "" [ozellik: "" + temp.getmetalozellik() + ""]""); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + getsanatci() + "" - "" + getisim() + ""(hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] super(isim, sanatci); this.metalozellik=metalozellik; } [CODE]public string getmetalozellik() {[/CODE] [CODE]return metalozellik;[/CODE] } [CODE]public void setmetalozellik(string metalozellik) {[/CODE] this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + getsanatci() + "" - "" + getisim() + "" ("" + getmetalozellik() + "")"");[/CODE] } [CODE]public void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln("""" + getmetalozellik());[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + getsanatci() + "" - "" + getisim() + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.arraylist; import java.util.collection; import java.util.collections; import java.util.list; import java.util.random; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] //random random = [CODE]new random();[/CODE] //collections @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] /*sarki[] songs = new sarki[sarkilistesi.size()]; //list<sarki> sarkilistesimix= [CODE]new list()<>;[/CODE] [CODE]for(int i=0;[/CODE] i<sarkilistesi.size(); i++){ //double random =math.random(); if(sarkilistesi.get(i) instanceof metalsarki){ sarkilistesi.get(i).oynat(); } else if(sarkilistesi.get(i) instanceof rocksarki){ sarkilistesi.get(i).oynat(); } else if(sarkilistesi.get(i) instanceof klasiksarki){ sarkilistesi.get(i).oynat(); } } */ list<[CODE]integer> numbers = new arraylist<>();[/CODE] [CODE]for(int i=0;[/CODE] i<sarkilistesi.size(); i++){ numbers.add(i); } collections.shuffle(numbers); [CODE]for(int index : numbers){[/CODE] sarkilistesi.get(index).oynat(); } system.out.pr[CODE]intln();[/CODE] } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] //sarki[] songs = new sarki[sarkilistesi.size()]; [CODE]for(int i=0;[/CODE] i<sarkilistesi.size(); i++){ if(sarkilistesi.get(i) instanceof metalsarki){ sarkilistesi.get(i).oynat(); } else if(sarkilistesi.get(i) instanceof rocksarki){ sarkilistesi.get(i).oynat(); } else if(sarkilistesi.get(i) instanceof klasiksarki){ sarkilistesi.get(i).oynat(); } } system.out.pr[CODE]intln();[/CODE] } } [CODE]public abstract class sarki {[/CODE] private [CODE]string isim;[/CODE] private [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } [CODE]public string getsanatci() {[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setsanatci(string sanatci) {[/CODE] this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] //sarki[] songs = new sarki[sarkilistesi.size()]; [CODE]for(int i=0;[/CODE] i<sarkilistesi.size(); i++){ if(sarkilistesi.get(i) instanceof metalsarki){ sarkilistesi.get(i).oynat(); } else if(sarkilistesi.get(i) instanceof rocksarki){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sarkilistesi.get(i).oynat(); if(sarkilistesi.get(i+1) instanceof rocksarki){ sarkilistesi.get(i+1).oynat(); system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] i=i+1; } } else if(sarkilistesi.get(i) instanceof klasiksarki){ sarkilistesi.get(i).oynat(); } } system.out.pr[CODE]intln();[/CODE] } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } abstraction kavramını açıklayınız. ne yaptığımız sorusuna yanıt buluruz, nasıl yaptığımızla ilgilenmeyiz. örneğin bir arabada gaza basınca arabanın ileri hareket etmesi ama bunun arkasındaki mekanizmayla ilgilenmeyiz. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mümkündür. covariant return type olmuş olur çünkü hourlyemployee de aynı zamanda bir employee'dir( is a relation). tam olarak bundan dolayı bunun tersi mümkün olmayacaktır çünkü hourly employee daha restricteddir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? private > default > protected > public (en restrictedden en aza) en yakin olan bir sonrakidir yani mantiken java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? genel özellikleri sistemli ve en hatasız şekilde inherit edebilmek için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır sadece 1 tane için mümkündür. bir çocuğun 2 annesi olamaması ile bağdaşım yapılabilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a classı bnin child classıdır. bunun sayesinde pek çok işlemin hatasıx yapilmasi saglanabilir. metot overriding ve overloading kavramlarını açıklayınız. overload metodun signatureünün farklı olması olayı (isim ya da parametre) bu durumda gelen veriye (compatibility) göre o işleve özel metoda implement saglanir. override ise birbiriyle iliskili (child parent) sın[CODE]ıflardaki metodların işleviyle alakalıdır örnegın animal classındaki ses çıkar metodu dog classında overeide edilerek spesifik olarak objenin havlayarak ses çıkarmasını sağlayacaktır class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent /n 10 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? final statice ve private metodlarda static(compiler), diğerlerinde overriding yapabileceğimiz için dynamic (runtime) kullanırız. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? override edilemezler overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overload için static binding override için dynamic binding (runtime reading olduğundan daha yavaş) dinamik bağlamada jvm'nin görevi nedir? kodu run ettigimizde metodun farklı nesneler icin farklı davranıslar sergilemesini sağlar (runtime) java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? örnek üzerinden aciklayayim: parent ve child classlarında parent variableı child classının objesine refer edebilir çünkü child is a parent ama tam tersi olamaz typecasting yapmak gereklidir çünkü her parent bir child değildir. (çocuk annesini doğuramaz:)) java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? final static ve private methodları kullanımda sıkıntı yasardık. çünkü dynamic binding override içindir ve bu methodlar override edilemez. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dynamic çünkü override var [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? hem dinamik hem statik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract ifadesiyle belirtmezseniz class otomatik olarak concretetir. abstract class abstract method içerebilir. implement etmek istedigim ama sonra implementini gerçeklestirmek istediğim şeyler icin abstract classları kullanırım. abstract classların constructorı olabilir ama interfacerlerin olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstract classlar abstract metodlar içerebileceği icin evet. (abstract metod final static ya da private değil) abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. gızlemeye ve delay etmeye yarar implementasyonu hakkinda bilgi sahibi olduğum ama şimdi implement etmek istemediğim metodları yazabilmemi sağlar. hiyerarşik olarak daha iyi kod yazılımını sağlar(bluepr[CODE]int özelligi) abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? obj2li olan olmaz çünkü interface objeyle alakalı işlem yapmaz ama obj1 olur abstarct class islem yapar. interfacede constructor yoktur ama abstract classlarda olabilir. interfaceler daha çok birden fazla aynı özelliği birbiriyle bağlantısı çok kurulamayan sınıfları bağlamak için kullanılabilir. abstarct classlar ise başlı başına birer sınıftır. interface full abstractiondır denebilir. abstractionda override olurken interfacede olmaz. marker interface ve functional interface kavramları nedir, nasıl kullanılır? (tam emin degilim adından çıkartmaya çalısıcam) marker olan hiyerarşi bozulmasın diye functional olan da gerçekten işe yarar bir şeyler yapan interface. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet. evet. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? [CODE]new shape yerine new circle derim drawing circle displaying interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? super kullanarak çagırdık ama bunlar interface oldugu için saçma olur cünkü 2 interfacei de java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. checked ve unchecked olmak üzere 2 şekil. checked compile zamanı unchecked ise runtime exception olur. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? override edildiğinde kendinden daha kısıtlı bir exception çağıramaz hiyerarşik olarak. daha da özelleştiremez ama genelleştirebilir. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu her durumda execute edilir(return olsa bile). system.exit olup direkt sistemden çıkarsa çalışamaz. exception atılmayan durumlarda da çalışır yani her durumda çalısmasinı istediğim bir kod varsa o bloğa yazarım. java'da kendi exceptionunuzu nasıl tanımlarsınız? normal method gibi ama exception'ı extend etmeli. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? başka bir kısmında exceptionlarla karşılasılmıs olabilir. multiple exception türüyle karsılaşılmış olunabilir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? m2'de hiyerarşik bozukluk var. exception daha genel olduğu için ioexception'dan daha önce gelmeliydi. caught2 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] //0-100 private boolean isoperational; //bataryasi var mi [CODE]public robot(){[/CODE] this.name=""wall-e""; this.type=""trash""; this.batterylevel=100; isoperational=true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; isoperational=true; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void charge(){[/CODE] setbatterylevel(100); } [CODE]public boolean isoperational() {[/CODE] if(this.getbatterylevel()<0){ isoperational=false; } [CODE]else{[/CODE] isoperational=true; } [CODE]return isoperational;[/CODE] } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%""+ "" is operational: ""+ isoperational);[/CODE] //system.out.pr[CODE]intln(""robot type: "" + type);[/CODE] //system.out.pr[CODE]intln(""batterylevel: "" + batterylevel);[/CODE] //system.out.pr[CODE]intln(""isoperational: ""+ isoperational);[/CODE] } } [CODE]public class q1 {[/CODE] //combinationi kendi icinde de cagirmam gerekiyodu ama soruyu bi tik sonradan anladigim icin bu kadar kaldı [CODE]public static void allcombinations(string str, int index){[/CODE] if(index>=str.length()){ system.out.pr[CODE]intln(""hatalı input"");[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(combination(str, index));[/CODE] } } [CODE]public static string combination(string str,int index){[/CODE] //index++; if(index>=str.length()){ [CODE]return """";[/CODE] } [CODE]else if(index==-1){[/CODE] [CODE]return """" + str + "" "" + combination(str, index+1);[/CODE] } /* else if(index==str.length()){ return """" + str.touppercase(); } */ else if(str.charat(index)>='a' && str.charat(index)<='z'){ //lower case ise upper yap return """" + str.substring(0, index) + str.substring(index,index+1).touppercase() + str.sub[CODE]string(index+1) + "" "" + combination(str,index+1);[/CODE] } else if(str.charat(index)>='a' && str.charat(index)<='z'){ //upper case ise lower yap return """" + str.substring(0, index) + str.substring(index,index+1).tolowercase() + str.sub[CODE]string(index+1) + "" "" + combination(str,index+1);[/CODE] } [CODE]else{[/CODE] [CODE]return """" + combination(str, index+1) + "" "";[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] allcombinations(str,-1); //system.out.pr[CODE]intln(allcombinations(str));[/CODE] } //s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] } /*if(str.length()==0){ [CODE]return """";[/CODE] } [CODE]else if(){[/CODE] [CODE]return """" + str + combination(str);[/CODE] } else if(str.charat(0)<'z' && str.charat(0)>'a'){ return """" + str.substring(0,1).touppercase() + str.substring(1) + combination(str.sub[CODE]string(0));[/CODE] } else if(str.charat(0)<'z' && str.charat(0)>'a'){ return """" + str.substring(0,1).tolowercase() + str.substring(1) + combination(str.sub[CODE]string(0));[/CODE] } [CODE]else{[/CODE] return """" + str + combination(str.sub[CODE]string(1));[/CODE] } } [CODE]public static string allthecombinations(string str){[/CODE] if(str.length()==0){ [CODE]return """";[/CODE] } [CODE]else{[/CODE] str=str.sub[CODE]string(1);[/CODE] system.out.pr[CODE]intln(combination(str));[/CODE] } [CODE]return """";[/CODE] */ import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name=name; this.location=location; //arraylist robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public factory(){[/CODE] this.name=""factory1""; this.location=""moon""; robots = [CODE]new arraylist<robot>();[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size() ; i++){ robots.get(i).charge(); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here: "");[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size() ; i++){ robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size() ; i++){ robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()*85/100); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public static int robocount=0;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] robocount++; } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public void setmodelname(string modelname) {[/CODE] this.modelname = modelname; } [CODE]public void setbatterylife(int batterylife) {[/CODE] this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] system.out.println(""tum fabrikalar tarafindan toplam "" + abstractrobot.robocount + "" robot uretildi""); //??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setarmed(boolean isarmed) {[/CODE] this.isarmed = isarmed; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void setbatterylife(int batterylife) {[/CODE] this.batteryl[CODE]ife=batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] setbatteryl[CODE]ife(getbatterylife()+10);[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(getbatterylife()>=10){[/CODE] system.out.println(""["" + getmodelname() + ""]"" + "" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife=getbatterylife()-10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + getmodelname() + ""] "" + ""not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] [CODE]if(isarmed()){[/CODE] setarmed(false); system.out.pr[CODE]intln(""security robot - "" + getmodelname() + "" is now unarmed"");[/CODE] } [CODE]else{[/CODE] setarmed(true); system.out.pr[CODE]intln(""security robot - "" + getmodelname() + "" is now armed"");[/CODE] } } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void setbatterylife(int batterylife) {[/CODE] this.batteryl[CODE]ife=batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] setbatteryl[CODE]ife(getbatterylife()+10);[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(getbatterylife()>=10){[/CODE] system.out.println(""["" + getmodelname() + ""] "" + ""cleaning in progress... cleaning power: "" + getcleaningpower()); batteryl[CODE]ife=getbatterylife()-10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + getmodelname() + ""] "" + ""not enough battery to clean...""); } } [CODE]public void boostcleaningpower(){[/CODE] setcleaningpower(getcleaningpower()+10); } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] //[CODE]public int factorycount=0;[/CODE] private arraylist<abstractrobot> robots; [CODE]public robotfactory(){[/CODE] robots=[CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ robots.get(i).per[CODE]formtask();[/CODE] } else if(robots.get(i) instanceof securityrobot){ robots.get(i).per[CODE]formtask();[/CODE] } } } [CODE]public void displayrobots(){[/CODE] //system.out.pr[CODE]intln(""produced robots:"");[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ cleaningrobot roboc=(cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", cleaning power: "" + roboc.getcleaningpower()); } else if(robots.get(i) instanceof securityrobot){ securityrobot robos = (securityrobot) robots.get(i); system.out.println(""securityrobot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", cleaning power: "" + robos.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] //system.out.pr[CODE]intln(""upgrading cleaning robots:"");[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ cleaningrobot roboc=(cleaningrobot) robots.get(i); roboc.setcleaningpower(roboc.getcleaningpower() + miktar); system.out.println(""cleaning robot - "" + robots.get(i).getmodelname() + "" now has cleaning power: "" + roboc.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] //system.out.pr[CODE]intln(""toggling security robot modes:"");[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ securityrobot robos = (securityrobot) robots.get(i); robos.togglearmedmode(); } } } [CODE]public void finaldisplay(){[/CODE] system.out.println(""tum fabrikalar tarafindan toplam "" + abstractrobot.robocount + "" robot uretildi\r""); } } 1"
2103960,0,"2103960 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 4, 1, 2 }; cocktailsort(arr); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]while (!sorted(arr)) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; } } cocktailsort1(arr); } } [CODE]public static void cocktailsort1(int[] arr) {[/CODE] [CODE]while (!sorted(arr)) {[/CODE] for (int i = arr.length - 1; i > 0; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i - 1]; arr[i - 1] = temp; } } cocktailsort(arr); } } [CODE]public static boolean sorted(int[] arr) {[/CODE] boolean flag = true; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] flag = false; } } [CODE]return flag;[/CODE] } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]else if (i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz(3 * i + 1);[/CODE] } } } [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]public string str;[/CODE] sayac([CODE]string str) {[/CODE] this.str = str; } [CODE]public int say() {[/CODE] string str2 = this.str; if (str2.length() == 1) { if (str2.charat(0) == '1') { [CODE]return 1;[/CODE] } [CODE]else {[/CODE] [CODE]return 0;[/CODE] } } if (str2.charat(0) == '1') { sayac s2 = new sayac(str2.sub[CODE]string(1));[/CODE] return 1 + s2.say(); } [CODE]else {[/CODE] sayac s2 = new sayac(str2.sub[CODE]string(1));[/CODE] return s2.say(); } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; import java.util.arrays; import java.util.arraylist; [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof metalsarki) { metalsarki m1 = (metalsarki) sarkilistesi.get(i); system.out.println(sarkilistesi.get(i).sanatci + "" - "" + sarkilistesi.get(i).isim); m1.gostermetalozellikleri(); } } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat(){[/CODE] } } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } [CODE]void oynat() {[/CODE] system.out.println(""[metal] "" + this.sanatci + "" - "" + this.isim + "" ("" + this.metalozellik + "" )""); } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[rock] "" + this.sanatci + "" - "" + this.isim + "" (huzurlu ve nostaljik)""); } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[klasik] "" + this.sanatci + "" - "" + this.isim + "" (haf[CODE]if ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] // [CODE]void cal(list<sarki> sarkilistesi){[/CODE] } } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi) {[/CODE] arraylist<sarki> sarkilistesi2 = [CODE]new arraylist();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { [CODE]int x = 0;[/CODE] [CODE]while (0 <= x && x <= i) {[/CODE] x = math.random() * 10 / 1; } sarkilistesi2.get(x).oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi) {[/CODE] boolean flag = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (flag && sarkilistesi.get(i).get[CODE]class() != rocksarki) {[/CODE] flag = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } if (sarkilistesi.get(i).get[CODE]class() == rocksarki) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] flag = true; } sarkilistesi.get(i).oynat(); } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(); } } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun kendisini içinde çağırması recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. 1 base recursive olmadan çözülen kısım, 2 base'e yaklaştıran case çağırma, 3 jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stackler oluşturuyor [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇terat[CODE]if çok stack kullanmadığından daha hızlı bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? lenght 0 olmadığı sürece substring alırım ve countı 1 artırırım substringim giderek 1 küçülür , base case length ==1 olur stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. bir memory biçimi çok fazla üstüste gelirse kaldıramaz overflow olur tail recursion nedir, kısaca açıklayınız. en son stackte sonucun bulunması abstraction kavramını açıklayınız. soyutlama gerekli bilgi açık gereksiz bilgi kapalı dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mümkün tersi olmaz protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? default daha yakın java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? her classın parent classına kolayca sürekli super yazmadan ulaşmayı sağlar parentn constructerını çağırır java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a bnin objesi metot overriding ve overloading kavramlarını açıklayınız. override aynı signatureın sub[CODE]classlarda yeniden tanınlanması overload ise aynı isim farklı signature class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent 10 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? static static metodlar ve overloadlarda yapılır. dynamic ise override yapılanlarda runtimeda yapılır java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? hiçbiri daha sonra override edilemeyeceğinden static binding ile yapılır. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overload da imza farklıdır bu yüzden compile edilirken static binding ile yapılır. override dynamic binding ile runtime sırasında bakılarak yapılır dinamik bağlamada jvm'nin görevi nedir? runtime sırasında overrideları kontrol eder java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü child [CODE]class parenttakinin özelliklerine sapihtir ancak tam tersi olmaz parenttakiler childın tüm özelliklerine sahip değildir java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? overload compile da olur normalde ancak runtimea bırakılırsa isimden dolayı karışıklık çıkabilir? class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstractde metodlar signature olarak tanımlanıyor ancak içi boş oluyor. hayır abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır? abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. ? constructor/ objesi olmaz abstract metodlar tanımlanır, veya normal merodlarda tanımlanabilir abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfacelerde birden fazla ata olabilir. classta olmaz. hayır abstractın objesi olmaz marker [CODE]interface ve functional interface kavramları nedir, nasıl kullanılır? marker sadece kolay anlaşılsın diye içi boş functional ise işlevli metodları olan bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet ikisi de olur abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? [CODE]interfacete obje olmaz? circle olarak tanımlarım drawing circle displaying interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? hayır i̇ki interfaceten hangisini seçeceğini bilemez. ? b implements a b java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? try chatchten sonra hata bulunsa da bulunmasa da finally bloğu yapılır. exception atılmazsa [CODE]trydan sonra catchi atlar ve finallyi yapar java'da kendi exceptionunuzu nasıl tanımlarsınız? exception classından yeni bir obje oluşturulur java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught -1 finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? hayır exception ioexceptionı kapsadığı için sıkıntı çıkar ikisini yer değiştirebiliriz trying caught 1 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] [CODE]int countletter = 0;[/CODE] [CODE]int countcomb = 1;[/CODE] [CODE]for (int i = 0;[/CODE] i < s.length(); i++) { if (isletter(s.charat(i))) { countletter++; } } [CODE]for (int i = 0;[/CODE] i < countletter; i++) { countcomb = 2 * countcomb; } s = turnlower(s); combinations(s, countcomb); } [CODE]public static boolean isletter(char c1) {[/CODE] [CODE]if (c1 < 97 && c1 > 64) return true;[/CODE] [CODE]else if (96 < c1 && c1 < 129) return true;[/CODE] [CODE]else return false;[/CODE] } [CODE]public static string turnlower(string s) {[/CODE] [CODE]string s1 = """";[/CODE] [CODE]for (int i = 0;[/CODE] i < s.length(); i++) { if (isletter(s.charat(i))) { if (islower(s.charat(i))) { s1 += (char) (s.charat(i)); } [CODE]else {[/CODE] s1 += s.charat(i) + 32; } } [CODE]else {[/CODE] s1 += s.charat(i); } } [CODE]return s1;[/CODE] } [CODE]public static boolean islower(char c1) {[/CODE] [CODE]if (96 < c1 && c1 < 129) return true;[/CODE] [CODE]else return false;[/CODE] } [CODE]public static void combinations(string s, int countcomb) {[/CODE] [CODE]if (countcomb == 0) {[/CODE] } [CODE]else {[/CODE] [CODE]string s1 = s;[/CODE] [CODE]for (int i = 0;[/CODE] i < s1.length(); i++) { if (isletter(s1.charat(i))) { system.out.pr[CODE]intln(s1);[/CODE] if (islower(s1.charat(i))) { system.out.pr[CODE]intln(s1);[/CODE] combinations(s1.sub[CODE]string(i), countcomb - 1);[/CODE] } } } } } } import java.util.arraylist; [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; robot() { this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; // main örneğinde isoperational verilmemiş o yüzden parametre olarak almadım. } [CODE]public string getname() {[/CODE] return this.name; } [CODE]public string gettype() {[/CODE] return this.type; } [CODE]public int getbatterylevel() {[/CODE] return this.batterylevel; } [CODE]public boolean getisoperational() {[/CODE] return this.isoperational; } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.println(this.name); system.out.println(this.type); system.out.println(this.batterylevel); system.out.println(this.isoperational); } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public string getname() {[/CODE] return this.name; } [CODE]public string getlocation() {[/CODE] return this.location; } [CODE]public arraylist<robot> getrobots() {[/CODE] return this.robots; } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setlocation(string name) {[/CODE] this.name = location; } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] this.robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE]// [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { getrobots().get(i).setbatterylevel(100); } } [CODE]public void printfactory() {[/CODE]// system.out .println(""factory name: "" + this.name + ""\nlocation: "" + this.location + ""\n robots operating here: ""); [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { this.getrobots(i).get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE]// [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(robots(i).getbatterylevel() - 15); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public int batteryfull;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.batteryfull = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = batteryfull;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.toplamroboturetimi(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] // [CODE]if (isarmed) isarmed = false;[/CODE] [CODE]else isarmed = true;[/CODE] } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] // this.cleaningpower += miktar; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<abstractrobot>();[/CODE] // [CODE]public static int factorycount = 0;[/CODE] [CODE]public static arraylist<robotfactory> factories = new arraylist<robotfactory>();[/CODE] [CODE]public robotfactory() {[/CODE] factorycount++; factories.add(this); } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { cleaningrobot c1 = (cleaningrobot) robots.get(i); system.out.println(""cleaning robot - model: "" + robots.get(i).getmodelname() + "" battery: "" + robots.get(i).getbatterylife() + "" cleaning power:"" + c1.getcleaningpower()); } else if (robots.get(i) instanceof securityrobot) { securityrobot s1 = (securityrobot) robots.get(i); system.out.println(""security robot - model: "" + robots.get(i).getmodelname() + "" battery: "" + robots.get(i).getbatterylife() + "" armed:"" + s1.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { cleaningrobot c2; if (robots.get(i) instanceof cleaningrobot) { c2 = (cleaningrobot) robots.get(i); c2.boostcleaningpower(miktar); system.out.println( ""cleaning robot - "" + c2.getmodelname() + "" now has cleaning power: "" + c2.getcleaningpower()); } [CODE]else {[/CODE] } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { securityrobot s2; if (robots.get(i) instanceof securityrobot) { s2 = (securityrobot) robots.get(i); s2.togglearmedmode(); if (s2.getisarmed()) { system.out.println(""security robot - "" + s2.getmodelname() + "" is now armed""); } [CODE]else {[/CODE] system.out.println(""security robot - "" + s2.getmodelname() + "" is now unarmed""); } } [CODE]else {[/CODE] } } } [CODE]public arraylist<abstractrobot> getallrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public static void toplamroboturetimi() {[/CODE] [CODE]int toprobot = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < factorycount; i++) { toprobot += factories.get(i).getallrobots().size(); } system.out.println(""tum fabrikalar tarafindan toplam "" + toprobot + "" robot uretildi.""); } } 0"
5361565,1,"5361565 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. import java.util.scanner; [CODE]public class l1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan=new scanner(system.in); system.out.pr[CODE]intln(""enter the number"");[/CODE] int i=scan.next[CODE]int();[/CODE] sayac s1=[CODE]new sayac(i);[/CODE] system.out.println(s1.say(i)); } } [CODE]class sayac{[/CODE] [CODE]int i;[/CODE] [CODE]public sayac(int i){[/CODE] this.i=i; } [CODE]public static int say(int i){[/CODE] [CODE]if(i<10){[/CODE] [CODE]if(i==1){[/CODE] [CODE]return 1;[/CODE] } [CODE]else{[/CODE] [CODE]return 0;[/CODE] } } [CODE]else{[/CODE] [CODE]if(i%10==1){[/CODE] [CODE]return 1 +say(i/10);[/CODE] } [CODE]else{[/CODE] [CODE]return say(i/10);[/CODE] } } } } [CODE]public class l1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr={[/CODE]5,4,2,1}; cocktailsort(arr); [CODE]for(int a=0 ;[/CODE]a<arr.length; a++){ system.out.pr[CODE]int(arr[a] +"" "");[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] [CODE]for(int a=0;[/CODE]a<arr.length; a++){ help(arr, a); help2(arr, arr.length-1-a); } } [CODE]public static void help(int[] arr,int m) {[/CODE] if(m==arr.length-1){ [CODE]return;[/CODE] } [CODE]if(arr[m]>arr[m+1]){[/CODE] [CODE]int t=arr[m];[/CODE] arr[m]=arr[m+1]; arr[m+1]=t; } help(arr, m+1); } [CODE]public static void help2(int[] arr,int n){[/CODE] [CODE]if(n==0){[/CODE] [CODE]return ;[/CODE] } [CODE]if(arr[n]<arr[n-1]){[/CODE] [CODE]int p=arr[n];[/CODE] arr[n]=arr[n-1]; arr[n-1]=p; } help2(arr,n-1); } } import java.util.scanner; [CODE]public class l1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan=new scanner(system.in); system.out.pr[CODE]intln(""enter the number i"");[/CODE] int i=scan.next[CODE]int();[/CODE] [CODE]int output=collatz(i);[/CODE] system.out.pr[CODE]intln(i);[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else{[/CODE] [CODE]if(i%2==0){[/CODE] [CODE]return collatz(i/2);[/CODE] } [CODE]else{[/CODE] [CODE]return collatz((i*3)+1);[/CODE] } } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; import java.util.collections; [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (int a=0;[/CODE] a<sarkilistesi.size(); a++) { if(sarkilistesi.get(a) instanceof metalsarki){ metalsarki o= (metalsarki) sarkilistesi.get(a); system.out.print(o.sanatci +""-"" +o.isim + "" [ozellik:""); o.gostermetalozelllikleri(); system.out.pr[CODE]int(""]"");[/CODE] system.out.pr[CODE]intln("""");[/CODE] } } } } abstract [CODE]class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]public void oynat();[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim,string sanatci,string metalozellik){[/CODE] this.isim=isim; this.sanatci=sanatci; this.metalozellik=metalozellik; } [CODE]public void gostermetalozelllikleri(){[/CODE] system.out.print(this.metalozellik); } @override [CODE]public void oynat(){[/CODE] system.out.println(""[metal] "" + this.sanatci + ""-"" +this.isim + "" ("" + this.metalozellik + "")""); } } [CODE]class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim,string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } @override [CODE]public void oynat(){[/CODE] system.out.println(""[rock] "" + this.sanatci + ""-""+ this.isim + "" (huzurlu ve nostaljik)""); } } [CODE]class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim ,string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } @override [CODE]public void oynat(){[/CODE] system.out.println(""[klasik] "" + this.sanatci + ""-""+ this.isim + "" (haf[CODE]if ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(int a=0;[/CODE] a<sarkilistesi.size(); a++){ sarkilistesi.get(a).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] list<sarki> karma=[CODE]new arraylist<sarki>();[/CODE] karma.addall(sarkilistesi); collections.shuffle(karma); [CODE]for(int a=0;[/CODE] a<sarkilistesi.size(); a++){ karma.get(a).oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] // buraya gel random kullan bi de kullanılmış mı bak!!! [CODE]for(int a=0;[/CODE] a<sarkilistesi.size(); a++){ if( a<sarkilistesi.size()-1 && sarkilistesi.get(a+1) instanceof rocksarki && !(sarkilistesi.get(a) instanceof rocksarki)){ sarkilistesi.get(a).oynat(); system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } else if( a<sarkilistesi.size()-1 && sarkilistesi.get(a) instanceof rocksarki && !(sarkilistesi.get(a+1) instanceof rocksarki)){ sarkilistesi.get(a).oynat(); system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } [CODE]else {[/CODE] sarkilistesi.get(a).oynat(); } } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s){[/CODE] this.strateji=s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } ""recursion"" kavramı nedir, kısaca açıklayınız. öz yinelemeli demektir.bir methodun kendini kendi içinde çağırmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case vardır metodun sonsuz döngüye girmesini engellemek için. bir de base case dışındaki kısmı vardır o da elimizde ki problemi küçültmeye çalışır ve sonrasında da küçük problemlerin çözümleri birleşip büyük çözümü oluşturur. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. recursive callları iterasyona dönüştürüyor önce ve bu şekilde handle ediyor [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iteratif olarak daha verimli olur makine adına. çünkü makine için iteratif daha verimlidir. bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? base casesi uzunluğu 1 olan string olur stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack her defasında recursive call olduğunda yeni açılan alandır ve bunlar üst üste binerler. overflow olmasının sebebi stacklerin ulaşabilrcekleri en fazla miktara ulaşmasıdır. örnek olarak ise sonsuz döngüye giren bir recursionı örnek verebiliriz. tail recursion nedir, kısaca açıklayınız. tail recursion methodun son komutunu kendisi olan yani recursive callın en sonda yapıldığı ve diğer işlemlerin bundan önce yapıldığı recursive methodlardır. java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static binding final , static , private olan durumlarda yapılır ve overload olan yerlerde olur dynamic binding iste override edilen kodlarda olur polymorphismde olur java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? çünkü override edilemezler ve o yüzden polymorphismde kullanilamazlar ve dynamic binding gerekmediği icin static binding olur. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloadda dynamic çünkü runtimeda karar verir ama overloadda compile timeda karar verir ve metotların imzaları farklı olduğu için dynamic binding gerekmez o yüzden static binding kullanılır dinamik bağlamada jvm'nin görevi nedir? run timeda hangi metodun cagirilacagini bulmak java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? bir alt sınıf zaten ust sınıfın bütün ozelliklerini içerir o yüzden impilicit bir şekilde yapilabilir./down casting implicit bir sekilde yapilamaz hata alabiliriz sonucunda java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? daha az efficient olurdu kodlarımız çünkü hepsi run timeda binding edilirdi [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? output:child burada dinamik bağlama gözlenir [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? output: product book burada da dinamik bağlama olur. java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classların tamamlanmamış methodları yani sadece imzası olan methodları bulunur concrete bir classta ise bütün methodlar tamamlanmıştır. abstract classların constructoru olabilir ama interfacelerin olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet bir abstract classın abstract bir tane sub classı varsa ve bunda implement edersek olur.cunku sadece bir tane methodun tamamlanmamış olması o classın abstract olması için yeterli olur. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract classlar tamamlanmamis methodlar bulundururlar, bunlardan obje oluşturmayız, ama type olarak kullanabiliriz. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? bir class birden fazla interfacei implement edebilir ama birden fazla classı extend edemez.evet tip olarak kullanılabilirler. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interfaceler method içermezler belirteç olarak kullanılırlar functional interfaceler ise sadece bir tane abstract methoda sahiptirler ayrıca lambdalı bir şeyler hatırlıyorum. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? ikisinin de cevabı evet. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? hatamız cyi tanımlarken new shape yazmamızda new circle yazmamız lazim. output: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? bu şekilde compile edilebilir ama runtimeda hata verir. koddaki problem aynı signaturea sahip iki adet methodun bulunduğu iki interfacei tek bir classin implement etmesi.problemli satırda iki farklı method tanimplanip ayri ayri cagirilabilirler ya da super çağırmak yerine c yazdirilabilir. ayrı ayrı method olsuturulursa hem a hem b basılır ama ikincisi yapilirsa c basılır sadece. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir checked ve unchecked checkede ornek olarak ioexception verebiliriz uncheckede ornek olarak ise runtime exception verebiliriz. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? sadece throwable olan objeler için kullanilabilir. unchecked olan exceptionlarda throws diye bildirmemiz gerekmez.bir metot birden fazla thow yapabilir.overrideda ise daha az spesifik bir exception throw edemeyiz bu checkedler icin uncheckedlerde böyle bir kisitlama yok. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally blogu her zaman çalışır açık olan socketları falan kapatmak için kullanilir.kaynaklarin bosa harcamasını engeller java'da kendi exceptionunuzu nasıl tanımlarsınız? exceptions classından extend ederek yeni bir class olusturabiliriz ve bunun objesini olusturarak da kendi exceptionımızı oluşturabiliriz. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? farklı bir exception varsa bunu da yakalayabilmek için. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 77 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? ? bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.scanner; [CODE]public class l2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan=new scanner(system.in); system.out.pr[CODE]intln(""enter the string"");[/CODE] string s=scan.nextline(); comb(s.tochararray(), 0, """"); } [CODE]public static void comb(char[] chars,int index,string s){[/CODE] if(index==chars.length){ system.out.pr[CODE]intln(s);[/CODE] [CODE]return ;[/CODE] } [CODE]else{[/CODE] [CODE]if(chars[index]>='a' && chars[index]<='z'){[/CODE] comb(chars, index+1, s+chars[index]); comb(chars, index+1, s+ (char)(chars[index]-32)); } [CODE]else if(chars[index]>='a' && chars[index]<='z'){[/CODE] comb(chars, index+1, s+chars[index]); comb(chars, index+1, s+(char)(chars[index]+32)); } [CODE]else{[/CODE] comb(chars, index+1, s+chars[index]); } } }} import java.util.arraylist; [CODE]public class l2q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory=[CODE]new factory();[/CODE] robot r1=[CODE]new robot();[/CODE] robot r2=[CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE]//constructor oluşturulurken isoperational parametre olarak alonsın denmiş ama maindeki kodda görünmüyor robot r3=[CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] this.batterylevel=100; this.isoperational=true; this.name=""wall-e""; this.type=""trash""; } [CODE]public robot(string name,string type, int batterylevel,boolean isoperational){[/CODE] this.name=name; this.batterylevel=batterylevel; this.isoperational=isoperational; this.type=type; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public boolean getisoperaional(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name=name; } [CODE]public void setstype(string type){[/CODE] this.type=type; } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel=batterylevel; } [CODE]public void setisoperational(boolean isoperational){[/CODE] this.isoperational=isoperational; } [CODE]public void charge(){[/CODE] this.batterylevel=100; } [CODE]public void printrobot(){[/CODE] system.out.println(""robot name: "" +this.getname() + "" robot type: "" +this.gettype() + "" batterylevel: "" + this.getbatterylevel()+ "" is operational: ""+this.getisoperaional()); } } [CODE]class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist <robot> robots; [CODE]public factory(){[/CODE] this.location=""moon""; this.name=""factory1""; } [CODE]public factory(string name, string location){[/CODE] this.location=location; this.name=name; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name=name; } [CODE]public void setlocation(string location){[/CODE] this.location=location; } [CODE]public void work(){[/CODE] [CODE]for(int a=0;[/CODE] a<robots.size(); a++){ this.robots.get(a).setbatterylevel(this.robots.get(a).getbatterylevel()-15); } } [CODE]public void printfactory(){[/CODE] [CODE]for(int b=0;[/CODE] b<robots.size(); b++){ this.robots.get(b).pr[CODE]introbot();[/CODE] } } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int a=0;[/CODE] a<robots.size();a++){ this.robots.get(a).setbatterylevel(100); } } [CODE]public void addrobot(robot robot){[/CODE] [CODE]if(robots==null){[/CODE] robots=[CODE]new arraylist<robot>();[/CODE] } this.robots.add(robot); } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]public int getbatterylife();[/CODE] [CODE]public void recharge();[/CODE] } [CODE]public class quiz2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.println(""\ntum fabrikalar tarafindan toplam "" + robotfactory.num + "" robot uretildi""); }} [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]int b;[/CODE] [CODE]public abstractrobot(string modelname,int batterylife){[/CODE] this.batteryl[CODE]ife=batterylife;[/CODE] this.modelname=modelname; b=batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname(){[/CODE] return this.modelname; } [CODE]public int getbatterylife(){[/CODE] return this.batteryl[CODE]ife;[/CODE] } [CODE]public void recharge(){[/CODE] this.batteryl[CODE]ife=b;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public boolean getisarmed(){[/CODE] return this.isarmed; } [CODE]public void performtask(){[/CODE] if(this.batteryl[CODE]ife>=10){[/CODE] system.out.println(""[""+this.getmodelname() + ""] scaning for threats... armed: "" +this.isarmed); this.batteryl[CODE]ife-=10;[/CODE] } [CODE]else{[/CODE] system.out.println( ""[""+this.getmodelname()+""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] if(this.isarmed){ this.isarmed=false; } else if(!this.isarmed){ this.isarmed=true; } } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; } [CODE]public void performtask(){[/CODE] if(this.batteryl[CODE]ife>=10){[/CODE] system.out.println(""[""+this.getmodelname()+ ""] cleaning in progress... cleaning power:"" + this.cleaningpower); this.batteryl[CODE]ife-=10;[/CODE]} [CODE]else{[/CODE] system.out.println(""[""+this.getmodelname() + ""] not enough battery to clean...""); } } [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void boostcleaningpower(int r){[/CODE] this.cleaningpower+=r; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] [CODE]static int num=0;[/CODE] private arraylist<abstractrobot> robots=[CODE]new arraylist<>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] cleaningrobot r=[CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add(r); num++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] securityrobot r=[CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add(r); num++; } [CODE]public void performalltasks(){[/CODE] [CODE]for(int a=0 ;[/CODE]a<robots.size(); a++){ robots.get(a).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int a=0;[/CODE] a<robots.size(); a++){ if(robots.get(a) instanceof cleaningrobot){ cleaningrobot r=(cleaningrobot) robots.get(a); system.out.println(""cleaningrobot - model: ""+ r.getmodelname()+ "" , battery: "" + r.batterylife + "" , cleaning power: "" +r.getcleaningpower()); } [CODE]else{[/CODE] securityrobot r=(securityrobot) robots.get(a); system.out.println(""securityrobot - model: ""+ r.getmodelname()+ "" , battery: "" + r.batterylife + "" , armed: "" + r.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int a=0;[/CODE] a<robots.size(); a++){ if(robots.get(a) instanceof cleaningrobot){ cleaningrobot r=(cleaningrobot) robots.get(a); r.boostcleaningpower(miktar); robots.set(a,r); system.out.println(""cleaningrobot - ""+ r.modelname +"" now has cleaning power: "" +r.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int a=0 ;[/CODE]a<robots.size(); a++){ if(robots.get(a) instanceof securityrobot){ securityrobot r=(securityrobot) robots.get(a); r.togglearmedmode(); robots.set(a, r); system.out.print(""securityrobot - ""+ r.modelname +"" is now ""); if(r.getisarmed()){ system.out.pr[CODE]int(""armed"");[/CODE] } else if(!r.getisarmed()){ system.out.pr[CODE]int(""unarmed"");[/CODE] } system.out.pr[CODE]intln();[/CODE] } } } [CODE]public int robsum(){[/CODE] [CODE]return num;[/CODE] } } 1"
3688139,2,"3688139 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]else if (i % 2 == 0) {[/CODE] [CODE]return collatz(i / 2) + 1;[/CODE] } [CODE]else {[/CODE] [CODE]return collatz(i * 3 + 1) + 1;[/CODE] } } } [CODE]public class labq3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""101101"");[/CODE] sayac s2 = [CODE]new sayac(""0111"");[/CODE] system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]string num;[/CODE] [CODE]string newnum;[/CODE] // ilk num kaybolmasın diye iki tane oluşturdum// [CODE]int ind = 0;[/CODE] [CODE]public sayac(string num) {[/CODE] this.num = num; [CODE]newnum = num;[/CODE] } [CODE]public int say() {[/CODE] if (ind == num.length() - 1) { if (num.charat(ind) == '1') { [CODE]return 1;[/CODE] } [CODE]else {[/CODE] [CODE]return 0;[/CODE] } } else if (newnum.charat(0) == '1') { newnum = newnum.sub[CODE]string(1);[/CODE] ind++; [CODE]return say() + 1;[/CODE] } [CODE]else {[/CODE] newnum = newnum.sub[CODE]string(1);[/CODE] ind++; [CODE]return say();[/CODE] } } } [CODE]public class labq2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 8, 1, 2, 1, 8, 0, 11, }; cocktailsort(arr); system.out.pr[CODE]intln(arrayprint(arr, 0));[/CODE] } [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]if (control(arr, 0) != 0) {[/CODE] cocktailsort(arr); } } [CODE]public static int control(int[] arr, int a) {[/CODE] if (a == arr.length - 1) { [CODE]return 0;[/CODE] } [CODE]else {[/CODE] [CODE]if ((arr[a] > arr[a + 1])) {[/CODE] [CODE]int x = arr[a];[/CODE] arr[a] = arr[a + 1]; arr[a + 1] = x; [CODE]return control(arr, a + 1) + 1;[/CODE] } [CODE]else return control(arr, a + 1);[/CODE] } } [CODE]public static string arrayprint(int[] arr, int a) {[/CODE] if (a == arr.length - 1) { [CODE]return """" + arr[a];[/CODE] } [CODE]else {[/CODE] [CODE]return """" + arr[a] + "","" + arrayprint(arr, a + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; import java.util.random; import java.util.random.randomgenerator; abstract [CODE]class sarki {[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] abstract [CODE]void gostermetalozellikleri();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]int(""[metal] "");[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" "" + ""["" + metalozellik + ""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]int(""[rock] "");[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim);[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]int(""[klasik] "");[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim);[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean[] arr = new boolean[sarkilistesi.size()]; boolean flag = true; random a = [CODE]new random();[/CODE] [CODE]int p = 0;[/CODE] [CODE]int r = 0;[/CODE] [CODE]while (flag) {[/CODE] p++; int x = a.nextint(sarkilistesi.size()); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { [CODE]if (arr[i] == false) {[/CODE] p++; } } [CODE]if (p > 100000) {[/CODE] break; } [CODE]if (p == 0) {[/CODE] flag = false; } [CODE]else if (arr[x] == true) {[/CODE] continue; } sarkilistesi.get(x).oynat(); arr[x] = true; } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]int y = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { [CODE]if (y == 0) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] y++; } } [CODE]else if (y == 1) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi : standart"");[/CODE] } sarkilistesi.get(i).oynat(); } } } [CODE]class muzikcalar {[/CODE] [CODE]public calmastratejisi strateji;[/CODE] [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof metalsarki) { sarkilistesi.get(i).gostermetalozellikleri(); } } } } ""recursion"" kavramı nedir, kısaca açıklayınız. methodoverriding, metot içinde metot çalıştırmak recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. tek tek hafıza da bölümler oluşturarak [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. recursive olarak daha iyi okunabilir, hata bulma kısmında daha işlevsel olur. iteratif ise daha az yer kaplar, performans açısından daha iyidir. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? tek tek charat ile baglariz cagiririz. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack jvm de her bir değer için oluşturan hafıza bölümleridir. stackoverflow ise bunların sonunun olmayıp dolmasıdır. fonskiyonun base casei olmazsa oluşabilir. tail recursion nedir, kısaca açıklayınız. tail recursion fonksiyon baseinin işlemin en sonunda olmasidir. abstraction kavramını açıklayınız. soyutlama. kullanıcıya sadece kendisi için gerekli bilgileri verme. altta ne yapıldığını gizlemek. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? employee returnlu metodu hourlyemployee olarak override etmek mumkundur. tersi ise mumkun degildir cunku atadan alta override edilir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? ata classin constructoruna da ulasmamiz icin. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır. bir atadan birden fazla subclass cikabilir ama her subclass bir ataya baglidir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a ve b arasında kalitim iliskisi vardir. metot overriding ve overloading kavramlarını açıklayınız. metot overriding subclassların ata classlardan gelen aynı imzalı metotları kendi returnu ile kullanması. metot overloading aynı isimli metotlara farklı parametre verilmesiyle farklı imzalı metotlar olmasıdir. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlar abstract govdesiz metotlar icerebilen siniflardir. normal siniflardan farki nesne olusturamamalaridir. abstract classlarin constructoru olabilir interfacelerin olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? eger sonrasinda alt sinifta override ediliyorsa (mecbur edecek) evet edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metotlar govdesiz metotlardir. ileride kalitim derinlestiginde bize esneklik ve kolaylik saglar. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler tip olarak kullanilabilir abstractlar kullanilamaz. interfacelerde instance variablelar olusturulmaz. bir class sadece 1 abstract class extend edebilirken birden cok interfacei implement edebilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? bilmiyorum. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? 1)evet edebilir.2) evet edebilir abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract classtan nesne olusturulmus. o kod satiri yerine circle c= [CODE]new circle();[/CODE] yazilirsa hata duzeltilmis olur. cikti: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? hayir edilemez. b interfaceinin a interfaceini implement etmesi gerekir bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel, boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setbattery(int a) {[/CODE] batterylevel = a; } [CODE]public void setname(string n) {[/CODE] name = n; } [CODE]public void settype(string t) {[/CODE] type = t; } [CODE]public void setisoperational(boolean o) {[/CODE] isoperational = o; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]int(""robot name= "" + name + "" || "");[/CODE] system.out.pr[CODE]int(""robot type= "" + type + "" || "");[/CODE] system.out.pr[CODE]int(""battery level= "" + batterylevel + "" || "");[/CODE] system.out.pr[CODE]intln(""is operational= "" + isoperational);[/CODE] } } [CODE]public class quizq1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] [CODE]int ind = 0;[/CODE] [CODE]int a = 0;[/CODE] [CODE]int k = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < s.length(); i++) { if ((s.charat(i) >= 'a' && s.charat(i) <= 'z') || (s.charat(i) >= 'a' && s.charat(i) <= 'z')) { a++; } } [CODE]int[] arg = new int[a];[/CODE] [CODE]for (int i = 0;[/CODE] i < s.length(); i++) { if ((s.charat(i) >= 'a' && s.charat(i) <= 'z') || (s.charat(i) >= 'a' && s.charat(i) <= 'z')) { arg[k] = i; k++; } } int size = (int) math.pow(2, a); [CODE]string[] arr = new string[size];[/CODE] [CODE]for (int x = 0;[/CODE] x < a; x++) { if ((s.charat(arg[a]) >= 'a' && s.charat(arg[a]) <= 'z')) { arr[ind] = s.substring(a) + ((char) s.charat(arg[a]) - 'a' + 'a') + s.sub[CODE]string(a + 1);[/CODE] ind++; arr[ind] = s.substring(a) + s.charat(arg[a]) + s.sub[CODE]string(a + 1);[/CODE] ind++; if ((s.charat(arg[a]) >= 'a' && s.charat(arg[a]) <= 'z')) { arr[ind] = s.substring(a) + ((char) s.charat(arg[a]) - 'a' + 'a') + s.sub[CODE]string(a + 1);[/CODE] ind++; arr[ind] = s.substring(a) + s.charat(arg[a]) + s.sub[CODE]string(a + 1);[/CODE] ind++; } } [CODE]else {[/CODE] arr[ind] = s.substring(a) + ((char) s.charat(arg[a]) - 'a' + 'a') + s.sub[CODE]string(a + 1);[/CODE] ind++; arr[ind] = s.substring(a) + s.charat(arg[a]) + s.sub[CODE]string(a + 1);[/CODE] ind++; } } [CODE]for (int u = 0;[/CODE] u < size; u++) { system.out.pr[CODE]intln(arr[u]);[/CODE] } } } import java.util.arraylist; [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setname(string n) {[/CODE] name = n; } [CODE]public void setlocation(string l) {[/CODE] location = l; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size() - 1; i++) { robots.get(i).charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]int(""factory name= "" + name + "" || "");[/CODE] system.out.pr[CODE]intln(""location= "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here: "");[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size() - 1; i++) { robots.get(i).setbattery(robots.get(i).getbattery() - 15); } } } import java.util.arraylist; [CODE]public class quizzq2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel, boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setbattery(int a) {[/CODE] batterylevel = a; } [CODE]public void setname(string n) {[/CODE] name = n; } [CODE]public void settype(string t) {[/CODE] type = t; } [CODE]public void setisoperational(boolean o) {[/CODE] isoperational = o; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]int(""robot name= "" + name + "" || "");[/CODE] system.out.pr[CODE]int(""robot type= "" + type + "" || "");[/CODE] system.out.pr[CODE]int(""battery level= "" + batterylevel + "" || "");[/CODE] system.out.pr[CODE]intln(""is operational= "" + isoperational);[/CODE] } } import java.util.arraylist; [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setname(string n) {[/CODE] name = n; } [CODE]public void setlocation(string l) {[/CODE] location = l; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size() - 1; i++) { robots.get(i).charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]int(""factory name= "" + name + "" || "");[/CODE] system.out.pr[CODE]intln(""location= "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here: "");[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size() - 1; i++) { robots.get(i).setbattery(robots.get(i).getbattery() - 15); } } } import java.util.arraylist; [CODE]public class quizzq2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public void recharge(int a) {[/CODE] batteryl[CODE]ife = batterylife + a;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } } import java.util.arraylist; [CODE]public class quizq2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""produced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.println(""upgrading cleaning robots...""); factory.upgradecleaningrobots(10); system.out.println(""toggling security robot modes...""); factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""final robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); robotfactory.robotcount(); } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] [CODE]public static int count = 0;[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] count++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] count++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { cleaningrobot a = (cleaningrobot) robots.get(i); system.out.println(""cleaning robot - model: "" + robots.get(i).getmodelname() + "", battery:"" + robots.get(i).getbatterylife() + "", cleaning power:"" + a.getcleaningpower()); } [CODE]else {[/CODE] securityrobot b = (securityrobot) robots.get(i); system.out.println(""security robot - model: "" + robots.get(i).getmodelname() + "", battery:"" + robots.get(i).getbatterylife() + "", cleaning power:"" + b.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof cleaningrobot) { cleaningrobot a = (cleaningrobot) robots.get(i); a.boostcleaningpower(miktar); system.out.println( ""cleaning robot - "" + a.modelname + "" now has cleaning power: "" + a.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i) instanceof securityrobot) { securityrobot c = (securityrobot) robots.get(i); c.togglearmedmode(); if (c.getisarmed()) { system.out.println(""security robot - "" + c.modelname + "" is now armed""); } [CODE]else {[/CODE] system.out.println(""security robot - "" + c.modelname + "" is now unarmed""); } } } } [CODE]public static void robotcount() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + count + "" robot uretildi"");[/CODE] } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] [CODE]if (isarmed) {[/CODE] isarmed = false; } [CODE]else {[/CODE] isarmed = true; } } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power:"" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower = cleaningpower + 10; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void boostcleaningpower(int a) {[/CODE] cleaningpower = cleaningpower + a; } } 2"
6157698,2,"6157698 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class q2 {[/CODE] [CODE]public static void cocktailsort(int[] arr) {[/CODE] boolean swapped = false; [CODE]for(int i= 0;[/CODE] i<arr.length-1; i++) { [CODE]if(arr[i] > arr[i+1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i+1]; arr[i+1] = temp; swapped = true; } } [CODE]if(swapped) {[/CODE] int arr2[] = new int[arr.length-1]; [CODE]for(int i=1;[/CODE] i< arr.length; i++) { arr2[i-1]= arr[i]; } cocktailsort(arr); } } [CODE]public static void main(string[] args) {[/CODE] // todo auto-generated method stub [CODE]int arr[] = {[/CODE]5,4,1,2,7,125,90,12}; cocktailsort(arr); [CODE]for(int i=0;[/CODE] i< arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } } /* if(arr.length == 2) [CODE]return ;[/CODE] int arr2[] = new int[arr.length-1]; [CODE]if(arr[0] > arr[1]) {[/CODE] [CODE]int temp = arr[0];[/CODE] arr[0]=arr[1]; arr[1]=temp; } [CODE]for(int i=1;[/CODE] i< arr.length; i++) { arr2[i-1]= arr[i]; } cocktailsort(arr2); cocktailsort(arr2);*/ [CODE]public class q1 {[/CODE] [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i == 1) return 0;[/CODE] [CODE]if(i%2 == 0) return collatz(i/2)+1;[/CODE] [CODE]else return collatz(i*3+1)+1;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] // todo auto-generated method stub system.out.pr[CODE]intln(""\n""+collatz(5));[/CODE] } } [CODE]public class q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); // 2 basacak. } } [CODE]class sayac{[/CODE] [CODE]public string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] if(str.length()==0) [CODE]return 0;[/CODE] if(str.indexof('1') == -1) [CODE]return 0;[/CODE] [CODE]else {[/CODE] str = str.substring(str.indexof('1')+1); [CODE]return say()+1;[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; import java.util.random; [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki.getclass().getname().equals(""metalsarki"")) { metalsarki s = (metalsarki) sarki; s.gostermetalozellikleri(); } // bu kismi cikti ornegini saglayacak sekilde doldurun } } } abstract [CODE]class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] [CODE]string metalozellik;[/CODE] //şarkıya ait nitelik (örn., agres[CODE]if ritim, yüksek enerji) metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] ""+sanatci+"" - ""+isim+"" (""+metalozellik+"")"");[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci+"" - ""+isim+"" [ozellik: ""+metalozellik+""]"");[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] rocksarki([CODE]string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] ""+sanatci+"" - ""+isim+"" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki{[/CODE] klasiksarki([CODE]string isim, string sanatci){[/CODE] this.isim=isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] ""+sanatci+"" - ""+isim+"" (hafif ve sakin)"");[/CODE] } } abstract [CODE]class calmastratejisi{[/CODE] abstract [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma extends calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class karisikcalma extends calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi){[/CODE] random rand = [CODE]new random();[/CODE] list<sarki> calinmamis = [CODE]new arraylist<sarki>(sarkilistesi);[/CODE] while(calinmamis.size() > 0) { int x = rand.nextint(calinmamis.size()); calinmamis.get(x).oynat(); calinmamis.remove(x); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class rockcuozelcalma extends calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi){[/CODE] boolean stillrock = false; [CODE]for(sarki sarki : sarkilistesi) {[/CODE] if(sarki.getclass().getname().equals(""rocksarki"")) { if(!stillrock) system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] stillrock = true; } [CODE]else if(stillrock){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] stillrock =false; } sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } abstraction kavramını açıklayınız. amacımıza ulaşmak için gerekli olmayan bilgileri atmak ve sadece ilgili olanları bırakmak. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? eğer hourlyemployee employee nin subclassı ise mümkündür. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? subclasslardan hemen üstünde olmayan parent classın değerlerine erişebilmek için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır bu durum olası karışıklıkları engellemek için mümkün değildir ve diamond problem olarak adlandırılır java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b'nin subclasslarından birisi demektir metot overriding ve overloading kavramlarını açıklayınız. overriding aynı sinature'a sahip bir methodun tekrar yazılması ve parent classtaki halinin yerine kullanılmasıdır. ovrloading aynı isimli bir methodun parametrelerinin değiştirilmesi sonucu genelde aynı işlemi daha fazla ya da az parametreyle yapacak bir methodun oluşturulmasıdır [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? yazdırmaz [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? static binding methodların override edilme ihtimalinin olmadığı durumlarda olur iken dynamic binding methodların override edilme ihtimali olduğu durumlarda olur. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? static private ve final methodlar override edilemedikleri için static bindingle bağlanır. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading yaparken signature birbirinden ayrı olduğu için static binding gerçekleşir. overriding yaparken reference variable'dan objeye kadar en son override edilmiş method kullanılacağı için dynamic binding olur dinamik bağlamada jvm'nin görevi nedir? methodun override edilme ihtimaline karşı reference variable'ın olduğu class'tan objeye kadar methodun en son override edildiği noktadaki halini bulmaktır. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? .parent childın bütün özelliklerine sahip olmayabileceği için sıkıntı olabilir.(implicit ne bilmiyorum) java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? dynamic binding sürekli override edilip edilmediğini kontrol etmesi gerektiği için zaman kaybı yaşanırdı.(dynamic yavaş olduğundan) [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik child [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? book product dinamik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class içinde tanımlanmamış abstract methodu olan ya da üstündeki class ya da interfaceden tanımlanmamış abstract method alan class'lara denir. objeleri olamadığı için constructorları olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet edilebilir ama implement edilen method dışında classda abstract başka bir methodun olmaaı gerekir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. nasıl implement edileceği belli olmayan methodlar yazmamızı sağlar. bir sınıflandırma yapmış oluruz. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar interfacelerden farklı olarak reference variable olarak kullanılabilir ve classlar başka bir classa extend edilirken interfaceler implement edilir ve 1 class 1den fazla interface implement edebilir. abstractclass onje oluşturamasada refence variable olarak kullanılabilir. interface kullanılamaz. marker interface ve functional interface kavramları nedir, nasıl kullanılır? sadece düzenleme amaçlı kullanılır. bir [CODE]class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet evet abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? new shape() objesi shape abstract bir clss olduğundan oluşturulamaz. yerine [CODE]new circle() ifadesi gelirse output: drawing circle displaying interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? compile edilmez. implement edilen interfacelerde aynı signature'a sahip methodun olması. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 3 fileio numericalmismatch java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? override ettiği metoddan daha üst, genel bir şey throw edemez eğer override ettiği metod exception throwluyorsa throwable throwlayamaz finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu try da ya da catch exception olup olmamasına bakmaksızın çalışan kod bloğudur java'da kendi exceptionunuzu nasıl tanımlarsınız? throw new aexception(""this is aexception"") java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? . [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done -1 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? trying m1 caught1 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true robot(){ this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; } [CODE]public string getname () {[/CODE][CODE]return name;[/CODE]} [CODE]public string gettype () {[/CODE][CODE]return type;[/CODE]} [CODE]public int getbatterylevel () {[/CODE][CODE]return batterylevel;[/CODE]} [CODE]public boolean getisoperational () {[/CODE][CODE]return isoperational;[/CODE]} [CODE]public void setname(string name) {[/CODE]this.name = name;} [CODE]public void settype(string type) {[/CODE]this.type = type;} [CODE]public void setbatterylevel(int batterylevel) {[/CODE]this.batterylevel = batterylevel;} [CODE]public void setisoperational(boolean isoperational) {[/CODE]this.isoperational = isoperational;} [CODE]public void charge() {[/CODE]batterylevel = 100;} [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: ""+name+""\nrobot type: ""+type+""\nbatterylevel: ""+batterylevel+""\nisoperational: ""+isoperational);[/CODE] } } [CODE]class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<robot>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; }// name = “factory1” ve location = “moon” yapar. //private değişkenler için get ve set metotları. [CODE]public string getname () {[/CODE][CODE]return name;[/CODE]} [CODE]public string getlocation () {[/CODE][CODE]return location;[/CODE]} [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size();i++) { robots.get(i).charge(); } } //tüm robotların şarjını 100 yapar. [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: ""+name);[/CODE] system.out.pr[CODE]intln(""location: ""+location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size();i++) { robots.get(i).pr[CODE]introbot();[/CODE] system.out.pr[CODE]intln();[/CODE] } } //ekrana basar. aşağıdaki [CODE]formatta çıktı vermelidir: public void work() {[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size();i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } //her robotun şarjı %15 azalır. } [CODE]public class q1_calismiyor {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] //abc /* * abc * abc * abc * abc * abc * abc * abc * abc * * ab * * ab * ab * ab */ // [CODE]int[] indexes = letterindexes(s);[/CODE] // [CODE]int nletters =0;[/CODE] //number of letters // [CODE]for(int i : indexes) {[/CODE] // [CODE]if(i != 0) // nletters++;[/CODE] // } // // boolean[] changed = new boolean[s.length()]; // changed = booleanreset(changed); // // [CODE]for(int i=0;[/CODE] i<math.pow(2, nletters);i++) { // } system.out.pr[CODE]intln(recurv(s));[/CODE] } [CODE]public static string recurv(string str) {[/CODE] if(str.length()==0) [CODE]return """";[/CODE] char c = str.charat(0); if( c >= 'a' && c <= 'z') return """"+(char)(c+'a'-'a') + recurv(str.sub[CODE]string(1));[/CODE] else if(c >= 97 && c <= 122) return """"+(char)(c-('a'-'a')) + recurv(str.sub[CODE]string(1));[/CODE] return """"+c+recurv(str.sub[CODE]string(1));[/CODE] } [CODE]public static int[] letterindexes(string str) {[/CODE] int[] indexes = new int[str.length()]; [CODE]for(int i =0;[/CODE] i<indexes.length; i++) { indexes[i] = 0; } [CODE]for(int i=0;[/CODE] i<str.length();i++) { char c =str.charat(i); [CODE]if( c >= 65 && c <= 90) indexes[i] = 2;[/CODE] [CODE]if(c >= 97 && c <= 122) indexes[i] = 1;[/CODE] } [CODE]return indexes;[/CODE] } [CODE]public static boolean[] booleanreset(boolean[] arr) {[/CODE] [CODE]for(boolean a : arr) {[/CODE] a = false; } [CODE]return arr;[/CODE] } } 2"
9167236,5,"9167236 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package lab1;[/CODE] [CODE]public class ibrahimerenyilmaz {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(""\n"" + ""---------------------- soru - 1 ----------------------"" + ""\n"");[/CODE] system.out.pr[CODE]int(""5: "");[/CODE] system.out.pr[CODE]intln(collatz(5) + ""\n"");[/CODE] system.out.pr[CODE]int(""7: "");[/CODE] system.out.pr[CODE]intln(collatz(7) + ""\n"");[/CODE] system.out.pr[CODE]int(""10: "");[/CODE] system.out.pr[CODE]intln(collatz(10) + ""\n"");[/CODE] system.out.pr[CODE]intln(""---------------------- soru - 2 ----------------------"" + ""\n"");[/CODE] [CODE]int arr1[] = {[/CODE]5, 4, 1, 2}; cocktailsort(arr1); system.out.pr[CODE]int(""5, 4, 1, 2 -> "");[/CODE] [CODE]for (int i = 0;[/CODE] i < arr1.length - 1; i++) { system.out.pr[CODE]int(arr1[i] + "", "");[/CODE] } system.out.pr[CODE]int(arr1[3]);[/CODE] system.out.pr[CODE]intln(""\n"");[/CODE] [CODE]int arr2[] = {[/CODE]10, 3, 8, 2, 6, 1, 5}; cocktailsort(arr2); system.out.pr[CODE]int(""10, 3, 8, 2, 6, 1, 5 -> "");[/CODE] [CODE]for (int i = 0;[/CODE] i < arr2.length - 1; i++) { system.out.pr[CODE]int(arr2[i] + "", "");[/CODE] } system.out.pr[CODE]int(arr2[6]);[/CODE] system.out.pr[CODE]intln(""\n"");[/CODE] [CODE]int arr3[] = {[/CODE]7, 5, 4, 1, 6, 9}; cocktailsort(arr3); system.out.pr[CODE]int(""7, 5, 4, 1, 6, 9 -> "");[/CODE] [CODE]for (int i = 0;[/CODE] i < arr3.length - 1; i++) { system.out.pr[CODE]int(arr3[i] + "", "");[/CODE] } system.out.pr[CODE]int(arr3[5]);[/CODE] system.out.pr[CODE]intln(""\n"");[/CODE] system.out.pr[CODE]intln(""---------------------- soru - 3 ----------------------"" + ""\n"");[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] sayac s3 = [CODE]new sayac(""010010010100100001000000010000"");[/CODE] system.out.println(s1.tostring() + "": "" + s1.say()); // 2 system.out.println(s2.tostring() + "": "" + s2.say()); // 4 system.out.println(s3.tostring() + "": "" + s3.say()); // 7 system.out.pr[CODE]intln();[/CODE] } //------------------------------------------------------------------------------------------- [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] system.out.pr[CODE]int(i + "" -> "");[/CODE] [CODE]return 0;[/CODE] } [CODE]else{[/CODE] [CODE]if(i % 2 == 0){[/CODE] system.out.pr[CODE]int(i + "", "");[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]int(i + "", "");[/CODE] [CODE]return 1 + collatz((i * 3) + 1);[/CODE] } } } //------------------------------------------------------------------------------------------- [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktailsortrecursive(arr, 0, arr.length - 1, true); } [CODE]public static void cocktailsortrecursive(int[] arr, int left, int right, boolean forward) {[/CODE] [CODE]if (left >= right) {[/CODE] [CODE]return;[/CODE] } boolean swapped = false; [CODE]if (forward) {[/CODE] [CODE]for (int i = left;[/CODE] i < right; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] swap(arr, i, i + 1); swapped = true; } } [CODE]if (!swapped) {[/CODE] [CODE]return;[/CODE] } cocktailsortrecursive(arr, left, right - 1, false); } [CODE]else {[/CODE] [CODE]for (int i = right;[/CODE] i > left; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] swap(arr, i, i - 1); swapped = true; } } [CODE]if (!swapped) {[/CODE] [CODE]return;[/CODE] } cocktailsortrecursive(arr, left + 1, right, true); } } private [CODE]static void swap(int[] arr, int i, int j) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[j]; arr[j] = temp; } //------------------------------------------------------------------------------------------- [CODE]public static class sayac {[/CODE] [CODE]string input;[/CODE] [CODE]public sayac(string input){[/CODE] this.input = input; } [CODE]public int ozyinelisay(string n){[/CODE] if(n.length() == 0){ [CODE]return 0;[/CODE] } [CODE]else{[/CODE] return (n.charat(0) == '1' ? 1 : 0) + ozyinelisay(n.sub[CODE]string(1));[/CODE] } } [CODE]public int say(){[/CODE] [CODE]int output = ozyinelisay(input);[/CODE] [CODE]return output;[/CODE] } @override [CODE]public string tostring(){[/CODE] return """" + this.input; } } } //------------------------------------------------------------------------------------------- müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki metalsarki){[/CODE] metalsarki.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]public void oynat() {[/CODE] system.out.println(""[klasik] "" + this.sanatci + "" - "" + this.isim + "" (haf[CODE]if ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri(){[/CODE] system.out.println(this.sanatci + "" - "" + this.isim + "" [ozellik: "" + metalozellik + ""]""); } @override [CODE]public void oynat() {[/CODE] system.out.println(""[metal] "" + this.sanatci + "" - "" + this.isim + "" ("" + this.metalozellik + "")""); } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]public void oynat() {[/CODE] system.out.println(""[rock] "" + this.sanatci + "" - "" + this.isim + "" (huzurlu ve nostaljik)""); } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean[] calindi = new boolean[sarkilistesi.size()]; [CODE]for (int i = 0;[/CODE] i < calindi.length; i++) { calindi[i] = false; } [CODE]int count = 0;[/CODE] [CODE]int index;[/CODE] while(count < sarkilistesi.size()){ index = (int)(math.random() * sarkilistesi.size()); [CODE]if(calindi[index] == false){[/CODE] calindi[index] = true; sarkilistesi.get(index).oynat(); count++; } } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(i).oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean sesyuksek = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if(!sesyuksek && sarkilistesi.get(i).getclass().getname().equals(""rocksarki"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sarkilistesi.get(i).oynat(); sesyuksek = true; } else if(sesyuksek && !(sarkilistesi.get(i).getclass().getname().equals(""rocksarki""))){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sarkilistesi.get(i).oynat(); sesyuksek = false; } [CODE]else{[/CODE] sarkilistesi.get(i).oynat(); } } } } import java.util.list; [CODE]public interface calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi);[/CODE] } bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true // i̇brahim eren yılmaz - 231101031 import java.util.arraylist; [CODE]public class q2 {[/CODE] [CODE]public static class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean isisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] this.batterylevel = 100; } [CODE]public void printrobot(){[/CODE] system.out.println( ""robot name: "" + this.name + "" robot type: "" + this.type + "" batterylevel: "" + this.batterylevel + ""%"" + "" isoperational: "" + this.isoperational ); } } [CODE]public static class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot){[/CODE] this.robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for (int i = 0;[/CODE] i < this.robots.size(); i++) { robots.get(i).charge(); } } [CODE]public void work(){[/CODE] // her robotun şarjı %15 azalır. [CODE]for (int i = 0;[/CODE] i < this.robots.size(); i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel() - 15); } } [CODE]public void printfactory(){[/CODE] system.out.println(""factory name: "" + this.name + ""location: "" + this.location); system.out.pr[CODE]intln(""robots operating here: "");[/CODE] [CODE]for (int i = 0;[/CODE] i < this.robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } } [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } // i̇brahim eren yılmaz - 231101031 import java.util.arraylist; [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(subsets(""a1b2""));[/CODE] } [CODE]public static arraylist<string> subsets(string input) {[/CODE] arraylist<[CODE]string> result = new arraylist<>();[/CODE] recursive(input, 0, """", result); [CODE]return result;[/CODE] } private [CODE]static void recursive(string input, int index, string current, arraylist<string> result) {[/CODE] if (index == input.length()) { result.add(current); [CODE]return;[/CODE] } char ch = input.charat(index); [CODE]if (ch >= 'a' && ch <= 'z') {[/CODE] recursive(input, index + 1, current + ("""" + ch).tolowercase(), result); recursive(input, index + 1, current + ch, result); } [CODE]else if (ch >= 'a' && ch <= 'z') {[/CODE] recursive(input, index + 1, current + ("""" + ch).touppercase(), result); recursive(input, index + 1, current + ch, result); } [CODE]else {[/CODE] recursive(input, index + 1, current + ch, result); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery{[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); // ??? // burada robotfactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.displaytotalmanufacturedrobots(); system.out.pr[CODE]intln(""\n"");[/CODE] } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string name, int batterylife, boolean isarmed) {[/CODE] super(name, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] this.isarmed = !this.isarmed; } [CODE]public boolean isisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string name, int batterylife, int cleaningpower) {[/CODE] super(name, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar){[/CODE] this.cleaningpower += miktar; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; private [CODE]static int totalmanufacturedrobots = 0;[/CODE] [CODE]public robotfactory(){[/CODE] this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalmanufacturedrobots++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalmanufacturedrobots++; } [CODE]public void performalltasks(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if(robots.get(i) instanceof cleaningrobot cleaningrobot){ system.out.println(""cleaningrobot - model: "" + cleaningrobot.getmodelname() + "", battery: "" + cleaningrobot.getbatterylife() + "", cleaning power: "" + cleaningrobot.getcleaningpower() ); } else if(robots.get(i) instanceof securityrobot securityrobot){ system.out.println(""securityrobot - model: "" + securityrobot.getmodelname() + "", battery: "" + securityrobot.getbatterylife() + "", armed: "" + securityrobot.isisarmed() ); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if(robots.get(i) instanceof cleaningrobot cleaningrobot){ cleaningrobot.boostcleaningpower(miktar); system.out.println(""cleaningrobot - "" + cleaningrobot.getmodelname() + "" now has cleaning power: "" + cleaningrobot.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]string armed = ""armed"";[/CODE] [CODE]string unarmed = ""unarmed"";[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if(robots.get(i) instanceof securityrobot securityrobot){ securityrobot.togglearmedmode(); system.out.println(""securityrobot - "" + securityrobot.getmodelname() + "" is now "" + (securityrobot.isisarmed() ? armed : unarmed)); } } } [CODE]public static void displaytotalmanufacturedrobots() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalmanufacturedrobots + "" robot uretildi"");[/CODE] } } 5"
4856424,0,"4856424 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class fatmasemra1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] sayilar;[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public static void cocktailsort(int[] arr) {[/CODE] [CODE]for(int i=0;[/CODE] i< arr.length;i++) { [CODE]if(arr[i]>arr[i+1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i+1]; temp = arr[i+1]; } } } } [CODE]public class fatmasemraozmen {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]if(i % 2 == 0) {[/CODE] i = i/2; [CODE]return 1+ collatz(i);[/CODE] }[CODE]else {[/CODE] i = 3*i+1; [CODE]return 1 +collatz(i);[/CODE] } } } [CODE]public class sayacmain {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]public class sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] [CODE]return helper(str,0);[/CODE] } private [CODE]int helper(string str,int i) {[/CODE] if(i >= str.length()) { [CODE]return 0;[/CODE] } if(str.charat(i) == '1') { [CODE]return 1 + helper(str,i+1);[/CODE] } [CODE]else {[/CODE] [CODE]return helper(str,i+1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.collections; import java.util.list; import java.util.arrays; abstract [CODE]class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim,string sanatci,string metalozellik){[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] if(metalozellik.equals(""aykiri ve atmosferik"")) { system.out.println(""[metal] "" + this.sanatci +""-""+ this.isim +""aykiri ve atmosferik""); } if(metalozellik.equals(""enstrumantal"")) { system.out.println(""[metal] "" + this.sanatci +""-""+ this.isim +""enstrumantal""); } } [CODE]void gostermetalozellikleri(){[/CODE] system.out.println(""[metal] "" + this.sanatci +""-""+ this.isim + "" [ozellik: this.metalozellik]""); } } [CODE]class rocksarki extends sarki{[/CODE] rocksarki([CODE]string isim,string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[rock] "" + this.sanatci +""-""+ this.isim +""(huzurlu ve nostaljik)""); } } [CODE]class klasiksarki extends sarki{[/CODE] [CODE]void oynat() {[/CODE] system.out.println(""[klasik] "" + this.sanatci +""-""+ this.isim +""(haf[CODE]if ve sakin)"");[/CODE] } klasiksarki([CODE]string isim,string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } } [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(sarki sarki: sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for(sarki sarki: sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean yuksekses = false; [CODE]for(sarki sarki: sarkilistesi) {[/CODE] [CODE]if(sarki instanceof rocksarki && yuksekses == false) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] yuksekses = true; }[CODE]else if(!(sarki instanceof rocksarki && yuksekses == true)) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] yuksekses = false; } sarki.oynat(); } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki>sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki("" years of silence"", ""thurisaz "", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki("" voice of the soul"",""death "","" enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki("" small mountain"",""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki("" ankara"",""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"","" ludovico einaudi "");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } ""recursion"" kavramı nedir, kısaca açıklayınız. fonksiyonu tekrar çağırma işlemidir recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. parametreler, cagirilan fonksiyon ve parametreyi güncelleme jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. bilmiyorum [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iteratif olarak daha verimlidir hem zaman hem bilgisayar kullanimi acisindan bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? stringin 0. endeksi base case olur stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. bilmiyorum tail recursion nedir, kısaca açıklayınız. problemi bölerek elde edilen çözümleri birleştirmek abstraction kavramını açıklayınız. gerekli bilgileri alıp kalanıyla ilgilenmeme dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? ikiside olmaz protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? inheritance dan dolayı parent class daki degiskenleri almak için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? bilmiyorum metot overriding ve overloading kavramlarını açıklayınız. override: parent [CODE]classtaki bir metodun uzantisindaki baska bir sinifta yine olmasi ama farkli bir ifadeyle mesela kedi köpek ve balık üçününde parent classi hayvanlardir ama kuş koşamaz uçabilir overloading ise bir metodun ismi ayni ama parametrelerinin farkli olarak kullanilmasidir class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? bilmiyorum java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? cagrilan methodlarin turune gore degisir java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? derleme zamanlari bellidir overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading icin statik overriding icin dinamik dinamik bağlamada jvm'nin görevi nedir? bilmiyorum java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? bilmiyorum java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? bilmiyorum class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dinamik [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book statik java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class ın concrete classlarda oldugu gibi objesi tanımlanamaz , constructorları olabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? alt sınıflarda implement ederse edilebilir abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. nesneleri olamaz içlerinde hem abstract hem de concrete metodlar bulunabilir abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? bilmiyorum marker [CODE]interface ve functional interface kavramları nedir, nasıl kullanılır? bilmiyorum bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? ikisi de evet abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract [CODE]class ın direkt olarak objesini tanımlayamayız circle c = new shape();[/CODE] c.draw(); c.display(); drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? bilmiyorum java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. kontrol edilen ve kontrol edilmeyen java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? bilmiyorum finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? bilmiyorum java'da kendi exceptionunuzu nasıl tanımlarsınız? exceptionu extend ederek java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? bu duruma rethrowing denir hata kaynağını saklamak amaç olabilir static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? bilmiyorum [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? bilmiyorum bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class soru1main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] soru1[CODE]class obj = new soru1class(str);[/CODE] system.out.println(obj.yenidizi()); } } [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel, boolean isoperational){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setname() {[/CODE] this.name = name; } [CODE]public void settype() {[/CODE] this.type = type; } [CODE]public void setbatterylevel() {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational() {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name:""+ name + "" robot"" + "" type:"" + type + ""batterylevel:"" + batterylevel + ""%"" + ""isoperational:"" + isoperational) ;[/CODE] } } [CODE]public class soru2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"",55,true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"",""astromech"",80,true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name,string location) {[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size();i++) { } } [CODE]public void addrobot(robot robot) {[/CODE] } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++) { } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""fcatory name:"" + name + "" location"" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++) { system.out.println(""robot name:"" + r1.getname() + ""type:"" + ) } } [CODE]public void work() {[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size();i++) { } } } [CODE]public class soru1class {[/CODE] [CODE]string str;[/CODE] soru1[CODE]class(string str){[/CODE] this.str = str; } [CODE]public string yenidizi() {[/CODE] [CODE]return helper(str,0);[/CODE] } private [CODE]string helper(string str,int i) {[/CODE] if(str.charat(i) == '1') { [CODE]return helper(str,i+1);[/CODE] } if(str.charat(i) == '2') { [CODE]return helper(str,i+1);[/CODE] } if(str.charat(i) == 'a') { str.tolowercase(); [CODE]return helper(str,i+1);[/CODE] } if(str.charat(i) == 'a') { str.touppercase(); [CODE]return helper(str,i+1);[/CODE] } if(str.charat(i) == 'b') { str.tolowercase(); [CODE]return helper(str,i+1);[/CODE] } if(str.charat(i) == 'b') { str.touppercase(); [CODE]return helper(str,i+1);[/CODE] } [CODE]return str;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public class quiz2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] //factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] //factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] } } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname,int bbatterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife>=10) {[/CODE] system.out.println(""[""+this.modelname+""]""+ "" scanning for threats...""+ "" armed:""+this.isarmed); this.batteryl[CODE]ife -= 10;[/CODE] }[CODE]else {[/CODE] system.out.println(""[""+this.modelname+""]""+ "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] [CODE]if(isarmed == true) {[/CODE] isarmed = false; }[CODE]else {[/CODE] isarmed = true; } } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname,int batterylife,int cleaningpower){[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife>=10) {[/CODE] system.out.println(""[""+this.modelname+""]""+ "" cleaning in progress...""+ "" cleaningpower:""+this.cleaningpower); this.batteryl[CODE]ife -= 10;[/CODE] }[CODE]else {[/CODE] system.out.println(""[""+this.modelname+""]""+ "" not enough battery to clean...""); } //[CODE]public void boostcleaningpower() {[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot robot = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] [CODE]string modelname1;[/CODE] [CODE]int batterylife1;[/CODE] [CODE]int cleaningpower1;[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot robot = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] [CODE]string modelname1;[/CODE] [CODE]int batterylife1;[/CODE] [CODE]int cleaningpower1;[/CODE] } [CODE]public void performalltasks() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof cleaningrobot){[/CODE] system.out.println(""cleaningrobot"" + "" -"" + ""model:"" + robot.modelname + "", "" + ""battery:"" + robot.batteryl[CODE]ife +"", "" + ""cleaning power:"" );[/CODE] }[CODE]else {[/CODE] system.out.println(""securityrobot"" + "" -"" + ""model:"" + robot.modelname + "", "" + ""battery:"" + robot.batteryl[CODE]ife +"", "" + ""armed:"" );[/CODE] } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] } [CODE]public void togglesecurityrobotsmodel() {[/CODE] } }     mac os x         2   q                                            attr                                      com.apple.provenance   els     mac os x         2   q                                            attr                                      com.apple.provenance   els     mac os x         2   q                                            attr                                      com.apple.provenance   els     mac os x         2   q                                            attr                                      com.apple.provenance   els     mac os x         2   q                                            attr                                      com.apple.provenance   els     mac os x         2   q                                            attr                                      com.apple.provenance   els 0"
9164612,3,"9164612 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. //tip to <b>run</b> code, press <shortcut actionid=""run""/> or // click the <icon src=""allicons.actions.execute""/> icon in the gutter. [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int i = 5;[/CODE] system.out.pr[CODE]intln(collatz(i));[/CODE] [CODE]int []ar = {[/CODE]5,4,1,2}; cocktailsort(ar); [CODE]for (int j = 0;[/CODE]j<ar.length;j++) { system.out.pr[CODE]int(ar[j] + "" "");[/CODE] } system.out.pr[CODE]intln();[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] system.out.println(s1.say()); } [CODE]public static int collatz(int i) {[/CODE] [CODE]if(i == 1) {[/CODE] [CODE]return 0 ;[/CODE] // 1 oldugu zaman 0 donerek cikmasi icin bir base case yazdim } [CODE]else {[/CODE] [CODE]if(i%2 == 0) {[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] // 2 ile bolumunden kalan 0 ise adim sayisi 1 artarak 2ye bolunmus hali gelecek } [CODE]else {[/CODE] [CODE]return 1+ collatz((i*3) + 1);[/CODE] // 2 ile bolumunden kalan 0 degil ise adim sayisi 1 artarak 3 ile capilip 1 eklenmis hali gelecek } } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktailsort2(arr, 0, arr.length - 1); // yazdigim methodu recursive cagirdim. } [CODE]public static void cocktailsort2(int[] arr, int start, int end) {[/CODE] [CODE]if (start >= end){[/CODE] // start end degerinden buyukse program sona erecek. [CODE]return;[/CODE] } boolean degisme = false; // sonrasında guncellemek ve degisebilir mi diye bakmak icin boolean tuttum. [CODE]for (int i = start;[/CODE] i < end; i++) { // diziyi ileriye dogru bubble sort ile siraladim. [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; degisme = true; } } [CODE]if (!degisme) {[/CODE] [CODE]return;[/CODE] // eger degisme degiskeninde degisiklik olmadiysa dizi sıralidir anlamina gelir. } degisme = false; // bir sonraki siralamaya bakmak icin degiskeni tekrar false yaptim. [CODE]for (int i = end - 1;[/CODE] i > start; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i - 1]; // geriye yonlü bubble sort ile siraladim. arr[i - 1] = temp; degisme = true; } } cocktailsort2(arr, start + 1, end - 1); // methodu start ve end degerlerini guncelleyerek recursive cagirdim. } } import java.util.stack; [CODE]public class sayac {[/CODE] private [CODE]string input;[/CODE] [CODE]public sayac(string input) {[/CODE] this.input = input; } [CODE]public int say() {[/CODE] [CODE]return countones(input,0);[/CODE] // yazdigim yardimci methodu burada cagirdim } [CODE]public int countones(string input, int index) {[/CODE] [CODE]int count = 0;[/CODE] if(index >= input.length()) { [CODE]return 0;[/CODE] // index out of bounds almamak icin base case yazdim. } [CODE]else {[/CODE] if(input.charat(index) == '1') { count = 1; // 1 gordugu zaman count degiskeni 1 olacak } [CODE]else {[/CODE] count = 0; // 1 yoksa 0 olarak kalacak. } } [CODE]int sonuc = countones(input,index+1);[/CODE] // her bir karakterde recursive cagirdim ve bunu yeni bir degiskene atadim. count += sonuc; // count degerini surekli guncelledim. [CODE]return count;[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else {[/CODE] system.out.println(""calma stratejisi secilmedi.""); } } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrümantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""\nsirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nkarisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nrockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nmetal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik]: "" + metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } import java.util.list; [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean sesyukseltildi = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] [CODE]if (!sesyukseltildi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sesyukseltildi = true; } } sarki.oynat(); } [CODE]if (sesyukseltildi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? java'da abstract class genellikle diğer sınıflar tarafından miras alınması için kullanılan ve kendisinden nesne oluşturulamayan bir sınıftır.concrete class tüm metotları tanımlanmış ve doğrudan nesne oluşturulabilen normal bir sınıftır. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet, abstract bir metot, abstract bir class içinde implement edilebilir, ancak bu zorunlu değildir. abstract class içinde bir metodu implement etmek isterseniz, metot gövdesini yazabilirsiniz. eğer metodu gövdesiz bırakırsanız, bu metodun alt sınıflar tarafından override edilmesi gerekir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. ortak davranışları tanımlayarak kod tekrarını azaltır. kalıtım ile polymorphism sağlar.nesne üretimini kısıtlayarak güvenli bir yapı sunar. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class hem abstract hem de concrete metotlar içerebilir, interface ise sadece abstract metotlar içerebilir. interface multiple inheritance destekler, abstract class sadece single inheritance destekler.abstract class ve interface bir değişkenin veri tipi olarak kullanılabilir. ancak doğrudan nesne oluşturulamaz, bir alt sınıf veya implement eden bir sınıfın nesnesi bu tip değişkenlere atanmalıdır. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface, herhangi bir metot içermeyen ancak bir sınıfa özel bir anlam kazandıran bir interface türüdür.functional interface, yalnızca bir tane abstract metot içeren bir interface’dir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden fazla interface’i implement edebilir. java'da çoklu kalıtım doğrudan desteklenmez, ancak interface’ler aracılığıyla çoklu implementasyon mümkündür. bir interface başka bir interface’i implement edemez, çünkü implementasyon yalnızca class'lara özgüdür. ancak, bir interface başka bir interface’i extends anahtar kelimesi ile genişletebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract class’lardan doğrudan nesne oluşturulamaz. shape sınıfı abstract olduğu için abstract sınıfın yerine onun alt sınıfı olan circle kullanılarak düzeltilebilir. output: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? edilemez bir class'ın birden fazla interface’i implement etmesi ve aynı isimli default metotları içermesi durumunda hangi metodu çağıracağını bilemez. a.super.show() veya b.super.show() şeklinde hangi interface’in metodu çağrılacaksa onu açıkça belirtmeliyiz. outuput: a.super.show() yazılırsa a, b.super.show() yazılırsa b java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. . java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? . finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? . java'da kendi exceptionunuzu nasıl tanımlarsınız? . java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? . [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? . [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? . bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string type;[/CODE] private [CODE]string name;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = batterylevel > 0; } [CODE]public void charge() {[/CODE] this.batterylevel = 100; this.isoperational = true; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" type: "" + type + "" battery level: "" + batterylevel + "" is operational: "" + isoperational);[/CODE] } [CODE]public void decreasebattery() {[/CODE] this.batterylevel -= 15; [CODE]if (batterylevel <= 0) {[/CODE] this.batterylevel = 0; this.isoperational = false; } } } //tip to <b>run</b> code, press <shortcut actionid=""run""/> or // click the <icon src=""allicons.actions.execute""/> icon in the gutter. [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] [CODE]string s = ""a1b2"";[/CODE] char []ar = s.tochararray(); [CODE]int index = 0;[/CODE] combinations(ar,index); } [CODE]public static void combinations(char[] ar, int index) {[/CODE] if (index == ar.length) { // arrayin sonuna geldiğinde arrayi basması için base case oluşturdum. [CODE]for (char c : ar) {[/CODE] system.out.pr[CODE]int(c);[/CODE] } system.out.pr[CODE]intln();[/CODE] [CODE]return;[/CODE] } if (character.isletter(ar[index])) { // önce küçük harf olarak ayarla ve fonksiyonu bir sonraki karakter için çağır ar[index] = character.tolowercase(ar[index]); combinations(ar, index + 1); // sonra büyük harf olarak ayarla ve fonksiyonu tekrar çağır ar[index] = character.touppercase(ar[index]); combinations(ar, index + 1); } [CODE]else {[/CODE] // eğer karakter harf değilse direkt bir sonraki karaktere geç combinations(ar, index + 1); } } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot>robots; [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory() {[/CODE] this.name =""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void work() {[/CODE] [CODE]for(robot robot : robots) {[/CODE] robot.decreasebattery(); } } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(robot robot: robots) {[/CODE] robot.charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(robot robot : robots) {[/CODE] robot.pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 // withbattery arayüzü [CODE]interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } abstract [CODE]class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } [CODE]public abstract string getstatus();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln();[/CODE] robotfactory.displaytotalrobotproduction(); } } [CODE]class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(modelname + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now "" + (isarmed ? ""armed"" : ""unarmed""));[/CODE] } @override [CODE]public string getstatus() {[/CODE] [CODE]return ""securityrobot - model: "" + modelname + "", battery: "" + batterylife + "", armed: "" + isarmed;[/CODE] } } [CODE]class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(modelname + "" not enough battery to clean...""); recharge(); // batarya çalışamayacak durumda olduğu için recharge ettim ve final productta 100(bataryanın default değeri) olarak çıktı verdi. } } [CODE]public void boostcleaningpower(int amount) {[/CODE] cleaningpower += amount; system.out.pr[CODE]intln(""cleaningrobot - "" + modelname + "" now has cleaning power: "" + cleaningpower);[/CODE] } @override [CODE]public string getstatus() {[/CODE] [CODE]return ""cleaningrobot - model: "" + modelname + "", battery: "" + batterylife + "", cleaning power: "" + cleaningpower;[/CODE] } } import java.util.*; [CODE]class robotfactory {[/CODE] private list<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int totalrobotproduction = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobotproduction++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobotproduction++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] system.out.println(robot.getstatus()); } } [CODE]public void upgradecleaningrobots(int amount) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(amount); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); } } } [CODE]public static void displaytotalrobotproduction() {[/CODE] system.out.pr[CODE]intln(""tüm fabrikalar tarafından toplam "" + totalrobotproduction + "" robot uretildi"");[/CODE] } } 3"
2112376,6,"2112376 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab2;[/CODE] import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } [CODE]public void muzikcal (list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } [CODE]package lab2;[/CODE] import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } // bu kismi cikti ornegini saglayacak sekilde doldurun } } } [CODE]package lab2;[/CODE] [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim , sanatci); } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]package lab2;[/CODE] [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim , sanatci); this.metalozellik = metalozellik; } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + ""[ozellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]package lab2;[/CODE] [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim , sanatci); } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]package lab2;[/CODE] import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]package lab2;[/CODE] abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki (string isim , string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat ();[/CODE] } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof rocksarki) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sarki.oynat(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sarki.oynat(); } } } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. - java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? exception verebileceğini belirtir, kısıt olarak da ya kendi içerisinde ya da overrideda [CODE]try catch ile handle edilmesi gerekir finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? try catch durumuna bakmaksızın her durumda çalışmasını sağlar java'da kendi exceptionunuzu nasıl tanımlarsınız? - java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? başka bir yerde handle edilip edilmediğini görmek için static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? - [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? - robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4     mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    v      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    ]      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    f      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    c      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg          1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    1=      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg          1nq5 kfoz )`>                                         mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg          1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    ap      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg    l_      1nq5                                                           mac os x         2                                              attr            x                       com.apple.lastuseddate#ps          h  com.apple.macl   xg          1nq5                                                       [CODE]public class latte extends basecoffee {[/CODE] private [CODE]int baseprice = 50;[/CODE] [CODE]public double calculateprice() {[/CODE] [CODE]int total = baseprice;[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] total += addon.getcost(); } [CODE]return total;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } import java.util.arraylist; [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated = false; protected arraylist<coffeeaddon> addons = [CODE]new arraylist<>();[/CODE] private [CODE]int baseprice = 40;[/CODE] [CODE]public void heatcup() {[/CODE] isheated = true; } [CODE]public double calculateprice() {[/CODE] [CODE]int total = baseprice;[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] total += addon.getcost(); } [CODE]return total;[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""vanillasyrup"";[/CODE] } } [CODE]interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; abstract [CODE]class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<>();[/CODE] [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee {[/CODE] private [CODE]int baseprice = 45;[/CODE] [CODE]public double calculateprice() {[/CODE] [CODE]int total = baseprice;[/CODE] [CODE]for (coffeeaddon addon : addons) {[/CODE] total += addon.getcost(); } [CODE]return total;[/CODE] } } [CODE]public class coffeemachine {[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""doubleshot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 6"
8862077,5,"8862077 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji=strateji; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki instanceof metalsarki) ((metalsarki) sarki).gostermetalozellikleri(); } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(); this.sanatci=sanatci; this.isim=isim; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] ""+sanatci+"" - ""+isim+ "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(); this.metalozellik = metalozellik; this.sanatci=sanatci; this.isim=isim; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] ""+sanatci+"" - ""+isim+ "" (""+metalozellik+"")"");[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(); this.sanatci=sanatci; this.isim=isim; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] ""+sanatci+"" - ""+isim+ "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] collections.shuffle(sarkilistesi); [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++) { sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++) { sarkilistesi.get(i).oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] boolean sesarttirildimi = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarki sarki = sarkilistesi.get(i); [CODE]if (sarki instanceof rocksarki && !sesarttirildimi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yüksek"");[/CODE] sesarttirildimi = true; } sarki.oynat(); [CODE]if (!(sarki instanceof rocksarki) && sesarttirildimi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesarttirildimi = false; } if (i == sarkilistesi.size() - 1 && sesarttirildimi) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesarttirildimi = false; }}}} import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list <sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. özyineleme, tekrar tekrar kendini çağırma recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case, body, recursive call jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stack ve heaple [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak, çünkü tek iterasyon öbürü çoklu iterasyon bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? stringin uzunluğunun 0 olması stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. recursive calların stackin alabileceğinden çok çağırılması, taşması. sebebi base caseye hiç girmemesi tail recursion nedir, kısaca açıklayınız. methodun kendisinin hiçbir sayıyla çarpılmadan returnlenmesi değişkenleri değişerek bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational=true; [CODE]public robot() {[/CODE] super(); name = ""wall-e""; type= ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] super(); this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public string printrobot() {[/CODE] [CODE]return ""robot [name="" + name + "", type="" + type + "", batterylevel="" + batterylevel + ""%, isoperational="" + isoperational + ""]"";[/CODE] } [CODE]public void charge() {[/CODE] batterylevel=100; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // todo auto-generated method stub factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.iterator; [CODE]public class soru1 {[/CODE] [CODE]public static void main() {[/CODE] [CODE]string string = ""a1b2"";[/CODE] combination([CODE]string,0);[/CODE] } [CODE]public static void combination(string string, int helper) {[/CODE] if (helper!=string.length()) { [CODE]for(int i=0;[/CODE]i<helper;i++) { if(string.charat(i).islower) string.charat(i).tolowercase(); else if(string.charat(i).isupper) string.charat(i).touppercase(); } combination([CODE]string,helper+1);[/CODE] } system.out.pr[CODE]intln(string);[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location) {[/CODE] super(); this.name = name; this.location = location; this.robots=[CODE]new arraylist<robot>();[/CODE] } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; this.robots=[CODE]new arraylist<robot>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory() {[/CODE]//size sordum signature değiştirip sout olarak yazmama izin verdiniz. system.out.pr[CODE]intln(""factory [name="" + name + "", location="" + location + ""]"");[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (int i=0;[/CODE]i<robots.size();i++) { system.out.println(robots.get(i).pr[CODE]introbot());[/CODE] } } [CODE]public void work() {[/CODE] [CODE]for (int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]int ilkbattery;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] ilkbattery=batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = ilkbattery;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] anotherfactory.toplamrobot();// burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife>=10) {[/CODE] system.out.println(""[""+modelname+""] scanning for threats... armed: ""+isarmed); batteryl[CODE]ife=batterylife-10;[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed=!isarmed; if(isarmed) system.out.pr[CODE]intln(""securityrobot - ""+modelname+"" is now armed"");[/CODE] [CODE]else {[/CODE] system.out.pr[CODE]intln(""securityrobot - ""+modelname+"" is now unarmed"");[/CODE] } } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setarmed(boolean isarmed) {[/CODE] this.isarmed = isarmed; } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""[""+modelname+""] cleaning in progress... cleaning power: ""+cleaningpower); batteryl[CODE]ife = batterylife-10;[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] cleaningpower = cleaningpower+miktar; system.out.pr[CODE]intln(""cleaningrobot - ""+modelname+"" now has cleaning power: ""+cleaningpower);[/CODE] } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots=[CODE]new arraylist<abstractrobot>();[/CODE] [CODE]static int robotsayi = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] robotsayi++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] robotsayi++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (int i=0;[/CODE] i<robots.size();i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int i=0;[/CODE] i<robots.size();i++) { if (robots.get(i) instanceof cleaningrobot) { cleaningrobot temp = (cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: ""+robots.get(i).modelname+"" battery: ""+robots.get(i).batterylife+"" cleaning power: ""+temp.getcleaningpower()); } [CODE]else {[/CODE] securityrobot temp= (securityrobot) robots.get(i); system.out.println(""securityrobot - model: ""+robots.get(i).modelname+"" battery: ""+robots.get(i).batterylife+"" armed: ""+temp.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int i=0;[/CODE] i<robots.size();i++) { if (robots.get(i) instanceof cleaningrobot) { ((cleaningrobot) robots.get(i)).boostcleaningpower(miktar); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int i=0;[/CODE] i<robots.size();i++) { if (robots.get(i) instanceof securityrobot) { ((securityrobot) robots.get(i)).togglearmedmode(); } } } [CODE]public static void toplamrobot() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam ""+robotsayi+"" robot uretildi"");[/CODE] } } 5"
8700334,6,"8700334 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; abstract [CODE]class sarki {[/CODE] [CODE]public string isim;[/CODE] [CODE]public string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> karisikliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(karisikliste); [CODE]for (sarki sarki : karisikliste) {[/CODE] sarki.oynat(); } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean sesyukseldi = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki && !sesyukseldi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sesyukseldi = true; } [CODE]if (!(sarki instanceof rocksarki) && sesyukseldi) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesyukseldi = false; } sarki.oynat(); } } } [CODE]class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""calma stratejisi secilmedi!"");[/CODE] } } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln("" "");[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln("" "");[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln("" "");[/CODE] system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void settype(string type) {[/CODE] this.type = type ; } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public robot(string name , string type , int batterylevel , boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public robot(string name , string type , int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; } [CODE]public robot () {[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]int(""robot name: "");[/CODE] system.out.pr[CODE]int(name);[/CODE] system.out.pr[CODE]int(""robot type: "");[/CODE] system.out.pr[CODE]int(type);[/CODE] system.out.pr[CODE]int("" batterylevel: "");[/CODE] system.out.pr[CODE]int(batterylevel);[/CODE] system.out.pr[CODE]int("" is operational: "");[/CODE] system.out.pr[CODE]intln(isoperational);[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main (string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE]} [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE]} [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE]} [CODE]public void setname(string name){[/CODE] this.name = name;} [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE]} [CODE]public void setlocation(string location){[/CODE] this.location = location;} [CODE]public arraylist<robot> getrobots(){[/CODE] [CODE]return robots;[/CODE]} [CODE]public void setrobots(arraylist<robot> robots){[/CODE] this.robots = robots;} [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot);} [CODE]public void chargeallrobots(){[/CODE] [CODE]for (robot robot : robots){[/CODE] robot.setbatterylevel(100);}} [CODE]public void work(){[/CODE] [CODE]for (robot robot : robots){[/CODE] robot.setbatterylevel(robot.getbatterylevel() - 15);}} [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name);[/CODE] system.out.pr[CODE]intln(""location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot robot : robots){[/CODE] robot.pr[CODE]introbot();[/CODE]}}} robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] system.out.println(modelname + "" is fully recharged.""); } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.kacroboturetildi(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] protected boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(modelname + "" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]if (batterylife < 10) {[/CODE] system.out.println(modelname + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; system.out.pr[CODE]intln(modelname + "" is now "" + (isarmed ? ""armed"" : ""unarmed""));[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] protected [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(modelname + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]if (batterylife < 10) {[/CODE] system.out.println(modelname + "" not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower = cleaningpower + 10; system.out.pr[CODE]intln(modelname + "" now has cleaning power: "" + cleaningpower);[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private [CODE]static int totalrobotsproduced = 0;[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobotsproduced++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobotsproduced++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] cleaningrobot crobot = (cleaningrobot) robot; system.out.println(""cleaningrobot - model: "" + crobot.getmodelname() + "", battery: "" + crobot.getbatterylife() + "", cleaning power: "" + crobot.cleaningpower); } [CODE]else if (robot instanceof securityrobot) {[/CODE] securityrobot srobot = (securityrobot) robot; system.out.println(""securityrobot - model: "" + srobot.getmodelname() + "", battery: "" + srobot.getbatterylife() + "", armed: "" + srobot.isarmed); } } } [CODE]public void upgradecleaningrobots(int amount) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); } } } [CODE]public static void kacroboturetildi() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalrobotsproduced + "" robot uretildi"");[/CODE] } } 6"
1762204,0,"1762204 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class question2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int arr[] = {[/CODE]5, 4, 1, 2}; cocktailsort(arr); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } [CODE]public static void cocktailsort(int[] arr) {[/CODE] sort(false, arr); } [CODE]public static void sort(boolean reverse, int[] arr) {[/CODE] boolean sorted = true; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] sorted = false; break; } } [CODE]if (sorted) return;[/CODE] [CODE]if (reverse) {[/CODE] for (int i = arr.length - 1; i > 0; i--) { [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i - 1]; arr[i - 1] = temp; } } } [CODE]else {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; } } } sort(!reverse, arr); } } [CODE]public class question1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int count = collatz(5);[/CODE] system.out.pr[CODE]intln(count);[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]return calculate(0, i);[/CODE] } [CODE]public static int calculate(int count, int number) {[/CODE] [CODE]int newnumber = 0;[/CODE] [CODE]if (number == 1) return count;[/CODE] [CODE]if (number % 2 == 0) newnumber = number / 2;[/CODE] [CODE]else if (number % 2 != 0) newnumber = number * 3 + 1;[/CODE] [CODE]return calculate(count + 1, newnumber);[/CODE] } } [CODE]public class question3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac {[/CODE] [CODE]public string text = """";[/CODE] [CODE]public sayac(string text) {[/CODE] this.text = text; } [CODE]public int say() {[/CODE] [CODE]return count(0, text);[/CODE] } [CODE]public int count(int number, string text) {[/CODE] if (text.length() == 0) { [CODE]return number;[/CODE] } if (text.charat(0) == '1') { number++; } return count(number, text.sub[CODE]string(1));[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki metalsarki = (metalsarki)sarki; metalsarki.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.arraylist; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilistesicopy = [CODE]new arraylist<>(sarkilistesi);[/CODE] while (!sarkilistesicopy.isempty()) { int randomnumber = (int) (math.random() * sarkilistesicopy.size()); sarkilistesicopy.get(randomnumber).oynat(); sarkilistesicopy.remove(randomnumber); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof rocksarki) { if ((i == 0) || (i > 0 && !(sarkilistesi.get(i-1) instanceof rocksarki))) system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } sarkilistesi.get(i).oynat(); if (sarkilistesi.get(i) instanceof rocksarki) { if ((i == sarkilistesi.size()-1) || (i < sarkilistesi.size()-1 && !(sarkilistesi.get(i+1) instanceof rocksarki))) system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun kendi kendini çağırması demektir. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case, decomposition, composition jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. her call edildiğinde stack üzerine yeni değişkenleri yerleştirir. call bittiğinde de değişkenleri siler. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif olarak çünkü sürekli olarak bir metot çağırma ve stack'e değişken oluşturma işlemleri yapmamıza gerek kalmaz. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? base case, string uzunluğunun 1 olduğu durumdur. string uzunluğu bir olana kadar string uzunluğunu bir bir azaltarak recursive metodu çağırırız. recursive metot base case'e ulaştıktan sonra metotlardan bir bir çıkarken dışarıda tutulan string uzunluğunu tutan static değişken 1 artırılır. en son metot main'e return ettiği zaman uzunluğunu bulmuş oluruz. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. base case'i olmayan bir recursion yazarsak infinite loop'a gideceğinden dolayı ve her recursive call'da yeni değişken oluşturacağı için stack dolar. stack, local variable'ların ram'de tutulduğu yerdir. tail recursion nedir, kısaca açıklayınız. bulmak istediğimiz sonucun recursion'da işimiz bittikten sonra geri dönerken hesaplanması yerine ileri giderken ve en sona ulaşınca hesaplanmasıdır. abstraction kavramını açıklayınız. sadece bizimle ilgili olan kısımla ilgilenip, bizimle ilgili olmayan kısımlara ilgilenmeye gerek kalmamasıdır. ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? ""object"" instanceof ""class"" ile kontrol edilebilir. is a ilişkisi olması için objeyi kontrol ettiğimiz class ya kendi class'ı ya da super class'ı olması gerekmektedir. bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected modifier ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a ve b olabilir. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü sub class oluştururken super class'ın da oluşması gerekir. bunun için super() diyerek super class'ın construct'ırını çalıştırmamız ve super class'taki değişkenleri de initialize etmemiz gerekir. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır değildir. metot overriding ve overloading kavramlarını açıklayınız. override ettiğimiz zaman sub class'ta, super class'ın metodunu override ederiz ve signature aynı olması gerekir. overload yaptığımızda ise ismi aynı fakat parametrelerinin farklı olması gerekir. [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? generic circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? static ve dynamic binding vardır ve metodun çağrıldığı yer ile metodun kendisinin eşleştirilmesine denir. hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? static, private ve final olan metotlar static binding yapılır, gerisinde dynamic binding olur. override edilemeyen metotlarda static binding olur. dinamik bağlamada jvm'nin görevi nedir? çağrılan metodun hangi objedeki metot olduğunu belirlemektir. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? dynamic binding runtime hatası olduğu için, compile time sırasında yanlış yazılan kodlardaki hataları göremezdik ve kod çalıştıktan sonra sorunlu yere gelirse görebilirdik sadece hatayı. java'da down casting explicit şekilde yapılır, bunun nedeni nedir; implicit şekilde yaparsak ne olur? bunun nedeni, her üst class objesi her alt class objesi e cast edilememesindendir. sadece emin olduğumuz objeleri cast edebiliriz. alt class objesi olmayan objeyi cast etmeye çalışırsak hata alırız. java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. eğer override edeceksek sadece daha az kısıtı olan modifier ile override edilebilir. ve de return type olarak sadece override edilen metodun return ettiği tipin ya kendisini ya da subclass'ını koyabiliriz. [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov burada dynamic binding vardır. [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() çağrılamaz çünkü parent objesinin special isimli metodu yok. bu satır silinmelidir. dynamic binding vardır. çıktı: child display java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class'ta oluşturulan abstract metotların içeriği olmaz fakat concrete'te olur. abstract class'larda constructor olabilir fakat interface'lerde olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstract metot implemente edilemez, sadece metodun içi olmadan yazılabilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. nasıl yapılacağını şu an bilmediğimiz fakat daha sonra yazılımcının yapmasını zorlamak istediğimiz metotlar için kullanabiliriz. yazılımcının yeni class'lar oluştururken kesinlikle oluşturmasını isteğimiz metotlar için kullanabiliriz. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interface içerisine metotların içi yazılamaz ve bir class birden fazla interface'i implements ile kullanabilirken abstract class'larda concrete metot da yazmak mümkündür ve bir class sadece bir abstract class extend edebilir. ikisi de tıp olarak kullanılamaz. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface içerisinde değişkenler ve metotlar bulunmaz, sadece class'ın ne olduğunu belirtmek için kullanılırken functional interface içerisine metot da konulabilir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet birden fazla interface implement edebilir fakat bir interface başka interface'i implement edemez. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? [CODE]new dog(""buddy"");[/CODE] yazılmalıydı output: animal: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? compile edemez çünkü interface içerisine concrete metot yazılamaz. metotların içi interface'den silinip duck class'ına yazılırsa ve içerisine ""swimming"" yazılırsa output: swimming java'da inner class nedir, avantajları nelerdir? dosyayı daha düzenli yapmamızı sağlar. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? eğer inner class static ise outer class'ın static değişkenlerine erişebilir ve outer class objesi olmadan oluşturulabilir. anonymous [CODE]class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? new sınıf() {[/CODE][CODE]void mymethod(){[/CODE]...} }; diyerek anonymous class oluşturabiliriz. interface, abstract ve normal class'lar üzerinden oluşturulabilir. inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet private değişkenlere erişip değiştirebilir. bu sayede outer class içerisindeki bir constructor'ı inner class içinden çağırabiliriz. statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır tanımlanamaz. anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? hayır olamaz. inner class'larda ise constructor olabilir. hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? inner class static ise outer class olmadan oluşturabiliriz. çünkü her şey static final olarak tanımlanır. [CODE]class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? inner class'ı oluşturup ve value değerine ulaşabilmemiz için once outer class için obje oluşturup onun üzerinden inner class oluşturmalıydık. onu yaptıktan sonra cevap: value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? kod bu şekilde çalışır. output: count: 5 yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. compile time, runtime hataları. compile time hatası syntax error olur. runtime ise divide by zero hatası olur. exception handlingin amacı nedir? hata olduğu zaman programın çökmesi yerine kendi istediğimiz bir şeyi yapmak. örnek olarak gracefully exit yapmamıza da yarar. exception handlingde finally bloğunun amacı nedir? hata olsa da olmasa da en son çalışacak bir kod bloğunu buraya yazarız. en son dosya kapatma işlemi gibi kodları buraya yazarız. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked exception olursa java compile ederken hata verir ve düzeltilmesini ister. unchecked'de ise sadece hatalı kod çalıştığı zaman hata verir. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception class'ını extend eden başka bir class oluşturarak istediğimiz exception'ı oluşturabiliriz. java'da error ve exception arasındaki fark nedir, açıklayınız error daha ciddi hatalar için kullanılırken exception daha az ciddi hatalarda olur. error'lar handle edilemezken exception'lar edilebilir. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? stack'ten çıkıp bir üstteki metodun da hatayı handle etmesi için kullanılabilir. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? üst sınıfın fırlattığı exception'dan daha geniş bir exception firlatamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? kod derlenir. çıktısı: array exception caught [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class question2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin {[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin() {[/CODE] name = ""willy""; species = ""emperor""; age = 1; weight = 5.0; } [CODE]public penguin(string name, string species, int age, double weight) {[/CODE] this.name = name; this.species = species; this.age = age; this.weight = weight; } [CODE]public void hunt() {[/CODE] weight += 1; } [CODE]public void printpenguin() {[/CODE] system.out.pr[CODE]int(""penguin name: "" + name);[/CODE] system.out.pr[CODE]int("" species: "" + species);[/CODE] system.out.pr[CODE]int("" age: "" + age + "" years"");[/CODE] system.out.pr[CODE]int("" weight: "" + weight + "" kg\n"");[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies() {[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage() {[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweight() {[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public void setspecies(string species) {[/CODE] this.species = species; } [CODE]public void setage(int age) {[/CODE] this.age = age; } [CODE]public void setweight(double weight) {[/CODE] this.weight = weight; } } [CODE]class habitat {[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature) {[/CODE] this.location = location; this.temperature = temperature; penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public void addpenguin(penguin penguin) {[/CODE] penguins.add(penguin); } [CODE]public void printhabitat() {[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temperature: "" + temperature + ""°c"");[/CODE] system.out.pr[CODE]intln(""penguins living here:"");[/CODE] [CODE]for (penguin penguin : penguins) {[/CODE] penguin.pr[CODE]intpenguin();[/CODE] } } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature() {[/CODE] [CODE]return temperature;[/CODE] } [CODE]public arraylist<penguin> getpenguins() {[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void settemperature(double temperature) {[/CODE] this.temperature = temperature; } [CODE]public void setpenguins(arraylist<penguin> penguins) {[/CODE] this.penguins = penguins; } } [CODE]public class question1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int n = 3;[/CODE] question1 q1 = [CODE]new question1();[/CODE] q1.parantezbas(n); } [CODE]public void parantezbas(int n) {[/CODE] accumulateparantez("""", n*2, 0); } [CODE]public void accumulateparantez(string accumulated, int n, int openparantezcount) {[/CODE] [CODE]if (n == 0) {[/CODE] system.out.pr[CODE]intln(accumulated);[/CODE] } [CODE]else {[/CODE] [CODE]if (openparantezcount > 0) {[/CODE] accumulateparantez(accumulated + "")"", n - 1, openparantezcount - 1); } [CODE]if (openparantezcount < n) {[/CODE] accumulateparantez(accumulated + ""("", n - 1, openparantezcount + 1); } } } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee {[/CODE] [CODE]public latte() {[/CODE] super(""latte""); } [CODE]public double calculateprice() {[/CODE] double addonssum = 0; [CODE]for (coffeeaddon coffeeaddon : addons) {[/CODE] addonssum += coffeeaddon.getcost(); } [CODE]return addonssum += 50;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] system.out.println(""tum kahve makineleri tarafindan toplam "" + coffeemachine.gettotalnumberofcoffeesfromallmachines() + "" kahve uretildi""); } } [CODE]public class espresso extends basecoffee {[/CODE] private boolean isheated; [CODE]public espresso() {[/CODE] super(""espresso""); } [CODE]public string getname() {[/CODE] if (isheated) return super.getname() + "" (sıcak fincan)""; else return super.getname(); } [CODE]public double calculateprice() {[/CODE] double addonssum = 0; [CODE]for (coffeeaddon coffeeaddon : addons) {[/CODE] addonssum += coffeeaddon.getcost(); } [CODE]return addonssum += 40;[/CODE] } [CODE]public void heatcup() {[/CODE] system.out.pr[CODE]intln(getname() + "" kahve fincanı ısıtıldı"");[/CODE] isheated = true; } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""vanillasyrup"";[/CODE] } [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] private [CODE]string name;[/CODE] protected arraylist<coffeeaddon> addons = [CODE]new arraylist<coffeeaddon>();[/CODE] [CODE]public basecoffee(string name) {[/CODE] this.name = name; } [CODE]public void addaddon(coffeeaddon addon) {[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } } [CODE]public class americano extends basecoffee {[/CODE] [CODE]public americano() {[/CODE] super(""americano""); } [CODE]public double calculateprice() {[/CODE] double addonssum = 0; [CODE]for (coffeeaddon coffeeaddon : addons) {[/CODE] addonssum += coffeeaddon.getcost(); } [CODE]return addonssum += 45;[/CODE] } } import java.util.arraylist; [CODE]public class coffeemachine {[/CODE] private [CODE]static arraylist<coffeemachine> allcoffeemachines = new arraylist<coffeemachine>();[/CODE] private [CODE]int totalnumberofcoffees = 0;[/CODE] [CODE]public coffeemachine() {[/CODE] allcoffeemachines.add(this); } [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) {[/CODE] [CODE]if (coffee instanceof espresso && !(adddon instanceof doubleshot || adddon instanceof chocolate)) {[/CODE] system.out.println(""[uyari] espresso tipi kahveye "" + adddon.getname() + "" eklenemez""); [CODE]return;[/CODE] } [CODE]if (coffee instanceof latte && !(adddon instanceof milk || adddon instanceof vanillasyrup || adddon instanceof chocolate)) {[/CODE] system.out.println(""[uyari] latte tipi kahveye "" + adddon.getname() + "" eklenemez""); [CODE]return;[/CODE] } [CODE]if (coffee instanceof americano && !(adddon instanceof milk || adddon instanceof vanillasyrup)) {[/CODE] system.out.println(""[uyari] americano tipi kahveye "" + adddon.getname() + "" eklenemez""); [CODE]return;[/CODE] } coffee.addaddon(adddon); } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] [CODE]string addonsstring = """";[/CODE] for (coffeeaddon coffeeaddon : coffee.addons) { addonsstring += "" + "" + coffeeaddon.getname(); } totalnumberofcoffees++; system.out.println(""sipariş: "" + coffee.getname() + addons[CODE]string);[/CODE] system.out.println(""toplam fiyat: "" + (int)coffee.calculateprice()); } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if (coffee instanceof espresso) {[/CODE] espresso espresso = (espresso) coffee; espresso.heatcup(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public int totalnumberofcoffees() {[/CODE] [CODE]return totalnumberofcoffees;[/CODE] } [CODE]public static int gettotalnumberofcoffeesfromallmachines() {[/CODE] [CODE]int totalnumberofcoffees = 0;[/CODE] [CODE]for (coffeemachine coffeemachine : allcoffeemachines) {[/CODE] totalnumberofcoffees += coffeemachine.totalnumberofcoffees(); } [CODE]return totalnumberofcoffees;[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } } [CODE]public class doubleshot implements coffeeaddon {[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""doubleshot"";[/CODE] } [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } } 0"
5628146,2,"5628146 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package lab1;[/CODE] [CODE]public class lab1q2 {[/CODE] [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktailsortrecursive(arr, 0, arr.length - 1); } private [CODE]static void cocktailsortrecursive(int[] arr, int start, int end) {[/CODE] [CODE]if (start >= end) {[/CODE] [CODE]return;[/CODE] } boolean flag = false; [CODE]for (int i = start;[/CODE] i < end; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] // bubble sort önden [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; flag = true; } } [CODE]if (!flag) {[/CODE] // eğer değişim olmadıysa işlem yapılmayacak [CODE]return;[/CODE] } end--; [CODE]for (int i = end;[/CODE] i > start; i--) { // bubble sort arkadan [CODE]if (arr[i] < arr[i - 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i - 1]; arr[i - 1] = temp; flag = true; } } start++; cocktailsortrecursive(arr, start, end); } [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]5, 4, 1, 2}; cocktailsort(arr); [CODE]for (int num : arr) {[/CODE] system.out.pr[CODE]int(num + "" "");[/CODE] } } } [CODE]package lab1;[/CODE] [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]package lab1;[/CODE] [CODE]public class lab1q1 {[/CODE] [CODE]public static int collatz(int n) {[/CODE] [CODE]if (n == 1) {[/CODE] [CODE]return 0;[/CODE] } [CODE]else if (n % 2 == 0) {[/CODE] [CODE]return 1 + collatz(n / 2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz(3 * n + 1);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] [CODE]int input = 5;[/CODE] system.out.pr[CODE]intln(collatz(input));[/CODE] } } [CODE]package lab1;[/CODE] [CODE]public class sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public sayac(string str) {[/CODE] this.str = str; } [CODE]public int say() {[/CODE] [CODE]return countones(str, 0);[/CODE] } private [CODE]int countones(string str, int index) {[/CODE] if (index == str.length()) { [CODE]return 0;[/CODE] } [CODE]int count = 0;[/CODE] if (str.charat(index) == '1') { count = 1; } [CODE]return count + countones(str, index + 1);[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab3;[/CODE] import java.util.list; [CODE]class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } } } [CODE]package lab3;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nkarisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nrockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nmetal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]package lab3;[/CODE] [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]package lab3;[/CODE] [CODE]class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]package lab3;[/CODE] [CODE]class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]package lab3;[/CODE] import java.util.random; import java.util.arraylist; import java.util.list; [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> kopyaliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] random rand = [CODE]new random();[/CODE] [CODE]for (int i = 0;[/CODE] i < kopyaliste.size(); i++) { //random sınıfıyla swap işlemi yapıyorum int randomindex = rand.nextint(kopyaliste.size()); sarki temp = kopyaliste.get(i); kopyaliste.set(i, kopyaliste.get(randomindex)); kopyaliste.set(randomindex, temp); } [CODE]for (sarki sarki : kopyaliste) {[/CODE] sarki.oynat(); } } } [CODE]package lab3;[/CODE] import java.util.list; [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]package lab3;[/CODE] abstract [CODE]class sarki {[/CODE] protected [CODE]string isim;[/CODE] protected [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]package lab3;[/CODE] import java.util.list; [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean sesyuksek = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki && !sesyuksek) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sesyuksek = true; } sarki.oynat(); [CODE]if (sesyuksek && !(sarki instanceof rocksarki)) {[/CODE] sesyuksek = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } } } [CODE]package lab3;[/CODE] import java.util.list; [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } abstraction kavramını açıklayınız. soyutlama, karmaşıok bir sistemi kolay ve anlaşılır hale getirir dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mümkündür java covraiant return typesı destekler tersi mümkün değil çünkü subclass olmalı protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier(default) class ve package içerirken protected için bunun üstüne subclass eklenir yani no modifier daha yakın java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? üst sınıfta kullandığımız constructuru subclasslarda kullanabilmek için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değil sadece birini yapabilir java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? bir nesnenin belirli bir sınıfın veya arayüzün örneği olup olmadığını kontrol eder a,b'nin subclasıysa true döner metot overriding ve overloading kavramlarını açıklayınız. overloading : aynı isimdeki metotların farklı parametre listeleriyle tanımlanması overriding : subclasın üst sın[CODE]ıfta tanımlı bir metodu yeniden tanımlaması class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 0 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? derleme ve çalışma zamanlarına göre yapılır java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? bu metotların derleme zamanında davranışlarının sabit ve kesin olması override edilemezler overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading için static overriding dynamic çünkü override edilmiş metodu çağrılacaksa, o belirlenir overloarding içinderleme zamanı önemli dinamik bağlamada jvm'nin görevi nedir? objenin türünü belirlemek ve doğru metodu çağırmak java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? upcating implicit yapılabilir çünkü subclss üst sınıfın tüm özelliklerini metot ve değişken gibi alabilir down casting implicit yapılmaz üst sınıfın referansı subclassın özelliklerini taşımaz java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? işlemci ve bellek kullanımları artardı class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dynamic [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product , dynamic java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classda en az 1 metoda sahip olabilirken concrete classta tüm metotlar tanımlıdır abstract classların constructerı olabilir interfacelerin olamaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır edilemez abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstraction ,partial implementation, polimorfizim abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstractlar hem abstract hem concrete metotlar içerebilir. interface yalnızca abstract metotlar içerir abstclar extends edilir interface impelements marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker : içinde hiçbir metot bulunmayan bir arayüz functional :tek bir abstract metodu olan interface bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? 1. evet implements ile edilir 2. bir [CODE]interface başka bir interface’i implements edemez ama extends edebilir abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal a = [CODE]new animal(""buddy"");[/CODE] animal classı abstract olduğu için doğrudan bir obje oluşturulamaz. onun yerine sub[CODE]class olan dogdan oluştururuz interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? çalışmaz java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. checked(io),unchecked(null) java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked exception fırlatıyorsa, bu exception ya çağıran metot tarafından try-catch bloğunda ele alınmalı override edildiyse daha fazla expection eklenemez finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? exception olsa da olmasa da her durumda çalışır işlevi bellek temizleme,dosya kapatma vs. java'da kendi exceptionunuzu nasıl tanımlarsınız? exceptiondan türetilmiş bir sın[CODE]ıf yazarım java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? exception yakalanıp ek bilgi isteniyor olabilir veya mesaj verilebilir static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? trying m1 caught2 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package lab2;[/CODE] [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] //parametresiz this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] //parametreli this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = batterylevel > 0; //bataryası varsa true } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; this.isoperational = batterylevel > 0; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void charge() {[/CODE] this.batterylevel = 100; this.isoperational = true; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]package lab2;[/CODE] import java.util.*; [CODE]public class lab2q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] system.out.pr[CODE]intln(getallpermutations(s));[/CODE] } [CODE]public static void generatepermutations(string s, int index, list<string> result) {[/CODE] if (index == s.length()) { result.add(s); [CODE]return;[/CODE] } char currentchar = s.charat(index); [CODE]if (currentchar >= 'a' && currentchar <= 'z') {[/CODE] //harfse küçükse büyük büyükse küçük yapma // 32 yapma sebebim küçük a 97 büyük a 65 ascide generatepermutations(s.substring(0, index) + (char)(currentchar - 32) + s.sub[CODE]string(index + 1), index + 1, result);[/CODE] } [CODE]else if (currentchar >= 'a' && currentchar <= 'z') {[/CODE] generatepermutations(s.substring(0, index) + (char)(currentchar + 32) + s.sub[CODE]string(index + 1), index + 1, result);[/CODE] } generatepermutations(s, index + 1, result); } [CODE]public static list<string> getallpermutations(string s) {[/CODE] list<[CODE]string> result = new arraylist<>();[/CODE] generatepermutations(s, 0, result); [CODE]return result;[/CODE] } } [CODE]package lab2;[/CODE] [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]package lab2;[/CODE] import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.charge(); } } [CODE]public void work() {[/CODE] [CODE]for (robot robot : robots) {[/CODE] if((robot.getbatterylevel() - 15) < 0) { //sarjın negat[CODE]if olmaması için min 0 int newbatterylevel = 0;[/CODE] robot.setbatterylevel([CODE]newbatterylevel);[/CODE] } [CODE]else {[/CODE] int newbatterylevel = robot.getbatterylevel() - 15; robot.setbatterylevel([CODE]newbatterylevel);[/CODE] } } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here: "");[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package quiz2_1;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package quiz2_1;[/CODE] abstract [CODE]class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]package quiz2_1;[/CODE] [CODE]public class main {[/CODE][CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.displaytotalproduction(); } } [CODE]package quiz2_1;[/CODE] [CODE]class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now "" + (isarmed ? ""armed"" : ""unarmed""));[/CODE] } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]package quiz2_1;[/CODE] [CODE]class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int amount) {[/CODE] cleaningpower += amount; system.out.pr[CODE]intln(""cleaningrobot - "" + modelname + "" now has cleaning power: "" + cleaningpower);[/CODE] } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } [CODE]package quiz2_1;[/CODE] import java.util.arraylist; [CODE]class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int totalrobotproduction = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobotproduction++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobotproduction++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] cleaningrobot cr = (cleaningrobot) robot; system.out.println(""cleaningrobot - model: "" + cr.getmodelname() + "", battery: "" + cr.getbatterylife() + "", cleaning power: "" + cr.getcleaningpower()); } [CODE]else if (robot instanceof securityrobot) {[/CODE] securityrobot sr = (securityrobot) robot; system.out.println(""securityrobot - model: "" + sr.getmodelname() + "", battery: "" + sr.getbatterylife() + "", armed: "" + sr.isarmed()); } } } [CODE]public void upgradecleaningrobots(int amount) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(amount); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); } } } [CODE]public static void displaytotalproduction() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalrobotproduction + "" robot uretildi"");[/CODE] } } 2"
6429016,1,"6429016 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. /*cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor. cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir. bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır. yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. */ [CODE]public class cocktailshakersort {[/CODE] [CODE]public static void cocktailsort(int[] arr) {[/CODE] cocktail(arr, 0, arr.length); } [CODE]public static void cocktail(int[] arr, int start, int end) {[/CODE] [CODE]if (start >= end) {[/CODE] //base elemanlar sirali [CODE]return;[/CODE] } boolean swapped= false; [CODE]for (int i=start;[/CODE]i<end-1;i++) {// soldan saga sıralama [CODE]if (arr[i] > arr[i + 1]) {[/CODE] swap(arr, i, i+ 1); swapped = true; } } [CODE]if (swapped=false) {[/CODE] //zaten swapli [CODE]return;[/CODE] } swapped = false; [CODE]for (int i = end - 2;[/CODE] i > start; i--) { // sagdan sola sıralama [CODE]if (arr[i] < arr[i - 1]) {[/CODE] swap(arr, i, i - 1); swapped = true; } } cocktail(arr,start+1,end-1); } [CODE]public static void swap(int[] arr, int i, int j) {[/CODE] //yanyana olanları yer degistirme [CODE]int temp = arr[i];[/CODE] arr[i] = arr[j]; arr[j] = temp; } [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]3, 4, 1,8}; cocktailsort(arr); system.out.pr[CODE]intln(arr[0]+"",""+arr[1]+"",""+arr[2]+"",""+ arr[3]);[/CODE] } } //collatz problemi. //bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır. //kurallar şu şekildedir: //eğer sayı çift ise 2’ye bölünür //eğer sayı tek ise 3 ile çarpılıp 1 eklenir. //örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. //bu işlemi yapan recursive metodu yazmanız gerekmektedir. bu metodun imzası public static int collatz(int i) olmalıdır. ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. [CODE]public class collatz {[/CODE] [CODE]public static int collatz(int i) {[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return 0;[/CODE] //base } [CODE]else if (i % 2 == 0) {[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] // c[CODE]ift sayi }[/CODE] [CODE]else {[/CODE] [CODE]return 1 + collatz(3*i+1);[/CODE] // tek sayi } } [CODE]public static void main(string[] args) {[/CODE] [CODE]int sayi = 1;[/CODE] system.out.pr[CODE]intln(sayi + "" icin adim sayisi: "" +collatz(sayi));[/CODE] [CODE]int sayi2 = 11;[/CODE] system.out.pr[CODE]intln(sayi2 +"" icin adim sayisi: "" +collatz(sayi2));[/CODE] [CODE]int sayi3 = 8;[/CODE] system.out.pr[CODE]intln(sayi3 +"" icin adim sayisi: "" +collatz(sayi3));[/CODE] } } [CODE]public class sayac {[/CODE] [CODE]string input;[/CODE] [CODE]public sayac(string input) {[/CODE] this.input = input; } [CODE]public int say() {[/CODE] //yardimci [CODE]return birsay(input, 0);[/CODE] } [CODE]public int birsay(string str, int index) {[/CODE] if (index == str.length()) {//base iterasyon [CODE]return 0;[/CODE] } if (str.charat(index) == '1') { [CODE]return 1 + birsay(str, index + 1);[/CODE] } [CODE]return birsay(str, index + 1);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""11001100110"");[/CODE] system.out.println(""birinci sayinin icinde ""+ s1.say() + "" tane 1 var.""); system.out.println(""ikinci sayinin icinde ""+ s2.say() + "" tane 1 var.""); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab2;[/CODE] import java.util.list; [CODE]class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji == null) {[/CODE] system.out.println(""calma stratejisi secilmedi.""); [CODE]return;[/CODE] } strateji.cal(sarkilistesi); } } [CODE]package lab2;[/CODE] [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + isim + "" by "" + sanatci + "" (hafif ve sakin)"");[/CODE] } } [CODE]package lab2;[/CODE] [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + isim + "" by "" + sanatci + "" ("" +metalozellik +"")"");[/CODE] } [CODE]public void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(isim + "" - metal özelliği: "" + metalozellik);[/CODE] } [CODE]public string metal(){[/CODE] [CODE]return metalozellik;[/CODE] } } [CODE]package lab2;[/CODE] [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + isim + "" by "" + sanatci + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]package lab2;[/CODE] import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> karisikliste = (sarkilistesi); collections.shuffle(karisikliste); [CODE]for (sarki sarki : karisikliste) {[/CODE] sarki.oynat(); } } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]package lab2;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""\nsirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nkarisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nrockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""\nmetal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] //((metalsarki) sarki).gostermetalozellikleri(); system.out.println(sarki.sanatci+"" - ""+ sarki.isim +"" [ozellik: "" + ((metalsarki) sarki).metal() + ""]""); } } } } [CODE]package lab2;[/CODE] import java.util.list; import java.util.collections; [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] @override [CODE]public string tostring() {[/CODE] [CODE]return isim + "" by "" + sanatci;[/CODE] } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean isvolumehigh = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarki sarki = sarkilistesi.get(i); [CODE]if (sarki instanceof rocksarki) {[/CODE] [CODE]if (!isvolumehigh) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] isvolumehigh = true; } } [CODE]else {[/CODE] [CODE]if (isvolumehigh) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] isvolumehigh = false; } } sarki.oynat(); } } } [CODE]package lab2;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir fonksiyonun içinde belirli bir baz duruma kadar kendini tekrar çağırmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. recursive method kendini çağırma, işlev ve durdurucu temel koşuldan oluşur. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. çıkış durumu noktasına kadar içeri doğru yeniden çağırır. çıkış noktası yoksa stack overflow durumu yaşanır. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. 2 üzeri 2 ye kadar iteratif olarak daha verimlidir. bundan sonra ise recursive olarak daha verimli olur. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? scanner ile bir arrayin içine sürekli i+1 alacak şekilde recursive method ile alırım alırım. sonrasında arrayin length ine bakarım. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack hafızada açılan sayfalardır. bu sayfaların dışına çıkacak kadar tail recursion nedir, kısaca açıklayınız. recursive metot içinde başka bir recursive metot olması. yani iç içe recursive kullanimidir. merhaba abstraction kavramını açıklayınız. soyutluk veriye nesneye erişilmesi için gereklilikleri azaltma işi dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür çünkü horuly employee employeenin alt kumesidir. tersi mümkün değildir kümedeb çıkamayız. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier daha yakındır. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü atasının constructorunu taşımalı ve nesiller arası bir zincir olusturmalidir. bu bir kuraldır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır java'da tek ata olabilir. ancak bunu sağlamak için b extends c, a extends b yaparsak a ikisinin de override edilmeyen özelliklerini taşır. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a byi extend ediyor mu. b a'nın atası ya da a'nın kendisi mıdır. a objesi b classın in objesinin bir örneği mıdır? metot overriding ve overloading kavramlarını açıklayınız. metot overriding bir subclassın üst classın aynı adda metodunu ezmesidir. subclassın metodu calisir. method overloading farklı parametrelere sahip aynı isimli farklı metodlar taninlamaktır. aynı method ismi ile farklı parametrelere işlem yapmaya metodun daha esnek olmasına olanak tanır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? static binding compile zamanında yapılır dynamic binding run zamanında yapılır. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? override edilemezler. bu nedenle tek bir metot bulunur. onun cagrilacagi belirlidir. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overriding yaparken dynamic binding gerçekleşir. overloading yaparken static binding gerçekleşir. dinamik bağlamada jvm'nin görevi nedir? hangi classtan çağrıldığını bulma sonrasında çağrıldığı nesnenin classına kadar parenttan childa doğru override edilip edilmediğini kontrol etme. buna göre son override edilen metodu uygulama. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü upcasting de alt sınıflar üst sınıfların ebeveynin tüm özelliklerine sahiptir. extend eder. ama downcastingde bir ebeveyni birden fazla child extend edebileceği için ve ebeveyn childın tüm özelliklerine sahip olamayabilecrgi için yapılamaz. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? final, static, private metotları çağırmak yerine obje classının içindeki metodu çağırabilirdi. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dinamik bağlama vardır. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? book dinamik bağlama gozlemekteyiz java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class nesne oluşturmaz. soyut ve somut metodlar içerir ve kendini extend edenlerin bu metodlari bulundurması zorunludur. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet edilebilir. ama yine abstract olacaktır. bir gövde görevi görmez. implementation olmaz abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract classlar nesne oluşturmaz. abstract metodlar bulundurabilir.bu metotların gövdesi olmaz. ancak alt sınıflar bunları bulundurmak zorunda kalır. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstractın constructor metodu vardır. interface in constructor metodu yoktur. abstractta çoklu kalıtım yoktur. interfacede çoklu kalıtım vardır. interface instance variable bulundurma. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface method içermeyen interfacetir. functional interface bir abstract method içeren interfacetir. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir interface başka bir interfaceyi extend edebilir. bu, bir interface'in diğer interface'in metodlarını miras almasını sağlar. bir class birden fazla interfaceyi implement edebilir. burada çoklu kalıtım devreye girer. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract class nesne oluşturmaz. new shape yerine new circle yazarak düzeltiriz. circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? show metodu override ederken bir sorun oluşuyor. super kullanımı yanlış. yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. logical örneğin bir sayının 0a bölünmesi. syntax hatası compiler içinde çözülebilir ;unutmak. runtime hatası çok uzun süren bitmeyen recursionlar. exceptionlar. exception handlingin amacı nedir? programın hatalar nedeniyle kapanmasını önlemek. hataları user görmeden önce yakalamak ve düzeltmek. hata kaynaklarını görmek. exception handlingde finally bloğunun amacı nedir? finally end durumundan sonra bile çalışmasını istediğimiz bloktur. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked derleme sırasında kontrol edilir unchecked exception lar ise runtime exceptionlaridir. runtime sınıfından üretilir diğeri exception sınıfından. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception classını kullanarak tanımlarız içine bir throw be if ekleriz. java'da error ve exception arasındaki fark nedir, açıklayınız error sistem seviyesinde ciddi hataları gösterir. exception yazılıma müdahale edilerek çözülebilecek hataları. exception lar daha basittir ikisi de trowable dır. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? başka bir exceptiona çevirmek için olabilir. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? daha geniş kapsamlı bir exception atamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez çünkü daha genel bir exception daha önce yakalanmış ve sonradan daha alt bir exception firlatilmis. hatayı çözmek için hiyerarşisi düzeltmek gerekir. genel istisna daha sonra yakalnamlali. çıktı array exception caught. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package quiz;[/CODE] import java.util.arraylist; import java.util.list; [CODE]public class kombinasyon {[/CODE] [CODE]public static boolean isletter(char ch) {[/CODE] [CODE]return (ch>= 'a' && ch<= 'z') || (ch>= 'a' && ch<= 'z');[/CODE] } [CODE]public static boolean lower(char ch) {[/CODE] [CODE]return (ch>= 'a'&& ch<='z');[/CODE] } [CODE]public static boolean upper(char ch) {[/CODE] [CODE]return (ch>= 'a'&& ch<='z');[/CODE] } [CODE]public static void kombinasyon(char[] chars, int index, list<string> result) {[/CODE] if (index == chars.length) { result.add([CODE]new string(chars));[/CODE] [CODE]return;[/CODE] } char currentchar = chars[index]; [CODE]if (isletter(currentchar)) {[/CODE] [CODE]if (lower(currentchar)) {[/CODE] chars[index] = (char) (currentchar- 32); kombinasyon(chars, index+1, result); } [CODE]if (upper(currentchar)) {[/CODE] chars[index] = (char) (currentchar+ 32); kombinasyon(chars, index+1, result); } } chars[index] = currentchar; kombinasyon(chars, index+1, result); } [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] list<[CODE]string> result = new arraylist<>();[/CODE] kombinasyon(s.tochararray(), 0, result); system.out.pr[CODE]intln( result);[/CODE] } } package quiz.robot; [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } private [CODE]string type;[/CODE] [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } private [CODE]int batterylevel;[/CODE] [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] [CODE]if (batterylevel < 0) {[/CODE] this.batterylevel = 0; } [CODE]else if (batterylevel > 100) {[/CODE] this.batterylevel = 100; } [CODE]else {[/CODE] this.batterylevel = batterylevel; } // batarya sıfırsa robot çalışamaz this.isoperational = (this.batterylevel > 0); } private boolean isoperational; [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = (this.batterylevel>0); } [CODE]public robot() {[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public void charge(){[/CODE] setbatterylevel(100); this.isoperational =true; } [CODE]public void printrobot(){[/CODE] system.out.println(""robot name: "" + this.name + "" robot type: "" + this.type +"" battery level: "" + this.batterylevel +""% ""+ "" is operational: "" + this.isoperational); } } package quiz.robot; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } package quiz.robot; import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } private [CODE]string location;[/CODE] [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } private arraylist<robot>robots; [CODE]public factory(string name, string location){[/CODE] this.name=name; this.location=location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] this.name=""factory1""; this.location=""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.charge(); } } [CODE]public void work(){[/CODE] [CODE]for(robot robot:robots){[/CODE] int tempbattery = robot.getbatterylevel() - 15; [CODE]if( tempbattery<0 ){[/CODE] tempbattery=0; } robot.setbatterylevel(tempbattery); } } [CODE]public void printfactory() {[/CODE] system.out.println(""factory name: "" + this.name + "" location: "" + this.location); system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot robot :robots) {[/CODE] robot.pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package quiz2bil211;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]public int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package quiz2bil211;[/CODE] [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]package quiz2bil211;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] factory.countrobots(); } } [CODE]package quiz2bil211;[/CODE] [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public string getisarmed() {[/CODE] [CODE]if(isarmed==true){[/CODE] [CODE]return ""armed"";[/CODE] } [CODE]else{[/CODE] [CODE]return ""unarmed"";[/CODE] } } [CODE]public boolean getarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; this.modelname=modelname; this.isarmed=isarmed; } [CODE]public void togglearmedmode(){[/CODE] isarmed=!isarmed; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=batterylife+150;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife==10 || batterylife>10){[/CODE] system.out.println(""[""+modelname+""]""+"" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife=batterylife-10;[/CODE] } [CODE]else if(batterylife<10){[/CODE] system.out.println(""[""+modelname+""]""+ "" not enough battery to scan threats...""); } } @override [CODE]public string tostring() {[/CODE] [CODE]return ""securityrobot - model: "" + getmodelname() + "", battery: "" + getbatterylife() + "", armed: "" + getisarmed();[/CODE] } } [CODE]package quiz2bil211;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void boostcleaningpower(int amount){[/CODE] cleaningpower=cleaningpower+amount; } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=batterylife+150;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife==10 || batterylife>10){[/CODE] system.out.println(""[""+modelname+""]""+"" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife=batterylife-10;[/CODE] } [CODE]else if(batterylife<10){[/CODE] system.out.println(""[""+modelname+""]""+ "" not enough battery to clean...""); } } @override [CODE]public string tostring() {[/CODE] [CODE]return ""cleaningrobot - model: "" + getmodelname() + "", battery: "" + getbatterylife() + "", cleaning power: "" + cleaningpower;[/CODE] } } [CODE]package quiz2bil211;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int totalrobotcount = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobotcount++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobotcount++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] system.out.pr[CODE]intln(robot);[/CODE] } } [CODE]public void upgradecleaningrobots(int amount) {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot) robot).boostcleaningpower(amount); } [CODE]if(robot instanceof cleaningrobot){[/CODE] system.out.println(""cleaningrobot - "" + robot.getmodelname() + "" now has cleaning power: ""+ ((cleaningrobot) robot).getcleaningpower() );} } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] ((securityrobot) robot).togglearmedmode(); } [CODE]if(robot instanceof securityrobot){[/CODE] system.out.println(""securityrobot - "" + robot.getmodelname() + "" armed: ""+ ((securityrobot) robot).getarmed() ); } } } [CODE]public void countrobots(){[/CODE] system.out.println(""tüm fabrikalar tarafından ""+totalrobotcount+"" robot üretildi.""); } } 1"
8059049,1,"8059049 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class bil211lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[]arr={[/CODE]5,4,1,2}; cocktailsort(arr); [CODE]for(int i=0;[/CODE]i<arr.length;i++){ system.out.pr[CODE]int(arr[i]+"" "");[/CODE] } } [CODE]public static void cocktailsort(int[]arr){[/CODE] recursiveshake(arr, 1); } [CODE]public static void recursiveshake(int[]arr,int index){[/CODE] if(index>=arr.length) [CODE]return ;[/CODE] [CODE]for(int i=0;[/CODE]i<index;i++){ [CODE]if(arr[i]>arr[i+1]){[/CODE] [CODE]int temp=arr[i];[/CODE] arr[i]=arr[i+1]; arr[i+1]=temp; } } [CODE]for(int i=index;[/CODE]i<arr.length-1;i++){ [CODE]if(arr[i]>arr[i+1]){[/CODE] [CODE]int tem=arr[i];[/CODE] arr[i]=arr[i+1]; arr[i+1]=tem; } } recursiveshake(arr,index+1); } } [CODE]public class bil211lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]int(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i==1) return 0;[/CODE] [CODE]if(i%2==0){[/CODE] [CODE]return 1+collatz(i/2);[/CODE] } [CODE]return 1+collatz (i*3+1);[/CODE] } } [CODE]public class bil211lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1=[CODE]new sayac(""10001"");[/CODE] sayac s2=[CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } [CODE]class sayac{[/CODE] private [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str=str; } [CODE]public int say(){[/CODE] [CODE]return counter(str,0);[/CODE] } private [CODE]int counter(string str,int i){[/CODE] if(i>=str.length()) [CODE]return 0;[/CODE] if(str.charat(i)=='1'){ return 1+counter(str.sub[CODE]string(1),i);[/CODE] } return counter(str.sub[CODE]string(1),i);[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arrays; import java.util.list; [CODE]public class bil211lab2main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } import java.util.arraylist; import java.util.list; import java.util.random; [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] random rand=[CODE]new random();[/CODE] arraylist<sarki> karisik = [CODE]new arraylist<>(sarkilistesi);[/CODE] while(!karisik.isempty()){ int random = rand.nextint(karisik.size()); sarki sarki = karisik.get(random); sarki.oynat(); karisik.remove(random); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean ses = false; [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarki sarki = sarkilistesi.get(i); [CODE]if (sarki instanceof rocksarki) {[/CODE] [CODE]if (!ses) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] ses = true; } } [CODE]else {[/CODE] [CODE]if (ses) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] ses = false; } } sarki.oynat(); } [CODE]if (ses) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } } } import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim,string sanatci){[/CODE] super(isim, sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + getsanatci() + ""- "" + getisim() + "" (hafif ve sakin)"");[/CODE] } } [CODE]class metalsarki extends sarki {[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] super(isim, sanatci); this.metalozellik=metalozellik; } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(getsanatci() + ""- "" + getisim() + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + getisim() + ""- "" + getsanatci() + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } [CODE]public void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + getsanatci()+ ""- "" + getisim()+ "" (huzurlu ve nostaljik)"");[/CODE] } } abstract [CODE]class sarki {[/CODE] private [CODE]string isim;[/CODE] private [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim,string sanatci){[/CODE] this.isim=isim; this.sanatci=sanatci; } abstract [CODE]void oynat();[/CODE] [CODE]public string getsanatci(){[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public string getisim(){[/CODE] [CODE]return isim;[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursion bir metodun kendi kendini çağırmasıdır.base case ,input ve recursive partlara sahiptir. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case recursion dan çıkmamızı sağlayan koşuldur,sonsuz döngüye girmemek için gereklidir. bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? string in karakter sayısının 1 olması durumu recursive bir metotta base case olmazsa ne olur? metod recursiondan çıkamaz recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. stack te yeni bir alan açılır,recursionla sonuca yaklaştıkça alan küçülür fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. durmadan diğer sayılar için metodu çağıracağımızdan(örneğin 2 için 1 ve 0 gibi) bellekte çok fazla yer tutar tail recursion nedir, kısaca açıklayınız. son koşulu metodun kendisinin sağladığı recursion tipi abstraction kavramını açıklayınız. black boxing dir,kodun gerekli kısımlarını tutar gereksiz kısımlarını gizleriz dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? hourly employee için evet(subclass ise )tersi için hayır protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier subclass a erişemediğinden no modifier daha yakındır java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? üst sınıfın constructorına erişmek ve initialize edebilmek için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? is a ilişkisidir metot overriding ve overloading kavramlarını açıklayınız. overriding de aynı isim ve signature ile yeni bir metod tanımlarız.overloading de ise isim aynı ama parametreler farklıdır [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base /n(alt satır) 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent /n 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? compile da static, run da dynamic binding yapılır java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? çünkü bu metodlar override edilemezler ve sadece dinamik binding de override gerçekleşir overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloading de static,overriding de dinamik binding gerçekleşir dinamik bağlamada jvm'nin görevi nedir? jvm in görevi runtime da kullanılacak metotları seçmektir java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü otomatik olarak alt class dan üst class a erişime uygundur,down casting implicit yapılırsa compioe hatası verebilir java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? compile time da hata verirdi,static metodları kullanamazdık class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dynamic binding [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dynamic binding var java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class soyut bir classtır,içindeki metodlar da soyut yani bodysiz olabilir,concrete de metodlar da concrete olmalıdır.interface de constructor olmaz,abstract de olur abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet edilebilir,normal bir şekilde abstract class ve metodları tanımlarız. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. 1-şablon oluştururlar 2-kod tekrarını engellerler 3-bu metodlarda body kısmı boştur abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class da extend seçeneği mevcuttur,her zaman yüzde 100 soyutlama olmaz,interface ise yüzde 100 soyutlamadır.i̇kisi de referans tipi olarak kullanılabilir marker [CODE]interface ve functional interface kavramları nedir, nasıl kullanılır? marker da metod bulunmaz,functional de bulunur bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? class interface i implement eder,interface ise diğer interface i extend eder abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal la obje yapılamaz, new dog denmeli. output:buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? burada hata super kullanılması,nereden bilebiliriz hangi interface i kullanacağını? yapılacak şey süper.move u kaldırmak muhtemel çıktılar da swimming veya flying veya ikisi birden olabilir,hangi interface veya interfaceleri işaret ettiğimize bağlı . java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. checked ve unchecked.checked e file io,unchecked e arrayindexoutofbounds exceptionları örnek verilebilir java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked exception da try catch ile kontrol edilmeli.override da exception ı tekrar yazman gerekmez. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally kaynak temizleme vb. için kullanılan bir bloktur. finally bloğu exception olsa da olmasa da çalışır. java'da kendi exceptionunuzu nasıl tanımlarsınız? extends exception şeklinde derived bir exception [CODE]class ı yazarım java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? sadece exception ı catch etmek yetmez,üst class a atıp bilgi isteyebilir static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? trying m1 caught2 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class bil211qui1z1{[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = ""a1b2"";[/CODE] arraylist<[CODE]string> result=new arraylist<>();[/CODE] kombinasyon(s, 0, """", result); system.out.pr[CODE]intln(result);[/CODE] } //büyük harf ile küçük harf arasında 32 fark olduğu belirtildi,o yüzden +-32 ile charları elde ettim [CODE]public static void kombinasyon(string s, int index, string current, arraylist<string> result) {[/CODE] if (index == s.length()) { result.add(current); [CODE]return;[/CODE] } char c = s.charat(index); [CODE]if (c>='a'&&c<='z') {[/CODE] char d=(char)(c-32); kombinasyon(s, index + 1, current +c , result); kombinasyon(s, index + 1, current +d , result); } [CODE]else if(c>='a'&&c<='z'){[/CODE] char e=(char)(c+32); kombinasyon(s, index + 1, current +c , result); kombinasyon(s, index + 1, current +e , result); } [CODE]else {[/CODE] kombinasyon(s, index + 1, current + c, result); } } } import java.util.*; [CODE]public class bil2111quiz1q2 {[/CODE] [CODE]public static void main(string[]args){[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] this.name=""wall-e""; this.type=""trash""; this.batterylevel=100; this.isoperational=true; } [CODE]public robot(string name,string type,int batterylevel){[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; this.isoperational=true; } [CODE]public void charge(){[/CODE] this.batterylevel=100; } [CODE]public void printrobot(){[/CODE] system.out.println(""robot name: ""+this.name+"" robot type: ""+this.type+"" battery level: ""+this.batterylevel+""%""+ "" is operational:""+this.isoperational); } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getbattery(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public void setbattery(int battery){[/CODE] this.batterylevel=battery; } [CODE]public void setoperation(){[/CODE] if(this.batterylevel<=0) isoperational=false; } [CODE]public boolean getoperational(){[/CODE] [CODE]return isoperational;[/CODE] } } [CODE]class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name=name; this.location=location; this.robots=[CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] this.name=""factory1""; this.location=""moon""; this.robots=[CODE]new arraylist<>();[/CODE] } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(robot robot:robots){[/CODE] robot.charge(); } } [CODE]public void addrobot(robot robot){[/CODE] this.robots.add(robot); } [CODE]public void printfactory(){[/CODE] system.out.println(""factory name: ""+this.name+"" factory location: ""+ this.location); system.out.pr[CODE]intln(""robots operating here:"");[/CODE] for(robot robot:robots) robot.pr[CODE]introbot();[/CODE] } [CODE]public void work(){[/CODE] [CODE]for(robot robot:robots){[/CODE] robot.setbattery(robot.getbattery()-15); if(!robot.getoperational()){ robot.setbattery(0); } } } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist<robot> getrobots(){[/CODE] [CODE]return robots;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 abstract [CODE]class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] protected [CODE]int totalrobots;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] private final [CODE]int initialbattery;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname,batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; this.initialbattery=batteryl[CODE]ife;[/CODE] } [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void setbatterylife(int val){[/CODE] this.batteryl[CODE]ife=val;[/CODE] } [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void recharge(){[/CODE] setbatteryl[CODE]ife(initialbattery);[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(getbatterylife()>=10){[/CODE] system.out.println(""[""+getmodelname()+""] cleaning in progres... cleaning power:""+this.cleaningpower); setbatteryl[CODE]ife(getbatterylife()-10);[/CODE] } [CODE]else{[/CODE] system.out.println(""[""+getmodelname()+""] not enough battery to scan threats...""); } } [CODE]public void boostcleaningpower(){[/CODE] this.cleaningpower+=10; system.out.pr[CODE]intln(""cleaningrobot- ""+getmodelname()+"" now has cleaning power: ""+getcleaningpower());[/CODE] } } [CODE]public class robotmain {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.getsizer(); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void setbatterylife(int val){[/CODE] this.batteryl[CODE]ife=val;[/CODE] } [CODE]public void recharge(){[/CODE] setbatteryl[CODE]ife(150);[/CODE] } [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(getbatterylife()>=10){[/CODE] system.out.println(""[""+getmodelname()+""] scanning for threads... armed:""+this.isarmed); setbatteryl[CODE]ife(getbatterylife()-10);[/CODE] } [CODE]else{[/CODE] system.out.println(""[""+getmodelname()+""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] if(!this.isarmed){ this.isarmed=true; system.out.println(""securityrobot- ""+getmodelname() +"" is now armed.""); } [CODE]else{[/CODE] this.isarmed=false; system.out.println(""securityrobot- ""+getmodelname()+"" is now unarmed.""); } } } [CODE]interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; private [CODE]static int sizer;[/CODE] [CODE]public robotfactory(){[/CODE] this.robots=[CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] abstractrobot robot=[CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add(robot); sizer++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] abstractrobot robot=[CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add(robot); sizer++; } [CODE]public void performalltasks(){[/CODE] [CODE]for(abstractrobot robot:robots){[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(abstractrobot robot:robots){[/CODE] [CODE]if(robot instanceof cleaningrobot){[/CODE] system.out.println(""cleaningrobot -model: ""+robot.getmodelname()+"", battery: ""+robot.getbatterylife()+"", cleaning power: ""+((cleaningrobot) robot).getcleaningpower()); } else system.out.println(""securityrobot -model: ""+robot.getmodelname()+"", battery: ""+robot.getbatterylife()+"", cleaning power: ""+((securityrobot) robot).getisarmed()); } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for (abstractrobot robot: robots ){[/CODE] if(robot instanceof cleaningrobot) ((cleaningrobot) robot).boostcleaningpower(); } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for (abstractrobot robot: robots ){[/CODE] [CODE]if(robot instanceof securityrobot){[/CODE] ((securityrobot) robot).togglearmedmode(); } } } [CODE]public static int getsize() {[/CODE] [CODE]return sizer;[/CODE] } [CODE]public static void getsizer(){[/CODE] system.out.pr[CODE]int("" tüm fabrikalar tarafından toplam ""+getsize()+"" robot üretildi "");[/CODE] } } 1"
