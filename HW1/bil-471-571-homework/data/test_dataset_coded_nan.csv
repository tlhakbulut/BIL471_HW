id,NaN_count,answers
4380745,1,"4380745 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3{[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac sayac = [CODE]new sayac(""100101111101010"");[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); system.out.println(sayac.say()); } } [CODE]public class lab1q2{[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] arr1 = {[/CODE]1,8,9,12,7,3,45,10}; [CODE]int[] arr2 = {[/CODE]5,4,1,2}; cocktailsort(arr2); [CODE]for(int i = 0;[/CODE] i < arr2.length; i++){ system.out.pr[CODE]intln(arr2[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] cocktailsort(arr, 0, arr.length-1); } [CODE]public static void cocktailsort(int[] arr, int i, int j){[/CODE] boolean fsflag = [CODE]forwardsort(arr, i, j, false);[/CODE] [CODE]if(!fsflag){[/CODE] [CODE]return;[/CODE] } boolean bsflag = backsort(arr, i, j, false); [CODE]if(!bsflag){[/CODE] [CODE]return;[/CODE] } cocktailsort(arr, i+1, j-1); } [CODE]public static void swap(int[] arr, int i, int j){[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[j]; arr[j] = temp; [CODE]return;[/CODE] } [CODE]public static boolean forwardsort(int[] arr, int i, int j, boolean flag){[/CODE] [CODE]if(i == j){[/CODE] [CODE]return flag;[/CODE] } [CODE]if(arr[i] >= arr[i+1]){[/CODE] swap(arr, i, i+1); flag = true; } [CODE]return forwardsort(arr, i+1, j, flag);[/CODE] } [CODE]public static boolean backsort(int[] arr, int i, int j, boolean flag){[/CODE] [CODE]if(j == i){[/CODE] [CODE]return flag;[/CODE] } [CODE]if(arr[j - 1] >= arr[j]){[/CODE] swap(arr, j, j-1); flag = true; } [CODE]return backsort(arr, i, j-1, flag);[/CODE] } } [CODE]public class sayac{[/CODE] [CODE]public string input;[/CODE] [CODE]public sayac(string input){[/CODE] this.input = input; } [CODE]public int say(){[/CODE] [CODE]return sayrecursive(0);[/CODE] } [CODE]public int sayrecursive(int index){[/CODE] if(index >= input.length()){ [CODE]return 0;[/CODE] } if(input.charat(index) == '1'){ [CODE]return 1 + sayrecursive(index + 1);[/CODE] } [CODE]else{[/CODE] [CODE]return sayrecursive(index + 1);[/CODE] } } } [CODE]public class lab1q1{[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(2));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i%2 == 0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else{[/CODE] [CODE]return 1 + collatz(3*i + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; import java.util.random;; [CODE]public class bil211l2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki == null){[/CODE] continue; } [CODE]if(sarki instanceof metalsarki){[/CODE] ((metalsarki)sarki).gostermetalozellikler(); } } } } abstract [CODE]class sarki {[/CODE] protected [CODE]string isim;[/CODE] protected [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]interface calmastratejisi{[/CODE] abstract [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] this.isim = [CODE]new string(isim);[/CODE] this.sanatci = [CODE]new string(sanatci);[/CODE] this.metalozellik = [CODE]new string(metalozellik);[/CODE] } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + metalozellik +"")"");[/CODE] } [CODE]public void gostermetalozellikler(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik +""]"");[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] this.isim = [CODE]new string(isim);[/CODE] this.sanatci = [CODE]new string(sanatci);[/CODE] } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + ""huzurlu ve nostaljik"" +"")"");[/CODE] } } [CODE]class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] this.isim = [CODE]new string(isim);[/CODE] this.sanatci = [CODE]new string(sanatci);[/CODE] } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + ""hafif ve sakin"" +"")"");[/CODE] } } [CODE]class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]string etiket;[/CODE] [CODE]for(sarki sarki: sarkilistesi){[/CODE] [CODE]if(sarki == null){[/CODE] continue; } [CODE]if(sarki instanceof metalsarki){[/CODE] etiket = ""[metal]""; } [CODE]else if(sarki instanceof rocksarki){[/CODE] etiket = ""[rock]""; } [CODE]else{[/CODE] etiket = ""[klasik]""; } system.out.pr[CODE]int(etiket + "" "");[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] random random = [CODE]new random(666);[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]string etiket;[/CODE] list<sarki> sarkilistesi_ = [CODE]new arraylist<>();[/CODE] [CODE]for(sarki sarki: sarkilistesi){[/CODE] [CODE]if(sarki == null){[/CODE] continue; } sarkilistesi_.add(sarki); } while(sarkilistesi_.size() > 0){ int index = random.nextint(sarkilistesi_.size()); if(sarkilistesi_.get(index) == null){ sarkilistesi_.remove(index); continue; } if(sarkilistesi_.get(index) instanceof metalsarki){ etiket = ""[metal]""; } else if(sarkilistesi_.get(index) instanceof rocksarki){ etiket = ""[rock]""; } [CODE]else{[/CODE] etiket = ""[klasik]""; } system.out.pr[CODE]int(etiket + "" "");[/CODE] sarkilistesi_.get(index).oynat(); sarkilistesi_.remove(index); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] random random = [CODE]new random(666);[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]string etiket;[/CODE] [CODE]string mode = ""metal"";[/CODE] [CODE]for(sarki sarki: sarkilistesi){[/CODE] [CODE]if(sarki == null){[/CODE] continue; } [CODE]if(sarki instanceof metalsarki){[/CODE] etiket = ""[metal]""; if(mode.equals(""rock"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } mode = ""metal""; } [CODE]else if(sarki instanceof rocksarki){[/CODE] etiket = ""[rock]""; //degisti = mode.equals(""normal"") ? false : true; if(!mode.equals(""rock"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } mode = ""rock""; } [CODE]else{[/CODE] etiket = ""[klasik]""; //degisti = mode.equals(""normal"") ? false : true; if(mode.equals(""rock"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } mode = ""klasik""; } system.out.pr[CODE]int(etiket + "" "");[/CODE] sarki.oynat(); } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s){[/CODE] strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. matematikteki induction’ın proglama dünyasındaki hali recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. recursion’dan çıkış koşuludur. olmazsa sonsuz recursion’a girilir bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? index’i 0 olqcak şekilde ve başlatmayı string uzunluğunun bir eksiğinden itibaren olacak şekilde stringi gezen bir recursive metot yazılır recursive bir metotta base case olmazsa ne olur? sonsuz döngüye girer recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. stackde önceki bulununan durumun üstüne doğru yeni parametrelerle yeni durum yazılır ve hali hazırda üzerinde bulunulan fonksiyonlar bittikçe eki değerlere dönülerek veriler işlenerek önceki metotda döndürülmüş olur fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. çünkü aynı değerler tekrar ve tekrar hesaplanır tail recursion nedir, kısaca açıklayınız. ? abstraction kavramını açıklayınız. soyutlama, kodun birbirleriyle etkileşime girmesi gereken kısımları birbirinden ayırarak aralarındaki etkileşimi daha iyi yönetmemizi sağlayan kavram ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? extend yapılarak kalıtım ile oluşan ilişki türi bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? default ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya c olabilir java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? evet çünkü hiçbir kalıtım yapılmamış sınıfları java object classı ile extend eder. zaten inheritance yapılmışlar için super çağrılır java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? mümkün değildir metot overriding ve overloading kavramlarını açıklayınız. overriding inheritance yapıldığında kalıtım ile gelen sınıfın metot signature’ı korunurken içeriğinin değiştirilmesidir. overloading aynı isme sahip fonksiyonların farklı signature a sahip olması sağlanarak o fonksiyonun gerekli olan çeşitli versiyonlarının yaratılmasıdır [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? hangi metodun hangi versiyonunun kullanılacağının belirlenmesidir. i̇ki tipi bardır: statik ve dinamik hangi tür metotlarda [CODE]static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? overload edilen metotlarda statik, override edilenlerde dinamik binding kullanılır dinamik bağlamada jvm'nin görevi nedir? runtime esnasında metodun hangi versiyonunun kullanılacağına karar vermek java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? başlangıçta metotları yükleme aşaması olmaz ve bir statik metoda ihtiyaç duyulduğu zaman kullanılamazdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? ? java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. edilemez çünkü kalıtımda üstteki [CODE]class’ın hakları kadar alt class’lara kadar aktarılabilir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meow dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? parent p = new child() kısmında parent olduğunu söylüyoruz javaya p’nin ama parent’da olmayan bir metot çağrılıyor mnce child’a cast edilmeli dinamik binding child display child special java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇mplementasyon aşamasında eksik olan sınıftır abstract metotlar tanımlayabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilemez abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. temel sağlanması gereken bir şablon sunar, bu da bize abstract metotları, implemente edilmeye zorunlu bırakılan [CODE]class ve metotlar abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class’lar concrete metotlar içerebilir marker interface ve functional interface kavramları nedir, nasıl kullanılır? bir şeyin bir şey yapıp yapamayacağını belirten interfsce’ler vardır runnable gibi bir de belirli görevlerin nasıl gerçekleştirileceğinin ayarlanması gereken interface’ler olur bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden çok interface’i implemente edebilir. bir interface diğer interface’leri extend eder. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? a içindeki sound metodu implemente edilmemiş versiyonudur onun yerine dog nesnesi oluşturulup dog referanxı tutan bir variable’a verilmelidir output: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? i̇nterface içinde concrete metot oluşturulmuş swimmiable abstract class yapılıp flyable implemente edilmelidir output: swimming java'da inner class nedir, avantajları nelerdir? sınıf içindeki sınıflardır. bazı sistem tasarım mimarilerinde kullanılır. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik olanlar ana class olmadan da yaşayabilirler diğerlerinin yaşamı dışarıdaki class’a bağlıdır anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? bir sınıf üzerinden yeni bir class yartmadan doğrudan kullanacağımız şekilde hangi class üzerinden yaratacaksak köşeli parantezler açılarak tanımlanır. concrete [CODE]class inner classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? erişebiliyor, bu sayede o ana nesneyi oluşturan builder tipi inner [CODE]class’lar yaratılıp constructor tasarım aşamasındaki karmaşanın önüne geçilebilir statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? tanımlanabilir, nesnenin yaratılmasına ihtiyaç duymaz statik tanımlamalar anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olabilir bu sayede anlık constructor override esilecekse yeni bir metot yazmadan anında anonim classlar ile kullanılabilir hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? static inner class’lar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? outer.inner diye bir erişim olmaz doğrudan inner diye çağırması gerekir value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? derlenir, count: 5 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class bil211q1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] p1.hunt(); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(){[/CODE] this(""willy"", ""emperor"", 1, 5.0); } [CODE]public penguin(string name, string species, int age, double weight){[/CODE] this.name = [CODE]new string(name);[/CODE] this.species = [CODE]new string(species);[/CODE] this.age = age; this.weight = weight; } [CODE]public string getname(){[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = [CODE]new string(name);[/CODE] } [CODE]public string getspecies(){[/CODE] [CODE]return new string(species);[/CODE] } [CODE]public void setspecies(string species){[/CODE] this.species = [CODE]new string(species);[/CODE] } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public void setage(int age){[/CODE] this.age = age; } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setweight(double weight){[/CODE] this.weight = weight; } [CODE]public void hunt(){[/CODE] setweight(getweight() + 1); } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name: "" + getname() + ""\n"" + ""penguin species: "" + getspecies() + ""\n"" + ""penguin age: "" + getage() + ""\n""+ ""penguin weight: "" + getweight() + ""\n"" + ""----------------------"");[/CODE] } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature){[/CODE] this.location = [CODE]new string(location);[/CODE] this.temperature = temperature; penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return new string(location);[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = [CODE]new string(location);[/CODE] } [CODE]public double gettemperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void settemperature(double temperature){[/CODE] this.temperature = temperature; } [CODE]public arraylist<penguin> getpenguins(){[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setpenguins(arraylist<penguin> list){[/CODE] penguins = list; } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.add(penguin); } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""habitat location: "" + getlocation() + ""\n"" + ""average temperature: "" + gettemperature() + "" c\n"" +""penguins living here:"");[/CODE] [CODE]for(int i = 0;[/CODE] i < penguins.size(); i++){ penguins.get(i).pr[CODE]intpenguin();[/CODE] } } } import java.util.arraylist; [CODE]public class bil211q1q1 {[/CODE] [CODE]static arraylist<string> arr = new arraylist<string>();[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); parantezbas(2); } [CODE]public static void parantezbas(int n){[/CODE] parantezbas(n, """"); } [CODE]public static void parantezbas(int n, string output){[/CODE] [CODE]if(n <= 0){[/CODE] boolean flag = false; [CODE]for(int i = 0;[/CODE] i < arr.size(); i++){ if(output.equals(arr.get(i))){ flag = true; } } [CODE]if(flag){[/CODE] [CODE]return;[/CODE] } system.out.pr[CODE]intln(output);[/CODE] arr.add(output); [CODE]return;[/CODE] } parantezbas(n-1,""("" + output + "")""); parantezbas(n-1,""("" + "")"" + output); parantezbas(n-1, output + ""("" + "")""); } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee{[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int price = 50;[/CODE] [CODE]string message = ""sipariş: latte"";[/CODE] [CODE]for(coffeeaddon addon : addons){[/CODE] price += addon.getcost(); message += "" + "" + addon.getname(); } system.out.pr[CODE]intln(message);[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string gettype() {[/CODE] [CODE]return ""latte"";[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); anothermachine.displaysumofcoffenumber();// burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]public class espresso extends basecoffee{[/CODE] private boolean isheated = false; [CODE]public espresso(){[/CODE] } @override [CODE]public double calculateprice() {[/CODE] [CODE]int price = 40;[/CODE] [CODE]string message = ""sipariş: espresso"";[/CODE] [CODE]if(isheated) message += "" (sıcak fincan)"";[/CODE] [CODE]for(coffeeaddon addon : addons){[/CODE] price += addon.getcost(); message += "" + "" + addon.getname(); } system.out.pr[CODE]intln(message);[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } [CODE]public void heatcup(){[/CODE] isheated = true; } @override [CODE]public string gettype() {[/CODE] [CODE]return ""espresso"";[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons; [CODE]public basecoffee(){[/CODE] addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon){[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string gettype();[/CODE] } [CODE]public class americano extends basecoffee{[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int price = 45;[/CODE] [CODE]string message = ""sipariş: americano"";[/CODE] [CODE]for(coffeeaddon addon : addons){[/CODE] price += addon.getcost(); message += "" + "" + addon.getname(); } system.out.pr[CODE]intln(message);[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string gettype() {[/CODE] [CODE]return ""americano"";[/CODE] } } [CODE]public class coffeemachine {[/CODE] [CODE]static int sumofcoffenumber = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon){[/CODE] [CODE]if(coffee instanceof espresso && (adddon instanceof doubleshot || adddon instanceof chocolate)){[/CODE] coffee.addaddon(adddon); } [CODE]else if(coffee instanceof latte && (adddon instanceof milk || adddon instanceof vanillasyrup || adddon instanceof chocolate)){[/CODE] coffee.addaddon(adddon); } [CODE]else if(coffee instanceof americano && (adddon instanceof milk || adddon instanceof vanillasyrup)){[/CODE] coffee.addaddon(adddon); } [CODE]else{[/CODE] system.out.println(""[uyari] "" + coffee.gettype() + "" tipi kahveye "" + adddon.getname() + "" eklenemez""); } } [CODE]public void makecoffee(basecoffee coffee){[/CODE] coffee.calculateprice(); sumofcoffenumber++; } [CODE]public void heatespressocup(basecoffee coffee){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] ((espresso)coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public void displaysumofcoffenumber(){[/CODE] system.out.pr[CODE]intln(""tum kahve makineleri tarafindan toplam "" + sumofcoffenumber + "" kahve uretildi"");[/CODE] } } [CODE]public class milk implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 1"
8190737,1,"8190737 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. import java.util.*; [CODE]public class lab21q1 {[/CODE] [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1) return 0;[/CODE] [CODE]if(i % 2 == 0) return 1 + collatz(i / 2);[/CODE] [CODE]return 1 + collatz(3 * i + 1);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); int i = sc.next[CODE]int();[/CODE] system.out.pr[CODE]intln(collatz(i));[/CODE] sc.close(); } } import java.util.*; [CODE]public class lab21q2 {[/CODE] [CODE]static boolean issorted(int[] arr){[/CODE] int n = arr.length; [CODE]for(int i = 1;[/CODE]i < n;i++){ [CODE]if(arr[i-1] > arr[i]) return false;[/CODE] } [CODE]return true;[/CODE] } [CODE]static int[] coctailsort(int[] arr, boolean bubblebiggest){[/CODE] [CODE]if(issorted(arr)) return arr;[/CODE] int n = arr.length; [CODE]for(int i = 1;[/CODE]i < n;i++){ [CODE]if(bubblebiggest){[/CODE] [CODE]if(arr[i-1] > arr[i]){[/CODE] [CODE]int a1 = arr[i-1];[/CODE] [CODE]int a2 = arr[i];[/CODE] arr[i-1] = a2; arr[i] = a1; } } [CODE]else{[/CODE] [CODE]if(arr[i-1] < arr[i]){[/CODE] [CODE]int a1 = arr[i-1];[/CODE] [CODE]int a2 = arr[i];[/CODE] arr[i-1] = a2; arr[i] = a1; } } } [CODE]int[] rev = new int[n];[/CODE] [CODE]for(int i = 0;[/CODE]i < n;i++) rev[i] = arr[(n-1) - i]; [CODE]return coctailsort(rev, !bubblebiggest);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); int n = sc.next[CODE]int();[/CODE] [CODE]int[] arr = new int[n];[/CODE] [CODE]for(int i = 0;[/CODE]i < n;i++) arr[i] = sc.next[CODE]int();[/CODE] arr = coctailsort(arr, true); [CODE]for(int i = 0;[/CODE]i < n;i++) system.out.pr[CODE]int("""" + arr[i] + "" "");[/CODE] system.out.pr[CODE]int(""\n"");[/CODE] sc.close(); } } import java.util.*; [CODE]class sayac{[/CODE] [CODE]string str;[/CODE] sayac([CODE]string str){[/CODE] this.str = str; } [CODE]public int say(int idx){[/CODE] if(idx == str.length()) [CODE]return 0;[/CODE] if(str.charat(idx) == '1') [CODE]return 1 + say(idx + 1);[/CODE] [CODE]else return say(idx + 1);[/CODE] } [CODE]public int say(){[/CODE] [CODE]return say(0);[/CODE] } } [CODE]public class lab21q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); string str1 = sc.next(); sayac say1 = [CODE]new sayac(str1);[/CODE] system.out.println(say1.say()); string str2 = sc.next(); sayac say2 = [CODE]new sayac(str2);[/CODE] system.out.println(say2.say()); sc.close(); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; [CODE]public class musicplayer{[/CODE] playingstrategy strategy; [CODE]void setstrategy(playingstrategy strategy){[/CODE] this.strategy = strategy; } [CODE]void play(list<song> playlist){[/CODE] strategy.play(playlist); } } import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); song s1 = [CODE]new metal(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] song s2 = [CODE]new metal(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] song s3 = [CODE]new rock(""small mountain"", ""midlake"");[/CODE] song s4 = [CODE]new rock(""ankara"", ""vega"");[/CODE] song s5 = [CODE]new classic(""una mattina"", ""ludovico einaudi"");[/CODE] // songlari iceren calma listesi list<song> playlist = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi musicplayer musicplayer = [CODE]new musicplayer();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] musicplayer.setstrategy([CODE]new ordered());[/CODE] musicplayer.play(playlist); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] musicplayer.setstrategy([CODE]new shuffled());[/CODE] musicplayer.play(playlist); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] musicplayer.setstrategy([CODE]new rockspecial());[/CODE] musicplayer.play(playlist); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (song song:playlist){[/CODE] [CODE]if(song instanceof metal){[/CODE] metal metal = (metal)song; system.out.println(metal.singer + "" - "" + metal.name + "" [ozellik: "" + metal.metalproperties + ""]""); } } sc.close(); } } abstract [CODE]class song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] abstract [CODE]void play();[/CODE] } [CODE]class metal extends song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] [CODE]string metalproperties;[/CODE] metal([CODE]string name, string singer, string metalproperties){[/CODE] this.name = name; this.singer = singer; this.metalproperties = metalproperties; } [CODE]void play(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + singer + "" - "" + name + "" ("" + metalproperties + "")"");[/CODE] } [CODE]void showmetalproperties(){[/CODE] system.out.pr[CODE]intln(metalproperties);[/CODE] } } [CODE]class rock extends song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] rock([CODE]string name, string singer){[/CODE] this.name = name; this.singer = singer; } [CODE]void play(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + singer + "" - "" + name + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class classic extends song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] [CODE]classic(string name, string singer){[/CODE] this.name = name; this.singer = singer; } [CODE]void play(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + singer + "" - "" + name + "" (hafif ve sakin)"");[/CODE] } } import java.util.*; [CODE]interface playingstrategy{[/CODE] [CODE]public void play(list<song> playlist);[/CODE] } [CODE]class ordered implements playingstrategy{[/CODE] [CODE]public void play(list<song> playlist){[/CODE] [CODE]for(song song:playlist){[/CODE] song.play(); } system.out.pr[CODE]intln(""\n"");[/CODE] } } [CODE]class shuffled implements playingstrategy{[/CODE] [CODE]public void play(list<song> playlist){[/CODE] int length = playlist.size(); [CODE]for(int i = length-1;[/CODE]i >= 0;i--){ int idx = (int)math.round(math.random() * i); song tempsong1 = playlist.get(idx); song tempsong2 = playlist.get(i); playlist.set(idx, tempsong2); playlist.set(i , tempsong1); } [CODE]for(song song:playlist){[/CODE] song.play(); } system.out.pr[CODE]intln(""\n"");[/CODE] } } [CODE]class rockspecial implements playingstrategy{[/CODE] [CODE]public void play(list<song> playlist){[/CODE] boolean playingrock = false; [CODE]for(song song:playlist){[/CODE] [CODE]if(song instanceof rock && !playingrock){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] playingrock = true; } [CODE]else if(!(song instanceof rock) && playingrock){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] playingrock = false; } song.play(); } system.out.pr[CODE]intln(""\n"");[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. özyinelemedir. bir fonksiyon kendisini çağırıyorsa recursive olur recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. recursion'un bitirildiği case'dir. base case'e girince fonksiyon bir kez daha kendisini çağırmaz bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? sondaki harf + f(str.substring(0, uzunluk-1)). base case, stringing 0 uzunluğunda olduğu case olur recursive bir metotta base case olmazsa ne olur? sonsuza kadar kendini çağırmaya devam eder, stackoverflow olur recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. her bir çağırma, stack'e bir katman daha ekler. recursion bittiğinde ise katmanlar birer birer işlenir fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. n'inci fibonacci sayısı için 2^n kez fonksiyon çağırılır tail recursion nedir, kısaca açıklayınız. fonksiyonun en sonunda return ifadesi ile beraber recursionun çağırılmasıdır abstraction kavramını açıklayınız. bir nesnenin özelliklerini çıkartarak değişkenlerden ve metotlardan oluşan bir class/blueprint yaratmaktır ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? inheritance ilişkisi olduğunda ""is a"" olur. ""class a extends b"" ifadesiyle belirtilir bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya b java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? o class initialize edilmeden önce tüm ata class değişkenlerinin ve metotlarının setlenmesi gerekmektedir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır metot overriding ve overloading kavramlarını açıklayınız. override, ata classta tanımlı bir metot ile aynı signature'e sahip bir metodu child classta tanımlamaktır. overload ise aynı isme sahip ama farklı signature'u bulunan metotlar tanımlamaktır [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog \n bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle \n 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? kullanılacak metodun hangi tanıma göre kullanılacağını belirlemektir. statik ve dinamik olabilir hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? overriding olmayan veya override edilemeyen metodlarda static, overriding olan metodlarda dinamik binding yapılır. [CODE]static binding için final keywordu kullanılır dinamik bağlamada jvm'nin görevi nedir? metodun tanımını runtime'da bulmaktır java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? kod daha yavaş çalışırdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? compiler error alırız java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. bir canlı yemek yiyebiliyorsa bir köpek de yemek yiyebilmelidir. protected bir metod [CODE]public olarak override edilebilir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() komutu çalışmayacaktır ve compiler error alınacaktır. bu satır silindikten sonra output ""child special"" olacaktır. dinamik binding bulunuyor java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇çinde abstract metodların bulunduğu classlara abstract class denir. ikisinin de constructurları olamaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet. abstarct keywordu kullanılarak. fonksiyonun tanımı yapılmaz abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metodları tanımı yapılmaz. concrete hale getirilmek istendiğinde yapılır. abstract classlar, atası olduğu classlara ""şunu şunu implement etmek zorundasın"" der. abstract [CODE]classları polymorphism için kullanabiliriz abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar bir classtır, extend edilirler. interfaceler class değildir. implement edilirler. evet type olarak kullanılabilir marker interface ve functional interface kavramları nedir, nasıl kullanılır? ( ´_ゝ`) marker interface bi blueprint görevi görür. i̇çindeki metodlar tanımsızdır. functional interface'in içinde tanımı olan metodlar bulunur bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? edebilir. edebilir abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? new animal() yerine new dog() yazarız. output: animal: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? etmez. birden fazla move() tanımı var. i̇kisinden birini silmemiz lazım. sonrasında hangisini sildiysek diğerini outputlar. java'da inner class nedir, avantajları nelerdir? class içindeki class'tır. class içinde tekrar tekrar kullanılan yapıları bir çatı altında toplamaya yarar statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik inner class objesini, class dışında, class objecti oluşturmadan oluşturabiliyoruz. statik değil ise inner class objesi oluşturmak için outet class objesi oluşturmamız gerekiyor anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? ismi olmayan ve tek bir obje özelinde oluşturulan classlardır. her türlü classtan ve interface'den oluşturulabilir. yeter ki gerekli metodlar tanımlansın inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet. evet. daha fazla fonksiyonalite sağlar statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır. çünkü inner class static değil ise inner classın outer classından bir obje oluşturulmadığı sürece inner classın içindeki herhangi bir şey var olmayacağından dolayı static keywordunun bir anlamı kalmıyor anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olamaz çünkü tek seferliktirler. inner class, outer class içinde başka bir classtır. anonymous class ise bir classın veya interface'in kullanılarsk tek bir seferlik bir obje üretilmesidir. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? private olmayanlar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? (new outer()).new inner() olması gerekiyor. output: value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? hata yok gibi. output: count: 5 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.*; [CODE]public class lab2q1 {[/CODE] [CODE]public static boolean check(string str){[/CODE] [CODE]int cnt = 0;[/CODE] [CODE]for(int i = 0;[/CODE]i < str.length();i++){ if(str.charat(i) == ')'){ [CODE]if(cnt == 0) return false;[/CODE] cnt--; } [CODE]else{[/CODE] cnt++; } } [CODE]if(cnt == 0) return true;[/CODE] [CODE]return false;[/CODE] } [CODE]public static void parantezbasiterative(int n){[/CODE] int val = (int)math.pow(2, 2*n); [CODE]for(int i = 0;[/CODE]i < val;i++){ [CODE]string str = """";[/CODE] [CODE]for(int j = 0;[/CODE]j < 2*n;j++){ if(((int)math.pow(2, j) & i) == 0) str = str + '('; [CODE]else str = str + ')';[/CODE] } if(check(str)) system.out.pr[CODE]intln(str);[/CODE] } } [CODE]public static void parantezbasrecursive(int n, string str){[/CODE] if(str.length() == 2*n){ if(check(str)) system.out.pr[CODE]intln(str);[/CODE] [CODE]return;[/CODE] } parantezbasrecursive(n, str + '('); parantezbasrecursive(n, str + ')'); } [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); int n = sc.next[CODE]int();[/CODE] parantezbasrecursive(n, """"); sc.close(); } } import java.util.*; [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(){[/CODE] this(""willy"", ""emperor"", 1, 5.0); } [CODE]public penguin(string name, string species, int age, double weight){[/CODE] setname(name); setspecies(species); setage(age); setweight(weight); } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void setspecies(string species){[/CODE] this.species = species; } [CODE]public void setage(int age){[/CODE] this.age = age; } [CODE]public void setweight(double weight){[/CODE] this.weight = weight; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies(){[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void hunt(){[/CODE] age++; } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name: "" + name + ""\tspecies:"" + species + ""\tage:"" + age + ""years "" + ""\t weight:"" + weight + "" kg"");[/CODE] } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature){[/CODE] setlocation(location); settemperature(temperature); penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public void settemperature(double temperature){[/CODE] this.temperature = temperature; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.add(penguin); } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temperature: "" + temperature + ""°c"");[/CODE] system.out.pr[CODE]intln(""penguins living in here:"");[/CODE] [CODE]for(penguin penguin:penguins){[/CODE] penguin.pr[CODE]intpenguin();[/CODE] } } } [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] sc.close(); } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); machine.pr[CODE]intcoffeecounter();[/CODE] sc.close(); } } [CODE]public interface coffeeaddon{[/CODE] double getcost(); [CODE]string getname();[/CODE] } [CODE]class milk implements coffeeaddon{[/CODE] final double cost = 5; final [CODE]string name = ""milk"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } [CODE]class chocolate implements coffeeaddon{[/CODE] final double cost = 7; final [CODE]string name = ""chocolate"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } [CODE]class vanillasyrup implements coffeeaddon{[/CODE] final double cost = 6; final [CODE]string name = ""vanillasyrup"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } [CODE]class doubleshot implements coffeeaddon{[/CODE] final double cost = 10; final [CODE]string name = ""doubleshot"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } import java.util.*; [CODE]public abstract class basecoffee{[/CODE] protected arraylist<coffeeaddon> addons; basecoffee(){ addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon){[/CODE] addons.add(addon); }; [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string gettype();[/CODE] } [CODE]class espresso extends basecoffee{[/CODE] private [CODE]string type = ""espresso"";[/CODE] private boolean isheated = false; [CODE]public string gettype(){[/CODE] [CODE]if(isheated) return type + "" (sicak fincan)"";[/CODE] [CODE]else return type;[/CODE] } [CODE]public void heatcup(){[/CODE] isheated = true; } [CODE]public double calculateprice(){[/CODE] double price = 40; [CODE]for(coffeeaddon addon:addons){[/CODE] price += addon.getcost(); } [CODE]return price;[/CODE] } } [CODE]class latte extends basecoffee{[/CODE] private [CODE]string type = ""latte"";[/CODE] [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public double calculateprice(){[/CODE] double price = 50; [CODE]for(coffeeaddon addon:addons){[/CODE] price += addon.getcost(); } [CODE]return price;[/CODE] } } [CODE]class americano extends basecoffee{[/CODE] private [CODE]string type = ""americano"";[/CODE] [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public double calculateprice(){[/CODE] double price = 45; [CODE]for(coffeeaddon addon:addons){[/CODE] price += addon.getcost(); } [CODE]return price;[/CODE] } } [CODE]public class coffeemachine{[/CODE] [CODE]static int counter = 0;[/CODE] private boolean isaddoncompatible(basecoffee coffee, coffeeaddon addon){ [CODE]if(coffee instanceof espresso){[/CODE] return addon.getname().equals(""doubleshot"") || addon.getname().equals(""chocolate""); } [CODE]if(coffee instanceof latte){[/CODE] return addon.getname().equals(""milk"") || addon.getname().equals(""vanillasyrup"") || addon.getname().equals(""chocolate""); } [CODE]if(coffee instanceof americano){[/CODE] return addon.getname().equals(""milk"") || addon.getname().equals(""vanillasyrup""); } [CODE]return false;[/CODE] } [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon){[/CODE] [CODE]if(!isaddoncompatible(coffee, addon)){[/CODE] system.out.println(""[uyari]"" + coffee.gettype() + "" tipi kahveye "" + addon.getname() + "" eklenemez\n""); [CODE]return;[/CODE] } coffee.addaddon(addon); } [CODE]public void makecoffee(basecoffee coffee){[/CODE] counter = counter + 1; system.out.print(""siparis: "" + coffee.gettype()); for(coffeeaddon addon:coffee.addons){ system.out.print("" + "" + addon.getname()); } system.out.println(""\ntoplam fiyat: "" + coffee.calculateprice() + ""\n""); } [CODE]public void heatespressocup(basecoffee coffee){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] ((espresso)coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincani isitildi \n"");[/CODE] [CODE]return;[/CODE] } system.out.pr[CODE]intln(""[uyari] yalnizca espresso kahve fincanlari isitilabilir"");[/CODE] } [CODE]public void printcoffeecounter(){[/CODE] system.out.pr[CODE]intln(""tum kahve makineleri tarafindan toplam "" + counter + "" kahve uretildi"");[/CODE] } } 1"
2051651,3,"2051651 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); } } [CODE]class sayac{[/CODE] [CODE]string str;[/CODE] sayac([CODE]string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] [CODE]return stringcounter(str, 0);[/CODE] } private [CODE]int stringcounter(string str, int i){[/CODE] if(i >= str.length()){ [CODE]return 0;[/CODE] } else if(str.charat(i) == '1'){ [CODE]return 1 + stringcounter(str, i + 1);[/CODE] } [CODE]else return stringcounter(str, i + 1);[/CODE] } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]3, 1, 7, 5, 6, 0, 4}; cocktailsort(arr); } [CODE]public static void cocktailsort(int[] arr){[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length; i++){ sort[CODE]forward(arr, 0);[/CODE] sortbackward(arr, arr.length-1); } [CODE]for(int i = 0;[/CODE] i < arr.length; i++){ system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static int[] swap(int i, int j, int[] arr){[/CODE] [CODE]int temp = 0;[/CODE] temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; [CODE]return arr;[/CODE] } [CODE]public static int[] sortforward(int[] arr, int i){[/CODE] if(i >= arr.length-1){ [CODE]return arr;[/CODE] } [CODE]else if(arr[i] > arr[i+1]){[/CODE] swap(i, i+1, arr); [CODE]return sortforward(arr, i + 1);[/CODE] } [CODE]else{[/CODE] [CODE]return sortforward(arr, i + 1);[/CODE] } } [CODE]public static int[] sortbackward(int[] arr, int i){[/CODE] [CODE]if(i <= 0){[/CODE] [CODE]return arr;[/CODE] } [CODE]else if(arr[i] < arr[i-1]){[/CODE] swap(i, i+1, arr); [CODE]return sortforward(arr, i + 1);[/CODE] } [CODE]else{[/CODE] [CODE]return sortforward(arr, i + 1);[/CODE] } } } [CODE]class lab1q1{[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i <= 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i % 2 == 0){[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else{[/CODE] [CODE]return 1 + collatz(3*i + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar{[/CODE] calmastratejisi calmastratejisi; [CODE]void setstrateji(calmastratejisi s){[/CODE] this.calmastratejisi = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] calmastratejisi.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args){[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki.gettype().equals(""metal"")){ metalsarki m = (metalsarki) sarki; m.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string sanatçi, string isim){[/CODE] this.isim = isim; this.sanatçi = sanatçi; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatçi + "" - "" + isim + ""(hafif ve sakin)"");[/CODE] } @override [CODE]string gettype(){[/CODE] [CODE]return ""klasik"";[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim = isim; this.sanatçi = sanatci; this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatçi + "" - "" + isim + "" "" + metalozellik);[/CODE] } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatçi + "" - "" + isim + "" - metal özelik: "" + metalozellik);[/CODE] } @override [CODE]string gettype(){[/CODE] [CODE]return ""metal"";[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] rocksarki([CODE]string sanatçi, string isim){[/CODE] this.isim = isim; this.sanatçi = sanatçi; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatçi + "" - "" + isim + ""(huzurlu ve nostaljik)"");[/CODE] } @override [CODE]string gettype(){[/CODE] [CODE]return ""rock"";[/CODE] } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(sarkilistesi.size()-i-1).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatçi;[/CODE] abstract [CODE]void oynat();[/CODE] abstract [CODE]string gettype();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]int volume = 50;[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki.gettype().equals(""rock"")){ if(volume < 100) system.out.println("" (volume is increased.)""); volume = 100; } [CODE]else{[/CODE] [CODE]if(volume == 100){[/CODE] volume = 50; system.out.println("" (volume is decreased.)""); } } sarki.oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. methodun kendi içinde kendisini çağırmasıdır. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case recursive methodun her çağrıldığında kontrol ettigi bir şarttır. i̇stenilen sonuca ulaşıp ulaşılmadıgını kontrol eder ve ulaşılmışsa çıkar bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? method her çağrıldığında artan bir sayaç koyardım, her seferinde stringin son harfini alıp return'e eklerdim. sayaç string uzunluğuna eşit oldugunda çıkardım. recursive bir metotta base case olmazsa ne olur? metod surekli kendini çağırarak belleği doldurur. stack overflow recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. çağırılan metod diğer metotların ust katmanına ksydedilir ve bu şekilde ilerler fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. fibonacci dizisinde sadece son 2 sayıyı kullanırız, recursive metot surekli tamamını tekrar eder tail recursion nedir, kısaca açıklayınız. bilmiyorum java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? ? hangi tür metotlarda [CODE]static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? ? dinamik bağlamada jvm'nin görevi nedir? ? java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? ? java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? ? java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. ? [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark, meow. dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? yanlış yok. dinamik binding. output: child display /n child special java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class olarak kullanılabilen fakat concrete classın aksine tip obje oluşturulamayan ve içinde implement edilmemiş metodlar bulunan bir tur class dır. constructorları olabiliri. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. -i̇mplement edilmemişlerdir -tip olarak kullanılabilir -uzerinden obje oluşturalamaz -altındaki classlarda olmasını istedigimiz ama nasıl yapılacağı serbest bıraktıgımız durumlarda kullanılır. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? i̇nterface metodlarının tamamı abstract'dır, bir class birden fazla interface implement edebilir ama birden fazla abstract class extend edemez. i̇kisi de tip olarak kullanılabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface içinde metod olmayan interface'dir. functional interface içinde tek bir metod olan interfacelerdir bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet, evet. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal abstract class olduğu için uzerinden obje oluşurulamaz. animal a = [CODE]new dog(""buddy"");[/CODE] olmalıydı. output : animal: buddy, woof. [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? default metod override edilemez. duck classında move metodu olmamalıydı. output: flying. yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 3 çeşit hata vardır: compile error, örnek: syntax hataları. runtine exception örnek: 0 a bölme. logical error: algoritmada yapılan hatalar exception handlingin amacı nedir? program akışında beklenmedik durumlarla karşılaşıldıgında bunları düzeltmek ya da bunlara özel işlemler yapmak exception handlingde finally bloğunun amacı nedir? ondan önceki bloklardan hangisine girdiginden bağımsız olarak her zaman çalışmasını istedigimiz kod için vardır. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? handle edilmiş exceptionlar checked, handle edilmemiş olanlar unchecked java'da kendi exceptionunuzu nasıl tanımlarsınız? exception classını inherit eden yeni bir class yazarak java'da error ve exception arasındaki fark nedir, açıklayınız error kod yaxarkwn veya kodun mantıgında yapılan bir hatadır. exception program akışında karşılaşılan beklenmeyen durumlardır java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? exceptiona özel işlemleri yapmak ama yine de programı durdurup kullanıcıya bildirmek için 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? bilmiyorum static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez. hatanın kaynağı e referansının hem exception hem de arrayindexoutofboundsexception objesi icin kullanılması. duzeltmek için e'lerden birinin ismi değiştirilebilir [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught. finally oops done 41 kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]string type;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife, string type){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.type = type; } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args){[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln();[/CODE] system.out.println(""tüm fabrikalar tarafından toplam "" + robotfactory.totalrobots + "" robot üretildi.""); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife, ""security robot"");[/CODE] this.isarmed = isarmed; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(modelname + "" scanning for threats... armed "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(modelname + "" not enough battery to scan threats.""); } } [CODE]public void togglearmedmode(){[/CODE] [CODE]if(isarmed == true){[/CODE] isarmed = false; } [CODE]else{[/CODE] isarmed = true; } } [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife, ""cleaning robot"");[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(modelname + "" cleaning in progress... "" + ""cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(modelname + "" not enough battery to clean"");[/CODE] } } [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int x){[/CODE] cleaningpower += x; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private arraylist<securityrobot> securityrobots = [CODE]new arraylist<>();[/CODE] private arraylist<cleaningrobot> cleaningrobots = [CODE]new arraylist<>();[/CODE] [CODE]static int totalrobots;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] cleaningrobots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobots += 1; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] securityrobots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobots += 1; } [CODE]public void performalltasks(){[/CODE] [CODE]for (abstractrobot abstractrobot : robots) {[/CODE] abstractrobot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (cleaningrobot c : cleaningrobots) {[/CODE] system.out.println(""cleaning robot - model: "" + c.getmodelname() + "", battery: "" + c.getbatterylife() + "", cleaning power: "" + c.getcleaningpower()); } [CODE]for (securityrobot s : securityrobots) {[/CODE] system.out.println(""security robot - model: "" + s.getmodelname() + "", battery: "" + s.getbatterylife() + "", armed: "" + s.getisarmed()); } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for (cleaningrobot c : cleaningrobots){[/CODE] c.setcleaningpower(miktar); system.out.println(""cleaning robot - "" + c.getmodelname() + "" now has cleaning power "" + c.getcleaningpower()); } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for (securityrobot s : securityrobots) {[/CODE] s.togglearmedmode(); if(s.getisarmed() == true){ system.out.println(""security robot - "" + s.getmodelname() + "" is now armed.""); } [CODE]else{[/CODE] system.out.println(""security robot - "" + s.getmodelname() + "" is now unarmed.""); } } } } 3"
8964453,4,"8964453 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji =s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki){[/CODE] metalsarki metal = (metalsarki) sarki; metal.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim,string sanatci ) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim,string sanatci ) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" +sanatci + "" - "" + isim + "" (huzurlu ve nostaljik"");[/CODE] } } import java.util.*; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilistcpy = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(sarkilistcpy); [CODE]for(sarki x : sarkilistcpy) {[/CODE] x.oynat(); } } } import java.util.*; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(sarki x : sarkilistesi) {[/CODE] x.oynat(); } } } [CODE]public abstract class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]void oynat(){[/CODE]} } import java.util.*; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] private boolean sesseviyesi = false; //false:normal true:yuksek [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(sarki x : sarkilistesi) {[/CODE] [CODE]if(x instanceof rocksarki) {[/CODE] [CODE]if(sesseviyesi == false) {[/CODE] sesseviyesi = true; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } } [CODE]else {[/CODE] [CODE]if(sesseviyesi == true) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesseviyesi =false; } } x.oynat(); } } } import java.util.*; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. yineleyen methodlardir. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case dongunun duracagi yeri anladigi yerdir. sonsuz donguyu engeller bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? string uzunlugunun 0 veya 1 olmasi recursive bir metotta base case olmazsa ne olur? sonsuz dongu recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. her bir cagri stack frame olusturur, bunlar ust uste yazilmaya devam eder her iterasyonda fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. her bir iterasyonda alt sayilar tekrar tekrar hesaplanir anlamsizdir tail recursion nedir, kısaca açıklayınız. ciktinin tekrar girise girdigi base case e kadar ne olusuyorsa devam eden iterasyon method turudur abstraction kavramını açıklayınız. nesnenin istedigimiz ozelliklerini alip gerekmeyenleri veya gizlenmek istenenleri kullaniciya gostermemek ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? fox is a animal ifadesi dogrudur burdan fox classinin aninal classinin child classi oldugunu soyleyebiliriz bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya c java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? her classin parent classi object classidir, duzgun calisabilmesi icin object classinin constructoru da cagirilmalidir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayir interface birden fazla extend edilebilir metot overriding ve overloading kavramlarını açıklayınız. override icin methodun signature i aynidir, ust [CODE]classdan alt classa override edilebilir, overload ise ayni isimde bir methodu farkli parametrelerle yani farkli signature ile yeniden yazmak class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? animal bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? generic circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? kodun ne zaman derlenecegini anlatir, early binding ile static binding cesitleridir hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? private metodlar, static methodlar, final methodlar early binding classa bagli nesne olusturulmadan calisirlar kalani static calisirlar dinamik bağlamada jvm'nin görevi nedir? polimorfizm kullanilan methodlarda overridelari takip edip istenilen methoda gitmesi. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? per[CODE]formans kaybi ve guven acikligi olusturur ongorulebilirligi azaltir java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? tip kontrolu yapmak icindir, implicit yaparsak class cast exception hatalari cikabilir java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. override edecegemiz methodu daha az gorunur yapamayiz fakat ust sin[CODE]ifa giderken access modifieri genisletilebilinir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov dynamic binding gorulmektedir [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() da hata vardir parent classda bu method yoktur, dynamic binding gorulmektedir yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 3 tip hata vardir, 1) syntax soz dizimi hatasi 2) logic hatasi mantiksal yaptigimiz hata 3) run time error program compile ettikden sonra cesitli sebeplerle 1/0 gibi sebeplerle ortaya cikar exception handlingin amacı nedir? programin calisma sirasinda cikabilecek hatalari ongorerek crashi engellemek ve olusabilecek hatalari onceden ayarlayarak cozmek. exception handlingde finally bloğunun amacı nedir? exception yakalandiktan sonra try catch icinde ne yapildigindan bagimsiz her turlu calisacak bir methoddur. yani her kosulda calismasini istedigimiz seyleri buraya yazariz. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked exceptions compile time sirasinda ortaya cikar ve crash yememek icin direk ele alinmalidir. unchecked exceptions run time sirasinda dizilerde vs ortaya cikar yani girilen inputlara gore cikabilir veya cikmayabilir. bunu da onceden ongorup halledilmelidir. java'da kendi exceptionunuzu nasıl tanımlarsınız? kendi exceptionumuzu sinifini yaratarak ve exception classindan miras alarak exceptionumuzu olustururuz. main metodu icinde veya farkli bir yerde try catch ile yakalariz ve cozeriz. java'da error ve exception arasındaki fark nedir, açıklayınız error jvm ile alakalidir, exception kodun icinde yaptigimiz seylerle alakalidir. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? hata bilgisini alt katmanlarda kaydetmek ve ust katmanlara iletmek, kullanici dostlugunu arttirmak. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? alt siniftan daha genis bir exception firlatilamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? kod derlenmez, ozel exception once genel exception sonra kodda yer almalidir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee{[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""latte"";[/CODE] } @override [CODE]public double calculateprice() {[/CODE] double totalprice = 0; totalprice +=50; [CODE]for(coffeeaddon x : addons) {[/CODE] totalprice += x.getcost(); } [CODE]return totalprice;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] coffeemachine.totalcoffeemade(); } } import java.util.arraylist; [CODE]public class espresso extends basecoffee{[/CODE] private boolean isheated = false; [CODE]public string getname() {[/CODE] [CODE]if(isheated) {[/CODE] [CODE]return ""espresso (sicak fincan)"";[/CODE] } [CODE]else {[/CODE] [CODE]return ""espresso"";[/CODE] } } @override [CODE]public double calculateprice() {[/CODE] double totalprice = 0; totalprice +=40; [CODE]for(coffeeaddon x : addons) {[/CODE] totalprice += x.getcost(); } [CODE]return totalprice;[/CODE] } [CODE]public void heatcup() {[/CODE] isheated = true; } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } [CODE]public string getname() {[/CODE][CODE]return ""vanilla syrup"";[/CODE]} } [CODE]public abstract interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] [CODE]public abstract string getname();[/CODE] protected arraylist<coffeeaddon> addons; basecoffee() { addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon x){[/CODE] addons.add(x); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee{[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""americano"";[/CODE] } [CODE]public double calculateprice() {[/CODE] double totalprice = 0; totalprice +=45; [CODE]for(coffeeaddon x : addons) {[/CODE] totalprice += x.getcost(); } [CODE]return totalprice;[/CODE] } } [CODE]public class coffeemachine {[/CODE] [CODE]static int toplamkahveuretimi;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if(coffee instanceof espresso) {[/CODE] [CODE]if(addon instanceof doubleshot || addon instanceof chocolate) {[/CODE] coffee.addaddon(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenmez""); } } [CODE]else if(coffee instanceof latte) {[/CODE] [CODE]if(addon instanceof milk || addon instanceof chocolate || addon instanceof vanillasyrup) {[/CODE] coffee.addaddon(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenmez""); } } [CODE]else if(coffee instanceof americano) {[/CODE] [CODE]if(addon instanceof milk || addon instanceof vanillasyrup) {[/CODE] coffee.addaddon(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenmez""); } } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] toplamkahveuretimi +=1; system.out.print(""siprais: "" + coffee.getname()); for(coffeeaddon x : coffee.addons) { system.out.pr[CODE]int("" + "");[/CODE] system.out.print(x.getname()); } system.out.pr[CODE]intln();[/CODE] system.out.println(""toplam fiyat:"" + (int) coffee.calculateprice() + ""tl""); system.out.pr[CODE]intln();[/CODE] } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if(coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] ((espresso) coffee).heatcup(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static void totalcoffeemade() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar kahve makineleri toplam ""+ toplamkahveuretimi + "" kahve uretildi"");[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } 4"
2384475,1,"2384475 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int arr[] = {[/CODE] 5, 4, 1, 2 }; cocktailsort(arr, true); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr, boolean x) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; } } if (arr.length < 2) [CODE]return;[/CODE] { [CODE]if (x) {[/CODE] arr = bubble1(arr); x = false; } [CODE]else {[/CODE] arr = bubble2(arr); x = true; } cocktailsort(arr, x); } } [CODE]public static int[] bubble1(int[] arr) {[/CODE] int newarr[] = new int[arr.length - 1]; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]newarr[i] = arr[i];[/CODE] } [CODE]for (int i = 0;[/CODE] i < newarr.length - 1; i++) { [CODE]if (newarr[i] > newarr[i + 1]) {[/CODE] [CODE]int temp = newarr[i];[/CODE] [CODE]newarr[i] = newarr[i + 1];[/CODE] [CODE]newarr[i + 1] = temp;[/CODE] } } [CODE]return newarr;[/CODE] } [CODE]public static int[] bubble2(int[] arr) {[/CODE] int newarr[] = new int[arr.length - 1]; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]newarr[i] = arr[i];[/CODE] } for (int i = newarr.length - 1; i > 0; i--) { [CODE]if (newarr[i] < newarr[i - 1]) {[/CODE] [CODE]int temp = newarr[i];[/CODE] [CODE]newarr[i] = newarr[i - 1];[/CODE] [CODE]newarr[i - 1] = temp;[/CODE] } } [CODE]return newarr;[/CODE] } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(2));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i == 1) return count;[/CODE] [CODE]if (i % 2 == 0) count = 1 + collatz(i / 2);[/CODE] [CODE]else if (i % 2 == 1) count = 1 + collatz(i * 3 + 1);[/CODE] [CODE]return count;[/CODE] } } [CODE]class sayac {[/CODE] [CODE]public string x;[/CODE] [CODE]public sayac(string x) {[/CODE] this.x = x; } [CODE]public int say() {[/CODE] [CODE]int res = say2(x);[/CODE] [CODE]return res;[/CODE] } [CODE]public int say2(string x) {[/CODE] [CODE]int res = 0;[/CODE] if (x.length() < 1) [CODE]return res;[/CODE] if (x.charat(0) != '1') { res = res + say2(x.sub[CODE]string(1));[/CODE] } else if (x.charat(0) == '1') res = res + 1 + say2(x.sub[CODE]string(1));[/CODE] [CODE]return res;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(sarki.sanatci + ""-"" + sarki.isim + "" [ozellik: "" + met.metalozellik + ""]""); } // bu kismi cikti ornegini saglayacak sekilde doldurun } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] sarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]string rocko;[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); this.rocko = ""huzurlu ve nostaljik""; } @override [CODE]void oynat() {[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasiko;[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); this.klasiko = ""haf[CODE]if ve sakin"";[/CODE] } @override [CODE]void oynat() {[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] // karısık calma yapamadım :( tersten caldırdım. sarkilistesi = sarkilistesi.reversed(); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.pr[CODE]intln(""[bilgi] ses duzeyi : yuksek"");[/CODE] system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); system.out.pr[CODE]intln(""[bilgi] ses duzeyi : normal"");[/CODE] } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji instanceof siralicalma) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else if (strateji instanceof karisikcalma) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else if (strateji instanceof rockcuozelcalma) {[/CODE] strateji.cal(sarkilistesi); } } } abstraction kavramını açıklayınız. i̇htiyacımız olan şeylerin dışındakileri yok saymaktır. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür cünkü hourlye is a e ama tam tersi degil cunku e is not a hourlye. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? package access daha yakındır. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? üst classların instance variablelarını parametre olarak gecirmek icin. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır,mümkün değil. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? verilen objenin bizim istedigimiz türden bir obje olup olmadigini kontrol eder. b objesi a objesiyle ayni class a aittir. metot overriding ve overloading kavramlarını açıklayınız. overriding signature ı aynı olan metotlar icin kullanılır. overlode ismi aynı ama parametreleri farkli metotlar icin kullanilir. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 10 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? signatureları farklı olan methodlarda static binding aynı olanlarda dynamic binding kullanılır. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? bu metotlar değiştirilemez ve override edilemez. bu yüzden static bindingle bağlanır. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloadingde static binding overridingde dynamic binding gerçekleşir. dinamik bağlamada jvm'nin görevi nedir? run time sırasında karar verir. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? ana classın referans variable ı alt classın objesini refer ettiği için. downcast implicit yapılamaz. typecating ile yapılır. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? run time sırasında vakit kaybederdik. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dinamik bağlama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇çinde abstract method(implement edilmemis) bulunduran ya da bulundarmayan classlardır. abstract classlarda constructur olabilir.interfacde olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? bir abstract classın methodu başka bir abstract classda implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. daha sonra kesin olarak implement edileceğini bildiğimiz bir methodu tanımlamamızı sağlar. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler class değil bir tiptir. abstract classlardan obje üretilmez. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interfacelerin içi boştur. functionallarda implement edilmeyi bekleyen methodlar vardır. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? classlar birden fazla interface implement edebilir. i̇nterface başka bir interfacei extend edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract classtan obje üretilmez. shape c = [CODE]new circle();[/CODE] olmalı drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? edilemez çünkü hangisini çalıştiracagıni bilemez. super olmamalıydı. new b().show; yapabiliriz. output: b java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir. io ve runtime exception java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? trowable olmak zorundadır ve override edildiğinde kendisi ve subclassları throws edilebilir. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? her koşulda kod bloğunu çalıştırır. exception atılıp atılmaması önemli değildir. java'da kendi exceptionunuzu nasıl tanımlarsınız? i̇stediğimiz türdeki exception classını extend ederiz ve şu koşul gerçekleşirse exception fırlat deriz. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? . [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done -1 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? normalde specific olandan olmayana doğru catch ederiz ama böylede çalışır trying m1 caught2 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] [CODE]int i = 0;[/CODE] factory.addrobot(r1, i++); factory.addrobot(r2, i++); factory.addrobot(r3, i++); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private robot[] robots = [CODE]new robot[100];[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public void addrobot(robot robot, int index) {[/CODE] robots[index] = robot; } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { robots[i].charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + getname1() + "" location: "" + getlocation1());[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { if (robots[i] != null) system.out.println("" robot name: "" + robots[i].getname() + "" robot type: "" + robots[i].gettype() + "" battery level: "" + robots[i].getbattery() + "" is operational: "" + robots[i].getopera()); } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { int x = robots[i].getbattery() - 15; system.out.pr[CODE]intln(x);[/CODE] } } [CODE]public string getname1() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation1() {[/CODE] [CODE]return location;[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational;// bataryası varsa true robot() { this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel, boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getopera() {[/CODE] [CODE]return isoperational;[/CODE] } } [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string x = ""a1b2"";[/CODE] [CODE]string[] ar = method(x);[/CODE] [CODE]for (int i = 0;[/CODE] i < ar.length; i++) { system.out.pr[CODE]intln(ar[i]);[/CODE] } } [CODE]public static string[] method(string x) {[/CODE] x = x.touppercase(); string[] arr = new string[2 ^ (x.length() / 2)]; [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { arr[i] = x.substring(0, i) + x.substring(i).tolowercase(); } [CODE]return arr;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package robot;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package robot;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] abstractrobot([CODE]string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] final [CODE]int temp = batterylife;[/CODE] this.batteryl[CODE]ife = temp;[/CODE] system.out.pr[CODE]intln(batterylife);[/CODE] } } [CODE]package robot;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.robotnumber(); // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]package robot;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]package robot;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power:"" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower = cleaningpower + 10; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } [CODE]package robot;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int number;[/CODE] robotfactory() { robots = [CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot x = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] number++; robots.add(x); } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot x = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] number++; robots.add(x); } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] r.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof cleaningrobot) {[/CODE] cleaningrobot x = (cleaningrobot) r; system.out.println(""- model: "" + x.modelname + "", battery: "" + x.batterylife + "", cleaning power: "" + x.getcleaningpower()); } [CODE]else if (r instanceof securityrobot) {[/CODE] securityrobot x = (securityrobot) r; system.out.println( ""- model: "" + x.modelname + "", battery: "" + x.batterylife + "", armed: "" + x.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof cleaningrobot) {[/CODE] cleaningrobot x = (cleaningrobot) r; x.boostcleaningpower(); system.out .println(""cleaningrobot - "" + x.modelname + "" now has cleaning power: "" + x.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof securityrobot) {[/CODE] securityrobot x = (securityrobot) r; x.togglearmedmode(); system.out.print(""securityrobot - "" + x.modelname + "" is now ""); if (x.getisarmed()) { system.out.pr[CODE]intln(""armed"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""unarmed"");[/CODE] } } } } [CODE]public static void robotnumber() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + number + "" robot uretildi"");[/CODE] } } 1"
6914659,1,"6914659 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class cocktailshaker{[/CODE] [CODE]public static void cocktailsort(int[] array2){[/CODE] csrec(array2, 0, array2.length - 1); } [CODE]public static void csrec(int[] array1, int ilk, int son){[/CODE] [CODE]if (ilk >= son) //base case return;[/CODE] boolean degistir = false; [CODE]for (int i=ilk ;[/CODE] i<son ; i++){//soldan sağa doğru kontrol ediyorum [CODE]if (array1[i] > array1[i+1]){[/CODE] //buradaki durum 5,4 durumu. bunu 4,5 yapmaya çalışıyorum yer_degistirme(array1, i, i+1); //soldaki ile sağdakinin yerini değiştirdim degistir = true; //değiştirme işleminin yapıldığını göstermek için } } [CODE]if (!degistir){[/CODE] //değiştirme işleminin yani yer_degistirme metodunun kullanılıp kullanılmadığını kontrol ediyorum /* eğer değiştirme işlemi yapılsaydı ""degistir"" değeri true olacaktı ve bu blok false olacağı için çalışmazdı değiştirme işlemi yapılmazsa ""degistir"" değeri false olarak kalacağı için blok true olur ve çalışır. */ [CODE]return;[/CODE] } degistir = false; [CODE]for (int i = son-1 ;[/CODE] i>ilk ; i--){//sağdan sola doğru kontrol ediyorum [CODE]if (array1[i-1] > array1[i]){[/CODE] yer_degistirme(array1, i-1, i);//sağdaki ile soldakinin yerini değiştirdim degistir = true; //değiştirme işleminin yapıldığını göstermek için } } csrec(array1, ilk+1, son-1);//arrayın ilk elemanı ile son elemanını attım } [CODE]public static void yer_degistirme(int[] arr, int a, int b){[/CODE] [CODE]int temp = arr[a];[/CODE] arr[a] = arr[b]; arr[b] = temp; } [CODE]public static void main(string[] args){[/CODE] [CODE]int[] array3 = {[/CODE]5, 4, 1, 2}; cocktailsort(array3); [CODE]for (int a: array3){[/CODE] system.out.pr[CODE]int(a + "" "");[/CODE] } } } [CODE]public class collatz{[/CODE] [CODE]public static int collatz(int i){[/CODE] [CODE]int sum = i;[/CODE] [CODE]if(i == 1) //base case return 0;[/CODE] [CODE]if(i % 2 == 0){[/CODE] //ç[CODE]iftse ikiye böl sum /= 2;[/CODE] [CODE]return 1 + collatz(sum);[/CODE] } [CODE]else{[/CODE] //tekse 3 ile çarp 1 ekle sum = (sum*3)+1; [CODE]return 1 + collatz(sum);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } } [CODE]public class sayacwithhelpermethod {[/CODE] [CODE]string str;[/CODE] [CODE]public sayacwithhelpermethod(string str){[/CODE] this.str = str; } [CODE]public int helper(string str) {[/CODE] [CODE]int currentcount = 0;[/CODE] if(str.length() == 0) //base case [CODE]return 0;[/CODE] if(str.charat(0)=='1') return 1+helper(str.sub[CODE]string(1));[/CODE] return currentcount + helper(str.sub[CODE]string(1));[/CODE] } [CODE]public int say(){[/CODE] if(str.length() == 0) [CODE]return 0;[/CODE] if(str.charat(0)=='1'){ str = str.sub[CODE]string(1);[/CODE] [CODE]return 1 + say();[/CODE] } [CODE]else{[/CODE] str = str.sub[CODE]string(1);[/CODE] [CODE]return say();[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] sayacwithhelpermethod s1 = [CODE]new sayacwithhelpermethod(""10001"");[/CODE] sayacwithhelpermethod s2 = [CODE]new sayacwithhelpermethod(""1111"");[/CODE] sayacwithhelpermethod s3 = [CODE]new sayacwithhelpermethod(""11190002"");[/CODE] system.out.pr[CODE]intln(""sayac with helper method"");[/CODE] system.out.println(s1.say()); // 2 basacak. system.out.println(s2.say()); //4 system.out.println(s3.say()); //3 } } [CODE]public class sayac {[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] if(str.length() == 0)//base case [CODE]return 0;[/CODE] if(str.charat(0)=='1'){ //eleman 1 ise sayacı 1 artır str = str.sub[CODE]string(1);[/CODE] [CODE]return 1 + say();[/CODE] } [CODE]else{[/CODE] //eleman 1 dışında herhangi bir rakam ise sayacın degerini degistirme str = str.sub[CODE]string(1);[/CODE] [CODE]return say();[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] sayac s3 = [CODE]new sayac(""11190002"");[/CODE] system.out.println(s1.say()); // 2 basacak. system.out.println(s2.say()); //4 system.out.println(s3.say()); //3 } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar{[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s){[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] [CODE]if (strateji != null){[/CODE] //strateji objesi bos degilse strateji.cal(sarkilistesi); } } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki: sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] super(isim, sanatci); } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + getsanatci() + "" - "" + getisim() + "" (hafif ve sakin)"");[/CODE] } } import java.util.list; [CODE]public class metalsarki extends sarki implements calmastratejisi{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } [CODE]public string getmetalozellik(){[/CODE] [CODE]return metalozellik;[/CODE] } [CODE]public void setmetalozellik(string metalozellik){[/CODE] this.metalozellik = metalozellik; } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + getsanatci() + "" - "" + getisim() + "" ("" + getmetalozellik() + "")"");[/CODE] } [CODE]public void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(getsanatci() + "" - "" + getisim() + "" [ozellik: "" + getmetalozellik() + ""]"");[/CODE] } @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] // todo auto-generated method stub throw [CODE]new unsupportedoperationexception(""unimplemented method 'cal'"");[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] super(isim,sanatci); } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + getsanatci() + "" - "" + getisim() + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] int n = sarkilistesi.size(); [CODE]for (int i=n-1;[/CODE] i>0; i--){ int rnd = (int)(math.random()*(i+1)); //indeksi rastgele seçiyor sarki temp = sarkilistesi.get(i); sarkilistesi.set(i, sarkilistesi.get(rnd)); //random gelen elemani koydum sarkilistesi.set(rnd, temp); } [CODE]for (sarki sarki: sarkilistesi){[/CODE] //sarkilistesinin yeni hali sarki.oynat(); } } } import java.util.list; [CODE]class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for (sarki sarki: sarkilistesi){[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki{[/CODE] private [CODE]string isim;[/CODE] //sarki adi private [CODE]string sanatci;[/CODE] //sanatci adi [CODE]public sarki(string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public string getisim(){[/CODE] [CODE]return isim;[/CODE] } [CODE]public void setisim(string isim){[/CODE] this.isim = isim; } [CODE]public string getsanatci(){[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setsanatci(string sanatci){[/CODE] this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] //soyut metod oldugu icin govdesi yok. } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] boolean sesyuksekmi = false; [CODE]for (int i=0;[/CODE] i<sarkilistesi.size(); i++){ sarki sarki = sarkilistesi.get(i); [CODE]if (sarki instanceof rocksarki && !sesyuksekmi){[/CODE] //eger sarki objesi rocksarki objesi ise ve ses yuksekse system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sesyuksekmi = true; //ses artık yuksek } sarki.oynat(); //sanatciyi, sarki ismini ve sarki ozelliklerini bastirdi if (sesyuksekmi && (i == sarkilistesi.size()-1 || !(sarkilistesi.get(i+1) instanceof rocksarki))){ //ses yuksekligi dusukse ve sarkilistesindeki elemanlar rocksarki objesi degilse veya index sondaysa system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesyuksekmi = false; } } } } import java.util.list; [CODE]public interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun kendi kendisini çağırmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case: temel olan kısımdır. burasi recursive kolun kilitlendiği yerdir. call case: burasi ise recursive kismin devamli olarak büyüyüp kuculerek kendisini çağırmaya devam ettigi yerdir. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stack denilen bir yapıda bu call'ları tutuyor, son giren veri ilk çıkıyor. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif yöntem yani for veya while döngüsü daha hızlıdır ve bellekte daha az yer kaplar, fakat bu verilen metodu recursive yazmak yazılımcı acisindan daha kolaydir ve kod daha clean gozukur. bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? public int length(string s) {[/CODE] if(s.length() == 1) //base case [CODE]return 1;[/CODE] calling case: else return length(s.sub[CODE]string(1))+1;[/CODE] stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack: recursive metotlarda metod kendisini her çağırdığında gelecek veriler burada toplanir, son giren veri ilk cikar. stackoverflow ise cok fazla veri geldiğinde olusur, stack taşar. tail recursion nedir, kısaca açıklayınız. metodun sadece kendisini çağırmasıdır yani yaninda toplama veya carpma gibi bir işlem bulunmaz abstraction kavramını açıklayınız. soyutlama anlamina gelir. java dilinde classlar objeler encapsulation ve polymorphism abstarction kavramina örnektir. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mumkundur. çünkü hourlyemployee employee sınırının alt classıdır. fakat tersi mümkün değildir. çünkü her hourlyemployee bir employee'dir, fakat her employee hourlyemployee değildir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? default daha yakindir, çünkü protected ile alt sinif oldugu surece farkli paketlerden erisim saglanir ama default'tan saglanmaz. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? alt sinif oldugu icin. ust sinifin ozelliklerini de icermesi gerektiğinden daima alt sinifin constructorının ilk satirinda ust sinifi temsil eden super satırı olmak zorundadır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? edemez. bir class her zaman yalnizca tek 1 class'ı extend edebilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a objesi b classının bir objeyi mi diye bakar. metot overriding ve overloading kavramlarını açıklayınız. overriding: ust sinifta tanımlanmış bir metodun alt sınıflarda yeniden tanimlanmasidir, metodun imzasi ve return type'ı degismez. ust sinifta metod tanimlanirken final keywordü kullanilirsa o metod override edilemez. overloading: bir metodun ayni isimle ama farkli parametrelerle yeniden tanimlanmasidir, parametreler degisecegi icin imza degisebilir fakar return type degisemez. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? hata verir. çünkü görünürlüğü azaltamayız. fakat burada ust sın[CODE]ıfta x değişkeni protected olarak tanimlanirken alt sinifta private olarak tanımlayarak bu hatayı yapmış java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? metotlar ve variablelar siniflara özgü ise static, objelere ozgu ise dynamic java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? override edilemezler yani degistirilemezler overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? early binding, çünkü compiler hangi metodu calistiracagina karar verir dinamik bağlamada jvm'nin görevi nedir? kodu javanin anlayacagi bytecode a cevirir java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü üst sınıf referanslı alt sınıf objesi oluşturulur, fakat down casting implicit yapilamaz java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? late binding yapılamazdi ve çoğu kod hatalı olurdu class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? [CODE]static class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir checked ve unchecked. checked exception örneği io, unchecked exception örneği runtime. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked exceptionlar için throws kullanılır. override edilen metodlarda throw yazılarak exception fırlatılır. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? ne olursa olsun çalıştır demektir. finally blogu exception atılmayan yerde çalışmaz. java'da kendi exceptionunuzu nasıl tanımlarsınız? class yazıp extends throwable ya da extends exception yazarak. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? checked exception olduğu için. veya birden fazla exception olabileceği için. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmesi. hata ise ilk catch blogunda exception yazıp altındaki catch blogunda exception classinin alt sınıfı olan ioexception yapmasıdır. hatayı düzeltmek için ioexception ı yukarı, exception ı aşağı almalıyız. hata duzeltildikten sonra: trying m1 caught2 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(){[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisoperational(boolean isoperational){[/CODE] //this.isoperational = isoperational; [CODE]if(batterylevel > 0) isoperational = true;[/CODE] [CODE]else isoperational = false;[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] batterylevel = 100; } [CODE]public void printrobot(){[/CODE] //robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class q1{[/CODE] [CODE]public static void combinations(string str, int index, string guncelstr){[/CODE] if(index == str.length()){ // stringin verilen ilk halini yazdıracak system.out.pr[CODE]intln(guncelstr);[/CODE] [CODE]return;[/CODE] } char c = str.charat(index); [CODE]int ascii_degeri = (int)c;[/CODE] [CODE]if ((ascii_degeri>=65 && ascii_degeri<=90) || (ascii_degeri>=97 && ascii_degeri<=122)) {[/CODE] //küçük harf mi veya büyük harf mi diye bakacak, rakam ise lower veya upper işlemi uygulamayacak. combinations(str, index+1, guncelstr+character.tolowercase(c)); combinations(str, index+1, guncelstr+character.touppercase(c)); } [CODE]else combinations(str, index+1, guncelstr+c);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] combinations(str, 0, """"); } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] name = ""factory1""; location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots(){[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots){[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (robot robot: robots) {[/CODE] robot.charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]int(""factory name: "" + name);[/CODE] system.out.pr[CODE]intln("" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] robot rbt = [CODE]new robot();[/CODE] if(rbt.getbatterylevel() >= 15) rbt.setbatterylevel(rbt.getbatterylevel()-15); else rbt.setbatterylevel(0); rbt.setisoperational(rbt.getbatterylevel() > 0); } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery{[/CODE] [CODE]int getbatterylife();[/CODE] //batarya omrunu doner [CODE]void recharge();[/CODE] //bataryayi yeniler } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] //robotun modeli protected [CODE]int batterylife;[/CODE] //robotun batarya omru [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] //abstract metod oldugu icin govdesiz [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge(){[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] //?? // burada robotfactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz robotfactory.toplamroboturetimi(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; //robotun silahli olup olmadigini gosterir securityrobot([CODE]string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } /* eğer batarya ömrü 10 ya da daha fazla ise ""[modelname] scanning for threats... armed: isarmed"" mesajını yazdırır (modelname ve isarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname] not enough battery to scan threats..."" mesajı gösterilmeli. */ [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] //silah modunu degistirir //securityrobot - guardbot x is now unarmed this.isarmed = !this.isarmed; if(isarmed == true) system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now armed"");[/CODE] else system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now unarmed"");[/CODE] } [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setisarmed(boolean isarmed){[/CODE] this.isarmed = isarmed; } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } /* eğer batarya ömrü 10 ya da daha fazla ise ""[modelname] cleaning in progress... cleaning power: cleaningpower"" mesajını yazdırır (modelname ve cleaningpower yerine değişken değerleri gösterilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname] not enough battery to clean..."" mesajı gösterilmeli. */ [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean...""); } } [CODE]public void boostcleaningpower(){[/CODE] //temizlik gucunu artirir this.cleaningpower += 10; system.out.pr[CODE]intln(""cleaningrobot - "" + modelname + "" now has cleaning power: "" + cleaningpower);[/CODE] } [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower){[/CODE] this.cleaningpower = cleaningpower; } } import java.util.arraylist; [CODE]class robotfactory{[/CODE] private arraylist<abstractrobot> robots; private [CODE]static int totalrobotproduction = 0;[/CODE] // main metodunda obje olusturmadan cagirmak icin [CODE]static public robotfactory(){[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobotproduction++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobotproduction++; } [CODE]public void performalltasks(){[/CODE] [CODE]for (abstractrobot robot: robots){[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (abstractrobot r: robots){[/CODE] [CODE]if (r instanceof cleaningrobot){[/CODE] cleaningrobot cr = (cleaningrobot)r; system.out.println(""cleaningrobot - model: "" + cr.getmodelname() + "", battery: "" + cr.getbatterylife() + "", cleaning power: "" + cr.getcleaningpower()); } [CODE]else if (r instanceof securityrobot){[/CODE] securityrobot sr = (securityrobot)r; system.out.println(""securityrobot - model: "" + sr.getmodelname() + "", battery: "" + sr.getbatterylife() + "", armed: "" + sr.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] //cleaning robot sin[CODE]ifindayken for (abstractrobot r: robots){[/CODE] [CODE]if (r instanceof cleaningrobot){[/CODE] ((cleaningrobot)r).boostcleaningpower(); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] //security robot sin[CODE]ifindayken for (abstractrobot r: robots){[/CODE] [CODE]if (r instanceof securityrobot){[/CODE] ((securityrobot)r).togglearmedmode(); } } } [CODE]public static void toplamroboturetimi(){[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalrobotproduction + "" robot uretildi"");[/CODE] } } 1"
5187413,1,"5187413 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab211q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 4, 1, 2 }; coctailsort(arr); } [CODE]public static void coctailsort(int[] arr) {[/CODE] int high = arr.length - 1; [CODE]int low = 0;[/CODE] [CODE]int[] temparr = arr;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { [CODE]for (int j = 0;[/CODE] j < arr.length - 1; j++) { [CODE]if (temparr[j] > temparr[j + 1]) {[/CODE] [CODE]int temp = temparr[j];[/CODE] temparr[j] = temparr[j + 1]; temparr[j + 1] = temp; } } } [CODE]int count = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] == temparr[i]) {[/CODE] count++; } } if (count == arr.length) { system.out.pr[CODE]intln(arr);[/CODE] } [CODE]else {[/CODE] listingup(arr, temparr, low, high); } } [CODE]public static int listingup(int[] arr, int[] temparr, int low, int high) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] == temparr[i]) {[/CODE] count++; } } if (count == arr.length) { coctailsort(arr); } [CODE]if (low == high) {[/CODE] listingdown(arr, temparr, 0, high); } [CODE]if (arr[low] > arr[low + 1]) {[/CODE] [CODE]int temp = arr[low];[/CODE] arr[low] = arr[low + 1]; arr[low + 1] = temp; } [CODE]return listingup(arr, temparr, low + 1, high);[/CODE] } [CODE]public static int listingdown(int[] arr, int[] temparr, int low, int high) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] == temparr[i]) {[/CODE] count++; } } if (count == arr.length) { coctailsort(arr); } [CODE]if (low == high) {[/CODE] listingup(arr, temparr, low, arr.length - 1); } [CODE]if (arr[high] < arr[high - 1]) {[/CODE] [CODE]int temp = arr[high];[/CODE] arr[high] = arr[high - 1]; arr[high - 1] = temp; } [CODE]return listingdown(arr, temparr, low, high - 1);[/CODE] } } [CODE]public class q3sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public q3sayac(string str) {[/CODE] this.str = str; } [CODE]public int say() {[/CODE] [CODE]int count = 0;[/CODE] if (str.length() <= 0) { [CODE]return count;[/CODE] } if (str.charat(0) - '0' == 1) { count++; str = str.sub[CODE]string(1);[/CODE] [CODE]return count + say();[/CODE] } str = str.sub[CODE]string(1);[/CODE] [CODE]return count + say();[/CODE] } } [CODE]public class lab211q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int number = 5;[/CODE] system.out.pr[CODE]intln(collatz(number));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return count;[/CODE] } [CODE]if (i % 2 == 0) {[/CODE] count++; [CODE]return count + collatz(i / 2);[/CODE] } count++; [CODE]return count + collatz(i * 3 + 1);[/CODE] } } [CODE]public class lab211q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] q3sayac s1 = [CODE]new q3sayac(""10001"");[/CODE] q3sayac s2 = [CODE]new q3sayac(""1111"");[/CODE] system.out.println(""s1 sonuç: "" + s1.say() + ""\ns2 sonuc: "" + s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]public muzikcalar() {[/CODE] } [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new klasiksarki(""prelude in c minor"", ""bach"");[/CODE] sarki s2 = [CODE]new rocksarki(""immigrant song"", ""led zeppelin"");[/CODE] sarki s3 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s4 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s5 = [CODE]new rocksarki(""welcome to the jungle"", ""guns & roses"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma: "");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma listesi: "");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri: "");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if (sarki instanceof metalsarki) system.out.println( sarki.sanatci + "" - "" + sarki.isim + ""[ozellik: "" + ((metalsarki) sarki).metalozellik + ""]""); } } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] } [CODE]void gostermetalozellikler() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] } } import java.util.list; import java.util.random; import java.util.random.randomgenerator; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] randomgenerator gen = [CODE]new random();[/CODE] sarki[] liste = new sarki[sarkilistesi.size()]; [CODE]int index = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { liste[index++] = sarkilistesi.get(i); } [CODE]for (int i = 0;[/CODE] i < liste.length; i++) { sarki temp = liste[i]; liste[i] = liste[gen.next[CODE]int(5)];[/CODE] liste[gen.next[CODE]int(5)] = temp;[/CODE] } [CODE]for (sarki sarki : liste) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""( "" + ((metalsarki) sarki).metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] system.out.println(""[klasi̇k] "" + sarki.sanatci + "" -"" + sarki.isim); } [CODE]else {[/CODE] system.out.println(""[rock] "" + sarki.sanatci + "" - "" + sarki.isim); } } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""( "" + ((metalsarki) sarki).metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] system.out.println(""[klasi̇k] "" + sarki.sanatci + "" -"" + sarki.isim); } [CODE]else {[/CODE] system.out.println(""[rock] "" + sarki.sanatci + "" - "" + sarki.isim); } } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof metalsarki) { system.out.println(""[metal] "" + sarkilistesi.get(i).sanatci + "" - "" + sarkilistesi.get(i).isim + ""( "" + ((metalsarki) sarkilistesi.get(i)).metalozellik + "")""); } else if (sarkilistesi.get(i) instanceof klasiksarki) { system.out.println(""[klasi̇k] "" + sarkilistesi.get(i).sanatci + "" -"" + sarkilistesi.get(i).isim); } [CODE]else {[/CODE] if (!(sarkilistesi.get(i - 1) instanceof rocksarki)) system.out.pr[CODE]intln(""[bi̇lgi̇] yüksek ses düzeyi"");[/CODE] system.out.println(""[rock] "" + sarkilistesi.get(i).sanatci + "" - "" + sarkilistesi.get(i).isim); if (i != sarkilistesi.size() - 1) { if (!(sarkilistesi.get(i + 1) instanceof rocksarki)) system.out.pr[CODE]intln(""[bi̇lgi̇] normal ses düzeyi"");[/CODE] } } } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. özyinelemeli metot, kendi içinde tekrar kendi çağırarak işler. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case, metotun stack overflow olmasını engelleyen istenilen durum. büyük problem, çözmek istediğimiz ana problem(n). küçük problem, büyük problemi ayırarak çözümüne odaklandığımız parça (n-1). jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stack'de en alttan başlayarak elde tutması gerekenleri biriktirir. en tepeye ulaştıktan sonra yukarıdan aşağı olacak şekilde kodu işler. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. tek bir for döngüsüyle halledebileceğimiz için iteratif olarak. çünkü recursion daha yavaş işler. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? base case stringin uzunluğu 1e eşitse 1 döndür olur. her seferinde int count değişkenimi 1 arttırıp stringi substring(1)'den başlatarak tekrar çağırırım. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. bilgisayar kaynaklarını tükettiyse olur. base case tanımlanmadığı zaman recursion metotlarında olur. tail recursion nedir, kısaca açıklayınız. metotun içinde iflere girmediği durumda tekrar metotun çağrılmasıyla olur. abstraction kavramını açıklayınız. soyutlama, black box. çalışırken metotun işleyişini detaylı olarak bilmediğimiz ama çıktısını bildiğimiz metotları örnek verebiliriz örneğin system.out.println dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? override ettiğimiz metot diğer sınıfın subclassında yer aldığı için mümkündür. tersi değil. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected private a daha yakın çünkü aynı package ve subclassların erişimine izin veriyor. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? kendinden hemen önceki türetildiği classın contructorını almak için. bu listenin en tepesinde object classı yer alır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır extend ettiğimiz classların metotları birbiriyle aynı olabilir sorun çıkarabilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b'nin içinde tanımlı bir variabledir. metot overriding ve overloading kavramlarını açıklayınız. overriding base classta bulunan bir metotun türettiğimiz classa özel halini yazmaktır isimleri aynıdır. overloading yine aynı isimli metotların farklı imzalara sahip tanımlanmasıdır aynı classın içinde olur. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent+"" \n"" + 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? direkt aktarmak istiyorsak static yoksa dinamik java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? override edilemezler değiştirilemezler yani overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dinamik çünkü değiştirilebilirler dinamik bağlamada jvm'nin görevi nedir? ---- java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? ----- java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? staticler olmadığı için öncelikli aktarım sırasında sorun yasanırdı class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? parent dinamik [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book statik java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir . unchecked ve checked exceptions. unchecked exceptionlara runtime exceptionlar örnek verilebilir örneğin nullpointerexceptin. ioexception checked exceptionlara örnek verilebilir. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws keywordu kullanarak attığımız exceptionlardır. eğer override edilmiş bir metotta bunu yapıyorsak throws yaptığımız exceptionun classı override ettiģimiz metotta throws yaptığımız exceptionun classından daha üst seviyede olamaz . finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu exception atılsa da atılmasa da her zaman çalıştırılır. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception sınıfından bir class türeterek bu classta bir boş bir de string ifade alan olacak şekilde 2 contructor tanımlarım. constructorların içinde super metodunu çağırırım. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? handle edilmesi gerekilen exceptionu daha basitleştirmek. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez io exception exceptionun subclassıdır bu yüzden sıralamada önce o yazılmalıdır. trying m1 caught2 finally bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE]// 100 ile 0 arasında bir değer private boolean isoperational;// bataryası varsa true [CODE]public robot() {[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]public class factorybase {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]public class quizq1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public static void makearray(string str) {[/CODE] arraylist<[CODE]string> strs = new arraylist<>();[/CODE] [CODE]string str1 = """";[/CODE] [CODE]for (int i = 0;[/CODE] i < str.length(); i++) { if (str.charat(0) - 'a' < 0 && str.charat(0) - 'a' >= 0) { str1 += str.charat(0); } if (str.charat(0) - 'a' >= 0) { str1 += (char) ((str.charat(0) - 'a') + 'a'); } if (str.charat(0) - 'a' >= 0) { str1 += (char) ((str.charat(0) - 'a') + 'a'); } } strs.add(str1); } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocatiion() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location + ""\nrobots operating here:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel() * (75 / 100)); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batterylife = super.batteryl[CODE]ife;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batterylife = super.batteryl[CODE]ife;[/CODE] } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int cleaningpower, int miktar) {[/CODE] cleaningpower += miktar; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot cleaningrobot = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add(cleaningrobot); counter++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot securityrobot = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add(securityrobot); counter++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i).getclass() == cleaningrobot.[CODE]class) {[/CODE] cleaningrobot r1 = (cleaningrobot) robots.get(i); system.out.println(""cleaning robot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", cleaning power: "" + r1.getcleaningpower()); } [CODE]else {[/CODE] securityrobot r2 = (securityrobot) robots.get(i); system.out.println(""security robot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", armed: "" + r2.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i).getclass() == cleaningrobot.[CODE]class) {[/CODE] cleaningrobot r3 = (cleaningrobot) robots.get(i); r3.boostcleaningpower(r3.getcleaningpower(), miktar); system.out.println(""cleaningrobot - "" + robots.get(i).modelname + ""now has cleaning power:"" + r3.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i).getclass() == securityrobot.[CODE]class) {[/CODE] securityrobot r4 = (securityrobot) robots.get(i); r4.togglearmedmode(); system.out.println(""securityrobot - "" + robots.get(i).modelname + ""is now "" + r4.getisarmed()); } } } [CODE]public static int counter;[/CODE] [CODE]public void allrobots() {[/CODE] system.out.println(""tum fabrikalar tarafindan toplam "" + counter + "" üretildi.""); } } [CODE]public class main1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] anotherfactory.allrobots(); } } 1"
4540765,5,"4540765 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package quiz1bil211nebiyanar;[/CODE] [CODE]public class main {[/CODE] [CODE]public static int collatz(int i,int count) {[/CODE] [CODE]if(i==1) {[/CODE] [CODE]return count ;[/CODE] } [CODE]else if(i%2==0) {[/CODE] [CODE]return collatz(i/2,count+1);[/CODE] } [CODE]else {[/CODE] [CODE]return collatz(3*i+1,count+1);[/CODE] } } [CODE]public static void cocktailsort(int[] arr,int iteration) {[/CODE] //iteration 0 başlatılacak if(iteration==arr.length-1) { } [CODE]else {[/CODE] [CODE]if(iteration%2==0) {[/CODE] [CODE]for(int i=0;[/CODE]i<arr.length-1;i++) { [CODE]if(arr[i]>arr[i+1]) {[/CODE] [CODE]int temp=arr[i];[/CODE] arr[i]=arr[i+1]; arr[i+1]=temp; } } cocktailsort(arr, iteration+1); } [CODE]else {[/CODE] for(int i=arr.length-1;i>0;i--) { [CODE]if(arr[i-1]>arr[i]) {[/CODE] [CODE]int temp=arr[i-1];[/CODE] arr[i-1]=arr[i]; arr[i]=temp; } } cocktailsort(arr, iteration+1); } } } [CODE]public static void main(string[] args) {[/CODE] //system.out.pr[CODE]intln(collatz(5,0));[/CODE] sayac sayac=[CODE]new sayac(""10001"");[/CODE] //system.out.println(sayac.say()); [CODE]int[] arr1= {[/CODE]1,4,5,7,3,2}; cocktailsort(arr1, 0); [CODE]for(int i=0;[/CODE]i<arr1.length;i++) { system.out.pr[CODE]intln(arr1[i]);[/CODE] } } } [CODE]package quiz1bil211nebiyanar;[/CODE] [CODE]public class sayac {[/CODE] [CODE]static string str1;[/CODE] [CODE]public sayac(string str) {[/CODE] str1=str; } [CODE]public static int say() {[/CODE] [CODE]return say(str1);[/CODE] } [CODE]public static int say(string str1) {[/CODE] if(str1.length()==0) [CODE]return 0;[/CODE] [CODE]else {[/CODE] if(str1.charat(0)=='1') return 1+ say(str1.sub[CODE]string(1));[/CODE] [CODE]else {[/CODE] return say(str1.sub[CODE]string(1));[/CODE] } } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki instanceof metalsarki) ((metalsarki) sarki).gostermetalozellikleri(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim,string sanatci) {[/CODE] this.isim=isim; this.sanatci=sanatci; // todo auto-generated constructor stub } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] -""+sanatci+"" -""+isim+"" - (hafif ve sakin)"");[/CODE] } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim,string sanatci,string metalozellik) {[/CODE] this.isim=isim; this.sanatci=sanatci; this.metalozellik=metalozellik; // todo auto-generated constructor stub } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(""[metal] -""+sanatci+"" -""+isim+"" ""+""[ozellik: ""+metalozellik+""]"");[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] -""+sanatci+"" -""+isim+"" -""+""(""+metalozellik+"")"");[/CODE] } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim,string sanatci) {[/CODE] this.isim=isim; this.sanatci=sanatci; // todo auto-generated constructor stub } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] -""+sanatci+"" -""+isim+"" -(huzurlu ve nostaljik)"");[/CODE] } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.arraylist; import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> karisikliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(karisikliste); [CODE]for (int i=0;[/CODE]i<karisikliste.size();i++) { karisikliste.get(i).oynat(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i=0;[/CODE]i<sarkilistesi.size();i++) { sarkilistesi.get(i).oynat(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list <sarki> sarkilistesi) {[/CODE] boolean isrock=false; [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++) { if(sarkilistesi.get(i) instanceof rocksarki && !isrock) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi̇ yuksek"");[/CODE] isrock=true; } else if(!(sarkilistesi.get(i) instanceof rocksarki && isrock)) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi̇ normal"");[/CODE] isrock=false; } sarkilistesi.get(i).oynat(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package q1bil211nebiyanar;[/CODE] [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] this.name=""wall-e""; this.type=""trash""; this.batterylevel=100; this.isoperational=true; } [CODE]public robot(string name,string type,int batterylevel) {[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; if(this.batterylevel>0) { this.isoperational=true; } [CODE]else {[/CODE] this.isoperational=false; } } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] this.batterylevel=100; } [CODE]public void printrobot() {[/CODE] system.out.println(string.[CODE]format(""robot name:%s robot type:%s trash battery level:"" + ""%d isoperational:%b"",name,type,batterylevel,isoperational));[/CODE] } } [CODE]package q1bil211nebiyanar;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory=[CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]package q1bil211nebiyanar;[/CODE] import java.security.permission; [CODE]public class soru1 {[/CODE] [CODE]public static void perm(string str,int index) {[/CODE] system.out.pr[CODE]intln(str);[/CODE] if(str.length()-1==index) { } [CODE]else {[/CODE] if((str.charat(index)>=65&&str.charat(index)<=90)) { index++; perm(str.substring(0, index+1).tolowercase()+str.sub[CODE]string(index+1),index);[/CODE] } else if(str.charat(index)>=48 && str.charat(index)<=57) { index++; perm(str.substring(0, index+1).touppercase()+str.sub[CODE]string(index+1),index);[/CODE] } } } [CODE]public static void main(string[] args) {[/CODE] perm(""a1b"", 0); } } [CODE]package q1bil211nebiyanar;[/CODE] import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory() {[/CODE] this.name=""factory1""; this.location=""moon""; this.robots=arraylist <robot>(); } [CODE]public factory(string name,string location) {[/CODE] this.name=name; this.location=location; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robots1) {[/CODE] robots.addlast(robots1); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name:""+name+"" location:""+location);[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void works() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]int maxbattery;[/CODE] [CODE]public abstractrobot(string modelname,int batterylife) {[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] this.maxbattery=batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public void recharge() {[/CODE] [CODE]if(maxbattery<100) {[/CODE] this.batteryl[CODE]ife=100;[/CODE] } [CODE]else {[/CODE] this.batteryl[CODE]ife=maxbattery;[/CODE] } } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.totalrobotproduced(); } } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname,int batterylife,boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife<10) {[/CODE] system.out.pr[CODE]intln(""[""+modelname+""] not enough battery to scan threads"");[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""]"" + ""scanning for threads... armed:""+isarmed); batteryl[CODE]ife-=10;[/CODE] } } [CODE]public void tooglearmedmode() {[/CODE] [CODE]if(isarmed) {[/CODE] isarmed=false; system.out.println(""securityrobot - ""+this.modelname+ "" is now unarmed""); } [CODE]else {[/CODE] isarmed=true; system.out.println(""securityrobot - ""+this.modelname+ "" is now unarmed""); } } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setarmed(boolean isarmed) {[/CODE] this.isarmed = isarmed; } } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname,int batterylife,int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife<10) {[/CODE] system.out.pr[CODE]intln(""[""+modelname+""] not enough battery to clean"");[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""] cleaning in progress .. cleaning power:""+cleaningpower); batteryl[CODE]ife-=10;[/CODE] } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] this.cleaningpower+=miktar; system.out.println(""cleaningrobot - ""+this.modelname+"" now has cleaning power:""+this.cleaningpower); } } [CODE]package q2bil211nebiyanar;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots=[CODE]new arraylist<abstractrobot>();[/CODE] [CODE]static int n=0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] n++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] n++; } [CODE]public void performalltasks() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i) instanceof cleaningrobot) { cleaningrobot r1=(cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: ""+r1.getmodelname() +"", battery:""+r1.getbatterylife()+"", cleaning power:""+r1.getcleaningpower()); } else if(robots.get(i) instanceof securityrobot) { securityrobot r1=(securityrobot) robots.get(i); system.out.println(""securityrobot - model: ""+r1.getmodelname() +"", battery:""+r1.getbatterylife()+"", armed:""+r1.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i) instanceof cleaningrobot) { cleaningrobot r1=(cleaningrobot) robots.get(i); r1.boostcleaningpower( miktar); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i) instanceof securityrobot) { securityrobot r1=(securityrobot) robots.get(i); r1.tooglearmedmode(); } } } [CODE]public static void totalrobotproduced() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafından ""+n+"" robot uretildi"");[/CODE] } } 5"
6418019,1,"6418019 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package bil211_lab;[/CODE] [CODE]public class sayac {[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say1(string input){[/CODE] if(input.length() == 0){ [CODE]return 0;[/CODE] } if(input.charat(0) == '1'){ return 1 + say1(input.sub[CODE]string(1));[/CODE] } [CODE]else{[/CODE] return say1(input.sub[CODE]string(1));[/CODE] } } [CODE]public int say(){[/CODE] [CODE]return say1(str);[/CODE] } } [CODE]package bil211_lab;[/CODE] [CODE]public class lab1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] [CODE]int[] ar = {[/CODE]5, 4, 1, 2}; cocktailsort(ar); [CODE]for(int i = 0;[/CODE] i<ar.length; i++){ system.out.pr[CODE]intln(ar[i]);[/CODE] } sayac s1 = [CODE]new sayac(""10001"");[/CODE] system.out.println(s1.say()); } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]if(i%2 == 0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else{[/CODE] [CODE]return 1 + collatz(i*3 + 1);[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] sort2(arr, 0, arr.length - 1, false); } [CODE]public static void sort2(int[] array, int start, int end, boolean direction){[/CODE] [CODE]if(start >= end){[/CODE] [CODE]return;[/CODE] } [CODE]if(direction == false){[/CODE] [CODE]for(int i = start;[/CODE] i < end; i++){ [CODE]if(array[i] > array[i+1]){[/CODE] [CODE]int buyuk = array[i];[/CODE] array[i] = array[i+1]; array[i+1] = buyuk; } } end--; } [CODE]else{[/CODE] [CODE]for(int i = end;[/CODE] i>0; i-- ){ [CODE]if(array[i] < array[i-1]){[/CODE] [CODE]int kucuk = array[i];[/CODE] array[i] = array[i-1]; array[i-1] = kucuk; } } start++; } sort2( array,start, end, !direction); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.collections; import java.util.list; import javax.sound.sampled.sourcedataline; [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] arraylist<sarki> sarkilistesi = (arraylist)arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] system.out.println( ((metalsarki)s).getisim + "" - "" + ((metalsarki)s).getsanatci ; } } } } abstract [CODE]class sarki{[/CODE] protected [CODE]string isim;[/CODE] protected [CODE]string sanatci;[/CODE] [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public string getsanatci() {[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } [CODE]public void setsanatci(string sanatci) {[/CODE] this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] setisim(isim); setsanatci(sanatci); this.metalozellik = metalozellik; } [CODE]public void gostermetalozellikler(){[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" "" + ""("" + metalozellik + "")"");[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] setisim(isim); setsanatci(sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] setisim(isim); setsanatci(sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(arraylist<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi){[/CODE] system.out.pr[CODE]intln(""sirali calma"");[/CODE] [CODE]for(int i = 0;[/CODE] i<sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] ((metalsarki)s).oynat(); } [CODE]else if(s instanceof rocksarki){[/CODE] ((rocksarki)s).oynat(); } [CODE]else if(s instanceof klasiksarki){[/CODE] ((klasiksarki)s).oynat(); } } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi){[/CODE] collections.shuffle(sarkilistesi); system.out.pr[CODE]intln(""karisik calma"");[/CODE] [CODE]for(int i = 0;[/CODE] i<sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] ((metalsarki)s).oynat(); } [CODE]else if(s instanceof rocksarki){[/CODE] ((rocksarki)s).oynat(); } [CODE]else if(s instanceof klasiksarki){[/CODE] ((klasiksarki)s).oynat(); } } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi){[/CODE] boolean sesduzeyi = false; system.out.pr[CODE]intln(""rockcuozelcalma calma"");[/CODE] [CODE]for(int i = 0;[/CODE] i<sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] ((metalsarki)s).oynat(); } [CODE]else if(s instanceof rocksarki && sesduzeyi == false){[/CODE] sesduzeyi = true; system.out.pr[CODE]intln(""[bi̇lgi̇] ses duzeyi: yuksek"");[/CODE] ((rocksarki)s).oynat(); } [CODE]else if(s instanceof rocksarki && sesduzeyi == true){[/CODE] ((rocksarki)s).oynat(); system.out.pr[CODE]intln(""[bi̇lgi̇] ses duzeyi: normal"");[/CODE] } [CODE]else if(s instanceof klasiksarki){[/CODE] ((klasiksarki)s).oynat(); } } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji){[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(arraylist<sarki> sarkilistesi){[/CODE] [CODE]if(strateji instanceof siralicalma){[/CODE] siralicalma sira = (siralicalma) strateji; sira.cal(sarkilistesi); } [CODE]else if(strateji instanceof karisikcalma){[/CODE] karisikcalma karisik = (karisikcalma) strateji; karisik.cal(sarkilistesi); } } } ""recursion"" kavramı nedir, kısaca açıklayınız. bir methodunun kendi kendini çağırması recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base durum: recursion a girmeden en basit case, decomposition: problemi daha küçük problemlere ayrıdığımız kısım, composition: jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. - [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak for döngüsü yerine recursive yapmak daha verimlidir bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? - stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. recursionun sonsuz bir döngüye girmesi tail recursion nedir, kısaca açıklayınız. - abstraction kavramını açıklayınız. gerekli bilgileri alıp geri kalan bilgileri gizlemek, blackbox a almak dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür cünkü employee hourlyemployee nin atasıdır. tersi mümkün degildir protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? ata class ın constructorını çağırmak ve bilgilerli almak için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değildir, her class bir üstündeki classı extend etmeli java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? verilen değişkenlerin typelarının aynı olup olmadıgına ve aralarında kalıtım ilişkisi var mı ona bakar. aralarındaki ilişki: typeları aynıdır ve b, a nın atasıdır metot overriding ve overloading kavramlarını açıklayınız. overriding: metotların signatureları aynıdır, metodu child classın özelliklerine göre tekrar düzenleriz. overloading: metotların isimleri aynıdır ama parametreler farklıdır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? - [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class içinde normal metod ya da abstract metod olabilir. abstract metodun gövdesi olmaz ve bu bu classı extend eden classta abstract metodlar override edilmelidir. abstract classtan bir obje yaratamayız. abstract classların constructoru olabilir ama interfacelerin olmaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstarct classi extend eden baska bir abstarct classta implement edilebilir abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metodun body si olmaz abstract [CODE]class icinde abstract olmayan metod ya yazabiliriz abstract classlar sayesinde subclasslara abstarct metodlari zorunlu kılmış oluruz abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar tip olarak kullanılamaz ama interfaceler kullanılabilir. interfacelerde metodlar otomatik public abstract olarak tanımlanır marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden çok interface implement edebilir. bir interface baska bir interfacei implement edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstarct [CODE]classtan obje yaratamayiz, circle c = new circle();[/CODE] yaparız output: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? - java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 3 çeşittir: compile time error: syntax hataları örneğin parantezin unutulması, runtime error: sıfıra bölme , logical error: programın çalışıp istenilen sonucu vermemesi. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked türündeki hatalar icin kullanılır. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? - java'da kendi exceptionunuzu nasıl tanımlarsınız? o exception adı ile bir class oluştururum. bu class exception classını override etmelidir. java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? - static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught -1 finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? - bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(string name,string type, int batterylevel, boolean isoperational ){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisoperational(boolean isoperational){[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] batterylevel = 100; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + "" isoperational: "" + isoperational);[/CODE] } } [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] robots.addlast(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ robots.get(i).pr[CODE]introbot();[/CODE]; } } [CODE]public void work(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ int a = robots.get(i).getbatterylevel(); robots.get(i).setbatterylevel((a*75)/100); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); int sayi = robotfactory.sayi; system.out.pr[CODE]intln(""tüm fabrikalar tarafindan toplam "" + sayi + "" robot üretildi"");[/CODE] } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void recharge(){[/CODE] batteryl[CODE]ife = 100;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... "" + "" armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] isarmed = !isarmed; } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void recharge(){[/CODE] batteryl[CODE]ife = 100;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress..."" + "" cleaning power:"" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean...""); } } [CODE]public void boostcleaningpower(){[/CODE] cleaningpower = cleaningpower + 20; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int sayi;[/CODE] [CODE]public robotfactory(){[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] cleaningrobot [CODE]newcleaningrobot = new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add([CODE]newcleaningrobot);[/CODE] sayi++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] securityrobot [CODE]newsecurityrobot = new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add([CODE]newsecurityrobot);[/CODE] sayi++; } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ cleaningrobot c = (cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: "" + c.getmodelname()+ "", battery: "" + c.getbatterylife() + "", cleaning power: "" + c.getcleaningpower()); } else if(robots.get(i) instanceof securityrobot){ securityrobot s = (securityrobot) robots.get(i); system.out.println(""securityrobot - model: "" + s.getmodelname()+ "", battery: "" + s.getbatterylife() + "", armed: "" + s.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ cleaningrobot c = (cleaningrobot) robots.get(i); int power = c.getcleaningpower() + miktar; c.setcleaningpower(power); system.out.println(""cleaningrobot - "" + c.getmodelname() + "" now has cleaning power: "" + c.getcleaningpower() ); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ securityrobot s = (securityrobot) robots.get(i); s.togglearmedmode(); if(s.isarmed() == false){ system.out.println(""securityrobot - "" + s.getmodelname() + "" is now unarmed "" ); } [CODE]else{[/CODE] system.out.println(""securityrobot - "" + s.getmodelname() + "" is now armed "" ); } } } } } 1"
4114373,1,"4114373 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); } } [CODE]class sayac{[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] if(str.indexof('1')==-1){ [CODE]return 0;[/CODE] } [CODE]else{[/CODE] str = str.substring(str.indexof('1')+1, str.length()); [CODE]return say() + 1;[/CODE] } } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] a = {[/CODE]5,4,1,2}; cocktailsort(a); } [CODE]public static void cocktailsort(int[] arr){[/CODE] boolean flag = false; [CODE]for(int i = 1;[/CODE] i < arr.length; i++){ [CODE]if(arr[i-1]>arr[i]){[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i-1]; arr[i-1] = temp; flag = true; } } [CODE]if(!flag){[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length; i++){ system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } [CODE]else{[/CODE] cocktailsort(arr); } } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]if(i%2==0){[/CODE] [CODE]return collatz(i/2) + 1;[/CODE] } [CODE]else{[/CODE] [CODE]return collatz(3*i + 1) + 1;[/CODE] } } } ""recursion"" kavramı nedir, kısaca açıklayınız. recursion, aynı fonksiyonun kendi içerisinde base condition sağlanana kadar çağırılmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. recursive metod, fonksiyonun halletmesi gereken ana problem, diğer fonksiyona(aynı fonksiyon) yollayacağı problem ve en son da çözecek bir şey kalmayınca çıkması gereken kısım olan base conditiondan oluşur. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. . bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? string'in ölçecek elemanının kalmaması (0'a eşit olması) stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack kod içerisinde çağırdığımız fonksiyonun içindeki verileri ilk çağırılandan son çağırılana kadar çağırması, ve eğer recursion yaparken base condition hiçbir zaman sağlanmazsa stack sonsuza kadar dolmaya devam eder ve stack overflow olmuş olur. tail recursion nedir, kısaca açıklayınız. tail recursion, recursion'un her defasında return olması yerine en son çağırdığımız fonksiyonda return edip en başa dönmesidir. abstraction kavramını açıklayınız. abstraction bir işlevin nasıl çalıştığına değil ne yaptığına bakan, gereksiz detaylara boğulmadan istenileni vermesine denilen kavramdır. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? employee, hourlyemployee'nin parenti oldugu için hourlyemployee is a employee deriz yani mümkün olur ama employee is hourlyemployee olmadığı için mümkün olmaz. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected: class, package ve subclass default: class ve package olduğundan dolayı default private'e daha yakındır. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü parentta bulunan her şey child'da da vardır ve bu yüzden objeyi oluştururken tüm değişkenleri ayarlamak istiyorsak bi üstteki parent'in constructerini çağırmak zorundayız. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır mümkün değildir çünkü b'de ve c'de aynı metotlar veya değişkenler olabilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? getclass() gibi class'ın kendisine de bakıp aynı zamanda parent'larının da eşit olmasını döndürür metot overriding ve overloading kavramlarını açıklayınız. metot override: tamamen aynı olan metotlar, metot overloading: dönüş tipi hariç her şeyi aynı olan metotlar [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? output: [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? eğer metot override edilmişse dynamic binding, edilmemişse static binding yapilir. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? çünkü static, private ve final metotlara override yapılmaz bu yüzden de dynamic binding'e gerek olmaz. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic binding gerçekleşir çünkü aynı adda olan iki ayrı metotu çağırırken java'nın hangi metodu çağırmasını hesaplaması gerekiyor. dinamik bağlamada jvm'nin görevi nedir? jvm'nin görevi referans edilen en parent class'tan başlayarak oluşturulan child objesine doğru gelerek her class'ta metodun override edilmiş olup olmadığını hesaplayıp bularak, doğru metodu çağırmasıdır. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? parent objenin içerdiği her şeyi child obje içerir fakat child objenin içerdiği her şeyi (metod, değişken vs.) parent obje içermez. bu yüzden parent p = [CODE]new child();[/CODE] yapılabilirken child c = [CODE]new parent();[/CODE] yapılamaz. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? tüm bindingler dinamik olsaydı child classta çağırdığımız ve child class'a özgü olan bir override metodu çağıramazdık. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? parent referansıyla bir child object oluşturulduğu için o referanstan çağırdığımız child objesinin parenttaki metod yerine child'daki override edilmiş metodu çağırmasını istediğimiz için dinamik bağlama. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? i̇lk objede statik bağlama, ikinci objede dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class o class içerisine daha sonra implement etmek istediğimiz özellikleri önceden yazabilmemizi sağlayan class türüdür. constructor'u olamaz çünkü abstract class'tan obje oluşturulamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? eğer parent class içerisinde tanimladigimiz abstract metodlarin hepsini child classin içinde implement etmek istemiyorsak child class olrak abstract metodlar harici olusturdugumuz bir abstract class var olabilir. bu class'ta parent class içinde yaptığımız abstract metotlari implement edebiliriz. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metotlar programın daha iyi okunmasını sağlar. aynı zamanda program için bir şema görevi görür. abstract class ile farklı insanlar aynı proje içinde daha kolay çalışabilirler çünkü abstract class'larin içindeki her metodu bilmek zorunda kalmazlar, herkes kendi bildiği/yapması gereken yeri yaparak işbirliği içinde çalışabilir. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class veya interface'lerden obje oluşturulamaz. i̇nterface'in abstract class'tan farkı ise içerisindeki tüm metotların/degiskenlerin tanimlanmayacak oluşudur. yani bir abstract class tamamen abstract metotlar içermek zorunda değildir ama interface tamamen bir kara kutu gibi çalışır, yani içerisinde hiçbir şey yoktur, isimlerden başka. marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden fazla interface'i implement edemez. bir interface başka bir interface'i implement edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract olan bir class'tan obje oluşturulamaz. eğer abstract [CODE]classi aktardığımız class'tan bir obje oluşturmak istiyorsak ""circle c = new circle();[/CODE]"" kullanabiliriz. hata duzeldikten sonra da, ""drawing circle \n displaying"" yazılır. [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? interface'lerin içindeki metotların ne yaptığı interface içinde tanımlanamaz. ayrıca class c'deki public void show() metodu implement ettiği iki interface'in hangisinin çağırılacağını bilemez. bu yüzden class c'deki metotta direkt olarak ""a"" veya ""b"" yazdıran bir metot yazılabilir. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. - java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws kullanırken child classi yazarsak catch içinde parent class'i cagiramayiz. bu yüzden eğer birden fazla hata catch etmek istiyorsak tüm hataların ortak atasını(parentini) throws ile almalıyız finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğundaki kodlar, try'da throw edilen hata catch'de yakalansa da yakalanmasa da çağrılır java'da kendi exceptionunuzu nasıl tanımlarsınız? bir class oluşturarak, ismine oluşturmak istedigimiz hata adını yazarak throwable classini extend edip, olusturmak istediğimiz durumu if'le yazdıktan sonra o durumun içinde hatamızı tanımlıyoruz, daha sonra o hatanin olup olmadığı yerde kontrol için yazdigimiz classta olusturdugumuz hata classini 'throws' ile alıp, catch içinde o hatayı tanimlayarak yazıyoruz. java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? o class tam olarak o sorunu çözememiş ise bir sonraki parent'a fırlatır ve hata orda çözülür static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught -1 finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? burada m1()deki ioexception m2() içerisine gittiğinde catch'de ilk olarak exception olarak yakalanır bu yüzden de caught1 yazar yani caught2 yazmamış olur, çünkü try catch okunurken yukardan başlanarak aşağı inilir bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]int(""robot name: "" + name);[/CODE] system.out.pr[CODE]int("" robot type: "" + type);[/CODE] system.out.pr[CODE]int("" battery level: "" + batterylevel + ""%"");[/CODE] system.out.pr[CODE]int("" is operational: "" + isoperational);[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational){[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] batterylevel = 100; } } [CODE]class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<robot>();[/CODE] [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist getrobots(){[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).pr[CODE]introbot();[/CODE] system.out.pr[CODE]intln();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } } import java.util.arraylist; [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.println(combination(""a1b2"").to[CODE]string());[/CODE] } [CODE]public static arraylist combination(string s){[/CODE] [CODE]int c = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < s.length(); i++){ if((s.charat(i)>=65 && s.charat(i)<91) || (s.charat(i)>=97 && s.charat(i)<123)){ c += 1; } } arraylist<[CODE]string> a = new arraylist<string>();[/CODE] boolean flag = true; [CODE]while(flag){[/CODE] [CODE]for(int i = 0;[/CODE] i < s.length(); i++){ if(s.charat(i)>=65 && s.charat(i)<91){ if(!a.contains(s)){ a.add(s); } [CODE]else{[/CODE] s = s.substring(0, i+1) + s.substring(i+1,s.length()).tolowercase(); } s = s.substring(0, i) + (char)(s.charat(i)+32) + s.substring(i+1, s.length()); } else if(s.charat(i)>=97 && s.charat(i)<123){ if(!a.contains(s)){ a.add(s); } [CODE]else{[/CODE] s = s.substring(0, i+1) + s.substring(i+1,s.length()).touppercase(); } s = s.substring(0, i) + (char)(s.charat(i)-32) + s.substring(i+1, s.length()); } } if(a.size()==math.pow(2, c)){ flag = false; } } [CODE]return a;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int defaultbattery;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.defaultbattery = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge(){[/CODE] this.batteryl[CODE]ife = defaultbattery;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public abstract void boostcleaningpower(int miktar);[/CODE] [CODE]public abstract void togglearmedmode();[/CODE] [CODE]public abstract string tostring();[/CODE] [CODE]public abstract int getcleaningpower();[/CODE] [CODE]public abstract boolean getarmedmode();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.pr[CODE]intnumberofrobots();[/CODE] } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public boolean getarmedmode(){[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(""["" + modelname + ""] "" + ""scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] [CODE]if(isarmed){[/CODE] isarmed = false; } [CODE]else{[/CODE] isarmed = true; } } [CODE]public string tostring(){[/CODE] [CODE]return ""security robot - model: "" + modelname + "", battery: "" + batterylife + "", armed: "" + isarmed + ""\n"";[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(""["" + modelname + ""] "" + ""cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int power){[/CODE] this.cleaningpower += power; } [CODE]public string tostring(){[/CODE] [CODE]return ""cleaning robot - model: "" + modelname + "", battery: "" + batterylife + "", cleaning power: "" + cleaningpower + ""\n"";[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public static int robotsayisi = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] robotsayisi += 1; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] robotsayisi += 1; } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ system.out.print(robots.get(i).to[CODE]string());[/CODE] } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ robots.get(i).boostcleaningpower(miktar); system.out.println(""cleaning robot - "" + robots.get(i).modelname + "" now has cleaning power: "" + robots.get(i).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ robots.get(i).togglearmedmode(); if(robots.get(i).getarmedmode()){ system.out.println(""security robot - "" + robots.get(i).modelname + "" is now armed""); } [CODE]else{[/CODE] system.out.println(""security robot - "" + robots.get(i).modelname + "" is now unarmed""); } } } } [CODE]public static void printnumberofrobots(){[/CODE] system.out.println(""tüm fabrikalar tarafından toplam "" + robotsayisi + "" robot üretildi.""); } } 1"
1280995,0,"1280995 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package test;[/CODE] [CODE]public class collatz{[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if (i == 1) return 0;[/CODE] [CODE]else if (i%2==0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz(i*3+1);[/CODE] } } } [CODE]package test;[/CODE] [CODE]public class cocktail{[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; cocktailsort(arr); //pr[CODE]inter for (int i = 0;[/CODE] i < arr.length; i++){ system.out.pr[CODE]int(arr[i] + "","");[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] bubble(arr, 0, arr.length - 1, false); } [CODE]public static void bubble(int[] arr, int start, int end, boolean rightway){[/CODE] rightway = true; [CODE]if (start == end && !isordered(arr) && rightway){[/CODE] rightway = false; bubble(arr, arr.length - 1, 0, rightway); [CODE]return;[/CODE] } [CODE]if (start == end && !isordered(arr) && !rightway){[/CODE] rightway = true; bubble(arr, 0, arr.length, rightway); [CODE]return;[/CODE] } [CODE]else if (start == end && isordered(arr)) {[/CODE] [CODE]return;[/CODE] } [CODE]else if (end > start) {[/CODE] [CODE]if (arr[start] > arr[start + 1]){[/CODE] [CODE]int temp = arr[start + 1];[/CODE] arr[start + 1] = arr[start]; arr[start] = temp; } bubble(arr, start + 1, end, rightway); [CODE]return;[/CODE] } [CODE]else if (start > end) {[/CODE] [CODE]if (arr[start - 1] > arr[start]){[/CODE] [CODE]int temp = arr[start - 1];[/CODE] arr[start - 1] = arr[start]; arr[start] = temp; } bubble(arr, start - 1, end, rightway); [CODE]return;[/CODE] } } [CODE]public static boolean isordered(int[] arr){[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) return false;[/CODE] } [CODE]return true;[/CODE] } } [CODE]package test;[/CODE] [CODE]public class sayac{[/CODE] [CODE]string s;[/CODE] [CODE]public sayac(string s) {[/CODE] this.s = s; } [CODE]public int say(){[/CODE] if (s.indexof('1') == -1) [CODE]return 0;[/CODE] [CODE]else {[/CODE] s = s.substring(0,s.indexof('1')) + ""0"" + s.substring(s.indexof('1') + 1,s.length()); [CODE]return 1 + say();[/CODE] } } } [CODE]class testing{[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac s1 = [CODE]new sayac(""1001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; import java.util.arraylist; import java.util.arrays; import java.util.random; abstract [CODE]class sarki {[/CODE] sarki(){} [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] sarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } //? [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } // bi tane daha? [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] //liste sırasında çal [CODE]for (sarki sarki : sarkilistesi){[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } siralicalma(){} } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] //her şarkı bir kere çalınmak üzere karışık çal random random = [CODE]new random();[/CODE] list<sarki> karisik = [CODE]new arraylist<sarki>(sarkilistesi);[/CODE] while (!karisik.isempty()){ int nextint = random.nextint(karisik.size()); karisik.get(nextint).oynat(); karisik.remove(next[CODE]int);[/CODE] } system.out.pr[CODE]intln();[/CODE] } karisikcalma(){} } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] //liste sırasında çal rocksarki çalarken sesi yükselt, diğerlerinde normale döndür. //ardışık şarkılarda sadece baştakinde işlemi yap, değilse aynı kalsın. boolean sesnasil = false; [CODE]for (sarki sarki : sarkilistesi){[/CODE] [CODE]if(sarki instanceof rocksarki && sesnasil == false){[/CODE] sesnasil = true; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } [CODE]else if (!(sarki instanceof rocksarki) && sesnasil == true){[/CODE] sesnasil = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } rockcuozelcalma(){} } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s){[/CODE] //değiştiriyor strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class muziklisey {[/CODE] [CODE]public static void main(string[] args){[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki a = [CODE]new metalsarki("""", """", """");[/CODE] a = (metalsarki)sarki; a.gostermetalozellikleri(); } } } } ""recursion"" kavramı nedir, kısaca açıklayınız. kendini çağıran metod tekniği. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case ve tekrar eden case. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. normal metod gibi çağırıyor? hangi açıdan anlamadım. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif yöntemin recursive yöntemden çoğu durumda daha verimli olduğu bilgisinden yola çıkarak iteratif derim. bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? ?? stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack jvm hafızasında ayrılan bir bölüm. hafıza aşılırsa overflow olur. bir recursion metodunun base case'inin düzgün çalışmaması sebep olabilir. tail recursion nedir, kısaca açıklayınız. recursive case'in sonda olduğu recursion türü. abstraction kavramını açıklayınız. yazacağımız kod için gerekli olan kavramları, kontekste bağlı değişen kavramlardan ayrıştırmak. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür, eğer hourlyemployee bunun alt sınıfı ise. tersi mümkün değil. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier daha yakın. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü hepsi constructor ile bir instance üretmek için object sınıfına refer ediyor. biz yazmazsak da jvm otomatik hallediyor. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır. her class sadece bir class'ı extend edebilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? instanceof operatörü soldaki ifadenin sağdakinin bir instance'ı (aynı sınıf ve objesi, veya alt sınıflardan biri veya onlardan birinin objesi) mı diye bakar. a b'den derive edilen herhangi bir şey olabilir. metot overriding ve overloading kavramlarını açıklayınız. overriding var olan başka bir metod ile aynı signature ile bir metod yazmaktır, böylece metod alt sınıflarda farklı davranabilir (polymorphism). overloading ise aynı isimde ancak imzaları farklı olan birden fazla metod yazılmasıdır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? dynamic binding instance metodları için yapılır, static binding ise diğerleri için. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? objeden bağımsız çalışmaları. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic binding. dinamik bağlamada jvm'nin görevi nedir? metod call'ının hangi metod bloğunu çağırdığını anlamak. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? is-a mantığından ötürü. hayvan bir canlıdır ama her canlı hayvan değildir. bundan ötürü implicit şekilde upcast yapmamıza java izin verir. ama tersi söz konusu olmadığı için implicit şekilde yapamayız. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bağlama. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bağlama. java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class'ların metodları tanımlanmak zorunda değil, bu işi onu extend eden class'lara bırakabilir. constructor'ları olur ama bu super'i çağırsın diye, o class'dan obje üretemeyiz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? başına default keyword'ü koyarak default bir mekanizma implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. metodun oluşturulmasını erteleyebilmemizi veya başka birine bırakabilmemizi sağlar. inherit eden class'larda polymorphism olmasını sağlar/gerektirir. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class'larda her metod abstract olacak diye bir kural yok, ancak interface'lerin içeriği %100 abstract'tir. tip olarak kullanamayız. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface bir sıfat gibi işler, bir class'a o sıfatı atfetmemizi sağlar. i̇çi boş bir interface tanımından ibarettir. functional interface ne bilmiyorum. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? i̇kisi de mümkün. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? shape'den obje üretemeyiz, çünkü abstract class. circle'dan üretirsek alacağımız sonuç: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? compile edilemez, belirsizlik var. implement ettiğimiz bağımsız iki interface'de aynı signature'e sahip iki metod var. super.show() yerine örneğin eğer a interface'indekini kullanmak istiyorsak a.show() diyebiliriz, bu durumda output a olur. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. runtime ve java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? override eden metodun override ettiği metod'a göre ya eşit, ya da daha dar bir throwable kapsamına sahip olması, veya direkt throws ifadesinin kaldırılması gerekir. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu her daim işletilen bir kod bloğudur. catch'e girilirse de girilmezse de çalışır. catch'in içinde return edilir ve bloktan çıkılırsa da çalışır. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception sınıfını extend ederek yeni bir exception sınıfı oluşturarak. bunun içinde exception'un bakacağı kondisyonları ve hangi durumda exception fırlatacağını if case'leri ile kontrol edebiliriz. java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caughtfinallyoopsdone41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? unreachable code mevcut. exception bloklarından biri silinmeli. bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public string getname(){[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public void setname(string s){[/CODE] name = s; } [CODE]public string gettype(){[/CODE] [CODE]return new string(type);[/CODE] } [CODE]public void settype(string s){[/CODE] type = s; } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int i){[/CODE] [CODE]if (i <= 100 && i >= 0){[/CODE] batterylevel = i; [CODE]if (i > 0) isoperational = true;[/CODE] [CODE]else isoperational = false;[/CODE] } else system.out.println(""that's an invalid amount.""); } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } // yazdım ama pek anlamlı bir metod değil, 100'ken niye false'a çekebileyim örneğin // [CODE]public void setisoperational(boolean bool){[/CODE] // isoperational = bool; //} [CODE]public void charge(){[/CODE] batterylevel = 100; isoperational = true; } [CODE]public robot(){[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; if (batterylevel <= 100 && batterylevel >= 0) this.batterylevel = batterylevel; [CODE]else {[/CODE] system.out.println(""that's an invalid number for the battery level. it will be set to 100%.""); this.batterylevel = 100; } [CODE]if (batterylevel > 0) isoperational = true;[/CODE] [CODE]else isoperational = false;[/CODE] } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public string getname(){[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public void setname(string s){[/CODE] name = s; } [CODE]public string getlocation(){[/CODE] [CODE]return new string(location);[/CODE] } [CODE]public void setlocation(string s){[/CODE] location = s; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).charge(); } } [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] name = ""factory1""; location = ""moon""; robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void printfactory(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++){ int current = robots.get(i).getbatterylevel(); [CODE]if (current >= 15) current -= 15;[/CODE] [CODE]else current = 0;[/CODE] robots.get(i).setbatterylevel(current); } } } [CODE]public class robottest {[/CODE] [CODE]public static void main(string[] args){[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 24);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class casecombo {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]string s = ""a1b2c3d4"";[/CODE] casecombo(s, 0); } [CODE]public static void casecombo(string s, int i){[/CODE] [CODE]if (i == 0){[/CODE] system.out.pr[CODE]intln(s);[/CODE] } // string'i alalım. index'deki harf mi diye bakalım. harfse bir büyük yapalım bir küçük yapalım ve ekrana yazdıralım. // sonra index'i bir arttırarak metodu tekrar çağıralım. index == length olunca sadece yazdırsın. if (i == s.length() - 1){ if ((int) s.charat(i) >= 65 && s.charat(i) <= 90){ s = s.substring(0, i) + (char)(s.charat(i) + 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] } else if ((int) s.charat(i) >= 97 && s.charat(i) <= 122){ s = s.substring(0, i) + (char)(s.charat(i) - 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] } } [CODE]else {[/CODE] if ((int) s.charat(i) >= 65 && s.charat(i) <= 90){ casecombo(s, i + 1); s = s.substring(0, i) + (char)(s.charat(i) + 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] casecombo(s, i + 1); } else if ((int) s.charat(i) >= 97 && s.charat(i) <= 122){ casecombo(s, i + 1); s = s.substring(0, i) + (char)(s.charat(i) - 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] casecombo(s, i + 1); } [CODE]else {[/CODE] casecombo(s, i + 1); } } [CODE]return;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package robotfactory;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package robotfactory;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] [CODE]public abstractrobot(){[/CODE]} protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] protected [CODE]int maximumbattery;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.maximumbattery = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return new string(modelname);[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = maximumbattery;[/CODE] } } [CODE]package robotfactory;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.totalrobotcount(); } } [CODE]package robotfactory;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] "" + ""scanning for threats... armed: "" + isarmed); batteryl[CODE]ife-=10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] "" + ""not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] isarmed = !isarmed; } } [CODE]package robotfactory;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] "" + ""cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife-=10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] "" + ""not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar){[/CODE] cleaningpower+=miktar; } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.cleaningpower = cleaningpower; } } [CODE]package robotfactory;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int total;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] total++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] total++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot){[/CODE] cleaningrobot temp = (cleaningrobot) robot; system.out.println(""cleaningrobot - model: "" + temp.getmodelname() + "", battery: "" + temp.getbatterylife() + "", cleaning power: "" + temp.getcleaningpower()); } [CODE]else if (robot instanceof securityrobot){[/CODE] securityrobot temp = (securityrobot) robot; system.out.println(""cleaningrobot - model: "" + temp.getmodelname() + "", battery: "" + temp.getbatterylife() + "", armed: "" + temp.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] cleaningrobot temp = (cleaningrobot) robot; temp.boostcleaningpower(miktar); robot = temp; system.out.println(""cleaningrobot - "" + temp.getmodelname() + "" now has cleaning power: "" + temp.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] securityrobot temp = (securityrobot) robot; temp.togglearmedmode(); robot = temp; if (temp.getisarmed()) system.out.println(""securityrobot - "" + temp.getmodelname() + "" is now armed""); else system.out.println(""securityrobot - "" + temp.getmodelname() + "" is now unarmed""); } } } [CODE]public static void totalrobotcount() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + total + "" robot uretildi"");[/CODE] } } 0"
5281670,3,"5281670 müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar{[/CODE] calmastratejisi strateji ; [CODE]void setstrateji(calmastratejisi s){[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki){[/CODE] metalsarki castedotherobj = (metalsarki) sarki; castedotherobj.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim,sanatci); this.metalozellik = metalozellik; } @override [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim +"" (enstrumantal)"");[/CODE] } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: ]"" + metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.arraylist; import java.util.collection; import java.util.collections; import java.util.list; import java.util.random; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<[CODE]integer> numbers = new arraylist<>();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { numbers.add(i); } collections.shuffle(numbers); [CODE]for (int index : numbers) {[/CODE] sarkilistesi.get(index).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size() ; i++){ sarkilistesi.get(i).oynat(); } } } abstract [CODE]public class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 1;[/CODE] i < sarkilistesi.size() ; ++i){ if(sarkilistesi.get(i) instanceof rocksarki ){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi : yuksek"");[/CODE] sarkilistesi.get(i).oynat(); if(sarkilistesi.get(i + 1) instanceof rocksarki){ sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln(""[bilgi] ses duzeyi : normal"");[/CODE] ++i; } } sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } ""recursion"" kavramı nedir, kısaca açıklayınız. recursion bir methodun kendini çağırması kavramıdır recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case recursive call jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. her bir call yapıldığında stacke o methodun variableları ve kendisi çağrılır ve en baştan başlayarak methodlar çalıştırılır [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak yapmak daha az yer ve zaman kullanımına sebep olacaktır bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? stringin uzunluğunun sıfıra eşit olup olmadığına bakmak stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack metod çağrıldığında variablelarının saklandığı ve kullanımı bitince çıktığı yerdir eşer method çok kez çağrılırsa stack overflow olur tail recursion nedir, kısaca açıklayınız. - java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static binding compiler time dynamic run time java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? çünkü override edilemezler dolayısı ile derleme zamanında sınıf üzerinden çözülür overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overriding run time overloading compile time dinamik bağlamada jvm'nin görevi nedir? hangi metotun çağrılacağını nesnenin gerçek türüne göre belirlemek java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? upcasting bir child class nesnesinin üst sınıfın referansında saklanmasıdır downcastibg bir üst sınıf referansının alt sonıf türüne çevirmektir java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? override edilme özelliği kaybolurdu , gereksiz bellek kullanımı olurdu class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child // dynamic [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book // dynamic java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlardan nesne oluşturulamaz , evet olabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır yapılamaz abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. genellikle bi şablon görevi görürler , tamamen veya kısmen tamamlanmış metotlar içerebilirler, abstract [CODE]classlardan nesne oluşturulamaz abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? [CODE]interfacelerde değişkenler final değerlerini alırlar abstract classlar isle sonradan implement edilebilecek şablonlar gibi düşünülebilir o yüzden böyle bi zorunluluk yoktur , abstract classlar kullanılabilir interfaceler kullanılamaz marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet ikisi de mümkündür abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? c is a shape ama shape in draw metodu implement edilmemiş bunun yerine circle c = [CODE]new circle() denilirse drawing circle displaying çıktısı verir interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? - bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] //a=65 a=97 private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; [CODE]if(batterylevel > 0){[/CODE] isoperational = true; } [CODE]else{[/CODE] isoperational = false; } } [CODE]public string getname() {[/CODE] [CODE]return name ;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel ;[/CODE] } [CODE]public void setbattery(int batterylevel) {[/CODE] this.batterylevel = batterylevel ; } [CODE]public boolean getisop() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisop(boolean isoperational ) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] this.batterylevel = 100; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""% "" + "" is\r\n"" + // ""operational:"" + isoperational);[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class question1 {[/CODE] //q1 dedigimde compiler sorun cikardi caner hoca sebebnini bilmiyorum dedigi icin question1 seklinde adlandirdim [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = findperm(""abc"" , 0);[/CODE] system.out.pr[CODE]intln(s);[/CODE] [CODE]string s1 = findperm(""ab"" , 0);[/CODE] system.out.pr[CODE]intln(s1);[/CODE] [CODE]string s2 = findperm(""a12b"" , 0);[/CODE] system.out.pr[CODE]intln(s2);[/CODE] } [CODE]public static string findperm(string s , int i){[/CODE] char c = 'x'; if(i >= s.length()) [CODE]return """";[/CODE] if(s.charat(i) != '0' && s.charat(i) != '1' && s.charat(i) != '2' && s.charat(i) != '3' && s.charat(i) != '4' && s.charat(i) != '5' && s.charat(i) != '6' && s.charat(i) != '7' && s.charat(i) != '8' && s.charat(i) != '9' ){ if(s.charat(i) <= 'z' && s.charat(i) >= 'a'){ c = (char) (s.charat(i) - 'a'); return c + findperm(s.sub[CODE]string(i+1) , i+1) ;[/CODE] } if(s.charat(i) <= 'z' && s.charat(i) >= 'a'){ c = (char) (s.charat(i) + 32); return c + findperm(s.sub[CODE]string(i+1) , i+1);[/CODE] } } [CODE]else{[/CODE] return s.charat(i) + findperm(s.sub[CODE]string(i+1) , i+2) ;[/CODE] } [CODE]return """";[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name ;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getloc() {[/CODE] [CODE]return location ;[/CODE] } [CODE]public void setloc(string location) {[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] this.robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i = 0 ;[/CODE] i < robots.size(); i++){ robots.get(i).charge(); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i = 0 ;[/CODE] i < robots.size(); i++){ robots.get(i).pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery{[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] //??? // burada robotfactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz factory.allrobots(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } [CODE]int keeper = getbatterylife();[/CODE] @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = keeper;[/CODE] } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... armed: "" + isarmed); this.batteryl[CODE]ife-=10;[/CODE] } else if(this.batteryl[CODE]ife < 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] if(this.isarmed){ this.isarmed = false; } [CODE]else{[/CODE] this.isarmed = true; } } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]int keeper = getbatterylife();[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = keeper;[/CODE] } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress... cleaning power: "" + cleaningpower); this.batteryl[CODE]ife-=10;[/CODE] } else if(this.batteryl[CODE]ife < 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean..."" ); } } [CODE]public void boostcleaningpower(){[/CODE] this.cleaningpower += 50; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int totalproduced = 0;[/CODE] [CODE]public robotfactory() {[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] totalproduced++; robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] totalproduced++; robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ system.out.println(""securityrobot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", armed: "" + ((securityrobot) robots.get(i)).isarmed()); } if(robots.get(i) instanceof cleaningrobot){ system.out.println(""cleaningrobot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", cleaning power: "" + ((cleaningrobot) robots.get(i)).getcleaningpower()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ ((cleaningrobot) robots.get(i)).setcleaningpower(((cleaningrobot) robots.get(i)).getcleaningpower() + miktar); system.err.println(""cleaningrobot - "" + robots.get(i).getmodelname() +"" now has cleaning power: "" + ((cleaningrobot) robots.get(i)).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ securityrobot s = (securityrobot)robots.get(i); s.togglearmedmode(); if(s.isarmed()){ system.out.println(""securityrobot - "" + s.getmodelname() + "" is now armed""); } [CODE]else{[/CODE] system.out.println(""securityrobot - "" + s.getmodelname() + "" is now unarmed""); } } } } [CODE]public void allrobots(){[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalproduced + "" robot uretildi\r"");[/CODE] } } 3"
4779274,1,"4779274 recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab221301009 {[/CODE] // test için main [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(""\n"" + collatz(5));[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2,6,7,1,3,9,11,2,1,-3}; //kontrol etmek için karışık yaptım [CODE]for(int i=0;[/CODE] i<arr.length; i++) system.out.pr[CODE]int(arr[i] + "" "");[/CODE] cocktailsort(arr); // fonk call system.out.pr[CODE]int(""\n yeni hali :"");[/CODE] [CODE]for(int i=0;[/CODE] i<arr.length; i++) system.out.pr[CODE]int(arr[i] + "" "");[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(""\n"" + s1.say() +"" ve ""+ s2.say()); } // soru 1 collatz [CODE]public static int collatz(int i) {[/CODE] [CODE]int mod = i % 2;[/CODE] system.out.pr[CODE]int(i + "" -> "");[/CODE] // adımları yazmak için [CODE]if (i == 1) return 0;[/CODE] [CODE]else{[/CODE] [CODE]if(mod == 1) return 1 + collatz((i*3)+1);[/CODE] [CODE]else return 1 + collatz(i / 2);[/CODE] } } // soru 2 cocktail shaker sort [CODE]public static void cocktailsort(int[] arr) {[/CODE] if (arr.length != 0) karsilastir(arr,0, 1, 1); else system.out.pr[CODE]intln(""olmaz"");[/CODE] } [CODE]static void karsilastir (int[] arr, int index, int yon, int iteras) {[/CODE] boolean kucukmu = arr [index] <= arr [index + yon]; //iterasyon bittiyse boş dön bitir if (iteras == arr.length) [CODE]return;[/CODE] // yöne göre küçük mü büyük mü olması değişmesini etkiliyordu o yüzden böyle [CODE]if (kucukmu == false && yon == 1 || kucukmu == true && yon == -1) {[/CODE] [CODE]int temp = arr [index];[/CODE] arr [index] = arr [index + yon]; arr [index + yon] = temp; } // burada tamamen sınırlara gelince yön değişmesi ve iterasyon artması için falan // ayrı ayrı çağırdım daha kısa yapılabilirdi if (index == arr.length - 2 && yon == 1) karsilastir(arr, arr.length - 2, -1, iteras + 1); [CODE]else if (index == 1 && yon == -1) karsilastir(arr, 1, 1, iteras + 1);[/CODE] [CODE]else karsilastir(arr, index + yon , yon, iteras);[/CODE] } } //soru 3 [CODE]class sayac {[/CODE] [CODE]string str;[/CODE] sayac([CODE]string str) {[/CODE] this.str = str; } //[CODE]stringi alan bi helper lazımdı her şeyi onda yaptım aslında public int sayhelp(string str) {[/CODE] if (str.length() == 0) [CODE]return 0;[/CODE] else if (str.charat(0) == '1') return 1 + sayhelp(str.sub[CODE]string(1));[/CODE] else return 0 + sayhelp(str.sub[CODE]string(1));[/CODE] } [CODE]public int say() {[/CODE] [CODE]return(sayhelp(str));[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.sql.time; import java.util.arrays; import java.util.collections; import java.util.list; [CODE]public class lab2_221301009 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki) {[/CODE] ((metalsarki)sarki).gostermetalozellikleri(); } } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim, sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] system.out.println(""[metal] ""+this.sanatci+"" - ""+this.isim+"" (""+this.metalozellik+"")""); } [CODE]void gostermetalozellikleri() {[/CODE] system.out.println(this.sanatci+"" - ""+this.isim+"" [ozellik: ""+this.metalozellik+""]""); } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]string rockozellik = ""huzurlu ve nostaljik"";[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[rock] ""+this.sanatci+"" - ""+this.isim+"" (""+this.rockozellik+"")""); } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasikozellik = ""hafif ve sakin"";[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[klasik] ""+this.sanatci+"" - ""+this.isim+"" (""+this.klasikozellik+"")""); } } [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean yuksekmi = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki && yuksekmi == false) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] yuksekmi = true; } [CODE]else if (!(sarki instanceof rocksarki) && yuksekmi == true) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] yuksekmi = false; } sarki.oynat(); } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursive (özyineleme) bir metodun kendini tekrar çağırması - tetiklemesi diyebiliriz, base kısmı vardı recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. en küçük durum için gerekliydi, bu fonksiyonun yani metodun kendini sürekli çağırarak çalışmasının bi noktada durmasını sağlayan kısım. yani baz kısmında tekrar çağırmayız bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? her bi iterasyonda bir önceki elemana giden yani sondan başlayarak yazdıran bi fonksiyonumuz olurdu, base case ise ilk eleman (fonksiyonun eleman girdisi n ise base n ==0 koşulu olabilir) recursive bir metotta base case olmazsa ne olur? sonsuza kadar gidebilir bence anlamli sonuç olmaz, baz ile en son durumda recursiveı durdurmayı amaçlıyoruz çünkü while yazıp koşul yazmamak gibi bi şey olur recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. stackte tüm çağrılan fonksiyonların girdileri birikir üst üste. aynı fonk ne kadar çağrıldıysa fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. recursive genel verimsiz ve fibonacci de çok fazla stack depolaması gerektirir bence tail recursion nedir, kısaca açıklayınız. unuttum abstraction kavramını açıklayınız. soyutlama, ""is a"" ilişkilerinde temel olan özellikleri bir kenarda soyut bi biçimde tutma diyebiliriz bence dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mümkün, zaten hourlyemployee is an employee mantığıyla bakınca dönüş tipi değişmio protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier dediğimiz default mu eğer öyleyde no modifier daha yakın. protected subclas falan da alıo java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? e çünkü alt sınıftan bi nesne tanımladığımızda bunun atasındaki instance variablelerinr de atama yapmamız gerekecek. atasının atası bu zincir ne kdr var, ne kadar instamce var değer atamak için bunları bilmediğimizden her cınstructor atasına referans verirse zincirleme her şey atanabilir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır olmaz aynı isimli metotlar falan sıkıntı java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b nin subclassı demek oluo, ata oğul ilişkisinin kontrolü metot overriding ve overloading kavramlarını açıklayınız. overriding: aynı imza (isim ve değişkrbler) ; overloading: aynı metot ismi ama variablrlrr farklı yani aslında bambaşka bi fonksiyon compiler için bence [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? hocam derived objesi açmışız hani derivedin consrructorunda super varsa o base() çalıştırır o da pr[CODE]int();[/CODE] çağırır. o da base nin kendi pr[CODE]intine gider o da ""base"" çıktısı verir cevap base bence class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? bence 10. bence zaten c.getvalue direkt parentteki getvalue gider gibi hissettim java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? comp sırasında kodun gidişine göre anlamı değişmeyen bindingler en başta static olarak yapılır, override falan varsa dynamic çünkü hangisine bind etmeli falan java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? üçünü de artık override edemezsin, bu yüzden static bindingle direkt net olarak o bağlanır overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overriding varsa dynamic, overloading zaten bambaşka bi methot tanımı anlamına geldiğinden static bindingi bozmaz dinamik bağlamada jvm'nin görevi nedir? runtime sırasında bağlamı belirlemek ?? yani override var ve en yakın overrideya bağlıyor kısaca açıklamaya çalıştım java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? biri diğerini kapsıyo olduğundan upcasting implicit halde olabilir ama downcasting için aynısını diyemeyiz yapılamaz java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? e hepsini runtime da belirlemesi bence zaman karmaşıklığını arttırırdı, jvm nin o anda bununla upraşmasına gerek yok bazı bindingler net şekilde başta yapılabilecekken class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child yazar, override olduğundan comp başında binding olmaz yani dinamik bağlama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? productbook çıktısı verir , iki bağlama tipi de var arryin ilk itemi direkt product diğeri ise book olduğu içib ama belki java'da abstract [CODE]class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlar soyuttur, metotu yaratır tanım içermez alt classlar için yapı sağlar;[/CODE] constructor olabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? implement dediğimiz interface ile alakalı değil mi abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. s[CODE]ıfatlardan bahsedebilir hale geliriz, soyutlama işte yani nesnesel programlama yapabilmek için nesneyi koda soyut aktardığımız hal abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract [CODE]classın abstract olmayan metotları olabilir interface tamamen soyut, tip olabilirler aynı zamanda marker interface ve functional interface kavramları nedir, nasıl kullanılır? ilk kez duyuyırum bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet birden çok eder;[/CODE] ama bir [CODE]interface diğerini extend eder abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? hata animal a variablesinin yine animal tipinde bir objeyi tutuyo olması. bu durumda a.sound abstract kalmış bi function olarak kalır, dogtaki sounda zaten inemez ama bence hata da verir. onu dğzeltirsek de çıktı animal:buddy /n woof olr. [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? bence interfacenin içinde de metot içi tanım yapamıyoz zaten ikisi ayrı ayrı yapabilseydi aynı anda implement edemezdik bence, o iç tanım duck classı içinde yapılmalı ve yazdırılmalı. bu haliyle output doğrudan swimming ya da flying biz ne dersek artık sonuçta ikisini de yapabilir, ne durumda olduğuna bağlı bi metot yazılır yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. error ve exception olarak ayrılır, compile error ve runtime error olaeak ayrılır exception handlingin amacı nedir? oluşacak muhtemel hatalara doğru müdahele etmek, hatalardaki kontrolle kodu tam anlamıyla yönetebilmiş olmak exception handlingde finally bloğunun amacı nedir? eğer hata alındıktan (ya da almadıktan) sonra kesiblikle yapılması gereken bir şey varsa bu blokta bunlar gerçekleşir mesela bi dosyayı bi scanneri kapatmak. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked, compile esnasında kontrol edilmesi gereken exceptionlarken unchecked ler runtime esnasında oluşabilme ihtimali serbest olan exceptionlardır java'da kendi exceptionunuzu nasıl tanımlarsınız? exception [CODE]classına bi oğul class tanımlayarak (exceptiın ile extend ederek) sonra constructoru, gerekiyorsa hata mrsajını vs tanımlarım java'da error ve exception arasındaki fark nedir, açıklayınız errorlar geri dönülemez sistem hataları olarak nitelendirilir, exception ise coder tarafından handle edilebilecek kusurlardır java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? metod, bu hatayla ilgili kendi düzeltmelerini yaptıktan sonra bir öncesinde çağrıldığı metodda da düzeltmeler gerekiyorsa üst metodun da catch edebilmesi için tekrar fırlatılır 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? override ederken ana metodda fırlatılan hata türü veya o türün oğul hataları fırkatılabilir, ata exceptionlar override metodda throw edemez static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir ama hata var. catchlerin sırası yanlış. bu durumda exception caught çalışır. ama daha özelinde çalışması gereken alttaki catchtir. derlenir ama mantığı yanlış [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally done -1 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class quiz1q1_221301009 {[/CODE] [CODE]public static void main(string [] args) {[/CODE] [CODE]string hey = ""a1b2"";[/CODE] combination(hey); } // a: 65 a: 97 [CODE]static void combination(string str) {[/CODE] [CODE]int numofletters=0;[/CODE] [CODE]int[] indexes = new int[10];[/CODE] [CODE]int y=0;[/CODE] [CODE]for(int i=0;[/CODE] i<str.length(); i++) { if(str.charat(i) >= 65 && str.charat(i) <= 97) { numofletters++; indexes[y] = i; y++; } } //amacım letter olan kaç tane char olduğunu ve bu charların indexlerini bulup recrsn fonksiyona götürmek system.out.pr[CODE]int(""["" + combination_rec(str, 2^numofletters - 1, indexes) + ""]"");[/CODE] } //bu fonksiyonda da amacım harf sayısının 2 üzerili hali yani //toplam kombinasoyn sayısını buraya aktardıktan sonra //her bi kombinasyonu booleanlı bi hale dönüşütürerek //büyütüp küçülmeyi ayarlamayı sağlamaktı //mesela 2 karakter varsa numofletters=3 ile başlayacak //3 : 11 ile ikisini de değişicek sonra 2 : 10 sonra 1: 01 sonra 0: 00 ile //tüm olası büyütme küçültmeleri yapmaktı ama olmadı //bi de 3 harf ile sınırlandırdım malsef döngü ile total harf sayısı //yapılabilirdi ama sürem yetmedi [CODE]static string combination_rec(string str, int numofletters, int[] index) {[/CODE] [CODE]if(numofletters == 0) return """";[/CODE] [CODE]else return ""c"";[/CODE] [CODE]string word = """";[/CODE] boolean [] comb = [CODE]new boolean[3];[/CODE] comb[0] = (numofletters%2 == 1)? true:false; comb[1] = ((numofletters/2)%2 == 1)? true:false; comb[2] = ((numofletters/4)%2 == 1)? true:false; // bu comb değerleri bu iterasyonda hangi harfin değişmesi hangisinin // aynı kalması gerektiğini belirler [CODE]int y=0;[/CODE] char c; [CODE]for(int ind=0;[/CODE] ind<str.length(); ind++){ [CODE]if(ind == index[0] || ind == index[1] || ind == index[2]){[/CODE] [CODE]if(comb[y] == true) {[/CODE] if(str.charat(ind) < 97) c=str.charat(ind) + 32; else c=str.charat(ind) - 32; // true ise değiş. } else c = str.charat(ind); //false ise aynı kal } else c = str.charat(ind); //harf değilse değişme ve word değişkenine bu charı al word = word + c; } // wordu ekrana yazdır diğer word için iterasyonu 1 azalt. [CODE]return ""\"""" + word + ""\"""" + combination_rec(str, numofletters-1, index);[/CODE] } } import java.util.arraylist; [CODE]public class quiz1q2_221301009 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int newbat) {[/CODE] this.batterylevel = [CODE]newbat;[/CODE] } [CODE]public boolean getoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean newboolean) {[/CODE] this.isoperational = [CODE]newboolean;[/CODE] } [CODE]public void charge() {[/CODE] batterylevel = 100; isoperational = true; } robot() { name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } robot([CODE]string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; isoperational = (batterylevel>0) ? true:false; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: %"" + batterylevel + "" is operational: "" + isoperational);[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<robot>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getloc() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setloc(string loc) {[/CODE] this.location = loc; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(i=0;[/CODE] i<robots.size(); i++) { robots.get(i).charge(); } } [CODE]public void printfactory() {[/CODE] system.out.println(""factory name: "" + this.name + "" location: "" + this.location + ""\nrobots operating here:""); [CODE]for(int i=0;[/CODE] i<robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=100;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]int(""\n"");[/CODE] //static method yazdım ??? sorusu için robotfactory.toplamroboturetimi(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife < 10) {[/CODE] system.out.println(""[""+modelname+ ""] not enough battery to scan threats...""); } [CODE]else{[/CODE] system.out.println(""[""+modelname+ ""] scanning for threats... armed: ""+ isarmed); batteryl[CODE]ife -= 10;[/CODE] } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } // gerekiyordu [CODE]public boolean getarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] //gerekiyodu:) [CODE]public int getcleaning() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaning(int miktar) {[/CODE] cleaningpower += miktar; } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife < 10) {[/CODE] system.out.println(""[""+modelname+ ""] not enough battery to clean...""); } [CODE]else{[/CODE] system.out.println(""[""+modelname+ ""] cleaning in progress... cleaning power: ""+ cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower++; //?? arttırır yazmış anlamadım 1 tane artsın } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]static int toplam = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] abstractrobot [CODE]newrob = new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add([CODE]newrob);[/CODE] toplam++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] abstractrobot [CODE]newrob = new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add([CODE]newrob);[/CODE] toplam++; } [CODE]public void performalltasks() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]string type = (robot instanceof cleaningrobot) ? ""cleaningrobot"" : ""securityrobot"";[/CODE] string info = (robot instanceof cleaningrobot) ? ""cleaning power: "" + ((cleaningrobot)robot).getcleaning() : ""armed: "" + ((securityrobot)robot).getarmed(); system.out.println(type+ "" - model: ""+ robot.getmodelname()+ "", battery: ""+ robot.getbatteryl[CODE]ife()+"", ""+info);[/CODE] } } //bunun için de ister istemez setter gerekiyor, ilgili yerde oluşturdum. [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot)robot).setcleaning(miktar); system.out.println(""cleaningrobot - "" + robot.getmodelname() + "" now has cleaning power: "" + ((cleaningrobot)robot).getcleaning()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof securityrobot) {[/CODE] ((securityrobot)robot).togglearmedmode(); string type = ((securityrobot)robot).getarmed() == true ? ""armed"": ""unarmed""; system.out.println(""securityrobot - "" + robot.getmodelname() + "" is now "" + type); } } } //??? sorusu //[CODE]static int toplam ile class içinde herhangi bi objede herhangi bi robot oluşumunda saymayı sağladım public static int toplamroboturetimi() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam ""+ toplam + "" robot uretildi"");[/CODE] [CODE]return toplam;[/CODE] } } 1"
