{
  "questions": [
    "Öğrenci No.",
    "Yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz.",
    "Exception handlingin amacı nedir?",
    "Exception handlingde finally bloğunun amacı nedir?",
    "Java'da 'Checked' ve 'Unchecked' exceptionların farkı nedir?",
    "Java'da kendi exceptionunuzu nasıl tanımlarsınız?",
    "Java'da Error ve Exception arasındaki fark nedir, açıklayınız",
    "Java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir?",
    "'throws' declarationunun metot overriding yaparken kısıtları nelerdir?",
    "static void printIndex(int[] arr, int index){\n    try{\n        System.out.println(arr[index]);\n    }\n    catch(Exception e){\n        System.out.println(\"Exception Caught\");\n    }\n    catch(ArrayIndexOutOfBoundsException e){\n        System.out.println(\"Array Exception Caught\");\n    }\n}\n\n//PSVM\nprintIndex({1, 2, 3, 4, 5}, 5);\n\nKod bu şekilde derlenir mi?\nEğer derlenmezse hata(lar)nın kaynağı nedir?\nVarsa hatay(lar)ı nasıl düzeltirsiniz?\nVarsa hata(lar)yı düzelttikten sonra output ne olur?",
    "static int doExceptionalMath(int x){\n    try{\n         int result = x / 0;\n        return result;\n    }\n    catch(ArithmeticException e){\n        System.out.println(\"CAUGHT\");\n        return -1;\n    }\n    finally{\n        System.out.println(\"FINALLY\");\n        try{\n            finalMath();\n        }\n        catch(Exception e){\n            catchFinal();\n        }\n        return 41;\n    }\n}\n\nstatic void finalMath() throws Exception{\n    System.out.println(\"OOPS\");\n    throw new Exception();\n}\nstatic void catchFinal(){\n    System.out.println(\"DONE\");\n}\n\n// PSVM\nSystem.out.println(doExceptionalMath(77));\n\nOutput?"
  ],
  "answers": [
    {
      "id": "7817361",
      "cevap1": "2. Exception ve error.\n\nRun time error\nOut od bound exception",
      "cevap2": "Exception'ları giderip kodları çalıstırmak.",
      "cevap3": "Her türlü çalışmasını istediğimiz kodları girdigimiz bölüm.",
      "cevap4": "A",
      "cevap5": "Exception e = new IOException gibi",
      "cevap6": "A",
      "cevap7": "Belli şartlar altında çalışmasını istediğimiz kodları çalıştırabilmek icin.",
      "cevap8": "A",
      "cevap9": "Derlenir. Exception Caught.",
      "cevap10": "CAUGHT, -1, FINALLY, OOPS, DONE"
    },
    {
      "id": "1762204",
      "cevap1": "Compile time, runtime hataları. Compile time hatası syntax error olur. Runtime ise divide by zero hatası olur. ",
      "cevap2": "Hata olduğu zaman programın çökmesi yerine kendi istediğimiz bir şeyi yapmak. Örnek olarak gracefully exit yapmamıza da yarar. ",
      "cevap3": "Hata olsa da olmasa da en son çalışacak bir kod bloğunu buraya yazarız. En son dosya kapatma işlemi gibi kodları buraya yazarız.",
      "cevap4": "Checked exception olursa Java compile ederken hata verir ve düzeltilmesini ister. Unchecked'de ise sadece hatalı kod çalıştığı zaman hata verir. ",
      "cevap5": "Exception class'ını extend eden başka bir class oluşturarak istediğimiz exception'ı oluşturabiliriz. ",
      "cevap6": "Error daha ciddi hatalar için kullanılırken exception daha az ciddi hatalarda olur. Error'lar handle edilemezken exception'lar edilebilir. ",
      "cevap7": "Stack'ten çıkıp bir üstteki metodun da hatayı handle etmesi için kullanılabilir. ",
      "cevap8": "Üst sınıfın fırlattığı exception'dan daha geniş bir Exception firlatamaz. ",
      "cevap9": "Kod derlenir. Çıktısı:\nArray Exception Caught ",
      "cevap10": "CAUGHT\nFINALLY\nOOPS\nDONE\n41"
    },
    {
      "id": "9830856",
      "cevap1": "Syntax hatası örnek: İnt sayi=5\nCompile Time hatası örnek: İnt sayi=\"merhaba\";\nRun time hatası örnek:  int sayi=10/0;",
      "cevap2": "program sırasında oluşabilecek hataları kontrol altına alarak uygun şekilde çalışmasını sağlamaktır",
      "cevap3": "hata olsa da olmasa da her türlü çalışmasını istediğimiz parçanın çalışmasını sağlar",
      "cevap4": "checked exceptionlar derleme zamanında kontrol edilir, unchecked ise runtime da kontrol edilir checked exceptionlarda try catch blokları kullanılır",
      "cevap5": "exception veya runtime exception classlarından derived class oluşturarak",
      "cevap6": "exceptionlar bloklarla düzeltilebilecek sorunlardır genellikle ufak tefek yanlışlarla olur( örneğin syntax) errorlar ise genelde kullanıcı tarafından yakalanamaz yazılan algoritmada bir sıkıntı oluşması örnek olabilir ",
      "cevap7": "hatayı daha detaylı loglamak ve daha anlamlı bşr exception ile değiştirmek ",
      "cevap8": "daha geniş kapsamlı exception fırlatılamaz ",
      "cevap9": "derlenmez, main method yazımı hatalı catch bloklarının yazım sırası yanlış",
      "cevap10": "CAUGHT\nFINALLY\nOOPS\nDONE\n41\n"
    },
    {
      "id": "6202193",
      "cevap1": "Compile error, int a = 1.0 type mismatch, runtime, int[] a = new int[3]; a[4] arrayindexoutofbounds, exception, 1/0, arithmetic exception error, null pointer",
      "cevap2": "Bir kodda oluşan hatanın sonraki kodları da engellemesinin önüne geçmek ",
      "cevap3": "Exception atılsa da atılmasa da run edilir.",
      "cevap4": "Birinin handle edilmesi zorunluyken diğeri değildir",
      "cevap5": "Throwable classtan extend ederek kendi exception classımızı tanımlar ve örneğin throw new MyException() deriz",
      "cevap6": "Errorlar daha çok compiler ve bilgisayara özgü hatalar iken exceptionlar daha çok alınan imputların beklenenden farklı olmasıyla ilişkilidir",
      "cevap7": "exception ile olan işimiz daha bitmemiş olabilir, exception durumunda birden çok alanda düzeltmeler yapılması gerekebilir",
      "cevap8": "Throwable class veya alt classları throw edilebilir",
      "cevap9": "Hayır. Birden fazla catch vardır. İki catchtan biri silindiğinde kalan catch run edilir çünkü kodda oluşan hata hem arrayindexoutofbounds heö de ecceptiondır. Silinen metoda göre exception caught veya array exception caught ",
      "cevap10": "CAUGHT\nFİNALLY\nOOPS\nDONE\n41"
    },
    {
      "id": "2051651",
      "cevap1": "3 çeşit hata vardır: compile error, örnek: syntax hataları. runtine exception örnek: 0 a bölme. Logical error: algoritmada yapılan hatalar",
      "cevap2": "Program akışında beklenmedik durumlarla karşılaşıldıgında bunları düzeltmek ya da bunlara özel işlemler yapmak ",
      "cevap3": "Ondan önceki bloklardan hangisine girdiginden bağımsız olarak her zaman çalışmasını istedigimiz kod için vardır.",
      "cevap4": "Handle edilmiş exceptionlar checked, handle edilmemiş olanlar unchecked ",
      "cevap5": "Exception classını inherit eden yeni bir class yazarak ",
      "cevap6": "Error kod yaxarkwn veya kodun mantıgında yapılan bir hatadır. Exception program akışında karşılaşılan beklenmeyen durumlardır",
      "cevap7": "Exceptiona Özel işlemleri yapmak ama yine de programı durdurup kullanıcıya bildirmek için ",
      "cevap8": "Bilmiyorum ",
      "cevap9": "Derlenmez. Hatanın kaynağı e referansının hem Exception hem de ArrayIndexOutOfBoundsException objesi icin kullanılması. Duzeltmek için e'lerden birinin ismi değiştirilebilir ",
      "cevap10": "Caught.\nFinally \nOOPS\nDONE\n41"
    },
    {
      "id": "6897869",
      "cevap1": "Runtime errors, örnek null pointer exception.\nCompiler errors, index outofbound exception.\nLocigal errors, programcının yaptığı hatalar.",
      "cevap2": "Olağanüstü durumlarda programın düzgün çalışmasını sağlamak. Dosya bulunamadığında hata verip devam etmesi gibi.",
      "cevap3": "Hatayla karşılasılsa da karşılasılmasa da çalışacak kod parçasını belirtmek için.",
      "cevap4": "Checked, catch bloğu ile yakalanıp düzeltmek için bazı işlemler yapılan exceptionlardır.",
      "cevap5": "Önceden tanımlı bir exception classı extend ederek. En az iki constructor yazmak ve ata classın constructorunu çağırmak uygun olur.",
      "cevap6": "Error jvm in temel işlevlerinde meydana gelen programcının genelde düzeltemeyeceği hatalardır. Exception olağanüstü durumlarda oluşan düzeltmesi daha basit hatalardır.",
      "cevap7": "Programın daha üst bloğunda düzeltilmedi gerekiyordur.",
      "cevap8": "Ata classın fırlatmadığı bir exceptionu subclsss fırlatamaz.",
      "cevap9": "Derlenir.\nOutput Exception caught",
      "cevap10": "CAUGHT\nFINALLY\nOOPS\nDONE\n41"
    },
    {
      "id": "4779274",
      "cevap1": "error ve exception olarak ayrılır, compile error ve runtime error olaeak ayrılır",
      "cevap2": "oluşacak muhtemel hatalara doğru müdahele etmek, hatalardaki kontrolle kodu tam anlamıyla yönetebilmiş olmak",
      "cevap3": "eğer hata alındıktan (ya da almadıktan) sonra kesiblikle yapılması gereken bir şey varsa bu blokta bunlar gerçekleşir mesela bi dosyayı bi scanneri kapatmak.",
      "cevap4": "checked, compile esnasında kontrol edilmesi gereken exceptionlarken unchecked ler runtime esnasında oluşabilme ihtimali serbest olan exceptionlardır",
      "cevap5": "exception classına bi oğul class tanımlayarak (exceptiın ile extend ederek) sonra constructoru, gerekiyorsa hata mrsajını vs tanımlarım",
      "cevap6": "Errorlar geri dönülemez sistem hataları olarak nitelendirilir, exception ise coder tarafından handle edilebilecek kusurlardır",
      "cevap7": "metod, bu hatayla ilgili kendi düzeltmelerini yaptıktan sonra bir öncesinde çağrıldığı metodda da düzeltmeler gerekiyorsa üst metodun da catch edebilmesi için tekrar fırlatılır",
      "cevap8": "override ederken ana metodda fırlatılan hata türü veya o türün oğul hataları fırkatılabilir, ata exceptionlar override metodda throw edemez",
      "cevap9": "derlenir ama hata var. catchlerin sırası yanlış. bu durumda Exception Caught çalışır. ama daha özelinde çalışması gereken alttaki catchtir. derlenir ama mantığı yanlış",
      "cevap10": "CAUGHT\nFINALLY\nDONE\n-1"
    },
    {
      "id": "1764665",
      "cevap1": "Compile time exception örneğin: syntax hataları, runtime exception örneğin: out of bound, logical exception örneğin: yanlış çözüm yolları kullanmak. ",
      "cevap2": "Exception bir durumla karşılaşıldığında programın çökmesine sebep olmadan sorunu çözmeye yarar",
      "cevap3": "Exception olsa da olmasa da çalışır. Her şeyin sonunda o kısım okunur. Örneğin aldığımız memoryi geri vermemiz gerekiyorsa bu kısim kullanılır. Genel amacı her şeye rağmen çalışması gereken şeylerin exception halinde calismamasina engel olmaktir.",
      "cevap4": "Checked exception try catch ile yapılır unchecked signatureda belirtilir",
      "cevap5": "Exception sınıfından extend edilmiş bir class tabimlariz ",
      "cevap6": "Error bir hata iken exception hata değil kodun çalışmadığı istisnai durumlardır.",
      "cevap7": "Exceptionlar bazı durumların bilgisini aktarmakta da kullanılabilir. Bu durumda bunu yapariz ",
      "cevap8": "Var olan exception ya çözülmeli ya da daraltılmalidir exception genisletilemez. ",
      "cevap9": "Derlenmez, arraylist 5 indexinde bir değere sahip değil. İndex azaltılabilir ya da arraylist uzatılabilir. Girilen indexteki değer yazdırılır.",
      "cevap10": "Caught\n finally\n oops \ndone \n41"
    },
    {
      "id": "6275288",
      "cevap1": "1-) Compile tim error: int i=5 ve int i=6 yazarsak mesela. 2-) Runtime error: Arrayoutofboundexeption mesela. Logical error: mantıksal hatadır.",
      "cevap2": "Oluşabilecek hatalara karşı önlem alma ve hatayı engelleme. ",
      "cevap3": "Her türlü çalışmasını istediğimiz kod parçasını oraya yazarız o da çalışır. ",
      "cevap4": "Checked excpetionlar için ya declare işlemi ya da handle işlemi yapmalıyız. Unchecked exceptionlar için yapmayız. ",
      "cevap5": "Class oluşturup exceptionu extend ederim. ",
      "cevap6": "Error jvm ile exceptionlar genellikle kullanıcı girişiyle alakalıdır. ",
      "cevap7": "O exceptionun handle işleminin eksiksiz olmasını isteriz belki. ",
      "cevap8": "Verdiğimiz hata türünü genişletemeyiz. Throws Arrayoutofboundexeption verdiysek override sonrası throws exception diyemeyiz. ",
      "cevap9": "Derlenir.Hataların kaynağı indexin arrayin sınırınj aşması. Hataları düzeltmek için öncelikle catch bloklarının yeri değişmeli. Üst alta gelcek şekilde.Arrayoutofboundexeption alacağız o yüzden ya arrayin boyutunu arttıralım ya da indexi azaltalım. İndex 4 olursa output 5 olur. ",
      "cevap10": "Caught\nFinally\nOops\nDone\n41"
    },
    {
      "id": "6429016",
      "cevap1": "Logical örneğin bir sayının 0a bölünmesi. Syntax hatası compiler içinde çözülebilir ;unutmak. Runtime hatası çok uzun süren bitmeyen recursionlar. Exceptionlar. ",
      "cevap2": "Programın hatalar nedeniyle kapanmasını önlemek. Hataları user görmeden önce yakalamak ve düzeltmek. Hata kaynaklarını görmek. ",
      "cevap3": "Finally end durumundan sonra bile çalışmasını istediğimiz bloktur. ",
      "cevap4": "Checked derleme sırasında kontrol edilir unchecked exception lar ise runtime exceptionlaridir. Runtime sınıfından üretilir diğeri exception sınıfından. ",
      "cevap5": "Exception classını kullanarak tanımlarız içine bir throw be if ekleriz. ",
      "cevap6": "Error sistem seviyesinde ciddi hataları gösterir. Exception yazılıma müdahale edilerek çözülebilecek hataları. Exception lar daha basittir ikisi de trowable dır. ",
      "cevap7": "Başka bir exceptiona çevirmek için olabilir. ",
      "cevap8": "Daha geniş kapsamlı bir exception atamaz. ",
      "cevap9": "Derlenmez çünkü daha genel bir exception daha önce yakalanmış ve sonradan daha alt bir exception firlatilmis. Hatayı çözmek için hiyerarşisi düzeltmek gerekir. Genel istisna daha sonra yakalnamlali. Çıktı array exception caught. ",
      "cevap10": "Caught finally oops done 41"
    },
    {
      "id": "8783086",
      "cevap1": "2 çeşit error exception file io ",
      "cevap2": "hatayı bulup düzeltmek için",
      "cevap3": "try catchten sonra her türlü çalıştırmak istenilen kod için kullanılır",
      "cevap4": "cheked exceptionlar runtime a geçmeden zaten kontrol edilmiş olur",
      "cevap5": "exception klasını extend ederek tanımlanabilir",
      "cevap6": ".",
      "cevap7": "catch edile bloğun dışında başka bir catch bloğu olabilir ",
      "cevap8": "return type ın throwable olması lazım",
      "cevap9": "derlenir\nException Caught",
      "cevap10": "CAUGHT\nFINALLY\nOOPS\nDONE\n41\n\n\n"
    },
    {
      "id": "8435496",
      "cevap1": "2 \nCompile Time, Örnek: Syntax hatası.\nRuntime: Array index out of bounds hatası.",
      "cevap2": "Hata olduğunda program tamamen durmaz. O hata handle edilir ve devam edilebilir.",
      "cevap3": "Her zaman çalışır.  Hata olsa da olmasa da try catch ten sonra çaışır. (System.exit() yapmazsak)",
      "cevap4": "Checked in kodda handle edilmesi compiler tarafıdan zorunlu tutulur. Unchecked in tutulmaz.",
      "cevap5": "Yeni class açıp Exception veya onun child classlarından bitini extend ederim. ",
      "cevap6": "Error throwable değil",
      "cevap7": "Çağırılan metotlar stack inde her yerde handle etmek.",
      "cevap8": "Extend edilen throwable orijinal metotta edilen  den dar (edilenin child ı) olamaz.",
      "cevap9": "Hata yok\nException Caught",
      "cevap10": "CAUGHT\nFINALLY\nOOPS\nDONE\n41"
    },
    {
      "id": "7214465",
      "cevap1": "Syntax , logic ve runtime hataları",
      "cevap2": "Hataları daha kolay bulur ve programın çökmesini önler",
      "cevap3": "excepsion handling bölümünde hata olsa da olmasa da her durumda çalışır amacı kaynak yönetimi yapmak ve kesinlikle çalışmasını istediğimiz kodları koymaktır",
      "cevap4": "Chevked programın dış etken etkileşimiyle oluşur Unchacked ise programcı hatalarından kaynaklanır",
      "cevap5": "exception veya runtimeException sınıfından oluşan bir sınıf ile yazabiliriz",
      "cevap6": "Error sistemsel hatayı fark eder Execption yazılımsal hataları tespit eder",
      "cevap7": "işlem devamı için başka hata yönetimi",
      "cevap8": "alt sınıf üst sınıftan daha genis throws yapamaz",
      "cevap9": "derlenmez önce Exception sonra ArrayIndexOutOfBoundsException yakalanmıs düzeltmek için tam tersi yapılmalı çıktısı ise Array Exception Caught",
      "cevap10": "CAUGHT\nFINALLY\nOOPS\nDONE\n41"
    },
    {
      "id": "3659398",
      "cevap1": "Compile error örnek olarak tanımlanmamış bir değişken kullanımı olabilir. Runtime error array out of index olabilir. Ve logical errors yanlış algoritma kullanımı olmak üzere 3 tane hata türü vardır.",
      "cevap2": "Oluşabilecek istisnai hataları kontrol etmek.",
      "cevap3": "Exception olsun olmasın execute edilmesini sağlar icindekinin.",
      "cevap4": "Checked compile zamanı oluşan exceptionlardir unchecked exceptionlar runtime zamanı oluşan exceptionlardir.",
      "cevap5": "Exception sınıfından ya da throwable sınıfından extend ettiğim bir class olustururum ve super(mesaj) şeklinde atasını implement ederim.",
      "cevap6": "Error sistem düzeyindeki haftalardır exceptionlar compile ve runtime hatalaridir.",
      "cevap7": "Bu şekilde daha üste atılır ve üstte işlem gormeisni sağlar. Method dışı ya da class dışı.",
      "cevap8": "Ata sinifindan extend edildiyse daha genel bir hata oluşturamaz.",
      "cevap9": "Array exception caught çıktı olur. Dizi indeksi 0dan baslamalkdir.",
      "cevap10": "Caught finally oops done 41"
    },
    {
      "id": "6194008",
      "cevap1": "Errorlar ve exceptionlar vardır. Errorlar handle edilemez exceptionlar handle edilebilir",
      "cevap2": "Exceptionları yakalamak ve bunun üzerinden uygun işlemleri gerçekleştirmek",
      "cevap3": "Exception yakalansa da yakalanmasa da çalışan bir bloktur bu işlemler için kullanılır",
      "cevap4": "Birinde metoda throws exception türü yazılır ama öbüründe gerek yoktur (checked da gerek yoktur)",
      "cevap5": "Extends denir ve özellik belirtilir classın içinde",
      "cevap6": "Error handle edilemez ama exception handle edilebilir",
      "cevap7": "Daha sonraki bi basamakta handle edilmesini sağlamak (geciktirmek)",
      "cevap8": "Error throws yazılamaz ve checkedleri throws yazılamaz",
      "cevap9": "Derlenir ama exception out of bounds olmasına rağmen normal exception catch ine girer array out of bounds catch ine girmesi gerekirken\nHatayı catch exception la catch array index out of bounda exceptionun yerini değiştirerek düzeltebiliriz ve düzeltilmiş sonuç\n“Array Exception Caught” \nOlur",
      "cevap10": "\nCAUGHT\nFINALLY \nOOPS\nDONE\n41"
    },
    {
      "id": "4731282",
      "cevap1": "3 çeşit hata vardır, error(), exception(null pointer exception), ",
      "cevap2": "Kod hata verdiğinde debuglamanın kolay olması ve şık bir şekilde kullanıcıya anlatılmasıdır.",
      "cevap3": "exception verse de vermese de en son runlanan kod, finally bloğunun içindeki koddur.",
      "cevap4": "Checked exceptionların throwlanacağı biliniyorsa try-catch bloğu veya throws keywordu ile handlelanmalıdır. Unchecked exceptionlar handlelanmasa bile kod çalışır.",
      "cevap5": "class olarak tanımlanır ve extends Exception keywordleri yazılır.",
      "cevap6": ".",
      "cevap7": "Bir exception varsa ve bu exception varken belli kod bloklarının çalışması istenmiyorsa try-catchten sonra tekrar catch görene kadar kodun çalışmaması için tekrar fırlatılabilir.",
      "cevap8": ".",
      "cevap9": "Kodda yazılan ikinci catch bloğuna kod hiçbir zaman girmez, çünkü throwlanabilecek her exception üstteki blokta yakalanır. Output:\nException Caught",
      "cevap10": "CAUGHT\nFINALLY\n-1\nOOPS\n41\n"
    },
    {
      "id": "8964453",
      "cevap1": "3 tip hata vardir, 1) syntax soz dizimi hatasi 2) logic hatasi mantiksal yaptigimiz hata 3) run time error program compile ettikden sonra cesitli sebeplerle 1/0 gibi sebeplerle ortaya cikar",
      "cevap2": "Programin calisma sirasinda cikabilecek hatalari ongorerek crashi engellemek ve olusabilecek hatalari onceden ayarlayarak cozmek.",
      "cevap3": "Exception yakalandiktan sonra try catch icinde ne yapildigindan bagimsiz her turlu calisacak bir methoddur. Yani her kosulda calismasini istedigimiz seyleri buraya yazariz. ",
      "cevap4": "Checked exceptions compile time sirasinda ortaya cikar ve crash yememek icin direk ele alinmalidir. Unchecked exceptions run time sirasinda dizilerde vs ortaya cikar yani girilen inputlara gore cikabilir veya cikmayabilir. Bunu da onceden ongorup halledilmelidir.",
      "cevap5": "Kendi exceptionumuzu sinifini yaratarak ve exception classindan miras alarak exceptionumuzu olustururuz. Main metodu icinde veya farkli bir yerde try catch ile yakalariz ve cozeriz.",
      "cevap6": "Error jvm ile alakalidir, exception kodun icinde yaptigimiz seylerle alakalidir.",
      "cevap7": "Hata bilgisini alt katmanlarda kaydetmek ve ust katmanlara iletmek, kullanici dostlugunu arttirmak.",
      "cevap8": "Alt siniftan daha genis bir exception firlatilamaz.",
      "cevap9": "Kod derlenmez, ozel exception once genel exception sonra kodda yer almalidir.",
      "cevap10": "CAUGHT  \nFINALLY  \nOOPS  \nDONE  \n41  "
    }
  ]
}