{
  "questions": [
    "Öğrenci No.",
    "Abstraction kavramını açıklayınız.",
    "\"Is a\" ilişkisi nedir, Java'da nasıl kontrol edilir? İki class arasında \"Is a\" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz?",
    "Bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı?",
    "\"A extends B\" ve \"C extends A\" olmak üzere, dönüş tipi A olan bir metot override edileceği zaman olası dönüş tipleri nelerdir?",
    "Java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır?",
    "Java'da bir class birden çok classı extend edebilir mi, \"A extends B, C\" gibi bir şey mümkün mü?",
    "Metot overriding ve overloading kavramlarını açıklayınız.",
    "class Animal {  \n    public String type = \"Animal\";  \n\n    public void makeSound() {  \n        System.out.println(\"Generic animal sound.\");  \n    }}  \n\nclass Dog extends Animal {  \n    public Dog() {  \n        super();  \n        type = \"Dog\";  \n    }  \n    public void makeSound() {  \n        System.out.println(\"Bark!\");  \n    }}\n\n// Test sınıfı, main metodu içinde\nAnimal a = new Dog();  \nSystem.out.println(a.type);  \na.makeSound(); \n\nOutput?",
    "class Shape {  \n    public String name;      \n    final static int pi = 2;\n    public Shape() {  \n        name = \"Generic\";  \n        printName(); }  \n    public void printName() {  \n        System.out.println(name);  \n    } }  \n\nclass Circle extends Shape {  \n    private double radius;\n\n    public Circle(double r) {  \n        radius = r;  \n        name = \"Circle\";  \n    }  \n    public double getArea() {  \n        return pi * radius * radius;  \n    } }  \n\n// Test sınıfı, main metodu içinde \nCircle c = new Circle(2.0);\nc.printName();\nSystem.out.println(c.getArea());\n\nOutput?"
  ],
  "answers": [
    {
      "id": "6202193",
      "cevap1": "Soyutlama. Nesneleri ortak özelliklerine göre ilişkilendirme",
      "cevap2": "Is a , bir classın başka bir klasın alt klası veya kendisi olması durumudur. Java da inheritance of ile kontrol edilir. O classın subclasslarından biri veya kendisi olması is a ilişkisi için yeterlidir",
      "cevap3": "Default",
      "cevap4": "C class",
      "cevap5": "Çünkü parent classların hepsi initialize edilmeden kendisi hakkında bir şey uapamayız",
      "cevap6": "Değil",
      "cevap7": "Overload, aynı isim ve farklı paramtereye sahip metod, override, oarent classtan aldığımız methodla aynı signatureda başka bir metod yazmak",
      "cevap8": "DogBark!",
      "cevap9": "Circle            8.0"
    },
    {
      "id": "7817361",
      "cevap1": "Black Box. Kullanıcının kodun istediğimiz kısımlarını göstermemizi anlatan kavram.",
      "cevap2": "extends syntax'ı ile kontrol edilir. Bir Class'ın diğer Class'ı içermesini ifade eder. ",
      "cevap3": "Protected",
      "cevap4": "A veya B.",
      "cevap5": "Class ilişkileri icinde karışmayı önlemek icin.",
      "cevap6": "Hayır.",
      "cevap7": "Override, Bir Class'ın miras aldığı başka bir Class içindeki aynı isimdeki Metodu kullanmak yerine kendi içindeki metodun kullanılmasını ifade eder. Overload isimleri aynı ancak parametreleri farklı iki metodu ifade eder.",
      "cevap8": "Dog Bark",
      "cevap9": "Circle 8.0"
    },
    {
      "id": "8190737",
      "cevap1": "Bir nesnenin özelliklerini çıkartarak değişkenlerden ve metotlardan oluşan bir class/blueprint yaratmaktır",
      "cevap2": "Inheritance ilişkisi olduğunda \"is a\" olur. \"class a extends b\" ifadesiyle belirtilir",
      "cevap3": "protected",
      "cevap4": "A veya B",
      "cevap5": "O class initialize edilmeden önce tüm ata class değişkenlerinin ve metotlarının setlenmesi gerekmektedir",
      "cevap6": "Hayır",
      "cevap7": "Override, ata classta tanımlı bir metot ile aynı signature'e sahip bir metodu child classta tanımlamaktır. Overload ise aynı isme sahip ama farklı signature'u bulunan metotlar tanımlamaktır",
      "cevap8": "Dog \\n Bark!",
      "cevap9": "Circle \\n 8.0"
    },
    {
      "id": "6897869",
      "cevap1": "Sınıflandırma. Benzer kod parçalarını gruplayıp ortak özelliklerini taşıyan bir üst class oluşturmak.",
      "cevap2": "Bir alt class aynı zamanda ata class dır. Subclass is a baseclass.",
      "cevap3": "Protected",
      "cevap4": "A,B,Object",
      "cevap5": "Alt class olusturken önce üst class constructor ı çalıştırılmak zorunda.",
      "cevap6": "Mümkün değil.",
      "cevap7": "Overriding üst calss ta tanımlanan fonksiyonu alt class ta değiştirmek. Overloading metodun parametre tip yada sayılarını değiştirip yeni metod oluşturmak.",
      "cevap8": "Dog Bark",
      "cevap9": "Circle 12.56"
    },
    {
      "id": "3659398",
      "cevap1": "Soyutlama demek komleksiteyi azaltmak için ve güvenlik için kullanıyoruz.",
      "cevap2": "İs a ilişkisi inheritance için kullanılır bir class diğerinin genellikle atasidir. Totoloji de olabilir.",
      "cevap3": "Default",
      "cevap4": "C ve A",
      "cevap5": "Çünkü ilk önce ata classlar tanımlanmalıdır ",
      "cevap6": "Hayır ",
      "cevap7": "Overriding aynı signature ama işlev değişir overload farklı signature (parametreler farklı) aynı dönüş için kullanılır.",
      "cevap8": "Animal \\t Generic animal sound",
      "cevap9": "Circle \\t  8"
    },
    {
      "id": "4731282",
      "cevap1": "Belli bir konudaki önemli detayları soyutlayarak kullanıcının algıladığı karmaşıklığı azaltmak",
      "cevap2": "is a ilişkisi java'da extends ile sağlanır. is-a ilişkisi ata class ve subclass arasında olur",
      "cevap3": "protected",
      "cevap4": "B veya A",
      "cevap5": "ata classın constructoru çalışmadan ata classın instance variable'ları initialize edilemez, bulunulan classta kullanılamaz",
      "cevap6": "hayır, sadece bir kez extendlenebilir",
      "cevap7": "overloading'de signature'ın parametreleri farklı, metod adı aynıdır; overriding'de farklı bir metod adı aynıdır, kullanılan class farklıdır",
      "cevap8": "Dog   Bark!",
      "cevap9": "Circle    8"
    },
    {
      "id": "4380745",
      "cevap1": "Soyutlama, kodun birbirleriyle etkileşime girmesi gereken kısımları birbirinden ayırarak aralarındaki etkileşimi daha iyi yönetmemizi sağlayan kavram",
      "cevap2": "Extend yapılarak kalıtım ile oluşan ilişki türi",
      "cevap3": "Default",
      "cevap4": "A veya C olabilir",
      "cevap5": "Evet çünkü hiçbir kalıtım yapılmamış sınıfları java object classı ile extend eder. Zaten inheritance yapılmışlar için super çağrılır",
      "cevap6": "Mümkün değildir",
      "cevap7": "Overriding inheritance yapıldığında kalıtım ile gelen sınıfın metot signature’ı korunurken içeriğinin değiştirilmesidir. Overloading aynı isme sahip fonksiyonların farklı signature a sahip olması sağlanarak o fonksiyonun gerekli olan çeşitli versiyonlarının yaratılmasıdır",
      "cevap8": "Dog Bark!",
      "cevap9": "Circle 8.0"
    },
    {
      "id": "1764665",
      "cevap1": "Konuyu bakış açımıza göre daha basit parçalara ayırma ve bu basit parçalar üzerinden konuyu tanımlamaya denir. ",
      "cevap2": "Is a ilişkisi inheritence kavramalı için kullanılır. Eğer bir class başka bir classin subclassi ise bu class aynı zamanda üst classdir. Yani iki inherit class arasında subclass aynı zamanda superclassdir. Ama süper class, subclassdir denemez.",
      "cevap3": "Protected",
      "cevap4": "B olabilir.",
      "cevap5": "Çünkü önce süper classlar instance edilir. Subclasslar bundan sonra instance olmalıdır.",
      "cevap6": "Hayır.",
      "cevap7": "Override, subclassin super class da olan bir methodu yeniden yazmasıdir. Override da modifier ve signature superclassla aynıdır. Ama overloadda signature farklıdır. Overload aynı adda ama farklı parametrede yeni bir method oluşturmaya yarar.",
      "cevap8": "Dog Bark!",
      "cevap9": "Circle 4pi"
    },
    {
      "id": "8435496",
      "cevap1": "Kodun nasıl çalıştığını bilmemize gerek olmadan bir parçayı kendi başına kullanılabilecek şekilde programın parçalara ayrılması..",
      "cevap2": "İnheritance dır.extends gerekir.",
      "cevap3": "Default",
      "cevap4": "C ve A",
      "cevap5": "Önce parent class ı initialize edip sonra kendisini eder. Yazmazsak parent classın parametresiz olan constructor ı çağırılır.",
      "cevap6": "Hayır",
      "cevap7": "Overriding alt classlarda o class için metodun implementationın değiştirilmesi.  Overloading metotun imzasını değiştirerek aynı isimle metodun yazılması.",
      "cevap8": "Dog /n Bark",
      "cevap9": "Circle /n 8.0"
    },
    {
      "id": "8964453",
      "cevap1": "Nesnenin istedigimiz ozelliklerini alip gerekmeyenleri veya gizlenmek istenenleri kullaniciya gostermemek",
      "cevap2": "Fox is a animal ifadesi dogrudur burdan fox classinin aninal classinin child classi oldugunu soyleyebiliriz",
      "cevap3": "Protected",
      "cevap4": "A veya C",
      "cevap5": "Her classin parent classi object classidir, duzgun calisabilmesi icin object classinin constructoru da cagirilmalidir",
      "cevap6": "Hayir interface birden fazla extend edilebilir",
      "cevap7": "Override icin methodun signature i aynidir, ust classdan alt classa override edilebilir, overload ise ayni isimde bir methodu farkli parametrelerle yani farkli signature ile yeniden yazmak",
      "cevap8": "Animal Bark!",
      "cevap9": "Generic Circle 8.0"
    },
    {
      "id": "6194008",
      "cevap1": "Soyutlama demektir. Gereksiz bilgili yerleri göstermemedir. (Black box) ",
      "cevap2": "Birinin birine extend edilmesi gerekir. (Inheritance) Diyelim ki a bi class ve b extends a olsun. B is an A olur.",
      "cevap3": "Protected",
      "cevap4": "C olabilir çünkü A C yi kapsar ama B olamaz çünkü A B yi kapsamaz",
      "cevap5": "İlk önce atadan başlanır çünkü",
      "cevap6": "Değildir tek bir classı extend edebilir",
      "cevap7": "Method overriding bi classtaki metodun subclasslarında değiştirilmesidir. Overloading ise bir metodun ismini falan koruyarak sadece parametrelerini değiştirmedir",
      "cevap8": "Dog     Bark!",
      "cevap9": "Circle     8"
    },
    {
      "id": "8783086",
      "cevap1": "detayları göstermeyip sadece işlevleri göstermek",
      "cevap2": "bir classın diğer classın subclassı olması lazım ",
      "cevap3": "protected",
      "cevap4": "A, B",
      "cevap5": "çünkü subclassın çalışabilmesi için önce base classının constructorunun çalışması lazım",
      "cevap6": "mümkün değil çünkü her classın sadece 1 atası olabilir",
      "cevap7": "overloading methodun signiture kısmını değiştirip bambaşka bir method gibi yazılması override ise birebir aynı methodun farklı işlem yapmasını sağlamak ",
      "cevap8": "Dog Bark!",
      "cevap9": "Circle 8"
    },
    {
      "id": "6275288",
      "cevap1": "Herkes kendi bakış açısından problemi veya amacı soyutlar. Arabanın şöförünün arabaya bakış açısıyla mühendisin bakış açısı aynı değildir. ",
      "cevap2": "İnstanceof il kontrol edilir. İki class arasında bağ olup olmadığı görülür. Mesela lion classının bir objesi olan lion1 aynı zamanda bir hayvandır. ",
      "cevap3": "Default",
      "cevap4": "A ve c, a is a ve c is a",
      "cevap5": "Zorunda değildir bence. Eğer süper yazmazsak ata classın parametresiz constructoru çalışır. ",
      "cevap6": "Hayır. ",
      "cevap7": "Override ata classta bulunan methodu yavru classta yeniden düzenlemek yeni özellikler eklemek. Overload is aynı ada sahip ama farklı parametreler alan methodlar yazmaktır. ",
      "cevap8": "Dog bark",
      "cevap9": "Generic generic 8.0"
    },
    {
      "id": "1762204",
      "cevap1": "Sadece bizimle ilgili olan kısımla ilgilenip, bizimle ilgili olmayan kısımlara ilgilenmeye gerek kalmamasıdır. ",
      "cevap2": "\"object\" instanceof \"class\" ile kontrol edilebilir. Is a ilişkisi olması için objeyi kontrol ettiğimiz class ya kendi class'ı ya da super class'ı olması gerekmektedir. ",
      "cevap3": "Protected modifier ",
      "cevap4": "A ve B olabilir. ",
      "cevap5": "Çünkü sub class oluştururken super class'ın da oluşması gerekir. Bunun için super() diyerek super class'ın construct'ırını çalıştırmamız ve super class'taki değişkenleri de initialize etmemiz gerekir. ",
      "cevap6": "Hayır değildir. ",
      "cevap7": "Override ettiğimiz zaman sub class'ta, super class'ın metodunu override ederiz ve signature aynı olması gerekir. Overload yaptığımızda ise ismi aynı fakat parametrelerinin farklı olması gerekir. ",
      "cevap8": "Dog Bark",
      "cevap9": "Generic Circle 8.0"
    }
  ]
}