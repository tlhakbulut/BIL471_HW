{
  "questions": [
    "Metin Karşılaştırıcı\nBIL 211 - Lab 3\n20 Şubat 2025\n1 Giriş\nBulaboratuvarda FileIO ve Exceptions kullanarakbir MetinKarşılaştırıcı geliştireceğiz. MetinKarşılaştırıcı ,\nverilen iki metin dosyasını karşılaştırarak ikinci metnin yalnızca yeni satırlar eklenerek oluşturulup oluştu-\nrulmadığını kontrol edecek ve gerektiğinde hangi satırdan sonra hangi eklemelerin yapıldığını belirleyecektir.\n2 Genel Program\nProgram, çalıştırılırken komut satırından iki dosya adı alacaktır:\n- Orijinal metin dosyası (ilk argüman)\n- Değiştirilmiş metin dosyası (ikinci argüman)\nProgram şu şekilde çalıştırmalıdır (burada köşeli parantezler yerine dosyaların asıl adı gelmeli):\njava MetinKarsilastirici [orijinal.txt] [degistirilmis.txt]\nProgram, ilk argümanda verilen dosyayı orijinal metin, ikinci argümandaki dosyayı değiştirilmiş metin\nolarak kabul edecek ve yalnızca yeni satırlar eklenerek oluşturulup oluşturulmadığını kontrol edecektir. Eğer\nmümkünse, hangi satırdan sonra hangi eklemelerin yapıldığını tespit ederek bir çıktı dosyasına yazacaktır:\n-farklar.txt – Yeni satırların hangi satırdan sonra eklendiğini gösteren çıktı dosyası.\nEğer dosya adları eksikse veya hatalı formatta verilmişse, program özel bir hata oluşturmalı ve stderr’e uygun\nbir mesaj yazmalıdır.\n3 FileIO\nProgram, dosyaokumaveyazmaişlemleriiçinJava’nın java.io paketindekisınıflarıkullanacaktır(örn., Buf-\nferredReader, Scanner, PrintWriter). Dosyaları okurken ve yazarken kullanacağınız FileIO sınıflarının seçimi\nsize bırakılmıştır. Program, aşağıdaki olası dosya hatalarını atmalı ve stderr’e belirlenen hata mesajlarını\nyazmalıdır:\n- Dosya bulunamıyorsa: \"HATA: [dosya adı] bulunamadı.\"\n- Dosya boşsa: \"HATA: [dosya adı] boş.\"\n4 Hata Yönetimi\nProgramda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. Bu hatalar tespit\nedildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı)\nve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız Java bunu kendisi yapacaktır).\nBelirtilen hata mesajları ile birlikte Java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve\nsatır gibi bilgiler bulunabilir.\n4.1 Girdi hataları (InputException class)\nBu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. Öğrenciler, dosya işlem-\nleriyle ilgili hata türlerini InputException sınıfından türetmelidir.\nAşağıdaki özel hata türleri tanımlanmalıdır:\n1\n\n- YanlisArgumanException (extends InputException): Argümanlar eksik ya da fazlaysa atılacak hata.\nBurada[argümanlar] yerine programın çalıştırıldığı argüman listesi yazılmalıdır.\n- Hata mesajı: \"HATA: Hatalı argüman kullanımı: [argümanlar]. Program argüman olarak 2\ndosya ismi almalı.\"\n- DosyaBulunamadiException (extends InputException): Dosya eksikse atılacak hata.\n- Hata mesajı: \"HATA: [dosya adı] bulunamadı.\"\n- BosDosyaException (extends InputException): Dosya boşsa atılacak hata.\n- Hata mesajı: \"HATA: [dosya adı] boş.\"\n4.2 Geçersiz Değişiklik Hatası (GecersizDegisiklikException class)\nEğerdegistirilmis.txt dosyası,orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulamıy-\norsa, program GecersizDegisiklikException hatasını atmalıdır.\nBu hata oluştuğunda stderr’e şu mesaj yazılmalıdır:\nHATA: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek\noluşturulmamış.\n5 Dosya Formatları\n5.1 Girdi Dosyaları\n5.1.1orijinal.txt vedegistirilmis.txt Formatı\nBu dosyalar, her satırın ayrı bir metin satırı olduğu düz metin formatında olmalıdır.\nÖrnek İçerik ( orijinal.txt ):\nMerhaba dünya.\nBu bir test dosyasıdır.\nSon satır budur.\nÖrnek İçerik ( degistirilmis.txt ):\nMerhaba dünya.\nBu bir test dosyasıdır.\nEklenen yeni bir satır.\nSon satır budur.\nYeni bir satır daha eklendi.\n5.2 Çıktı Dosyası\n5.2.1farklar.txt Formatı\nfarklar.txt dosyası, hangi satırdan sonra hangi yeni satırın eklendiğini gösterecek şekilde yapılandırıl-\nmalıdır:\nÖrnek Çıktı ( farklar.txt ):\n2 -> Eklenen yeni bir satır.\n4 -> Yeni bir satır daha eklendi.\nBurada ‘2 ->‘ ifadesi, \"2. satırdan sonra eklenmiştir\" anlamına gelir. Eğer aynı yere birden fazla satır\neklenmişse aynı sayıyı tekrar ederek eklenme sırasında yazılmalı.\n5.3 Özel Hata Durumları ve Çıktıları\nEğerdegistirilmis.txt ,orijinal.txt üzerine sadece yeni satırlar eklenerek oluşturulmamışsa stderr’e şu\nmesaj yazılmalıdır:\nHATA: degistirilmis.txt dosyası, orijinal.txt dosyasına yalnızca yeni satırlar eklenerek\noluşturulmamış.\nEğer dosya adları eksikse veya hatalıysa, stderr’e şu mesaj yazılmalıdır:\nHATA: Geçersiz dosya adı.\n2\n\n6 Gönderim Formatı\n- Labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından\nherhangi birisi uygun).\n- Sıkıştırılmış arşivin ismini Isim_Numara şeklinde isimlendirin (örn., JohnNash_181101014.zip).\n- İsimlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine \"Lab3 Gönderim\" başlıklı bir mail ile\ngönderin.\nMetot Açıklama\nString(String s) sile aynı değere sahip bir string oluşturur.\nString(char[] a) a[]dizisindeki karakterleri temsil eden bir string oluşturur.\nint length() String içindeki karakter sayısını döndürür.\nchar charAt(int i) Belirtilen iindeksindeki karakteri döndürür.\nString substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür.\nboolean contains(String substring) String’in substring içerip içermediğini kontrol eder.\nboolean startsWith(String prefix) String’in prefixile başlayıp başlamadığını kontrol eder.\nboolean endsWith(String postfix) String’in postfix ile bitip bitmediğini kontrol eder.\nint indexOf(String pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür.\nint indexOf(String pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür.\nString concat(String t) String’in sonuna teklenmiş halini döndürür.\nint compareTo(String t) İki string’i karşılaştırır (sözlük sırasına göre).\nString toLowerCase() String’in tüm harflerini küçük harfe çevirir.\nString toUpperCase() String’in tüm harflerini büyük harfe çevirir.\nString replace(String a, String b) String içindeki a’larıbile değiştirir.\nString trim() String’in başındaki ve sonundaki boşlukları kaldırır.\nboolean matches(String regexp) String’in belirtilen regexle eşleşip eşleşmediğini kontrol eder.\nString[] split(String delimiter) String’idelimiter kullanarak böler ve bir dizi döndürür.\nboolean equals(Object t) String’in değeri tile aynı mı diye kontrol eder.\nTable 1: Java String Sınıfı Metotları\n3"
  ],
  "answers": [
    {
      "id": "6275288",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends Exception {\n}\n",
      "DosyaBulunamdiException.java": "import java.io.File;\n\npublic class DosyaBulunamdiException extends InputException {\n    public DosyaBulunamdiException(String message) {\n        super(message);\n    }\n\n    public static void method(File file) throws DosyaBulunamdiException {\n        if (!file.exists()) {\n            throw new DosyaBulunamdiException(file + \"bulunamadi.\");\n        }\n    }\n}\n",
      "BosDosyaException.java": "\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class BosDosyaException extends InputException {\n    public BosDosyaException(String message) {\n        super(message);\n    }\n\n    public static void method(File file) throws BosDosyaException, FileNotFoundException {\n        Scanner scan = new Scanner(file);\n        if (scan.nextLine() == null) {\n            scan.close();\n            throw new BosDosyaException(\"HATA: \" + file + \"boş.\");\n        }\n        scan.close();\n    }\n}\n",
      "lab3.java": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class lab3 {\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scan = null;\n        Scanner scan1 = null;\n        System.out.println(args.length);\n        try {\n            if (args.length != 2) {\n                throw new YanlisArgumanException(\n                        \"HATA: Hatalı argüman kullanımı: [orijinal.txt ve degistirilmis.txt]. Program argüman olarak 2\\r\\n\"\n                                + //\n                                \"dosya ismi almalı.\");\n            }\n            List myList = new ArrayList<>();\n            List myList2 = new ArrayList<>();\n            File file = new File(args[0]);\n            scan = new Scanner(file);\n            File file2 = new File(args[1]);\n            scan1 = new Scanner(file2);\n            DosyaBulunamdiException.method(file);\n            DosyaBulunamdiException.method(file2);\n            BosDosyaException.method(file2);\n            BosDosyaException.method(file);\n            while (scan.hasNext()) {\n                myList.add(scan.nextLine());\n            }\n            while (scan1.hasNext()) {\n                myList2.add(scan1.nextLine());\n            }\n            if (!isContain(myList, myList2)) {\n                throw new GecersizDegisiklikException();\n            } else {\n                int a = 0;\n                boolean isContain = false;\n                for (int i = 0; i < myList2.size(); i++) {\n                    isContain = false;\n                    for (int y = 0; y < myList.size(); y++) {\n                        if (myList.get(y).equals(myList2.get(i))) {\n                            isContain = true;\n                            break;\n                        }\n                    }\n                    if (!isContain) {\n                        System.out.println(a + \"->\" + myList2.get(i));\n                    }\n                    a++;\n                }\n            }\n\n        } catch (YanlisArgumanException e) {\n            System.out.println(e.getMessage());\n        } catch (DosyaBulunamdiException e) {\n            System.out.println(e.getMessage());\n        } catch (BosDosyaException e) {\n            System.out.println(e.getMessage());\n        } catch (GecersizDegisiklikException e) {\n            System.out.println(\n                    \"HATA: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek\\r\\n\" + //\n                            \"oluşturulmamış.\\r\");\n        }\n    }\n\n    public static boolean isContain(List mylist, List myList2) {\n        int i = mylist.size();\n        boolean isContain = false;\n        for (int y = 0; y < i; y++) {\n            isContain = false;\n            Object str = mylist.get(y);\n            for (int j = 0; j < myList2.size(); j++) {\n                if (myList2.get(j).equals(str)) {\n                    isContain = true;\n                    break;\n                }\n            }\n        }\n        return isContain;\n    }\n}\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException {\n    public YanlisArgumanException(String message) {\n        super(message);\n    }\n}\n",
      "InputException.java": "public class InputException extends Exception {\n    public InputException(String message) {\n        super(message);\n    }\n}\n"
    },
    {
      "id": "4380745",
      "GecersizDegisiklikException.java": "package BIL211Lab3;\n\npublic class GecersizDegisiklikException extends Exception {\n    public GecersizDegisiklikException(String degistirilmis, String original){\n        super(\"HATA: [\" + degistirilmis + \"] dosyası, [\" + \n        original + \"] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n}\n",
      "BosDosyaException.java": "package BIL211Lab3;\n\npublic class BosDosyaException extends InputException {\n    public BosDosyaException(String fileName) {\n        super(\"HATA: [\" + fileName + \"] boş\");\n    }\n}\n",
      "yanlisArgumanException.java": "package BIL211Lab3;\n\npublic class yanlisArgumanException extends InputException {\n    // Buraya göndermeden args -> msg dönüşümü yapılmalı\n    public yanlisArgumanException(String message) {\n        super(\"HATA: Hatalı argüman kullanımı: \" + message + \". Program argüman olarak 2 dosya ismi almalı\");\n    }\n}\n",
      "MetinKarsilastirici.java": "package BIL211Lab3;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class MetinKarsilastirici {\n\n    static ArrayList<Integer> indexList = new ArrayList<>();\n        \n        public static void main(String[] args) {\n            try {\n                method(args);\n            } catch (Throwable e) {\n                System.err.println(e.getMessage());\n            }\n        }\n\n        public static void method(String[] args) throws Throwable{\n            if(args.length != 2){\n                String message = \"\";\n                for(String str:args){\n                    message += str + \", \";\n                }\n                throw new yanlisArgumanException(message);\n            }\n\n            File file = new File(\"farklar.txt\");\n\n            if(file.createNewFile()){}\n\n            System.setOut(new PrintStream(new FileOutputStream(file)));\n\n            fileHandler(args[0], args[1]);\n        }\n    \n        public static void fileHandler(String original, String degistirilmis) throws Throwable{\n            File originalFile = new File(original);\n            File degistirilmisFile = new File(degistirilmis);\n    \n            FileInputStream originalInput;\n            FileInputStream degistirilmisInput;\n        \n            try{\n                originalInput = new FileInputStream(originalFile);\n            } catch (FileNotFoundException e) {\n                throw new DosyaBulunamadiException(original);\n            }\n    \n            try{\n                degistirilmisInput = new FileInputStream(degistirilmisFile);\n            } catch (FileNotFoundException e) {\n                throw new DosyaBulunamadiException(degistirilmis);\n            }\n    \n            if(originalFile.length() <= 0){\n                throw new BosDosyaException(original);\n            }\n            \n            if(degistirilmisFile.length() <= 0){\n                throw new BosDosyaException(degistirilmis);\n            }\n    \n            String originalLine = null;\n            String degistirilmisLine = null;\n    \n            Scanner originalScanner = new Scanner(originalInput);\n            Scanner degistirilmisScanner = new Scanner(degistirilmisInput);\n    \n            int index = 0;\n    \n            while(originalScanner.hasNextLine()){\n                index++;\n                originalLine = originalScanner.nextLine();\n                if(degistirilmisScanner.hasNextLine()){\n                    degistirilmisLine = degistirilmisScanner.nextLine();\n                }\n                else{\n                    degistirilmisLine = null;\n                }\n\n                while(!originalLine.equals(degistirilmisLine) && degistirilmisLine != null){\n                    indexList.add(index);\n                    if(degistirilmisScanner.hasNextLine()){\n                        degistirilmisLine = degistirilmisScanner.nextLine();\n                    }\n                    else{\n                        degistirilmisLine = null;\n                    }\n                }\n\n                if(degistirilmisFile == null){\n                    throw new GecersizDegisiklikException(degistirilmisLine, originalLine);\n                }\n            }\n\n            while(degistirilmisScanner.hasNextLine()){\n                indexList.add(index);\n                degistirilmisScanner.nextLine();\n            }\n\n            boolean flag = true;\n            for(int i:indexList){\n                if(flag){\n                    System.out.println(i + \"-> Eklenen Yeni Bir Satır\");\n                    flag = false;\n                }\n                else{\n                    System.out.println(i + \"-> Yeni Bir Satır Daha Eklendi\");\n                }\n            }\n        \n            originalScanner.close();\n            degistirilmisScanner.close();\n            originalInput.close();\n            degistirilmisInput.close();\n        }\n\n}\n",
      "InputException.java": "package BIL211Lab3;\n\npublic class InputException extends Exception {\n    public InputException(String message){\n        super(message);\n    }\n}\n",
      "DosyaBulunamadiException.java": "package BIL211Lab3;\n\npublic class DosyaBulunamadiException extends InputException{\n    public DosyaBulunamadiException(String fileName) {\n        super(\"HATA: [\" + fileName + \"] bulunamadı\");\n    }\n}\n"
    },
    {
      "id": "7214465",
      "MetinKarsilastirici.java": "import java.io.*;\n\npublic class MetinKarsilastirici {\n\n    public static void main(String[] args) throws GecersizDegisiklikException {\n        try {\n            if (args.length != 2) {\n                throw new YanlisArgumanException(args);\n            }\n\n            String originalFile = args[0];\n            String modifiedFile = args[1];\n\n            checkFile(originalFile);\n            compareFiles(originalFile, modifiedFile);\n\n        } \n        catch (InputException a) {\n            System.err.println(\"Hata InputException \" + a.getMessage());\n        } \n        catch (IOException a) {\n            System.err.println(\"Hata IOException\" + a.getMessage());\n        }\n    }\n\n    private static void checkFile(String fileName) throws InputException, IOException {\n        File file = new File(fileName);\n        if (!file.exists()) {\n            throw new DosyaBulunamadiException(fileName);\n        }\n        if (file.length() == 0) {\n            throw new BosDosyaException(fileName);\n        }\n    }\n\n    private static void compareFiles(String originalFile, String modifiedFile) throws IOException, GecersizDegisiklikException {\n        try (BufferedReader originalReader = new BufferedReader(new FileReader(originalFile));\n             BufferedReader modifiedReader = new BufferedReader(new FileReader(modifiedFile))) {\n\n            String originalLine;\n            String modifiedLine;\n\n            while ((originalLine = originalReader.readLine()) != null) {\n                modifiedLine = modifiedReader.readLine();\n                if (!modifiedLine.equals(originalLine)) {\n                    throw new GecersizDegisiklikException(originalFile, modifiedFile);\n                }\n            }\n\n            if (modifiedReader.readLine() == null) {\n                System.out.println(\"Dosyalar karşılaştırıldı: \" + modifiedFile + \" dosyası, \" + originalFile + \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmuş.\");\n            } \n            else {\n                throw new GecersizDegisiklikException(originalFile, modifiedFile);\n            }\n        }\n    }\n}\n\nclass InputException extends Exception {\n    public InputException(String message) {\n        super(message);\n    }\n}\n\nclass YanlisArgumanException extends InputException {\n    public YanlisArgumanException(String arguman[]) {\n        super(\"HATA: Hatalı argüman kullanımı: \" + arguman + \". Program argüman olarak 2 dosya ismi almalı.\");\n    }\n}\n\nclass DosyaBulunamadiException extends InputException {\n    public DosyaBulunamadiException(String fileName) {\n        super(\"HATA: \" + fileName + \" bulunamadı.\");\n    }\n}\n\nclass BosDosyaException extends InputException {\n    public BosDosyaException(String fileName) {\n        super(\"HATA: \" + fileName + \" boş.\");\n    }\n}\n\nclass GecersizDegisiklikException extends Exception {\n    public GecersizDegisiklikException(String originalFile, String modifiedFile) {\n        super(\"HATA: \" + modifiedFile + \" dosyası, \" + originalFile + \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n}"
    },
    {
      "id": "1762204",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends Exception {\n    public GecersizDegisiklikException(String originalFilePath, String modifiedFilePath) {\n        super(\"HATA: \" + modifiedFilePath + \" dosyası, \" + originalFilePath + \"  dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n}\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n\n    public BosDosyaException(String fileName) {\n        super(\"HATA: \" + fileName + \" boş.\");\n    }\n    \n}\n",
      "MetinKarsilastirici.java": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class MetinKarsilastirici {\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            String argumentsString = \"\";\n            for (String argument : args) {\n                argumentsString += argument + \" \";\n            }\n            argumentsString = argumentsString.trim();\n            throw new YanlisArgumanException(argumentsString);\n        }\n\n        String originalFilePath = args[0];\n        String modifiedFilePath = args[1];\n        String differencesFilePath = \"farklar.txt\";\n\n        File originalFile = new File(originalFilePath);\n        File modifiedFile = new File(modifiedFilePath);\n        File differencesFile = new File(differencesFilePath);\n\n        checkFiles(originalFile, modifiedFile);\n        checkOnlyNewLine(originalFile, modifiedFile);\n        printDifferences(originalFile, modifiedFile, differencesFile);\n    }\n\n    public static void checkFiles(File originalFile, File modifiedFile) throws Exception {\n        if (!originalFile.exists()) {\n            throw new DosyaBulunamadiException(originalFile.getPath());\n        }\n        if (originalFile.length() == 0) {\n            throw new BosDosyaException(originalFile.getPath());\n        }\n        if (!modifiedFile.exists()) {\n            throw new DosyaBulunamadiException(modifiedFile.getPath());\n        }\n        if (modifiedFile.length() == 0) {\n            throw new BosDosyaException(modifiedFile.getPath());\n        }\n    }\n\n    public static void checkOnlyNewLine(File originalFile, File modifiedFile) throws GecersizDegisiklikException, DosyaBulunamadiException {\n        // check if every line in modified file is in original file\n        Scanner originalScanner = null;\n        Scanner modifiedScanner = null;\n        try {\n            originalScanner = new Scanner(originalFile);\n        } catch (FileNotFoundException e) {\n            throw new DosyaBulunamadiException(originalFile.getPath());\n        }\n        try {\n            modifiedScanner = new Scanner(modifiedFile);\n        } catch (FileNotFoundException e) {\n            originalScanner.close();\n            throw new DosyaBulunamadiException(originalFile.getPath());\n        }\n\n        while (modifiedScanner.hasNextLine()) {\n            String modifiedLine = modifiedScanner.nextLine();\n            boolean found = false;\n            while (originalScanner.hasNextLine()) {\n                String originalLine = originalScanner.nextLine();\n                if (modifiedLine.equals(originalLine)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                originalScanner.close();\n                modifiedScanner.close();\n                throw new GecersizDegisiklikException(originalFile.getPath(), modifiedFile.getPath());\n            }\n        }\n\n        originalScanner.close();\n        modifiedScanner.close();\n    }\n\n    public static void printDifferences(File originalFile, File modifiedFile, File differencesFile) throws DosyaBulunamadiException {\n        // Değiştirilmiş dosyadaki satır numaralarına göre bastım numaraları.\n        Scanner originalScanner = null;\n        Scanner modifiedScanner = null;\n        PrintWriter printWriter = null;\n\n        try {\n            originalScanner = new Scanner(originalFile);\n        } catch (FileNotFoundException e) {\n            throw new DosyaBulunamadiException(originalFile.getPath());\n        }\n        try {\n            modifiedScanner = new Scanner(modifiedFile);\n        } catch (FileNotFoundException e) {\n            originalScanner.close();\n            throw new DosyaBulunamadiException(modifiedFile.getPath());\n        }\n        try {\n            printWriter = new PrintWriter(differencesFile);\n        } catch (FileNotFoundException e) {\n            originalScanner.close();\n            modifiedScanner.close();\n            throw new DosyaBulunamadiException(differencesFile.getPath());\n        }\n\n        int lineNumber = 0;\n        String originalLine = originalScanner.nextLine();\n        while (modifiedScanner.hasNextLine()) {\n            String modifiedLine = modifiedScanner.nextLine();\n            \n            while (true) {\n                if (!modifiedLine.equals(originalLine)) {\n                    printWriter.println(lineNumber + \" -> \" + modifiedLine);\n                    printWriter.flush();\n                    if (originalScanner.hasNextLine()) {\n                        originalLine = originalScanner.nextLine();\n                    }\n                    if (modifiedScanner.hasNextLine()) {\n                        modifiedLine = modifiedScanner.nextLine();\n                        lineNumber++;\n                    } else {\n                        break;\n                    }\n                } else {\n                    if (originalScanner.hasNextLine()) {\n                        originalLine = originalScanner.nextLine();\n                    }\n                    break;\n                }\n            }\n            lineNumber++;\n        }\n\n        originalScanner.close();\n        modifiedScanner.close();\n        printWriter.close();\n    }\n}\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException {\n\n    public YanlisArgumanException(String argumentsText) {\n        super(\"HATA: Hatalı argüman kullanımı: \" + argumentsText + \". Program argüman olarak 2 dosya ismi almalı.\");\n    }\n\n}\n",
      "InputException.java": "public class InputException extends Exception {\n    public InputException(String message) {\n        super(message);\n    }\n}\n",
      "DosyaBulunamadiException.java": "public class DosyaBulunamadiException extends InputException {\n\n    public DosyaBulunamadiException(String fileName) {\n        super(\"HATA: \" + fileName + \" bulunamadı.\");\n    }\n    \n}\n"
    },
    {
      "id": "9830856",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends Exception \n{\n    public GecersizDegisiklikException(String orijinalDosya, String degistirilmisDosya) \n    {\n        super(\"HATA: \" + degistirilmisDosya + \" dosyası, \" + orijinalDosya + \n              \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n}",
      "BosDosyaException.java": "public class BosDosyaException extends InputException \n{\n    public BosDosyaException(String dosyaAdi) \n    {\n\n        super(\"HATA: \" + dosyaAdi + \" boş.\");\n    }\n}",
      "MetinKarsilastirici.java": "import java.io.*;\nimport java.util.*;\n\n\n\npublic class MetinKarsilastirici \n{\n    \n    public static void main(String[] args) throws Exception \n    \n    {\n\n        \n        if (args.length >= 2) {\n            System.out.println(\"Özgün Argüman 1: \" + args[0]);\n            System.out.println(\"Özgün Argüman 2: \" + args[1]);\n        } else {\n            System.out.println(\"Argüman eksik! En az 2 argüman gerekli.\");\n        }\n\n        \n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Yeni Argüman 1: \");\n        String yeniArg1 = scanner.nextLine();\n        System.out.print(\"Yeni Argüman 2: \");\n        String yeniArg2 = scanner.nextLine();\n        \n        System.out.println(\"Değiştirilen Argümanlar:\");\n        System.out.println(\"Argüman 1: \" + yeniArg1);\n        System.out.println(\"Argüman 2: \" + yeniArg2);\n\n        scanner.close();\n\n\n        try {\n\n            if (args.length != 2) \n            {\n                throw new YanlisArgumanException(Arrays.toString(args));\n            }\n\n            String orijinalDosya = args[0];\n            String degistirilmisDosya = args[1];\n\n        \n            List<String> orijinalSatirlar = dosyaOku(orijinalDosya);\n            List<String> degistirilmisSatirlar = dosyaOku(degistirilmisDosya);\n\n            \n            farklariAnalizeEt(orijinalSatirlar, degistirilmisSatirlar, orijinalDosya, degistirilmisDosya);\n\n        } \n        \n        catch (Exception e) \n        {\n            System.err.println(e.getMessage());\n            throw e;\n        }\n    }\n\n    private static List<String> dosyaOku(String dosyaAdi) throws InputException \n    {\n        List<String> satirlar = new ArrayList<>();\n        \n        try (BufferedReader reader = new BufferedReader(new FileReader(dosyaAdi))) \n        \n        {\n            String satir;\n            while ((satir = reader.readLine()) != null) \n            {\n                satirlar.add(satir);\n            }\n            \n            if (satirlar.isEmpty()) \n            {\n                throw new BosDosyaException(dosyaAdi);\n            }\n            \n            return satirlar;\n            \n        } \n        \n        catch (FileNotFoundException e) \n\n        {\n            throw new DosyaBulunamadiException(dosyaAdi);\n        } \n\n        catch (IOException e) \n        {\n            throw new InputException(\"HATA: Dosya okuma hatası: \" + e.getMessage());\n        }\n    }\n\n    private static void farklariAnalizeEt(List<String> orijinal, List<String> degistirilmis, \n                                        String orijinalDosya, String degistirilmisDosya) \n            throws GecersizDegisiklikException, IOException \n            {\n        \n        int orijinalIndex = 0;\n        int degistirilmisIndex = 0;\n        List<String> farklar = new ArrayList<>();\n\n        while (degistirilmisIndex < degistirilmis.size()) \n        {\n            if (orijinalIndex < orijinal.size() && \n                orijinal.get(orijinalIndex).equals(degistirilmis.get(degistirilmisIndex))) \n                {\n                orijinalIndex++;\n                degistirilmisIndex++;\n            } \n            \n            else if (orijinalIndex < orijinal.size()) \n            {\n\n                throw new GecersizDegisiklikException(orijinalDosya, degistirilmisDosya);\n            } \n\n            else \n            {\n    \n                farklar.add(orijinalIndex + \" -> \" + degistirilmis.get(degistirilmisIndex));\n                degistirilmisIndex++;\n            }\n        }\n\n        \n        if (!farklar.isEmpty()) \n        {\n            try (PrintWriter writer = new PrintWriter(\"farklar.txt\")) \n            \n            {\n                for (String fark : farklar) \n                {\n                    writer.println(fark);\n                }\n            }\n        }\n    }\n}\n\n\n\n\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException \n{\n    public YanlisArgumanException(String arguman) \n    {\n        super(\"HATA: Hatalı argüman kullanımı: \" + arguman + \". Program argüman olarak 2 dosya ismi almalı.\");\n    }\n}",
      "InputException.java": "public class InputException extends Exception \n{\n    public InputException(String message) \n    {\n        super(message);\n    }\n}\n",
      "DosyaBulunamadiException.java": "public class DosyaBulunamadiException extends InputException \n{\n    public DosyaBulunamadiException(String dosyaAdi) \n    {\n        super(\"HATA: \" + dosyaAdi + \" bulunamadı.\");\n    }\n}"
    },
    {
      "id": "8435496",
      "GecersizDegisiklikException.java": "package Lab.Lab3;\n\npublic class GecersizDegisiklikException extends Exception\n{\n    public GecersizDegisiklikException(String originalFile, String changedFile)\n    {\n        super(\"HATA: \" +  changedFile + \" dosyası, \" + originalFile +\n                \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n        System.err.println(\"HATA: \" +  changedFile + \" dosyası, \" + originalFile +\n                \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n}\n",
      "BosDosyaException.java": "package Lab.Lab3;\n\npublic class BosDosyaException extends InputException\n{\n    public BosDosyaException(String fileName)\n    {\n        super(\"HATA: \" + fileName + \" boş.\");\n    }\n}\n",
      "MetinKarsilastirici.java": "package Lab.Lab3;\n\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class MetinKarsilastirici\n{\n    public static void main(String[] args) throws InputException, GecersizDegisiklikException\n    {\n        File output = new File(\"farklar.txt\");\n\n        // Check input\n        if (args.length != 2)\n        {\n            String s = \"\";\n            for (String arg : args)\n            {\n                s += arg + \" \";\n            }\n            throw new YanlisArgumanException(s);\n        }\n\n        // Open file streams\n        FileInputStream original = null;\n        try\n        {\n            original = new FileInputStream(new File(args[0]));\n        }\n        catch (Exception e)\n        {\n            throw new DosyaBulunamadiException(args[0]);\n        }\n        FileInputStream changed = null;\n        try\n        {\n            changed = new FileInputStream(new File(args[1]));\n        }\n        catch (Exception e)\n        {\n            throw new DosyaBulunamadiException(args[1]);\n        }\n        FileOutputStream diff = null;\n        try\n        {\n            diff = new FileOutputStream(output);\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"Could not open \" + output.getName());\n            return;\n        }\n\n        // Create Scanner and PrintWriter objects\n        Scanner o = new Scanner(original);\n        if (!o.hasNext())\n        {\n            throw new BosDosyaException(args[0]);\n        }\n        Scanner c = new Scanner(changed);\n        if (!c.hasNext())\n        {\n            throw new BosDosyaException(args[1]);\n        }\n\n        PrintWriter d = new PrintWriter(diff);\n\n        // Calculate diff\n        int line = 0;\n        String lastSame = null;\n        String ol = null;\n        String cl;\n        boolean wasDifferent = false;\n        while(o.hasNext() || c.hasNext())\n        {\n            if (o.hasNext())\n            {\n                if (!wasDifferent)\n                {\n                    ol = o.nextLine().trim();\n                }\n                wasDifferent = false;\n            }\n            if (c.hasNext())\n            {\n                cl = c.nextLine().trim();\n            }\n            else\n            {\n                throw new GecersizDegisiklikException(args[1], args[0]);\n            }\n\n            if (ol == null || !(ol.equals(cl)))\n            {\n                d.println((line--) + \" -> \" + cl);\n                wasDifferent = true;\n            }\n            else\n            {\n                lastSame = cl;\n            }\n            line++;\n        }\n        if (ol != null && !ol.equals(lastSame))\n        {\n            throw new GecersizDegisiklikException(args[0], args[1]);\n        }\n\n        System.out.println(\"Results are in \" + output.getName());\n\n        d.close();\n        o.close();\n        c.close();\n    }\n}",
      "YanlisArgumanException.java": "package Lab.Lab3;\n\npublic class YanlisArgumanException extends RuntimeException\n{\n    public YanlisArgumanException(String args)\n    {\n        super(\"HATA: Hatalı argüman kullanımı: \" + args + \". Program argüman olarak 2 dosya ismi almalı.\");\n    }\n}\n",
      "InputException.java": "package Lab.Lab3;\n\npublic class InputException extends Exception\n{\n    public InputException(String msg)\n    {\n        super(msg);\n        System.err.println(msg);\n    }\n}\n",
      "DosyaBulunamadiException.java": "package Lab.Lab3;\n\npublic class DosyaBulunamadiException extends InputException\n{\n    public DosyaBulunamadiException(String fileName)\n    {\n        super(\"HATA: \" + fileName + \" bulunamadı.\");\n    }\n}\n"
    },
    {
      "id": "8783086",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends InputException {\n\n    GecersizDegisiklikException() {\n        super();\n    }\n}\n",
      "Main.java": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args)\n            throws GecersizDegisiklikException, BosDosyaException, YanlisArgumanException {\n        FileOutputStream os = null;\n        try {\n            os = new FileOutputStream(\"farklar.txt\");\n        } catch (Exception e) {\n\n        }\n        PrintWriter pw = new PrintWriter(os);\n        try {\n            if (args.length != 2) {\n\n                throw new YanlisArgumanException();\n            }\n        } catch (YanlisArgumanException e) {\n            System.out.print(\"HATA: Hatalı argüman kullanımı: \");\n            for (int i = 0; i < args.length; i++) {\n                System.out.print(args[i] + \" \");\n            }\n            System.out.print(\" Program argüman olarak 2 dosya ismi almalı.\");\n\n        }\n        try {\n            if (args.length < 2) {\n                throw new DosyaBulunamadiException();\n            }\n        } catch (DosyaBulunamadiException e) {\n            System.out.println(\"HATA: dosya bulunamadı.\");\n            pw.println(\"HATA: Geçersiz dosya adı.\");\n        }\n        FileInputStream is = null;\n        try {\n            is = new FileInputStream(args[0]);\n        } catch (Exception e) {\n\n        }\n        FileInputStream is1 = null;\n        try {\n            is1 = new FileInputStream(args[1]);\n        } catch (Exception e) {\n\n        }\n\n        Scanner scan = new Scanner(is);\n\n        Scanner scan1 = new Scanner(is1);\n\n        try {\n            if (scan.hasNext() == false) {\n                throw new BosDosyaException();\n            }\n        } catch (BosDosyaException e) {\n            System.out.println(\"HATA: [\" + args[0] + \"] boş.\");\n        }\n        try {\n            if (scan1.hasNext() == false) {\n                throw new BosDosyaException();\n            }\n        } catch (BosDosyaException e) {\n            System.out.println(\"HATA: [\" + args[1] + \"] boş.\");\n        }\n        int counter = 0;\n        try {\n\n            while (scan.hasNext() == true) {\n                counter++;\n                if (scan.nextLine().equals(scan1.nextLine()) == false) {\n                    throw new GecersizDegisiklikException();\n                }\n            }\n        } catch (GecersizDegisiklikException e) {\n            System.out.println(\n                    \"HATA: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n            pw.println(\n                    \"HATA: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n        }\n        while (scan1.hasNext() == true) {\n            pw.println(counter + \"-> \" + scan1.nextLine());\n        }\n        scan.close();\n        scan1.close();\n\n    }\n}\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n    BosDosyaException() {\n        super();\n    }\n}\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException {\n    YanlisArgumanException() {\n        super();\n    }\n}\n",
      "InputException.java": "public class InputException extends Exception {\n    InputException() {\n        super();\n    }\n}\n",
      "DosyaBulunamadiException.java": "public class DosyaBulunamadiException extends InputException {\n    DosyaBulunamadiException() {\n        super();\n    }\n}\n"
    },
    {
      "id": "4731282",
      "App.java": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\nimport java.io.PrintStream;\n\npublic class App {\n\n    public static void main(String[] args) throws Exception {\n        File fileO = new File(\"orijinal.txt\");\n        File fileD = new File(\"degistirilmis.txt\");\n        File fileF = new File(\"farklar.txt\");\n        Scanner Oscan = null;\n        Scanner Dscan = null;\n        int Ocount = 1;\n        int Dcount = 1;\n\n        try {\n            Oscan = new Scanner(new FileInputStream(fileO));\n            if (Oscan.hasNext() == false) {\n                throw new BosDosyaException();\n            }\n            if (fileO.isHidden()) {\n                throw new DosyaBulunamadiException();\n            }\n        } catch (DosyaBulunamadiException e) {\n            System.out.println(\"HATA : \" + fileO.getName() + \" bulunamadı.\");\n        } catch (BosDosyaException e) {\n            System.out.println(\"HATA: \" + fileO.getName() + \" boş.\");\n        }\n\n        try {\n            Dscan = new Scanner(new FileInputStream(fileD));\n            if (Dscan.hasNext() == false) {\n                throw new BosDosyaException();\n            }\n            if (fileD.isHidden()) {\n                throw new DosyaBulunamadiException();\n            }\n        } catch (DosyaBulunamadiException e) {\n            System.out.println(\"HATA : \" + fileO.getName() + \" bulunamadı.\");\n        } catch (BosDosyaException e) {\n            System.out.println(\"HATA: \" + fileO.getName() + \" boş.\");\n        }\n\n        try {\n            System.setOut(new PrintStream(new FileOutputStream(fileF)));\n            if (fileF.isHidden()) {\n                throw new DosyaBulunamadiException();\n            }\n        } catch (DosyaBulunamadiException e) {\n            System.out.println(\"HATA : \" + fileF.getName() + \" bulunamadı.\");\n        }\n\n        try {\n            while (Oscan.hasNextLine()) {\n\n                if (Dscan.hasNextLine() == false) {\n                    throw new GecersizDegisiklikException();\n\n                }\n                String originalLine = Oscan.nextLine();\n                String changedLine = Dscan.nextLine();\n                if (originalLine.equals(changedLine) == false) {\n                    throw new GecersizDegisiklikException();\n                }\n                Ocount++;\n\n            }\n        } catch (GecersizDegisiklikException e) {\n            System.out.println(\"HATA: \" + fileD.getName() + \" dosyası, \" + fileO.getName()\n                    + \"  dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n\n        }\n        while (Dscan.hasNextLine()) {\n            Dcount++;\n        }\n\n        System.out.println(Ocount + \" ->  Eklenen yeni bir satır\");\n        System.out.println(Dcount + \" ->  Yeni satır eklendi\");\n\n    }\n}\n\nclass InputException extends Exception {\n\n}\n\nclass YanlisArgumanException extends InputException {\n\n}\n\nclass DosyaBulunamadiException extends InputException {\n\n}\n\nclass BosDosyaException extends InputException {\n\n}\n\nclass GecersizDegisiklikException extends Exception {\n\n}\n"
    },
    {
      "id": "6202193",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends Exception {\n    GecersizDegisiklikException(String file1,String file2){\n        super(\"HATA: \"+file1+\" dosyası, \"+file2+\" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n}\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n    BosDosyaException(String filename){\n        super(\"HATA: \"+filename+\" boş.\");\n    }\n}\n",
      "App.java": "import java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n\n        String isim1= sc.nextLine();\n        String isim2 = sc.nextLine();\n\n       PrintWriter writer = new PrintWriter(\"farklar.txt\");\n\n       \n       int count = 1;\n       String temp= \"a\";\n       boolean flag = false;\n       \n       \n       if(isim1.indexOf(\".txt\")==-1)throw new Exception(\"HATA: Geçersiz dosya adı.\");\n       if(isim2.indexOf(\".txt\")==-1)throw new Exception(\"HATA: Geçersiz dosya adı.\");\n        File file = new File(isim1);\n        if(!file.exists())throw new DosyaBulunamadiException(isim1);\n        Scanner a = new Scanner(new FileReader(isim1));\n        if (!a.hasNextLine())throw new BosDosyaException(isim1);\n\n         file = new File(isim2);\n        if(!file.exists())throw new DosyaBulunamadiException(isim2);\n        Scanner b = new Scanner(new FileReader(isim2));\n        if (!b.hasNextLine())throw new BosDosyaException(isim2);\n         \n       \n        \n       \n       \n\n       \n       String e=\"a\";\n       String g = \"c\";\n\n       \n       while(b.hasNextLine()){\n        g=b.nextLine();\n        if(a.hasNextLine()){\n        e=a.nextLine();\n        \n        if(flag){\n            if(temp.equals(g)){\n                flag=false;\n                count++;\n            }\n        }\n        else if(e.equals(g))count++;\n        else{\n            temp= e;\n           \n            writer.println(count+\" -> Eklenen yeni bir satır.\");\n            \n            writer.flush();\n            flag=true;\n            count++;\n            \n        }\n    }\n\n    else if(b.hasNextLine()) {\n        count++;\n        \n        \n        writer.println(count+\" ->  Yeni bir satır daha eklendi\");\n        writer.flush();\n    }\n       }\n\n       \n       \n        file = new File(isim1);\n        if(!file.exists())throw new DosyaBulunamadiException(isim1);\n         a = new Scanner(new FileReader(isim1));\n        if (!a.hasNextLine())throw new BosDosyaException(isim1);\n\n         file = new File(isim2);\n        if(!file.exists())throw new DosyaBulunamadiException(isim2);\n         b = new Scanner(new FileReader(isim2));\n        if (!b.hasNextLine())throw new BosDosyaException(isim2);\n         \n        flag=true;\n       while(a.hasNextLine()){\n        temp=a.nextLine();\n        b = new Scanner(new FileReader(isim2));\n        flag=false;\n        while(b.hasNext()){\n            if(b.nextLine().equals(temp))flag=true;\n        }\n        if(!flag)throw new GecersizDegisiklikException(isim1,isim2);\n       }\n       writer.close();\n       \n\n        \n        \n        \n        \n        \n        \n\n        \n        \n       \n\n\n        \n\n    }\n\n    \n}\n",
      "InputException.java": "public class InputException extends Exception {\n    \n    InputException(String message){\n        super(message);\n    }\n}\n\n\n",
      "DosyaBulunamadiException.java": "public class DosyaBulunamadiException extends InputException {\n    DosyaBulunamadiException(String filename){\n    super(\"HATA: \"+filename+\" bulunamadı.\");    \n    }\n}\n"
    },
    {
      "id": "8190737",
      "Main.java": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws InputException{\n\n        if(args.length != 2){\n            String error = \"HATA: Hatali arguman kullanimi: [\";\n            for(int i = 0;i < args.length;i++){\n                error = error + args[i];\n                if(i != args.length - 1)\n                    error = error +  \", \";\n            }\n            error = error + \"]. Program arguman olarak 2 dosya ismi almali\";\n            throw new WrongArgumentException(error);\n        }\n\n        Scanner sc1 = null;\n        Scanner sc2 = null;\n\n        try{\n            sc1 = new Scanner(new File(args[0]));\n            sc2 = new Scanner(new File(args[1]));\n        }\n        catch(IOException e){\n            throw new FileNotFoundException(e.toString().split(\" \")[1]);\n        }\n\n        if(!sc1.hasNextLine()){\n            sc1.close();\n            sc2.close();\n            throw new FileEmpytException(args[0]);\n        }\n        \n        if(!sc2.hasNextLine()){\n            sc1.close();\n            sc2.close();\n            throw new FileEmpytException(args[1]);\n        }\n\n        String line1 = null, line2 = null;\n        int lineIdx = 0;\n\n        FileWriter writer = null;\n\n        try{\n            writer = new FileWriter(new File(\"farklar.txt\"));\n        }\n        catch(IOException e){\n            e.printStackTrace();\n            try{\n                sc1.close();\n                sc2.close();\n            }\n            catch(Exception ex){\n                ex.printStackTrace();\n                return;\n            }\n            return;\n        }\n\n        while(sc1.hasNextLine() && sc2.hasNextLine()){\n            line1 = sc1.nextLine();\n            line2 = sc2.nextLine();\n            while(!line1.equals(line2) && sc2.hasNextLine()){\n                try{\n                    writer.write(lineIdx + \" -> \" + line2 + \"\\n\");\n                }\n                catch(Exception e){\n                    e.printStackTrace();\n                }\n                line2 = sc2.nextLine();\n            }\n            lineIdx++;\n            if(!line1.equals(line2)){\n                try{\n                    sc1.close();\n                    sc2.close();\n                    writer.close();\n                }\n                catch(Exception ex){\n                    ex.printStackTrace();\n                }\n                throw new InvalidChangeException(args);\n            }\n        }\n\n        if(sc1.hasNextLine()){\n            try{\n                sc1.close();\n                sc2.close();\n                writer.close();\n            }\n            catch(Exception ex){\n                ex.printStackTrace();\n            }\n            throw new InvalidChangeException(args);\n        }\n\n        while(sc2.hasNextLine()){\n            try{\n                writer.write(lineIdx + \" -> \" + sc2.nextLine() + \"\\n\");\n            }\n            catch(Exception e){\n                e.printStackTrace();\n            }\n        }\n\n        try{\n            sc1.close();\n            sc2.close();\n            writer.close();\n        }\n        catch(Exception ex){\n            ex.printStackTrace();\n            return;\n        }\n   }\n}\n",
      "InputException.java": "public class InputException extends Exception{\n    InputException(String str){\n        super(str);\n    }\n}\n\nclass FileNotFoundException extends InputException{\n    FileNotFoundException(String str){\n        super(\"HATA: \" + str + \" bulunamadi.\");\n        printStackTrace();\n    }\n}\n\nclass FileEmpytException extends InputException{\n    FileEmpytException(String str){\n        super(\"HATA: \" + str + \" bos.\");\n        printStackTrace();\n    }\n}\n\nclass InvalidChangeException extends InputException{\n    InvalidChangeException(String[] args){\n        super(\"HATA: \" + args[1] + \" dosyasi, \" + args[0] + \"dosyasina yalnizca yeni satirlar eklenerek olusturulmamis.\");\n        printStackTrace();\n    }\n}\n",
      "WrongArgumentException.java": "\npublic class WrongArgumentException extends InputException{\n    WrongArgumentException(String error){\n        super(error);\n    }\n}"
    },
    {
      "id": "6194008",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends Exception {\n\n    public GecersizDegisiklikException(String[] a) {\n        System.out.println(\"HATA: [\" + a[0] + \"] dosyası, [\" + a[1] + \"] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n        \n    }\n\n\n}\n",
      "Main.java": "\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        \n        /*if (args.length != 2) {\n            throw new YanlisArgumanException(args);\n        }\n        try {\n            FileInputStream k = new FileInputStream(args[0]);\n\n        } catch (Exception e) {\n\n            throw new DosyaBulunamadiException(k);\n        }\n        try {\n            FileInputStream p = new FileInputStream(args[0]);\n\n        } catch (Exception e) {\n\n            throw new DosyaBulunamadiException(p);\n        }*/\n        FileInputStream one = new FileInputStream(args[0]);\n        FileInputStream two = new FileInputStream(args[1]);\n            \n        \n\n        int a = 0;\n        ArrayList<String> arr1 = new ArrayList<>();\n        ArrayList<String> arr2 = new ArrayList<>();\n        Scanner scan1 = new Scanner(one);\n        Scanner scan2 = new Scanner(two);\n        /*if (one.isEmpty()) {\n            throw new BosDosyaException(args[0]);\n        }\n        if (two.isEmpty()) {\n            throw new BosDosyaException(args[1]);\n        }*/\n\n        while(scan1.hasNext()) {\n            String f = scan1.nextLine();\n            arr1.add(f);\n        }\n        while(scan2.hasNext()) {\n            String t = scan2.nextLine();\n            arr2.add(t);\n        }\n        boolean bool = false;\n        /*for (int i = 0; i < arr1.size(); i++) {\n            bool = false;\n            for (int j = 0; j < arr2.size(); j++) {\n                if (arr1.get(i) == arr2.get(j)) {\n                    bool = true;\n                }\n            }\n            if (!bool) {\n                throw new GecersizDegisiklikException(args);\n            }\n        }*/\n        FileOutputStream g = new FileOutputStream(\"farklar.txt\");\n        PrintWriter out = new PrintWriter(g);\n        for(int i = 0; i < arr2.size(); i++) {\n            if (a == arr1.size()) {\n                \n            }\n            else if(arr1.get(a).equals(arr2.get(i))) {\n                a++;\n            }\n            else {\n                out.write(i + \" -> \" + arr2.get(i) + \"\\n\");\n                \n                a++;\n\n            }\n        }\n        out.flush();\n        out.close();\n\n\n\n        \n\n    }\n    \n    \n    \n}\n\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException{\n\n\tpublic BosDosyaException(String string) {\n\t\tSystem.out.println(\"HATA: [\" + string + \"] boş.\");\n\t}\n\n\n}\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException {\n\n    public YanlisArgumanException(String[] a) {\n        String h = \"\";\n        for(String arg : a) {\n            h = \"[\" +  h + \"] \";\n        }\n        System.out.println(\"\\\"HATA: Hatalı argüman kullanımı: \" + h + \"Program argüman olarak 2 dosya ismi almalı.\");\n    }\n    \n\n\n}\n",
      "InputException.java": "public class InputException extends Exception{\n\n}\n",
      "DosyaBulunamadiException.java": "\nimport java.io.FileInputStream;\n\npublic class DosyaBulunamadiException extends InputException {\n    public DosyaBulunamadiException(FileInputStream a) {\n        \n    }\n\n}\n"
    },
    {
      "id": "7817361",
      "main.java": "package Lab3;\n\npublic class main {\n\n}\n",
      "InputException.java": "package Lab3;\n\npublic class InputException {\n\n}\n"
    },
    {
      "id": "2051651",
      "Main.java": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {  \n    public static void main(String[] args) throws BosDosyaException, KelimeBulunamadiException, DosyaBulunamadiException{\n        Scanner scanner;\n        Scanner textScanner;\n        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> text = new ArrayList<>();\n        int index = 0;\n        int count = 0;\n        try{\n            FileInputStream kelimeler = new FileInputStream(\"Kelimeler.txt\");\n            scanner = new Scanner(kelimeler);\n            if(!scanner.hasNext()){\n                 throw new BosDosyaException();\n            }\n            while(scanner.hasNext()){\n                String removed = scanner.next().replaceAll(\"\\\\p{Punct}\", \"\");\n                words.add(removed);\n            }\n        }\n        catch(FileNotFoundException e){\n            System.err.println(\"Kelimeler.txt bulunamadı.\");\n        }\n        int[] wordCount = new int[words.size()];\n        try{\n            FileInputStream metin = new FileInputStream(\"Metin.txt\");\n            textScanner = new Scanner(metin);\n            if(!textScanner.hasNext()){\n                 throw new BosDosyaException();\n            }\n            while(textScanner.hasNext()){\n                String removed2 = textScanner.next().replaceAll(\"\\\\p{Punct}\", \"\");\n                text.add(removed2);\n            }\n        }\n        catch(FileNotFoundException e){\n            System.err.println(\"Metin.txt bulunamadı.\");\n        }\n\n        try{\n            FileOutputStream sonuc = new FileOutputStream(\"Sounc.txt\");\n            PrintWriter writer = new PrintWriter(sonuc);\n            for (String word : words) {\n                for (String txt : text) {\n                    if(word.equals(txt)){\n                        count++;\n                        wordCount[index]++;\n                    }\n                }\n                if(count > 0){\n                    writer.write(word + \": \" + count + \"\\n\");\n                }\n                index++;\n                count = 0;\n            }\n            writer.close();\n            for(int i = 0; i < wordCount.length; i++){\n                if(wordCount[i] == 0){\n                    System.err.println(words.get(i) + \" metinde bulunamadı.\");\n                    throw new KelimeBulunamadiException();\n                }\n            }\n        }\n        catch(FileNotFoundException g){\n            System.err.println(\"Sounc.txt bulunamadı\");\n                throw new DosyaBulunamadiException();\n    }\n}\n}\n    \n    \n",
      "KelimeBulunamadiException.java": "public class KelimeBulunamadiException extends Exception{\n    \n}\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n    \n}\n",
      "InputException.java": "public class InputException extends Exception {\n\n}\n",
      "DosyaBulunamadiException.java": "public class DosyaBulunamadiException extends InputException {\n    DosyaBulunamadiException(){\n        super();\n    }\n}\n"
    },
    {
      "id": "6897869",
      "DosyaBulunamdiException.java": "public class DosyaBulunamdiException extends InputException {\n    public DosyaBulunamdiException(String dosya) {\n        super(\"HATA: \" + dosya + \" bulunamadı.\");\n    }\n}\n",
      "Main.java": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) throws InputException, Exception {\n        if (args.length != 2) {\n            String argumanlar = \"\";\n            for (String ad : args) {\n                argumanlar += (\" \" + ad);\n            }\n            throw new YanlisArgumanException(argumanlar);\n        }\n\n        ArrayList<String> orijinal = new ArrayList<String>();\n        ArrayList<String> degistirilmis = new ArrayList<String>();\n\n        dosyaOku(orijinal, args[0]);\n        dosyaOku(degistirilmis, args[1]);\n\n        if (orijinal.size() >= degistirilmis.size()) {\n            throw new GecersizDegisikilikException(args[1], args[0]);\n        }\n\n\t//Çıktıya eklenen satırın son haldeki satır numarasını yazdırdım\n\n        int[] rows = new int[orijinal.size()];\n        for (int i = 0; i < orijinal.size(); i++) {\n            for (int j = i; j < degistirilmis.size(); j++) {\n                if (orijinal.get(i).equals(degistirilmis.get(j))) {\n                    rows[i] = j + 1;\n                }\n            }\n        }\n\n        for (int i : rows) {\n            if (i == 0) {\n                throw new GecersizDegisikilikException(args[1], args[0]);\n            }\n        }\n\n        PrintWriter writer = null;\n        FileOutputStream file = null;\n\n        try {\n            file = new FileOutputStream(\"farklar.txt\");\n        } catch (FileNotFoundException e) {\n            System.err.println(\"farklar.txt açılamadı\");\n            return;\n        }\n\n        try {\n            writer = new PrintWriter(file, true);\n            for (int i = 0; i < degistirilmis.size(); i++) {\n                boolean var = false;\n                for (int j : rows) {\n                    if (i + 1 == j) {\n                        var = true;\n                    }\n                }\n                if (!var) {\n                    // System.out.println((i) + \"-> \" + degistirilmis.get(i));\n                    writer.println(\"\" + (i) + \"-> \" + degistirilmis.get(i));\n                }\n            }\n        } catch (Exception e) {\n            System.err.println(\"farklar.txt ye yazılamadı\");\n        }\n        file.close();\n\n    }\n\n    static void dosyaOku(ArrayList<String> arr, String dosya) throws InputException {\n        Scanner scan;\n        try {\n            scan = new Scanner(new FileInputStream(dosya));\n        } catch (FileNotFoundException e) {\n            throw new DosyaBulunamdiException(dosya);\n        }\n\n        while (scan.hasNextLine()) {\n            arr.add(scan.nextLine());\n        }\n\n        scan.close();\n\n        if (arr.size() == 0) {\n            throw new BosDosyaException(dosya);\n        }\n    }\n\n}\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n    public BosDosyaException(String dosya) {\n        super(\"HATA: \" + dosya + \"boş.\");\n    }\n}\n",
      "GecersizDegisikilikException.java": "public class GecersizDegisikilikException extends Exception {\n    public GecersizDegisikilikException(String degistirilmis, String orijinal) {\n        super(\" HATA: \" + degistirilmis + \" dosyası, \" + orijinal\n                + \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n\n}\n",
      "YanlisArgumanException.java": "\npublic class YanlisArgumanException extends InputException {\n    public YanlisArgumanException() {\n        super();\n    }\n\n    public YanlisArgumanException(String args) {\n        super(\"Hata: Hatalı argüman kullanımı:\" + args + \". Program argüman olarak 2 dosya ismi almalı.\");\n    }\n}\n",
      "InputException.java": "\npublic class InputException extends Exception {\n    public InputException() {\n        super();\n    }\n\n    public InputException(String message) {\n        super(message);\n    }\n}"
    },
    {
      "id": "1764665",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends InputException {\n\n}\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n\n}\n",
      "App.java": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.sql.Array;\nimport java.util.ArrayList;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        try {\n            if (args.length != 2) {\n                throw new YanlisArgumanException();\n            }\n        } catch (YanlisArgumanException e) {\n            System.out.print(\"HATA: Hatalı argüman kullanımı: \");\n            for (Object elem : args) {\n                System.out.print(elem);\n            }\n            System.out.println(\"Program argüman olarak 2 dosya ismi almalı\");\n            System.exit(0);\n        }\n\n        String fileorijinal = args[0];\n        String filedegismis = args[1];\n        ArrayList<String> orijinal = readFromFileBufferedReader(fileorijinal);\n        ArrayList<String> degismis = readFromFileBufferedReader(filedegismis);\n\n        try {\n            for (Object elem : orijinal) {\n                if (!degismis.contains(elem)) {\n                    throw new GecersizDegisiklikException();\n                }\n            }\n        } catch (GecersizDegisiklikException e) {\n            System.err.println(\n                    \"HATA:\" + filedegismis + \"dosyası, \" + fileorijinal\n                            + \" dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n            System.exit(0);\n        }\n\n        int i = 0;\n        int marjin = 0;\n        ArrayList<String> farklar = new ArrayList<String>();\n        for (i = 0; i < orijinal.size(); i++) {\n            marjin = 0;\n            if (!orijinal.get(i).equals(degismis.get(i + marjin))) {\n                String txt = i + \" ->\" + degismis.get(i + marjin);\n                System.out.println(txt);\n                farklar.add(txt);\n                marjin++;\n            }\n        }\n        for (int j = i + marjin; j < degismis.size(); j++) {\n            String txt = j + \" ->\" + degismis.get(j);\n            System.out.println(j + \" ->\" + degismis.get(j));\n            farklar.add(txt);\n        }\n\n        Writer(\"farklar.txt\", farklar);\n    }\n\n    public static void Writer(String filename, ArrayList Write) {\n        PrintWriter out = null;\n        FileOutputStream file = null;\n        try {\n            file = new FileOutputStream(filename);\n        } catch (Exception e) {\n            System.out.println(\"Exception\");\n            return;\n        }\n        try {\n            out = new PrintWriter(file);\n            for (Object elem : Write) {\n                out.println(elem.toString());\n            }\n        } catch (Exception e) {\n        } finally {\n            out.close();\n        }\n    }\n\n    static ArrayList<String> readFromFileBufferedReader(String filename) throws Exception {\n        ArrayList<String> list = new ArrayList<String>();\n        try {\n            File dosya = new File(filename);\n            if (dosya.exists()) {\n                BufferedReader in = new BufferedReader(new FileReader(filename));\n                if (in.read() == -1) {\n                    throw new BosDosyaException();\n                } else {\n                    String text = \"\";\n                    int ch;\n                    while ((ch = in.read()) != -1) {\n                        if (ch == 13) {\n                            list.add(text);\n                            text = \"\";\n                        } else {\n                            if (ch != 10) {\n                                text += (char) ch;\n                            }\n                        }\n                    }\n                    list.add(text);\n                    in.close();\n                }\n            } else {\n                throw new DosyaBulunamadiException();\n            }\n\n        } catch (DosyaBulunamadiException e) {\n            System.out.println(\"HATA: \" + filename + \" bulunamadı.\");\n        } catch (BosDosyaException e) {\n            System.out.println(\"HATA: \" + filename + \" Boş.\");\n        }\n        return list;\n    }\n\n}\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException {\n\n}\n",
      "InputException.java": "public class InputException extends Exception {\n\n}\n",
      "DosyaBulunamadiException.java": "\npublic class DosyaBulunamadiException extends InputException {\n\n}\n"
    },
    {
      "id": "8964453",
      "GecersizDegisiklikException.java": "public class GecersizDegisiklikException extends Exception {\n    public GecersizDegisiklikException(String dosya1, String dosya2) {\n        super(\"[HATA] \" +dosya2+ \" dosyasi \" + dosya1 + \"dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış\");\n    }\n}\n",
      "Main.java": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        try {\n            compare(\"orijinal.txt\", \"degistirilmis.txt\");\n            System.out.println(\"*****[Basarili]*****\");\n        }catch (DosyaBulunamadiException | BosDosyaException e)\n        {\n            e.getMessage();\n            e.printStackTrace();\n            System.err.println(e.getMessage());\n        }\n    }\n\n    public static void compare(String orj, String chan) throws DosyaBulunamadiException,BosDosyaException {\n        File orijinal = new File(orj);\n        File changed = new File(chan);\n\n        if (!orijinal.exists()) {\n            throw new DosyaBulunamadiException(\"Orijinal\");\n        }\n\n        if (!changed.exists()) {\n            throw new DosyaBulunamadiException(\"Degistirilmis\");\n        }\n\n        if (orijinal.length() == 0) {\n            throw new BosDosyaException(\"Orijinal\");\n        }\n\n        if (changed.length() == 0) {\n            throw new BosDosyaException(\"Degistirilmis\");\n        }\n\n        Scanner cha_scan;\n        Scanner orj_scan;\n\n        try {\n            cha_scan = new Scanner(changed);\n            orj_scan = new Scanner(orijinal);\n        } catch (FileNotFoundException e) {\n            throw new DosyaBulunamadiException(\"Orijinal\");\n        }\n\n        String orj_line;\n        String chan_line;\n\n        int index = 0;\n        PrintWriter write;\n        try{\n            write = new PrintWriter(\"farklar.txt\");\n        }catch (FileNotFoundException e){\n            throw new DosyaBulunamadiException(\"farklar.txt\");\n        }\n\n        List<String> orj_list = new ArrayList<>();\n        List<String> cha_list = new ArrayList<>();\n\n        while (cha_scan.hasNextLine()) {\n            chan_line = cha_scan.nextLine();\n            cha_list.add(chan_line);\n        }\n\n        while (orj_scan.hasNextLine()) {\n            orj_line = orj_scan.nextLine();\n            orj_list.add(orj_line);\n        }\n\n        int j =0;\n\n        for(int i =0;i<cha_list.size();i++)\n        {\n            if(j< orj_list.size())\n            {\n                if(!cha_list.get(i).equals(orj_list.get(j)))\n                {\n                    write.println(i + \" --> \"+ cha_list.get(i));\n                }\n                else\n                {\n                    j++;\n                }\n            }\n            \n            if(j<i)\n            {\n                write.println(i + \" --> \"+ cha_list.get(i));\n            }\n        }\n        \n        write.close();\n        orj_scan.close();\n        cha_scan.close();\n    }\n\n}\n\n",
      "BosDosyaException.java": "public class BosDosyaException extends InputException {\n    public BosDosyaException(String dosya_adi) {\n        super(\"[HATA] \" + dosya_adi + \" bos!\");\n    }\n}\n",
      "YanlisArgumanException.java": "public class YanlisArgumanException extends InputException{\n    public YanlisArgumanException(String arg1, String arg2){\n        super(\"[HATA] Hatali Arguman Kullanimi: [\" + arg1 + \" \" + arg2 +\"]\");\n    }\n}\n",
      "InputException.java": "public class InputException extends Exception{\n    public InputException(String msg){\n        super(msg);\n    }\n}\n",
      "DosyaBulunamadiException.java": "public class DosyaBulunamadiException extends InputException {\n    public DosyaBulunamadiException(String dosya_adi) {\n        super(\"[HATA] \" + dosya_adi + \" bulunamadi!\");\n    }\n}\n"
    },
    {
      "id": "3659398",
      "Arraylist.java": "\npublic class Arraylist<> {\n\n}\n",
      "GecersizDegisiklikException.java": "class GecersizDegisiklikException extends Exception {\n    public GecersizDegisiklikException()\n    {\n        super(\"HATA: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.\");\n    }\n\n}\n",
      "BosDosyaException.java": "class BosDosyaException extends InputException {\n    public BosDosyaException() {\n        super(\"HATA: [dosya adı] boş.\");\n    }\n\n}\n",
      "MetinKarsilastirici.java": "import java.io.*;\nimport java.util.*;\n//Çıktı olarak değiştirilmiş text dosyasında kaçıncı satırda onu çıktı veriyor\npublic class MetinKarsilastirici {\n    public static void main(String[] args) {\n        Scanner klavye = new Scanner(System.in);\n        System.out.println(\"ilk dosya adını giriniz\");\n        String dosya1 = klavye.next();\n        System.out.println(\"ikinci dosya adını giriniz\");\n        String dosya2 = klavye.next();\n        File file = null;\n        File file2 = null;\n        try{ file = new File(dosya1);\n         file2 = new File(dosya2);\n         MetinKarsilastiricimethod(file, file2);\n}\ncatch(Exception e)\n{\n\n    \n    System.out.println(e.getMessage());\n}\n        \n    }\n    public static  void MetinKarsilastiricimethod(File file, File file2)\n    {\n        \n     ArrayList<String> fileList = new ArrayList<>();\n     ArrayList<String> fileList2 = new ArrayList<>();\n        Scanner scan = null;\n        Scanner scan2 = null;\n        \n        PrintWriter output = null;\n        PrintWriter stderr = null;\n        try{\n            if (!file.exists() || !file2.exists()) {\n                throw new DosyaBulunamadiException();\n            }\n            scan = new Scanner(new FileInputStream(file));\n            scan2 = new Scanner(new FileInputStream(file2));\n            output = new PrintWriter(new FileOutputStream(\"farklar.txt\"));\n            \n            while(scan.hasNextLine())\n            {\n                \n                fileList.add(scan.nextLine());\n            }\n            while(scan2.hasNextLine())\n            {\n                \n                fileList2.add(scan2.nextLine());\n            }\n            scan.close();\n            scan2.close();\n            if (fileList.isEmpty()) \n            {throw new BosDosyaException();}\n            if (fileList2.isEmpty()) \n            {throw new BosDosyaException();}\n            boolean[] arr = new boolean[fileList.size()];\n            boolean[] arr2 = new boolean[fileList2.size()];\n            for(int i = 0; i < arr2.length; i++)\n            arr[i] = false;\n            for(int i = 0; i < arr.length; i++)\n            arr[i] = false;\n            for(int i = 0; i < arr.length; i++)\n            {\n                for(int j = 0; j < fileList.size(); j++)\n                {\n                    if(fileList.get(i).equals(fileList2.get(j)));\n                    {arr[i] = true;\n                    arr2[j] = true;}\n                }\n            }\n            \n            for(int i = 0; i < arr.length; i++)\n            {\n                if(arr[i] == false)\n                throw new GecersizDegisiklikException();\n            }\n           \n            for(int i = 0; i < arr2.length; i++)\n            {\n                if(arr2[i] == false)\n                output.println(i + \" -> \" + fileList.get(i));\n            }\n            output.flush();\n            \n           \n        \n\n        }\n        catch(Exception e)\n        {\n        try{stderr = new PrintWriter(new FileOutputStream(\"stderr.txt\"));\n        stderr.println(e.getMessage());}\n        catch(Exception a)\n        {\n            stderr.println(a.getMessage());\n        }\n        \n        \n        \n        }\n        finally{output.close();}\n        \n        \n\n    }\n}",
      "YanlisArgumanException.java": "class YanlisArgumanException extends InputException {\n    public YanlisArgumanException()\n    {\n        super(\"Hata mesajı: HATA: Hatalı argüman kullanımı: [argümanlar]. Program argüman olarak 2 dosya ismi almalı.\");\n    }\n\n}\n",
      "InputException.java": "class InputException extends Exception {\n    public InputException(String msg) {\n        super(msg);\n    }\n\n}\n",
      "DosyaBulunamadiException.java": "class DosyaBulunamadiException extends InputException {\n    public DosyaBulunamadiException()\n    {\n        super(\" HATA: [dosya adı] bulunamadı.\");\n    }\n    \n}\n"
    }
  ]
}