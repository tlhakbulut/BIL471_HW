{
  "questions": [
    "Generic\n\n1)  Envanter Yönetim Sistemi\n\nBu labda amacımı bir oyun için envanter sistemi eklemektir.\nItem isminde bir arayüz tanımlayın:\nAşağıdaki metotları içermelidir:\nString getName()\nint getValue()\n\nWeapon sınıfı tanımlayın. Bu sınıf Item arayüzünü uygulamalıdır.\n\nint damage isimli bir özelliği olmalıdır.\n\nArmor sınıfı tanımlayın. Bu sınıf da Item arayüzünü uygulamalıdır.\n\nint defense isimli bir değişkeni olmalıdır.\n\nPotion sınıfı tanımlayın. Bu sınıf da Item arayüzünü uygulamalıdır.\n\nString effect isimli bir değişkeni olmalıdır.\n\nGeneric Inventory<T> sınıfı\nbir arraylist kullanarak nesneleri saklamalıdır.\nvoid addItem(T item): envantere istenilen eşyayı eklemeli\nvoid removeItem(T item): envanterden istenilen eşyayı silmeli\nvoid printInventory(): envanteri basmalı\nT mostValuableItem(): en değerli eşyayı dönmeli\nT findItemByName(String name): verilen isme karşılık gelen eşyayı dönmeli.\n\nİsimlerin unique olduğunu varsayabilirsiniz. Eğer yoksa null dönün.\n\nList<T> findItemsByValue(int value): verilen değerden daha değerli eşyaarın\n\nlistesini döndürür.\n\nint getTotalValue(): Envanterin toplam değerini döner.\nList<T> filterByType(Class<?> type): istenilen sınıfa ait ögeleri döner.\nint getTotalWeaponDamage(): Weapon classına ait olan nesnelerin toplam\n\nhasarınıdöner.\n\nvoid sortByValue(): değeri azalan şekilde envanteri sıralamalıdır.\npublic static void printMostValuableItem(Inventory<? extends Item>\n\ninventory): verilen envanterdem en değerli eşayı ekrana basmalıdır.\n\npublic static void transferArmor(Inventory<? super Armor> destination,\n\nInventory<Armor> source): Verilen hedef envantere zırhı taşımalıdır.\n\nDriver class: main metodu burada olmalıdır. Sadece Weapon’dan oluşan ve\n\nItemdan oluşan Invertory classı yazıp test ediniz.\n\nYardımcı olabilecek metotlar:\nClass<Weapon> weaponClass = Weapon.class;\nSystem.out.println(\"Sınıf adı: \" + weaponClass.getName());  // Çıktı: Weapon\n\nWeapon sword = new Weapon(\"Excalibur\", 1000, 100);\nClass<?> clazz = sword.getClass();\nSystem.out.println(clazz.getName());  // Çıktı: Weapon\n\n"
  ],
  "answers": [
    {
      "id": "9164612",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    private List<T> items = new ArrayList<>();\n\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item.getName() + \" - Value: \" + item.getValue());\n        }\n    }\n\n\n    public T mostValuableItem() {\n        if (items.isEmpty()){\n            return null;\n        }\n        T mostValuable = items.get(0);\n        for (T item : items) {\n            if (item.getValue() > mostValuable.getValue()) {\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (item.getName().equalsIgnoreCase(name)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (item.getValue() > value) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n    public List<T> filterByType(Class<?> type) {\n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDamage += item.getValue();\n            }\n        }\n        return totalDamage;\n    }\n\n    public void sortByValue() {\n        int n = items.size();\n        for (int i = 0; i < n - 1; i++) {\n            int maxIndex = i;\n            for (int j = i + 1; j < n; j++) {\n                if (items.get(j).getValue() > items.get(maxIndex).getValue()) {\n                    maxIndex = j;\n                }\n            }\n            T temp = items.get(maxIndex);\n            items.set(maxIndex, items.get(i));\n            items.set(i, temp);\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"Most Valuable Item: \" + mostValuable.getName() + \" (Value: \" + mostValuable.getValue() + \")\");\n        } else {\n            System.out.println(\"Inventory is empty.\");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor armor : source.items) {\n            destination.addItem(armor);\n        }\n        source.items.clear();\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    private String name;\n    private int damage;\n\n    public Weapon(String name, int damage) {\n        this.name = name;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return damage;\n    }\n}",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n}\n",
      "Main.java": "import java.util.List;\npublic class Main {\n    public static void main(String[] args) {\n        Inventory<Item> inventory = new Inventory<>();\n\n        Weapon sword = new Weapon(\"Excalibur\", 100);\n        Weapon axe = new Weapon(\"Battle Axe\", 80);\n        Armor shield = new Armor(\"Iron Shield\", 50);\n        Armor helmet = new Armor(\"Golden Helmet\", 75);\n        Potion healingPotion = new Potion(\"Healing Potion\", 30);\n\n        inventory.addItem(sword);\n        inventory.addItem(axe);\n        inventory.addItem(shield);\n        inventory.addItem(helmet);\n        inventory.addItem(healingPotion);\n\n        System.out.println(\"Full Inventory:\");\n        inventory.printInventory();\n\n        System.out.println(\"\\nMost Valuable Item: \" + inventory.mostValuableItem().getName());\n\n        System.out.println(\"\\nFinding Item by Name 'Golden Helmet': \" + inventory.findItemByName(\"Golden Helmet\").getName());\n\n        System.out.println(\"\\nItems with value greater than 50:\");\n        List<Item> valuableItems = inventory.findItemsByValue(50);\n        for (Item item : valuableItems) {\n            System.out.println(item.getName() + \" - Value: \" + item.getValue());\n        }\n\n        System.out.println(\"\\nFiltering only Weapons:\");\n        List<Item> weapons = inventory.filterByType(Weapon.class);\n        for (Item weapon : weapons) {\n            System.out.println(weapon.getName() + \" - Damage: \" + weapon.getValue());\n        }\n\n        System.out.println(\"\\nTotal Weapon Damage: \" + inventory.getTotalWeaponDamage());\n\n        System.out.println(\"\\nSorting Inventory by Value: \");\n        inventory.sortByValue();\n        inventory.printInventory();\n\n        System.out.println();\n        Inventory.printMostValuableItem(inventory);\n    }\n}\n",
      "Armor.java": "public class Armor implements Item {\n    private String name;\n    private int defense;\n\n    public Armor(String name, int defense) {\n        this.name = name;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return defense;\n    }\n}",
      "Potion.java": "public class Potion implements Item {\n    private String name;\n    private int effectValue;\n\n    public Potion(String name, int effectValue) {\n        this.name = name;\n        this.effectValue = effectValue;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return effectValue;\n    }\n}"
    },
    {
      "id": "7374887",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> items;\n\n    Inventory() {\n        items = new ArrayList<>();\n    }\n\n    void addItem(T item) {\n        items.add(item);\n    }\n\n    void removeItem(T item) {\n        items.remove(item);\n    }\n\n    void printInventory() {\n        System.out.println(\"Inventory contains:\");\n        for (T t : items) {\n            System.out.println(t);\n        }\n    }\n\n    T mostValuableItem() {\n        int maxValue = -1;\n        T res = null;\n        for (T t : items) {\n            if (t.getValue() > maxValue) {\n                maxValue = t.getValue();\n                res = t;\n            }\n        }\n\n        return res;\n    }\n\n    T findItemByName(String name) {\n        for (T t : items) {\n            if (t.getName().equals(name)) {\n                return t;\n            }\n        }\n\n        return null;\n\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> list = new ArrayList<>();\n        for (T t : items) {\n            if (t.getValue() > value) {\n                list.add(t);\n            }\n        }\n        return list;\n\n    }\n\n    int getTotalValue() {\n        int sum = 0;\n        for (T t : items) {\n            sum += t.getValue();\n        }\n        return sum;\n    }\n\n    List<T> filterByType(Class<?> type) {\n        List<T> list = new ArrayList<>();\n        for (T t : items) {\n            if (t.getClass().getName().equals(type.getName())) {\n                list.add(t);\n            }\n        }\n\n        return list;\n\n    }\n\n    int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T t : items) {\n            if (t.getClass().equals(Weapon.class)) {\n                Weapon s = (Weapon) t;\n                totalDamage += s.damage;\n            }\n        }\n\n        return totalDamage;\n    }\n\n    void sortByValue() {\n\n        T temp = null;\n        for (int i = 0; i < items.size(); i++) {\n            for (int j = 0; j < items.size() - 1; j++) {\n                if (items.get(j).getValue() < items.get(j + 1).getValue()) {\n                    temp = items.get(j);\n                    items.set(j, items.get(j + 1));\n                    items.set(j + 1, temp);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        int maxValue = 0;\n        Item res = null;\n        for (Item t : inventory.items) {\n            if (t.getValue() > maxValue) {\n                maxValue = t.getValue();\n                res = t;\n            }\n        }\n\n        System.out.println(\"[Static]The most valuable item in this inventory is:\" + res);\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor a : source.items) {\n            destination.items.add(a);\n        }\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    int damage;\n    private int value;\n    private String name;\n\n    Weapon(String name, int value, int damage) {\n        this.damage = damage;\n        this.name = name;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"[Weapon]\" + \" Name:\" + getName() + \" Value:\" + getValue() + \" Damage:\" + damage;\n    }\n}\n",
      "Item.java": "public interface Item {\n\n    String getName();\n\n    int getValue();\n}",
      "Armor.java": "public class Armor implements Item {\n    int defense;\n    private int value;\n    private String name;\n\n    Armor(String name, int value, int defense) {\n        this.defense = defense;\n        this.name = name;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"[Armor]\" + \" Name:\" + getName() + \" Value:\" + getValue() + \" Defense:\" + defense;\n    }\n\n}\n",
      "Potion.java": "public class Potion implements Item {\n    String effect;\n    private int value;\n    private String name;\n\n    Potion(String name, int value, String effect) {\n        this.effect = effect;\n        this.name = name;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"[Potion]\" + \" Name:\" + getName() + \" Value:\" + getValue() + \" Effect:\" + effect;\n    }\n}\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        System.out.println(\"\");\n        // Weapon only inventory.\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        Weapon w1 = new Weapon(\"Kiliç\", 100, 10);\n        Weapon w2 = new Weapon(\"Tabanca\", 150, 20);\n        Weapon w3 = new Weapon(\"Tüfek\", 125, 30);\n\n        weaponInventory.addItem(w1);\n        weaponInventory.addItem(w2);\n        weaponInventory.addItem(w3);\n        weaponInventory.printInventory();\n        weaponInventory.removeItem(w3);\n        weaponInventory.printInventory();\n        weaponInventory.addItem(w3);\n        System.out.println(\"The most valuable item:\" + weaponInventory.mostValuableItem());\n        System.out.println(\"Tüfek:\" + weaponInventory.findItemByName(\"Tüfek\"));\n        System.out.println(\"Pompali Tüfek:\" + weaponInventory.findItemByName(\"Pompalı Tüfek\"));\n        System.out.println(\"Items that have a value>120:\" + weaponInventory.findItemsByValue(120));\n        System.out.println(\"Total value of the inventory:\" + weaponInventory.getTotalValue());\n        System.out.println(\"The total damages of weapons:\" + weaponInventory.getTotalWeaponDamage());\n        weaponInventory.sortByValue();\n        System.out.println(\"items sorted by their values(decreasing)\");\n        weaponInventory.printInventory();\n        Inventory.printMostValuableItem(weaponInventory);\n\n        // item inventory\n        Inventory<Item> itemInventory = new Inventory<>();\n        Weapon w4 = new Weapon(\"Kiliç\", 120, 50);\n        Weapon w5 = new Weapon(\"Tabanca\", 160, 80);\n        Armor a1 = new Armor(\"Demir Zirh\", 140, 100);\n        Armor a2 = new Armor(\"Zincir Zirh\", 125, 90);\n        Potion p1 = new Potion(\"Can iksiri\", 200, \"Healing\");\n        Potion p2 = new Potion(\"Enerji iksiri\", 150, \"Stamina regen\");\n\n        itemInventory.addItem(w4);\n        itemInventory.addItem(w5);\n        itemInventory.addItem(a1);\n        itemInventory.addItem(a2);\n        itemInventory.addItem(p1);\n        itemInventory.addItem(p2);\n        itemInventory.printInventory();\n        itemInventory.removeItem(p2);\n        itemInventory.removeItem(a2);\n        itemInventory.removeItem(w4);\n        itemInventory.printInventory();\n        itemInventory.addItem(p2);\n        itemInventory.addItem(a2);\n        itemInventory.addItem(w4);\n        System.out.println(\"The most valuable item in this list:\" + itemInventory.mostValuableItem());\n        System.out.println(\"Enerji iksiri:\" + itemInventory.findItemByName(\"Enerji iksiri\"));\n        System.out.println(\"Items that have a value>130:\" + itemInventory.findItemsByValue(130));\n        System.out.println(\"Total value:\" + itemInventory.getTotalValue());\n        System.out.println(\"Weapons:\" + itemInventory.filterByType(Weapon.class));\n        System.out.println(\"Armors\" + itemInventory.filterByType(Armor.class));\n        System.out.println(\"Potions\" + itemInventory.filterByType(Potion.class));\n        System.out.println(\"Total weapon damage:\" + itemInventory.getTotalWeaponDamage());\n        itemInventory.sortByValue();\n        System.out.println(\"items sorted by their values(decreasing)\");\n        itemInventory.printInventory();\n        Inventory.printMostValuableItem(itemInventory);\n        Inventory<Armor> armorInventory1 = new Inventory<>();\n        Inventory<Armor> armorInventory2 = new Inventory<>();\n        armorInventory1.addItem(a2);\n        armorInventory1.addItem(a1);\n\n        Inventory.transferArmor(armorInventory2, armorInventory1);\n        armorInventory2.printInventory();\n\n    }\n}\n"
    },
    {
      "id": "5628146",
      "Inventory.java": "package lab4;\n\nimport java.util.*;\n\nclass Inventory<T extends Item> {\n    private List<T> items = new ArrayList<>();\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item.getName() + \" - \" + item.getValue());\n        }\n    }\n\n    public T mostValuableItem() {\n        if (items.isEmpty()) return null;\n        T mostValuable = items.get(0);\n        for (T item : items) {\n            if (item.getValue() > mostValuable.getValue()) {\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (item.getName().equals(name)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> result = new ArrayList<>();\n\n        for (T item : items) {\n            if (item.getValue() > value) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n    public List<T> filterByType(Class<?> type) {\n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDamage += ((Weapon) item).getDamage();\n            }\n        }\n        return totalDamage;\n    }\n\n    public void sortByValue() {\n    \tint n = items.size();\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (items.get(j).getValue() < items.get(j + 1).getValue()) {\n                    T temp = items.get(j);\n                    items.set(j, items.get(j + 1));\n                    items.set(j + 1, temp);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"Most Valuable Item: \" + mostValuable.getName() + \" - \" + mostValuable.getValue());\n        } else {\n            System.out.println(\"Inventory is empty.\");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        List<Armor> toTransfer = new ArrayList<>();\n        for (Armor armor : source.items) {\n            toTransfer.add(armor);\n        }\n        for (Armor armor : toTransfer) {\n            source.removeItem(armor);\n            destination.addItem(armor);\n        }\n    }\n}\n\n",
      "Weapon.java": "package lab4;\n\nclass Weapon implements Item {\n    private String name;\n    private int value;\n    private int damage;\n    \n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n    \n    @Override\n    public String getName() { \n    \treturn name; }\n    \n    @Override\n    public int getValue() { \n    \treturn value; }\n    \n    public int getDamage() { \n    \treturn damage; }\n}\n",
      "Item.java": "package lab4;\n\ninterface Item extends Comparable<Item> {\n    String getName();\n    int getValue();\n\n    @Override\n    default int compareTo(Item other) {\n        return Integer.compare(this.getValue(), other.getValue());\n    }\n}\n\n",
      "Armor.java": "package lab4;\n\nclass Armor implements Item {\n    private String name;\n    private int value;\n    private int defense;\n    \n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n    \n    @Override\n    public String getName() { \n    \treturn name; }\n    \n    @Override\n    public int getValue() { \n    \treturn value; }\n    \n    public int getDefense() { \n    \treturn defense; }\n}\n\n\n",
      "Potion.java": "package lab4;\n\nclass Potion implements Item {\n    private String name;\n    private int value;\n    private String effect;\n    \n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n    \n    @Override\n    public String getName() { \n    \treturn name; }\n    \n    @Override\n    public int getValue() { \n    \treturn value; }\n    \n    public String getEffect() { \n    \treturn effect; }\n}\n",
      "Driver.java": "package lab4;\n\n    \tpublic class Driver {\n    \t    public static void main(String[] args) {\n    \t   \n    \t        Inventory<Weapon> weaponInventory = new Inventory<>();\n    \t        weaponInventory.addItem(new Weapon(\"Katana\", 1000, 100));\n    \t        weaponInventory.addItem(new Weapon(\"Kılıç\", 800, 90));\n    \t        weaponInventory.addItem(new Weapon(\"Bıçak\", 500, 70));\n\n\n    \t        Inventory<Item> generalInventory = new Inventory<>();\n    \t        generalInventory.addItem(new Weapon(\"Hançer\", 300, 40));\n    \t        generalInventory.addItem(new Armor(\"Demir Zırh\", 700, 50));\n    \t        generalInventory.addItem(new Potion(\"Can potu\", 200, \"25 HP arttırır\"));\n\n\n    \t        System.out.println(\"Weapon envanteri\");\n    \t        weaponInventory.printInventory();\n\n    \t        System.out.println(\"\\nGenel Envanter\");\n    \t        generalInventory.printInventory();\n\n\n    \t        System.out.println(\"\\nEn değerli silah: \" + weaponInventory.mostValuableItem().getName());\n    \t        System.out.println(\"\\nEnvanterdeki en değerli eşya: \" + generalInventory.mostValuableItem().getName() + \" Value : \" + generalInventory.mostValuableItem().getValue());\n\n \n    \t        Item foundItem = generalInventory.findItemByName(\"Demir Zırh\");\n    \t        if (foundItem != null) {\n    \t            System.out.println(\"\\nİtem bulundu: \" + foundItem.getName() + \"  Değer: \" + foundItem.getValue());\n    \t        } \n    \t        else {\n    \t            System.out.println(\"İtem bulunamadı!\");\n    \t        }\n\n    \t        System.out.println(\"\\nEnvanter içindeki 300'den daha pahalı eşyalar :\");\n    \t        for (Item item : generalInventory.findItemsByValue(300)) {\n    \t            System.out.println(item.getName() + \" - \" + item.getValue());\n    \t        }\n    \t        \n    \t        System.out.println(\"\\nWeapon envanteri içindeki 300'den daha pahalı eşyalar :\");\n    \t        for (Item item : weaponInventory.findItemsByValue(300)) {\n    \t            System.out.println(item.getName() + \" - \" + item.getValue());\n    \t        }\n    \t        \t\n    \t        System.out.println(\"\\nWeapon envanterinin toplam değeri: \" + weaponInventory.getTotalValue());\n    \t        System.out.println(\"Genel envanterin toplam değeri: \" + generalInventory.getTotalValue());\n    \t        System.out.println(\"Weapon Sınıfındaki toplam damage: \" + weaponInventory.getTotalWeaponDamage());\n\n    \t        System.out.println(\"\\nEnvanter içindeki sadece weapon olanlar:\");\n    \t        for (Item item : generalInventory.filterByType(Weapon.class)) {\n    \t            System.out.println(item.getName());\n    \t        }\n\n    \t        System.out.println(\"\\nEnvanterdeki değerlere göre büyükten küçüğe sıralaması\");\n    \t        generalInventory.sortByValue();\n    \t        generalInventory.printInventory();\n\n\n\n\n    \t    }\n    \t\n\n    }\n"
    },
    {
      "id": "9167236",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T> {\n    \n    ArrayList<T> list;\n\n    public Inventory(){\n        list = new ArrayList<>();\n    }\n\n    void addItem(T item){\n        list.add(item);\n    }\n\n    void removeItem(T item){\n        list.remove(item);\n    }\n\n    void printInventory(){\n        System.out.println(this.list);\n    }\n\n    T mostValuableItem(){\n        \n        int max = Integer.MIN_VALUE;\n        T output = null;\n        for(Object obj : list){\n            if(obj instanceof Armor){\n                if(((Armor)obj).getValue() > max){\n                    max = ((Armor)obj).getValue();\n                    output = (T) obj;\n                }\n            }\n            if(obj instanceof Weapon){\n                if(((Weapon)obj).getValue() > max){\n                    max = ((Weapon)obj).getValue();\n                    output = (T) obj;\n                }\n            }\n            if(obj instanceof Potion){\n                if(((Potion)obj).getValue() > max){\n                    max = ((Potion)obj).getValue();\n                    output = (T) obj;\n                }\n            }   \n        }\n        return output;\n    }\n\n    T findItemByName(String name){\n        T output = null;\n        for(Object obj : list){\n            if(obj instanceof Armor){\n                if(((Armor)obj).getName().equals(name)){\n                    output = (T) obj;\n                }\n            }\n            if(obj instanceof Weapon){\n                if(((Weapon)obj).getName().equals(name)){\n                    output = (T) obj;\n                }\n            }\n            if(obj instanceof Potion){\n                if(((Potion)obj).getName().equals(name)){\n                    output = (T) obj;\n                }\n            }   \n        }\n        return output;\n    }\n\n    List<T> findItemsByValue(int value){\n        ArrayList<T> moreValuables = new ArrayList<>();\n\n        for(Object obj : list){\n            if(obj instanceof Armor){\n                if(((Armor)obj).getValue() > value){\n                    moreValuables.add((T)obj);\n                }\n            }\n            if(obj instanceof Weapon){\n                if(((Weapon)obj).getValue() > value){\n                    moreValuables.add((T)obj);\n                }\n            }\n            if(obj instanceof Potion){\n                if(((Potion)obj).getValue() > value){\n                    moreValuables.add((T)obj);\n                }\n            }   \n        }\n        return moreValuables;\n    }\n\n    int getTotalValue(){\n        int output = 0;\n        for(Object obj : list){\n            if(obj instanceof Armor){\n                output += ((Armor)obj).getValue();\n            }\n            if(obj instanceof Weapon){\n                output += ((Weapon)obj).getValue();\n            }\n            if(obj instanceof Potion){\n                output += ((Potion)obj).getValue();\n            }   \n        }\n        return output;\n    }\n\n    List<T> filterByType(Class<?> type){\n        ArrayList<T> wantedTypes = new ArrayList<>();\n        for (T obj : list) {\n            if (type.isInstance(obj)) {\n                wantedTypes.add(obj);\n            }\n        }\n        return wantedTypes;\n    }\n\n    int getTotalWeaponDamage(){\n        int totalDamage = 0;\n        for (T obj : list) {\n            if (obj instanceof Weapon) {\n                totalDamage += ((Weapon) obj).damage;\n            }\n        }\n        return totalDamage;\n    }\n\n    void sortByValue() {\n        list.sort((o1, o2) -> Integer.compare(((Item) o2).getValue(), ((Item) o1).getValue()));\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"Most valuable item: \" + mostValuable.getName() + \" (Value: \" + mostValuable.getValue() + \")\");\n        } else {\n            System.out.println(\"Inventory is empty.\");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        ArrayList<Armor> armors = new ArrayList<>();\n        for (Armor armor : source.list) {\n            armors.add(armor);\n        }\n        for (Armor armor : armors) {\n            source.removeItem(armor);\n            destination.addItem(armor);\n        }\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item{\n\n    String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage){\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"[\" + \"Name: \" + this.name + \" - Value: \" + this.value +  \" - Damage: \" + this.damage + \"]\";\n    }\n}",
      "Item.java": "public interface Item {\n    \n    String getName();\n    int getValue();\n\n}\n",
      "Armor.java": "public class Armor implements Item{\n    \n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense){\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"[\" + \"Name: \" + this.name + \" - Value: \" + this.value +  \" - Defense: \" + this.defense + \"]\";\n    }\n}",
      "Potion.java": "public class Potion implements Item{\n\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect){\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"[\" + \"Name: \" + this.name + \" - Value: \" + this.value +  \" - Effect: \" + this.effect + \"]\";\n    }\n}",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        \n        weaponInventory.addItem(new Weapon(\"Excalibur\", 1000, 300));\n        weaponInventory.addItem(new Weapon(\"Andruil\", 3000, 500));\n        weaponInventory.addItem(new Weapon(\"Nightingale Bow\", 800, 250));\n        weaponInventory.addItem(new Weapon(\"Molag-Bal's Mace\", 1250, 320));\n        weaponInventory.addItem(new Weapon(\"Duncan's Sword\", 900, 200));\n        weaponInventory.addItem(new Weapon(\"Hyrule Sword\", 1500, 350));\n        weaponInventory.addItem(new Weapon(\"Olympus Blade\", 5000, 900));\n        weaponInventory.addItem(new Weapon(\"Chaos Blades\", 4800, 480));\n        weaponInventory.addItem(new Weapon(\"Mehrunes Razor\", 1100, 130));\n\n        System.out.println(\"\\nWeapon Inventory:\");\n        weaponInventory.printInventory();\n        \n        System.out.println(\"\\nWeapons which are more valuable then 1000\");\n        System.out.println(weaponInventory.findItemsByValue(1000));\n\n        System.out.println(\"\\nSearching for name \\\"Andruil\\\"\");\n        System.out.println(weaponInventory.findItemByName(\"Andruil\"));\n\n\n        System.out.println(\"\\nSearching for name \\\"Dwarven Battle Axe\\\"\");\n        System.out.println(weaponInventory.findItemByName(\"Dwarven Battle Axe\"));\n\n        System.out.println(\"\\nWeapons which are more valuable then 1000\");\n        System.out.println(weaponInventory.findItemsByValue(1000));\n\n        System.out.println(\"\\nTotal value of weapons\");\n        System.out.println(weaponInventory.getTotalValue());\n\n        System.out.println(\"\\nTotal damage of weapons\");\n        System.out.println(weaponInventory.getTotalWeaponDamage());\n\n        weaponInventory.sortByValue();\n        System.out.println(\"\\nSorted Weapon Inventory:\");\n        weaponInventory.printInventory();\n\n        System.out.println(\"\\nMost Valuable Weapon: \" + weaponInventory.mostValuableItem().getName());\n\n        Inventory<Item> generalInventory = new Inventory<>();\n\n        generalInventory.addItem(new Weapon(\"Molag-Bal's Mace\", 1250, 320));\n        generalInventory.addItem(new Weapon(\"Duncan's Sword\", 900, 200));\n        generalInventory.addItem(new Weapon(\"Hyrule Sword\", 1500, 350));\n        generalInventory.addItem(new Armor(\"Daedric Chestplate\", 1100, 200));\n        generalInventory.addItem(new Armor(\"Faraam Helmet\", 900, 150));\n        generalInventory.addItem(new Armor(\"Spartan Shield\", 800, 100));\n        generalInventory.addItem(new Potion(\"Skooma\", 100, \"Restore Stamina\"));\n        generalInventory.addItem(new Potion(\"Major Mana Potion\", 500, \"Restore Mana\"));\n        generalInventory.addItem(new Potion(\"Swallow Potion\", 400, \"Restore HP\"));\n\n\n        System.out.println(\"\\nGeneral Inventory:\");\n        generalInventory.printInventory();\n\n        System.out.println(\"\\nMost Valuable Item in General Inventory: \" + generalInventory.mostValuableItem().getName());\n\n        System.out.println(\"\\nFiltered Armor:\");\n        for (Item item : generalInventory.filterByType(Armor.class)) {\n            System.out.println(item.getName());\n        }\n        \n        Inventory<Armor> sourceArmorInventory = new Inventory<>();\n        Inventory<Item> destinationInventory = new Inventory<>();\n\n        sourceArmorInventory.addItem(new Armor(\"Grey Warden Chestplate\", 1500, 50));\n        sourceArmorInventory.addItem(new Armor(\"Dragon Scale Boots\", 3000, 80));\n        sourceArmorInventory.addItem(new Armor(\"Devourer's Helmet\", 1200, 40));\n\n        System.out.println(\"\\nSource Armor Inventory (Before Transfer):\");\n        sourceArmorInventory.printInventory();\n\n        System.out.println(\"\\nDestination Inventory (Before Transfer):\");\n        destinationInventory.printInventory();\n\n        Inventory.transferArmor(destinationInventory, sourceArmorInventory);\n\n        System.out.println(\"\\nSource Armor Inventory (After Transfer):\");\n        sourceArmorInventory.printInventory();\n\n        System.out.println(\"\\nDestination Inventory (After Transfer):\");\n        destinationInventory.printInventory();\n        System.out.println();\n    }\n}\n"
    },
    {
      "id": "5281670",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Inventory<T extends Item> {//asistan ok dedi\n    private List<T> items = new ArrayList<>();\n\n    public void addItem(T item){\n\n        items.add(item);\n    }\n\n    public void removeItem(T item){\n\n        items.remove(item);\n    }\n\n    public void printInventory(){\n\n        for(T item : items){\n\n            System.out.println(item.getName());\n        }\n    }\n\n    int max = Integer.MIN_VALUE;\n    T maxItem;\n    public T mostValueableItem(){\n        \n        for(T item : items){\n            if(item.getValue() > max){\n                max = item.getValue();\n                maxItem = item;\n            }\n        }\n\n        return maxItem;\n    }\n\n    public T findItemByName(String name){\n\n        for(T item : items){\n            if(item.getName().equals(name)){\n                return item;\n            }\n        }\n\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> valueList = new ArrayList<>();\n        for(T item : items){\n            if(item.getValue() > value){\n                valueList.add(item);\n            }\n        }\n\n        return valueList;\n    }\n\n    public int getTotalValue(){\n        \n        int sum = 0;\n        for(T item : items){\n            sum += item.getValue();\n        }\n\n        return sum;\n    }\n\n    public List<T> filterByType(Class<?> type){\n\n        List<T> filterItems = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                filterItems.add(item);\n            }\n        }\n        return filterItems;\n    }\n\n\n    public int getTotalWeaponDamage(){\n\n        int sum = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                sum += item.getValue();\n            }\n        }\n        return sum;\n    }\n\n    public void sortByValue(){\n\n        for (int i = 0; i < items.size() - 1; i++) {\n\n            for (int j = 0; j < items.size()-1-i; j++) { // jnin sinirindan emiin degilim kontrol et!!\n                \n                if (items.get(j).getValue() < items.get(j + 1).getValue()) {\n                    T temp = items.get(j);\n                    items.set(j, items.get(j + 1));\n                    items.set(j + 1, temp);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item>inventory){\n        \n        inventory.sortByValue(); // azalan sekilde siraliyor ilk eleman en buyuk olan olur\n\n        System.out.println(inventory.items.get(0).getName());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source){\n        List<Armor> armors = source.filterByType(Armor.class);\n        \n        for (Armor armor : armors) {\n            destination.addItem(armor);\n        }\n\n        source.items.removeAll(armors); // source da bir inventory o yuzden yapabildin\n    \n    }\n}\n\n\n",
      "Weapon.java": "public class Weapon implements Item {\n\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n    \n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    \n\n}\n",
      "Item.java": "interface Item{\n\n    String getName();\n    int getValue();\n}",
      "Armor.java": "public class Armor implements Item{\n\n    private String name;\n    private int value;\n    private int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n    \n    @Override\n    public String getName() {\n        return name;\n    }    \n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    \n}\n",
      "Potion.java": "public class Potion implements Item{\n\n    private String name;\n    private int value;\n    private String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    \n}\n",
      "Driver.java": "//tum metotlar calısıyor asistan hepsini mainde gostermek zorunda degilsiniz dedigi icin birkacini gosterdim\npublic class Driver {\n    \n    public static void main(String[] args) {\n        \n        Class<Weapon> weaponClass = Weapon.class;\n        System.out.println(\"Sinif adi: \" + weaponClass.getName());\n\n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName()); // Çıktı: Weapon\n\n        //itemdan olusan\n        Inventory<Item> inventory = new Inventory<>();\n        inventory.addItem(new Weapon(\"kilic\", 600, 500));\n        inventory.addItem(new Armor(\"kalkan\", 400, 400));\n        inventory.addItem(new Potion(\"zehir\", 100, \"zehirle\"));\n        inventory.addItem(new Weapon(\"kilic2\", 100, 9));\n        inventory.addItem(sword);\n        inventory.addItem(new Weapon(\"iclal\",2900 , 8));\n\n        inventory.removeItem(sword);\n        \n        System.out.println(\"envanter:\");\n        inventory.printInventory();\n        \n        System.out.println(\"en degerli item:\");\n        Inventory.printMostValuableItem(inventory);\n        \n        System.out.println(\"toplam weapon damage:\");\n        System.out.println(inventory.getTotalWeaponDamage());\n        System.out.println(\"toplam value: \" + inventory.getTotalValue());\n\n        System.out.println(\"olmayan bir itemi bul\");\n        System.out.println(inventory.findItemByName(\"yok\"));\n        System.out.println();\n\n\n        //weapondan olusan\n        Inventory<Weapon> inventory2 = new Inventory<>();\n        inventory2.addItem(new Weapon(\"kilic2\", 100, 9));\n        inventory2.addItem(sword);\n        inventory2.addItem(new Weapon(\"iclal\",2900 , 8));\n\n\n        System.out.println(\"envanter2:\");\n        inventory2.printInventory();\n        \n        System.out.println(\"en degerli item:\");\n        Inventory.printMostValuableItem(inventory2);\n        \n        System.out.println(\"toplam weapon damage:\");\n        System.out.println(inventory2.getTotalWeaponDamage());\n        System.out.println(\"toplam value: \" + inventory2.getTotalValue());\n        System.out.println();\n\n        //tranforArmor\n        Inventory<? super Armor> inventory3 = new Inventory<>();\n        Inventory<Armor> inventory4 = new Inventory<>();\n\n        inventory4.addItem(new Armor(\"zirh1\" , 100 , 20));\n        inventory4.addItem(new Armor(\"zirh2\" ,200 , 20));\n        inventory4.addItem(new Armor(\"zirh3\" , 300 , 20));\n        inventory4.addItem(new Armor(\"zirh4\" , 400 , 20));\n\n        inventory3.addItem(new Armor(\"kalkan\", 400, 400));\n       \n        System.out.println(\"transferden önce inventory3\");\n        inventory3.printInventory();\n\n        System.out.println(\"transferden önce inventory4\");\n        inventory4.printInventory();\n\n        inventory.transferArmor(inventory3, inventory4);\n\n        System.out.println(\"transferden sonra inventory3\");\n        inventory3.printInventory();\n        System.out.println(\"transferden sonra inventory4\");\n        inventory4.printInventory();\n    }\n}\n"
    },
    {
      "id": "4779274",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory <T extends Item> {\n    \n    private ArrayList<T> itemList = new ArrayList<>();\n\n    void addItem(T item) {\n        itemList.add(item);\n    }\n\n    void removeItem(T item) {\n        itemList.remove(item);\n    }\n\n    void printInventory() {\n        for (T env : itemList) {\n            System.out.println(env.toString());\n        }\n    }\n\n    T mostValuableItem() {\n        int valueTemp = 0;\n        T tTemp = null;\n\n        for (T env : itemList) {\n            if (env.getValue() >= valueTemp) {\n                tTemp = env;\n                valueTemp = env.getValue();\n            }\n        }  \n\n        return tTemp;\n    }\n\n    T findItemByName(String name) {\n        T tTemp = null;\n\n        for (T env : itemList) {\n            if(env.getName().equals(name))\n                tTemp = env;\n        }\n\n        return tTemp;\n    }\n\n\n    List<T> findItemsByValue(int value) {\n        List<T> thatList = new ArrayList<>();\n\n        for(T env : itemList) {\n            if(env.getValue() > value)\n                thatList.add(env);\n        }\n\n        return thatList;\n    }\n\n    int getTotalValue() {\n        int total = 0;\n\n        for(T env : itemList)\n            total += env.getValue();\n        \n        return total;\n    }\n\n\n    List<T> filterByType(Class<?> type) {\n        List<T> thatList = new ArrayList<>();\n\n        for (T env : itemList) {\n            //isInstance kullanmayı tercih ettim class getName falan da olur\n            if (type.isInstance(env)) {\n                thatList.add(env);\n            }\n        }\n\n        return thatList;\n    }\n\n    int getTotalWeaponDamage() {\n        int damage = 0;\n\n        for (T env : itemList) {\n            if (env instanceof Weapon)\n                damage += env.getDamage();\n        }\n\n        return damage;\n    }\n\n    void sortByValue() {\n        for(int i=0; i<itemList.size()-1; i++) {\n            int index=i;\n            T temp= null;\n            int maxValue = 0;\n            for(int j=i; j<itemList.size(); j++) {\n                if(itemList.get(j).getValue() >= maxValue) {\n                    maxValue = itemList.get(j).getValue();\n                    index = j;\n                }\n            }\n            \n            temp = itemList.get(index);\n            itemList.set(index, itemList.get(i));\n            itemList.set(i, temp);\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(\"envanterdeki en degerli item:\" + (inventory.mostValuableItem().getName()));\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destionation, Inventory<Armor> source) {\n        List<Armor> toTransfer = source.filterByType(Armor.class);\n\n        for (Armor armor : toTransfer) {\n            destionation.addItem(armor);\n            source.removeItem(armor);\n        }\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    private int damage;\n    private String name;\n    private int value;\n\n    @Override\n    public String toString() {\n        return name + \" \" + value + \" damage:\" + damage;\n    }\n\n\n    public Weapon(String string, int value, int damage) {\n        this.name = string;\n        this.damage = damage;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public int getValue() {\n        return this.value;\n    }\n\n    @Override\n    public int getDamage() {\n        return this.damage;\n    }\n}",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n\n    default int getDamage() {\n        System.out.println(\"Inventory'de T type'ında bulunabilmesi icin\");\n        //zaten buraya girmez ama Inventory classı Item extendli olduğu için bu gerekiyodu\n        return 0;\n    }\n\n}\n\n\n",
      "Armor.java": "public class Armor implements Item {\n    private String name;\n    private int value;\n    private int defense;\n\n    @Override\n    public String toString() {\n        return name + \" \" + value + \" defense:\" + defense;\n    }\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public int getValue() {\n        return this.value;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item{\n    private String effect;\n\n    @Override\n    public String toString() {\n        return name + \" \" + value + \" effect:\" + effect;\n    }\n\n    public Potion(String name, int value, String effect) {\n        this.effect = effect;\n        this.value = value;\n        this.name = name;\n    }\n\n    private int value;\n    private String name;\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public int getValue() {\n        return this.value;\n    }\n    \n}\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        Inventory<Item> itemInventory = new Inventory<>();\n        itemInventory.addItem(new Weapon(\"biWeapon\", 150, 30));\n        itemInventory.addItem(new Armor(\"zirh\", 350, 500));\n        itemInventory.addItem(new Armor(\"zirh ikinci\", 400, 600));\n        itemInventory.addItem(new Potion(\"ilac\", 310, \"healing\"));\n\n        itemInventory.sortByValue();\n        itemInventory.printInventory();\n\n        System.out.println(\"\");\n\n        Inventory<Weapon> envanter = new Inventory<>();\n        envanter.addItem(new Weapon(\"kilic\", 1560, 90));\n        envanter.addItem(new Weapon(\"bicak\", 1500, 70));\n        envanter.addItem(new Weapon(\"silah\",2500 , 150));\n        Inventory.printMostValuableItem(envanter);\n\n        Inventory<Armor> armInventory = new Inventory<>();\n        armInventory.addItem(new Armor(\"öz-zirh\", 290, 500));\n        armInventory.addItem(new Armor(\"öz-zirh ikinci\", 900, 600));\n\n\n        envanter.sortByValue();\n        envanter.printInventory();\n\n        System.out.println(\"total value: \" + envanter.getTotalValue());\n\n        Inventory.transferArmor(itemInventory, armInventory);\n\n        System.out.println(\"\\narmordan aktarma yapildi, item inventory son hali:\");\n        itemInventory.printInventory();\n\n        itemInventory.sortByValue();\n        System.out.println(\"\\n\\nitem inventory tekrar sort edildi son hali:\");\n        itemInventory.printInventory();\n    }\n}\n"
    },
    {
      "id": "3688139",
      "Driver.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory<Weapon> winventory = new Inventory<>();\n        Inventory<Item> ginventory = new Inventory<>();\n        Weapon sword = new Weapon(\"Tufek\", 1000, 100);\n        Weapon axe = new Weapon(\"Balta\", 800, 90);\n        Armor shield = new Armor(\"Gargoyle\", 1200, 150);\n        Potion potion = new Potion(\"heal\", 300, \"+50 HP\");\n        winventory.addItem(axe);\n        winventory.addItem(sword);\n        ginventory.addItem(potion);\n        ginventory.addItem(shield);\n        ginventory.addItem(sword);\n        ginventory.printInventory();\n        System.out.println(\"Total Value: \" + ginventory.getTotalValue());\n        ginventory.sortByValue();\n        ginventory.printInventory();\n        Inventory.printMostValuableItem(ginventory);\n        Class<Weapon> weaponClass = Weapon.class;\n        List<Item> filterlist = ginventory.filterByType(weaponClass);\n\n    }\n}\n\ninterface Item {\n    String getName();\n\n    int getValue();\n}\n\nclass Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n\n    Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\nclass Armor implements Item {\n    String name;\n    int value;\n    int defence;\n\n    Armor(String name, int value, int defence) {\n        this.name = name;\n        this.value = value;\n        this.defence = defence;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\nclass Potion implements Item {\n    String name;\n    int value;\n    String effect;\n\n    Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\nclass Inventory<T extends Item> {\n\n    ArrayList<T> list = new ArrayList<T>();\n\n    void addItem(T Item) {\n        list.add(Item);\n    }\n\n    void removeItem(T Item) {\n        list.remove(Item);\n    }\n\n    void printInventory() {\n        for (int i = 0; i < list.size() - 1; i++) {\n            System.out.println(\"Name: \" + list.get(i).getName() + \" Value: \" + list.get(i).getValue());\n        }\n    }\n\n    T mostValuableItem() {\n        int temp = 0;\n        int ind = 0;\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i).getValue() > temp) {\n                temp = list.get(i).getValue();\n                ind = i;\n            }\n        }\n        return list.get(ind);\n    }\n\n    T findItemByName(String name) {\n        int ind = 0;\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i).getName().equals(name)) {\n                ind = i;\n            }\n        }\n        if (ind == 0) {\n            return null;\n        } else {\n            return list.get(i);\n        }\n    }\n\n    List<T> findItemsByValue(int value) {\n        ArrayList<T> rlist = new ArrayList<>();\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i).getValue() > value) {\n                rlist.add(list.get(i));\n            }\n        }\n        return rlist;\n    }\n\n    int getTotalValue() {\n        int a = 0;\n        for (int i = 0; i < list.size() - 1; i++) {\n            a = a + list.get(i).getValue();\n        }\n        return a;\n    }\n\n    List<T> filterByType(Class<?> type) {\n        ArrayList<T> rlist = new ArrayList<>();\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i).getClass().equals(type.getClass())) {\n                rlist.add(list.get(i));\n            }\n        }\n        return rlist;\n    }\n\n    int getTotalWeaponDamage() {\n        int a = 0;\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i) instanceof Weapon) {\n                a = a + list.get(i).getValue();\n            }\n        }\n        return a;\n    }\n\n    void sortByValue() {\n        for (int i = 0; i < list.size() - 1; i++) {\n            for (int a = 0; a < list.size() - 2; a++) {\n                if (list.get(a).getValue() < list.get(a + 1).getValue()) {\n                    T obj = list.get(a);\n                    list.set(a, list.get(a + 1));\n                    list.set(a + 1, obj);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item item = inventory.mostValuableItem();\n        System.out.println(\"Most valuable item: \" + item.getName());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor armor : source.filterByType()) {\n            destination.addItem(armor);\n        }\n    }\n\n}"
    },
    {
      "id": "4540765",
      "Inventory.java": "package lab4nebiyanarbil211;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n\t\n\tprivate ArrayList<T> items = new ArrayList<>();\n\t\n\t public void addItem(T item) {\n\t        items.add(item);\n\t    }\n\t    \n\t    public void removeItem(T item) {\n\t        items.remove(item);\n\t    } \n\t    \n\t    public void printInventory() {\n\t        for (T item : items) {\n\t            System.out.println(item.getName() + \" - Değer: \" + item.getValue());\n\t        }\n\t    }\n\t    \n\t    \n\t    public T mostValuableItem(){\n\t    \tint maxind=0;\n\t    \tint i=0;\n\t    \tint max=-99;\n\t    \tfor (T item : items) {\n\t            if(item.getValue()>max)\n\t            {\n\t            \tmax=item.getValue();\n\t            \tmaxind=i;\n\t            \t\n\t            }\n\t            i++;\n\t        }\n\t    \t\n\t    \treturn items.get(maxind);\n\t    }\n\t    \n\t   \n\t    \n\t    public T findItemByName(String name) {\n\t    \tfor (T item : items) {\n\t            if(item.getName().equals(name))\n\t            {\n\t            \treturn item;\n\t            }  \n\t        }\n\t    \treturn null;\n\t    }\n\t    \n\t    List<T> findItemsByValue(int value){\n\t    \t\n\t    \tArrayList<T>myNewList=new ArrayList<T>();\n\t    \tfor(T item:items) {\n\t    \t\tif(item.getValue()>value);\n\t    \t\tmyNewList.addLast(item);\n\t    \t}\n\t    \treturn myNewList;\n\t    \t\n\t    }\n\t    \n\t    int getTotalValue()\n\t    {\n\t    \tint sum=0;\n\t    \tfor(T item:items) {\n\t    \t\tsum+=item.getValue();\n\t    \t\t\n\t    \t}\n\t    \treturn sum;\n\t    }\n\t    public List<T> filterByType(Class<?> type) {\n\t        List<T> filteredItems = new ArrayList<>();\n\t        for (T item : items) {\n\t            if ((type == Weapon.class && item instanceof Weapon) ||\n\t                (type == Armor.class && item instanceof Armor) ||\n\t                (type == Potion.class && item instanceof Potion)) {\n\t                filteredItems.add(item);\n\t            }\n\t        }\n\t        return filteredItems;\n\t    }\n\t    \n\t    \n\t    int getTotalWeaponDamage() {\n\t    \tint sum=0;\n\t    \tfor(T item:items)\n\t    \t{\n\t    \t\tif(item instanceof Weapon)\n\t    \t\t{\n\t    \t\t\tsum+=((Weapon) item).getDamage();\n\t    \t\t}\n\t    \t}\n\t    \t\n\t    \treturn sum;\n\t    }\n\t    \n\t    public void sortByValue() {\n\t        int n = items.size();\n\t        for (int i = 0; i < n - 1; i++) {\n\t            for (int j = 0; j < n - i - 1; j++) {\n\t                if (items.get(j).getValue() < items.get(j + 1).getValue()) {\n\t                    T temp = items.get(j);\n\t                    items.set(j, items.get(j + 1));\n\t                    items.set(j + 1, temp);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    \n\t    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n\t        Item item = inventory.mostValuableItem();\n\t        if (item != null) {\n\t            System.out.println(\"En değerli eşya: \" + item.getName() + \" - Değer: \" + item.getValue());\n\t        }\n\t    }\n\t    \n\t    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source) \n\t    {\n\t    \tfor (Armor armor : new ArrayList<>(source.items)) {\n\t            destination.addItem(armor);\n\t            source.removeItem(armor);\n\t        }\n\t        \t\n\t    }\n\t    \n\t\n\t\n\t\n\t\n\t\n\n}\n",
      "Weapon.java": "package lab4nebiyanarbil211;\n\npublic class Weapon implements Item {\n\n\tprivate String name;\n    private int value;\n    private int damage;\n    public Weapon(String name, int value, int damage) {\n\t        this.name = name;\n\t        this.value = value;\n\t        this.damage = damage;\n\t    }\n\t@Override\n\tpublic String getName() {\n\t\t// TODO Auto-generated method stub\n\t\treturn name;\n\t}\n\n\tpublic int getValue() {\n\t\t// TODO Auto-generated method stub\n\t\treturn value;\n\t}\n\t\n\t \n\t    \n\t    public int getDamage() {\n\t        return damage;\n\t    }\n\t\n\n}\n",
      "Item.java": "package lab4nebiyanarbil211;\n\npublic interface Item {\n\tString getName();\n\tint getValue();\n\n}\n",
      "Armor.java": "package lab4nebiyanarbil211;\n\npublic class Armor implements Item {\n\tprivate String name;\n    private int value;\n    private int defense;\n    \n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n    \n    public int getDefense() {\n        return defense;\n    }\n    \n    @Override\n    public String getName() {\n        return name;\n    } \n    \n    @Override\n    public int getValue() {\n        return value;\n    }\n\n}\n",
      "Potion.java": "package lab4nebiyanarbil211;\n\npublic class Potion implements Item {\n\tprivate String effect;\n\tprivate String name;\n\tprivate int value;\n\t\n\t\n\tpublic Potion(String name,int value,String effect)\n\t{\n\t\tthis.value=value;\n\t\tthis.name=name;\n\t\tthis.effect=effect;\n\t}\n\t\n\t\n\tpublic String getName() {\n\t\t// TODO Auto-generated method stub\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\t// TODO Auto-generated method stub\n\t\treturn value;\n\t}\n\t\n\tpublic String getEffect() {\n\t\treturn effect;\n\t}\n\t\n\n}\n",
      "Driver.java": "package lab4nebiyanarbil211;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Driver {\n\n\tpublic static void main(String[] args) {\n\t\t Inventory<Item> generalInventory = new Inventory<>();\n\t        Inventory<Weapon> weaponInventory = new Inventory<>();\n\t        \n\t        Weapon sword = new Weapon(\"Silah1\", 1000, 100);\n\t        Armor shield = new Armor(\"Kalkan1\", 800, 50);\n\t        Potion potion = new Potion(\"İksir1\", 300, \"can artışı oldu\");\n\t        Weapon shotgunWeapon = new Weapon(\"sawed-off\", 2000, 1905);\n\t        Weapon taramaliWeapon=new Weapon(\"m4a1\", 550, 770);\n\t        generalInventory.addItem(sword);\n\t        generalInventory.addItem(shield);\n\t        generalInventory.addItem(potion);\n\t        generalInventory.addItem(shotgunWeapon);\n\t        generalInventory.addItem(taramaliWeapon);\n\t       \n\t        \n\t        weaponInventory.addItem(sword);\n\t        weaponInventory.addItem(shotgunWeapon);\n\t        weaponInventory.addItem(taramaliWeapon);\n\t        generalInventory.printInventory();\n\t        \n\t        System.out.println(\"En degerli item: \" + generalInventory.mostValuableItem().getName());\n\t       \n\t        Inventory.printMostValuableItem(generalInventory);\n\t        List<Item> weapons =  generalInventory.filterByType(Weapon.class);\n\n\t        System.out.println(\"Filtrelenmiş Silahlar:\");\n\t        for (Item item : weapons) {\n\t            System.out.println(item.getName() + \" - Deger: \" + item.getValue());\n\t        }\n\t    }\n\n\t}\n\n\n"
    },
    {
      "id": "1889298",
      "question1.java": "import java.util.*;\n\npublic class question1 {\n\n    public static void main(String[] args) {\n        Inventory<Weapon> weapons = new Inventory();\n        Inventory<Armor> armors = new Inventory();\n        Inventory<Potion> potions = new Inventory();\n\n        Weapon wep = new Weapon(\"Zülfükar\", 10, 10);\n        Armor arm = new Armor(\"Değiken Miğfer\", 10, 10);\n        Potion pot = new Potion(\"Can iksiri\", 10, \"Can verir\");\n\n        String str = \"Zülfükar\";\n        Class<Weapon> weaponClass = Weapon.class;\n\n        weapons.addItem(wep);\n        weapons.printInventory();\n        weapons.findItemByName(str);\n        weapons.filterByType(weaponClass);\n\n    }\n}\n\ninterface Item {\n\n    public String getName();\n    public int getValue();\n    \n}\n\nclass Weapon implements Item{\n    private int damage;\n    private String name;\n    private int value;\n\n    public String getName(){\n        return this.name;\n    }\n\n    public int getValue(){\n        return this.value;\n    }\n    public int getDamage(){\n        return this.damage;\n    }\n    public Weapon(String name, int value, int damage){\n        this.name=name;\n        this.value=value;\n        this.damage=damage;\n    }\n\n\n}\n\nclass Armor implements Item{\n    private int defense;\n    private String name;\n    private int value;\n\n    public String getName(){\n        return this.name;\n    }\n\n    public int getValue(){\n        return this.value;\n    }\n\n    public int getDefense(){\n        return this.defense;\n    }\n\n    public Armor(String name, int value, int defense){\n        this.name=name;\n        this.value=value;\n        this.defense=defense;\n    }\n\n\n\n}\n\nclass Potion implements Item{\n    private String effect;\n    private String name;\n    private int value;\n\n    public String getName(){\n        return this.name;\n    }\n\n    public int getValue(){\n        return this.value;\n    }\n\n    public String getEffect(){\n        return this.effect;\n    }\n\n    public Potion(String name, int value, String effect){\n        this.name=name;\n        this.value=value;\n        this.effect=effect;\n    }\n}\n\nclass Inventory<T extends Item>{\n    \n    ArrayList<T> arr = new ArrayList<>();\n\n    public void addItem(T item){\n        arr.add(item);\n    }\n\n    public void removeItem(T item){\n        arr.remove(item);\n    }\n\n    public void printInventory(){\n        for(int i =0;i<arr.size();i++){\n            System.out.println(arr.get(i));\n        }\n    }\n\n    public T mostValuableItem(){\n        int n = 0;\n        T obj= null;\n        for (int i =0;i<arr.size();i++){\n            if(arr.get(i).getValue()>n){\n                n=arr.get(i).getValue();\n                obj = arr.get(i);\n            }\n        }\n        return obj;\n    }\n\n    public T findItemByName(String name){\n        for (int i =0;i<arr.size();i++){\n            if (arr.get(i).getName().equals(name)){\n                return arr.get(i);\n            }\n        }\n        return null;\n    }\n    public List<T> findItemsByValue(int value){\n        ArrayList<T> arrayList = new ArrayList<>();\n        for (int i =0;i<arr.size();i++){\n            if(arr.get(i).getValue()>value){\n                arrayList.add(arr.get(i));\n            }\n        }\n        return arrayList;\n    }\n\n    public int getTotalValue(){\n        int n =0;\n\n        for (int i =0;i<arr.size();i++){\n            n+=arr.get(i).getValue();\n\n        }\n        return n;\n    }\n\n    public List<T> filterByType(Class<?> type){\n        ArrayList<T> arrayList = new ArrayList<>();\n        for (int i =0;i<arr.size();i++){\n            if(arr.get(i).getClass().equals(type.getClass())){\n                arrayList.add(arr.get(i));\n            }\n        }\n        return arrayList;\n\n    }\n\n    public int getTotalWeaponDamage(){\n        int n = 0;\n        for (int i =0;i<arr.size();i++){\n            if(arr.get(i) instanceof Weapon){\n                n+=arr.get(i).getDamage();\n            }\n        }\n        return n;\n    }\n\n    public void sortByValue(){\n        ArrayList<T> arrayList = new ArrayList<>();\n        ArrayList<T> arr2 = arr;\n        for (int i =0;i<arr.size();i++){\n            T obj=arr2.mostValuableItem();\n            arrayList.add(obj);\n            arr2.remove(obj);\n        }\n        arr=arrayList;\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item>inventory){\n        System.out.println(\"Most Valuable Item: \"+ inventory.arr.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source){\n        for(int i = 0; i<source.arr.size();i++){\n            destination.arr.add(source.get(i));\n        }\n    }\n\n\n}"
    },
    {
      "id": "8059049",
      "Inventory.java": "import java.util.*;\nimport java.io.*;\npublic  class Inventory<T extends Item> {\n    private List<T> items;\n\n    public Inventory() {\n        items = new ArrayList<>();\n    }\n\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item.getName()+\" \"+item.getValue());\n        }\n    }\n\n\n    public T mostValuableItem() {\n        if (items.isEmpty()) return null;\n        T mostValuable = items.get(0);\n        for (T item : items) {\n            if (item.getValue() > mostValuable.getValue()) {\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (item.getName().equals(name)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n\n    public List<T> findItemsByValue(int value) {\n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (item.getValue() > value) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n\n    public List<T> filterByType(Class<?> type) {\n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (item instanceof Armor||item instanceof Weapon) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n\n    public int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDamage += ((Weapon) item).getDamage();\n            }\n        }\n        return totalDamage;\n    }\n\n    public void sortByValue() {\n        int x = items.size();\n        for (int i = 0; i < x ; i++) {\n\n            for (int j = 0; j < x - 1; j++) {\n\n                if (items.get(j).getValue() < items.get(j + 1).getValue()) {\n                    T temp = items.get(j);\n                    items.set(j, items.get(j + 1));\n                    items.set(j + 1, temp);\n                }\n            }\n        }\n    }\n\n\n    public List<T> getItems() {\n        return items;\n    }\n\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"Most Valuable Item: \" +mostValuable.getName()+\" \"+ mostValuable.getValue());\n        } else {\n            System.out.println(\"Inventory is empty.\");\n        }\n    }\n\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n\n        List<Armor> armorsToTransfer = new ArrayList<>(source.getItems());\n\n        for (Armor armor : armorsToTransfer) {\n            source.removeItem(armor);\n            destination.addItem(armor);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n",
      "Weapon.java": "public class Weapon implements Item {\n    private int damage;\n    private  String name;\n    private int value;\n    public Weapon(String name,int value,int damage){\n        this.name=name;\n        this.value=value;\n        this.damage=damage;\n    }\n\n    public String getName(){\n        return name;\n    }\n    public int getValue(){\n        return value;\n    }\n    public int getDamage(){\n        return damage;\n    }\n}\n",
      "Item.java": "public interface Item  {\n    String getName();\n    int getValue();\n\n\n}\n",
      "Armor.java": "public class Armor implements Item {\n    private int defense;\n    private  String name;\n    private int value;\n    public Armor(String name,int value,int defense){\n        this.name=name;\n        this.value=value;\n        this.defense=defense;\n    }\n    public String getName(){\n        return name;\n    }\n    public int getValue(){\n        return value;\n    }\n    public int getDefense(){\n        return defense;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    private String effect;\n    private  String name;\n    private int value;\n    public Potion(String name,int value,String effect){\n        this.name=name;\n        this.value=value;\n        this.effect=effect;\n    }\n    public String getName(){\n        return name;\n    }\n    public int getValue(){\n        return value;\n    }\n    public String getEffect(){\n        return effect;\n    }\n}\n",
      "Driver.java": "\npublic class Driver {\n    public static void main(String[] args) {\n//Çıktı incelemesii kolay olması için arraylistleri doldurdum\n    Inventory<Weapon> weaponInventory = new Inventory<>();\n    weaponInventory.addItem(new Weapon(\"Excalibur\", 1000, 100));\n    weaponInventory.addItem(new Weapon(\"Katana\", 500, 75));\n    weaponInventory.addItem(new Weapon(\"Longsword\", 750, 80));\n\n    System.out.println(\"Weapon Inventory:\");\n    weaponInventory.printInventory();\n\n    Weapon mostValuableWeapon = weaponInventory.mostValuableItem();\n    System.out.println(\"Most valuable weapon: \" + mostValuableWeapon.getName());\n\n\n    Inventory<Item> itemInventory = new Inventory<>();\n    itemInventory.addItem(new Weapon(\"Excalibur\", 1000, 100));\n    itemInventory.addItem(new Armor(\"Dragon Armor\", 800, 90));\n    itemInventory.addItem(new Potion(\"Healing Potion\", 300, \"Restore Health\"));\n    itemInventory.addItem(new Weapon(\"Short Sword\", 400, 50));\n\n    System.out.println(\"\\nItem Inventory:\");\n    itemInventory.printInventory();\n    System.out.println(\"Total value: \" + itemInventory.getTotalValue());\n\n\n    Item foundItem = itemInventory.findItemByName(\"Dragon Armor\");\n    System.out.println(\"Found item: \" + foundItem.getName());\n\n\n    System.out.println(\"Items with value > 500:\");\n    for (Item i : itemInventory.findItemsByValue(500)) {\n        System.out.println(i.getName());\n    }\n\n\n    System.out.println(\"Items of Weapon:\");\n    for (Item i : itemInventory.filterByType(Weapon.class)) {\n        System.out.println(i.getName());\n    }\n\n\n    System.out.println(\"Total weapon damage in item inventory: \" + itemInventory.getTotalWeaponDamage());\n\n\n    itemInventory.sortByValue();\n    System.out.println(\"Item Inventory sorted by value :\");\n    itemInventory.printInventory();\n\n\n    System.out.println(\" most valuable item:\");\n    Inventory.printMostValuableItem(itemInventory);\n\n\n    Inventory<Armor> armorInventory = new Inventory<>();\n    armorInventory.addItem(new Armor(\"Steel Armor\", 600, 70));\n    armorInventory.addItem(new Armor(\"Golden Armor\", 1200, 85));\n\n    System.out.println(\"Armor Inventory before transfer:\");\n    armorInventory.printInventory();\n\n\n    Inventory<Item> destinationInventory = new Inventory<>();\n    Inventory.transferArmor(destinationInventory, armorInventory);\n\n    System.out.println(\"Destination Inventory after transferring armors:\");\n    destinationInventory.printInventory();\n\n    System.out.println(\"Armor Inventory after transfer:\");\n    armorInventory.printInventory();\n\n\n    Class<Weapon> weaponClass = Weapon.class;\n    System.out.println(\"Sınıf adı: \" + weaponClass.getName());\n    Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n    Class<?> clazz = sword.getClass();\n    System.out.println(clazz.getName());\n}\n}\n\n"
    },
    {
      "id": "2786122",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Inventory<T extends Item> {\n    ArrayList<T> items = new ArrayList<T>();\n\n    void addItem(T item) {\n        items.add(item);\n    }\n\n    void removeItem(String item) {\n        for (int i = 0; i < items.size(); i++) {\n            if (items.get(i).getName().equals(item)) {\n                items.remove(i);\n                break;\n            }\n        }\n    }\n\n    void printInventory() {\n        for (T item : items) {\n            System.out.println(item);\n        }\n    }\n\n    T mostValuableItem() {\n        T mostValuable = items.get(0);\n        for (T item : items) {\n            if (item.getValue() > mostValuable.getValue()) {\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n    T findItemByName(String name) {\n        for (T item : items) {\n            if (item.getName().equals(name)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> foundItems = new ArrayList<T>();\n        for (T item : items) {\n            if (item.getValue() == value) {\n                foundItems.add(item);\n            }\n        }\n        return foundItems;\n    }\n\n    int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n    List<T> filterByType(Class<?> type) {\n        List<T> filteredItems = new ArrayList<T>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                filteredItems.add(item);\n            }\n        }\n        return filteredItems;\n    }\n\n    int getTotalWeaponDamage() {\n        int total = 0;\n        for (T item : items) {\n            if (item instanceof Weapon)\n                total += ((Weapon) item).getDamage();\n        }\n        return total;\n    }\n\n    void sortByValue() {\n        for(int x = 0; x < items.size(); x++) {\n            for(int y = 0; y < items.size() - 1; y++) {\n                if(items.get(y).getValue() > items.get(y + 1).getValue()) {\n                    Collections.swap(items, y + 1, y);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<? super Armor> source) {\n        for(int x = 0; x < source.items.size(); x++) {\n            if(source.items.get(x) instanceof Armor) {\n                destination.items.add((Armor) source.items.get(x));\n                source.items.remove(x);\n            }\n        }\n    }\n}",
      "Weapon.java": "public class Weapon implements Item {\n    private int damage;\n    private String name;\n    private int value;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n    @Override\n    public String toString() {\n        return \"Weapon: \" + name + \" (Value: \" + value + \", Damage: \" + damage + \")\";\n    }\n}",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n    String toString();\n}",
      "Armor.java": "public class Armor implements Item {\n    private int defense;\n    private String name;\n    private int value;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n\n    @Override\n    public String toString() {\n        return \"Armor: \" + name + \" (Value: \" + value + \", Defense: \" + defense + \")\";\n    }\n}",
      "Potion.java": "public class Potion implements Item {\n    private String effect;\n    private String name;\n    private int value;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n\n    @Override\n    public String toString() {\n        return \"Potion: \" + name + \" (Value: \" + value + \", Effect: \" + effect + \")\";\n    }\n}",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        Inventory<Item> inventory = new Inventory<Item>();\n        Inventory<Item> inventory2 = new Inventory<Item>();\n        inventory2.addItem(new Weapon(\"Sword\", 10, 5));\n        inventory.addItem(new Armor(\"Iron Armor\", 10, 5));\n        inventory.addItem(new Weapon(\"Iron Sword\", 12, 10));\n        inventory.addItem(new Potion(\"Health Potion\", 5, \"health\"));\n        System.out.println(inventory.findItemByName(\"Iron Armor\"));\n        System.out.println();\n        System.out.println(inventory.findItemsByValue(12));\n        System.out.println();\n        System.out.println(inventory.getTotalValue());\n        System.out.println();\n        System.out.println(inventory.filterByType(Weapon.class));\n        System.out.println();\n        inventory.printInventory();\n        System.out.println();\n        inventory.sortByValue();\n        inventory.printInventory();\n        System.out.println();\n        Inventory.printMostValuableItem(inventory);\n        System.out.println();\n        inventory.removeItem(\"Iron Armor\");\n        System.out.println();\n        inventory.printInventory();\n        System.out.println();\n    }\n}\n"
    },
    {
      "id": "6494434",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\n\nclass Inventory<T extends Item> {\n\n\n    private List<T> items = new ArrayList<>();\n\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item);\n        }\n    }\n\n\n    public T mostValuableItem() {\n        if (items.isEmpty()) {\n            return null;\n        }\n\n        T mostValuable = items.get(0);\n\n        for (T item : items) {\n            if (item.getValue() > mostValuable.getValue()) {\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (name.equals(item.getName())) {\n                return item;\n            }\n        }\n        return null;\n    }\n    public List<T> findItemsByValue(int value) {\n        List<T> variable = new ArrayList<>();\n        for (T item : items) {\n            if (item.getValue() > value) {\n                variable.add(item);\n            }\n        }\n        return variable;\n    }\n\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n\n\n\n    public List<T> filterByType(Class<?> type) {\n        List<T> variable = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                variable.add(item);\n            }\n        }\n        return variable;\n    }\n\n\n    public int getTotalWeaponDamage() {\n        int totalDmg = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDmg += ((Weapon) item).getDamage();\n            }\n        }\n        return totalDmg;\n    }\n\n    public void sortByValue() {\n        int n = items.size();\n\n        for (int i = 0; i < n - 1; i++) {\n            int max = i;\n\n            for (int j = i + 1; j < n; j++) {\n                if (items.get(j).getValue() > items.get(max).getValue()) {\n                    max = j;\n                }\n            }\n\n\n            if (max != i) {\n                T tmp = items.get(i);\n                items.set(i, items.get(max));\n                items.set(max, tmp);\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item item = inventory.mostValuableItem();\n        if (item != null) {\n            System.out.println(\"Most valuable item: \" + item);\n        } else {\n            System.out.println(\"NULL\");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        while (!source.items.isEmpty()) {\n            destination.addItem(source.items.remove(0));\n        }\n    }\n}",
      "Weapon.java": "class Weapon implements Item {\n\n    private String name;\n    private int value;\n    private int damage;\n\n\n    public Weapon(String name,int value,int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue(){\n        return  value;\n    }\n    public int getDamage(){\n        return damage;\n    }\n\n\n    public String toString(){\n        return \"Weapon { name= \" + name + \"' value :\" + value + \"   damage=\" + damage + \" }\";\n    }\n}",
      "Item.java": "interface Item {\n    String getName();\n    int getValue();\n}",
      "Armor.java": "\nclass Armor implements  Item {\n    private String name;\n    private int value;\n    private int defense;\n\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n    public int getDefense() {\n        return defense;\n    }\n\n\n    public String toString(){\n        return \"Armor {  name='\" + name + \"' value =\" + value + \" defense =\" + defense + \" }\";\n    }\n\n\n}",
      "Potion.java": "class Potion implements Item {\n    private String name;\n    private int value;\n    private String effect;\n\n    public Potion(String name,int value, String effect) {\n        this.name =name;\n        this.value = value;\n        this.effect = effect;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getValue() {\n        return value;\n    }\n    public String getEffect() {\n        return effect;\n    }\n    public String toString() {\n        return \"Potion{name='\" + name + \"' value=\" + value + \" effect='\" + effect + \"'}\";\n    }\n}",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n\n        Inventory<Weapon> weapon = new Inventory<>();\n        weapon.addItem(new Weapon(\"AK-47\", 10, 12));\n        weapon.addItem(new Weapon(\"M4A4\", 15, 12));\n        weapon.addItem(new Weapon(\"AWP\", 7, 80));\n\n        weapon.printInventory();\n        System.out.println();\n\n        Inventory.printMostValuableItem(weapon);\n        System.out.println();\n\n        System.out.println(\"Total  weapon damage :  \" + weapon.getTotalWeaponDamage());\n        System.out.println();\n\n        Inventory<Item> item = new Inventory<>();\n        item.addItem(new Weapon(\"P90\", 5, 9));\n        item.printInventory();\n\n\n        Class<Weapon> weaponClass = Weapon.class;\n        System.out.println(\"Class name: \" + weaponClass.getName());\n        System.out.println();\n\n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName());\n    }\n}"
    },
    {
      "id": "6157698",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n\tArrayList<Item> itemList;\n\t\n\tInventory(){\n\t\tthis.itemList = new ArrayList<Item>();\n\t}\n\t\n\tvoid addItem(T item) {\n\t\titemList.add(item);\n\t}\n\tvoid removeItem(T item) {\n\t\titemList.remove(item);\n\t}\n\tvoid printInventory() {\n\t\tfor(Item item : itemList) {\n\t\t\tSystem.out.println(item.getName() + \": \" +item.getValue() );\n\t\t}\n\t}\n\t\n\tT mostValuableItem() {\n\t\tT maxItem = (T) itemList.get(0);\n\t\tfor(Item item : itemList) {\n\t\t\tif(maxItem.getValue() < item.getValue()) {\n\t\t\t\tmaxItem = (T) item;\n\t\t\t}\n\t\t}\n\t\treturn maxItem;\n\t}\n\t\n\tT findItemByName(String name) {\n\t\tfor(Item item : itemList) {\n\t\t\tif(item.getName().equals(name)) {\n\t\t\t\treturn (T) item;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tList<T> findItemsByValue(int value){\n\t\tList<T> itemsByValueList = new ArrayList<>();\n\t\t\n\t\tfor(Item item : itemList) {\n\t\t\tif(item.getValue() > value) {\n\t\t\t\titemsByValueList.add( (T) item);\n\t\t\t}\n\t\t}\n\t\treturn itemsByValueList;\n\t\t\n\t}\n\tint getTotalValue() {\n\t\tint sum=0;\n\t\tfor(Item item : itemList) {\n\t\t\tsum+= item.getValue();\n\t\t}\n\t\treturn sum;\n\t}\n\tList<T> filterByType(Class<?> type){\n\t\tList<T> itemsByTypeList = null;\n\t\tfor(Item item : itemList) {\n\t\t\tif(item.getClass().equals(type.getClass()) ) {\n\t\t\t\titemsByTypeList.add((T)item);\n\t\t\t}\n\t\t}\n\t\treturn itemsByTypeList;\n\t}\n\tint getTotalWeaponDamage(){\n\t\tint sum=0;\n\t\tfor(Item item : itemList) {\n\t\t\tif(item.getClass().equals(new Weapon(\"\",1).getClass()) ) {\n\t\t\t\tsum+=item.getValue();\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n\tvoid sortByValue() {\n\t\titemList.sort((x,y) -> Integer.compare(x.getValue(), y.getValue()));\n\t}\n\tpublic static void printMostValuableItem(Inventory<? extends Item> inventory) {\n//\t\tItem loopItem = inventory.itemList.get(0);\n//\t\tfor(Item item : inventory.itemList) {\n//\t\t\tif(item.getValue() > loopItem.getValue() ) {\n//\t\t\t\tloopItem = item;\n//\t\t\t}\n//\t\t}\n//\t\tSystem.out.println(loopItem);\n\t\tSystem.out.println(inventory.mostValuableItem());\n\t}\n\tpublic static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n\t\tfor(Item armor : source.itemList) {\n\t\t\tdestination.addItem((Armor) armor);\n\t\t}\n\t}\n\t\n}\n\n\n//ArrayList.sort(itemList, new Comparator() {\n//\tpublic int compare(Item x, Item y) {\n//\t\treturn x.getValue()-y.getValue();\n//\t}\n//\n//\t@Override\n//\tpublic int compare(Object o1, Object o2) {\n//\t\t// TODO Auto-generated method stub\n//\t\treturn 0;\n//\t}\n//});\n\n",
      "Weapon.java": "\npublic class Weapon implements Item{\n\tString name;\n\tint damage;\n\t\n\tWeapon(String name, int damage){\n\t\tthis.name = name;\n\t\tthis.damage = damage;\n\t}\n\t\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\treturn damage;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn name +\": \"+ damage;\n\t}\n}\n",
      "Item.java": "\npublic interface Item {\n\tString getName();\n\tint getValue();\n}\n",
      "Armor.java": "\npublic class Armor implements Item {\n\tString name;\n\tint defense;\n\t\n\tArmor(String name, int defense){\n\t\tthis.name = name;\n\t\tthis.defense = defense;\n\t}\n\t\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\treturn defense;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn name +\": \"+ defense;\n\t}\n}\n",
      "Potion.java": "\npublic class Potion implements Item {\n\tString name;\n\tString effect;\n\tint effectValue;\n\t\n\tPotion(String name, String effect, int effectValue){\n\t\tthis.name = name;\n\t\tthis.effect = effect;\n\t\tthis.effectValue = effectValue;\n\t}\n\t\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\treturn effectValue;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn name +\": \"+ effectValue;\n\t}\n}\n",
      "Driver.java": "import java.util.ArrayList;\n\npublic class Driver {\n\n\tpublic static void main(String[] args) {\n\n//\t\tBen value'ları\n//\t\tWeapon'da damage'i value\n//\t\tArmor'da defense'i value\n//\t\tPotion'da effectValue'u value olarak yaptım(.getValue() bu değerleri dönüyor)\n//\t\tYani constructerlarımız farklı olmuş oldu.(Derstede söylemiştim)\n\t\t\n\t\tInventory inventory = new Inventory();\n\t\t\n\t\tinventory.addItem(new Weapon(\"Excalibur\",100));\n\t\tinventory.addItem(new Weapon(\"Hexcalibur\",200));\n\t\tinventory.addItem(new Weapon(\"Pexcalibur\",300));\n\t\tWeapon w1 = new Weapon(\"Texcalibur\",123);\n\t\tinventory.addItem(w1);\n\n\t\tSystem.out.println(\"-----First inv\");\n\t\tinventory.printInventory();\n\t\t\t\t\n\t\tinventory.removeItem(w1);\n\t\tSystem.out.println(\"-----After remove\");\n\t\tinventory.printInventory();\n\t\t\n\t\tSystem.out.println(\"-----Most valuable: \"+inventory.mostValuableItem());\n\t\tSystem.out.println(\"-----Find name: \"+inventory.findItemByName(\"Excalibur\"));;\n\t\t\n\t\tSystem.out.println(\"-----FindItemsByValue(150)\");\n\t\tfor(Item item : (ArrayList<Item>)inventory.findItemsByValue(150)) {\n\t\t\tSystem.out.println(item);\n\t\t}\n\t\t\n\t\tSystem.out.println(\"-----Totalvalue: \"+inventory.getTotalValue());\n\t\tSystem.out.println(\"-----filterByType(Class<?> type)\"+inventory.filterByType(w1.getClass()));\n\t\t\n\t\tinventory.sortByValue();\n\t\tSystem.out.println(\"-----Second inv(After sort)\");\n\t\tinventory.printInventory();\t\n\t\t\n\t\tSystem.out.println(\"-----printMostValuableItem(Inventory<? extends Item> inventory)\");\n\t\tInventory.printMostValuableItem(inventory);\n\t\t\n\t\tInventory inv2 = new Inventory();\n\t\tinv2.addItem(new Armor(\"Light armor\",150));\n\t\tSystem.out.println(\"-----transferArmor(\");\n\t\tInventory.transferArmor(inventory, inv2);\n\t\tinv2.printInventory();\n\t\tSystem.out.println();\n\t\tinventory.printInventory();\n\t}\n\n}\n"
    },
    {
      "id": "8857652",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class Inventory<T>{\n\n    //private ArrayList<T> items = new ArrayList<T>(); \n     ArrayList<T> items;\n    public Inventory(){\n        items=new ArrayList<T>(); \n    }\n\n    public void addItem(T item){\n        items.add(item);\n    }\n\n    public void removeItem(T item){\n        items.remove(item);\n    }\n\n    public void printInventory(){\n        System.out.println(\"INVENTORY:\");\n        for (T item : items ) {\n            System.out.println(((Item)item).getName());\n        }\n    }\n\n    public T mostValuableItem(){\n        int val=0;\n        T theItem=null;\n        \n        for (T  item : items ) {\n            //if(((Item)items.get(i).getValue()))\n            \n            if(((Item)item).getValue()>val){\n                val=((Item)item).getValue();;\n                theItem=item;\n\n            }\n        }\n        return theItem;\n    }\n\n\n    public T findItemByName(String name){\n        for (T item : items ) {\n            if(name==((Item)item).getName()){\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value){\n        ArrayList<T> byVal = new ArrayList<T>(); \n        for (T item : items ) {\n            if(((Item)item).getValue()<value){\n                byVal.add(item);\n            }\n        }\n\n        return byVal;\n    }\n\n    public int getTotalValue(){\n        int totalValue=0;\n        for (T item : items ) {\n            totalValue += ((Item)item).getValue();\n        }\n        return totalValue;\n    }\n\n    public List<T> filterByType(Class<?> type){\n        ArrayList<T> byType = new ArrayList<T>();\n        for (T item : items ) {\n            if(item.getClass()==type){\n                byType.add(item);\n            }\n        }\n        return byType;\n    }\n\n    public int getTotalWeaponDamage(){\n       // items.filterByType(Class<Weapon>);\n       Class<Weapon> weaponClass = Weapon.class;\n\n        \n        int totalWeaponDamage=0;\n        for (T item : items ) {\n            if(item.getClass().getName().equals(weaponClass.getName())){\n                totalWeaponDamage += ((Item)item).getValue();\n                \n            }\n        }\n        return totalWeaponDamage;\n    }\n\n    public void sortByValue(){\n\n\n        \n       /*  Item tempVar=null;\n        for (int i = 0; i < items.size(); i++){\n            for(int j = 0; j < items.size(); j++){\n                //Item i1=(Item)items.get(i);\n                //Item i2=(Item)items.get(j);\n                if(((Item)items.get(i)).getValue()> ((Item)items.get(j)).getValue()){\n                   tempVar = items.;\n                   items.get(j+1)= (Item)items.get(i);\n                   (Item)items.get(i); = tempVar;\n                }\n            }\n        }\n\n\n\n        for(int i=0; i<items.size()-1; i++){\n            Item i1=(Item)items.get(i);\n            Item i2=(Item)items.get(i+1);\n        }\n        \n       Collections.sort(items,new Comparator<T>() {\n        public int compare(Item i1, Item i2){\n        if (i1.getValue()== i2.getValue())\n            return 0;\n        else if (i1.getValue() < i2.getValue())\n            return 1;\n        else\n            return -1;\n        }\n       });*/\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item>inventory){\n        \n        inventory.mostValuableItem().getName();\n        //System.out.println();\n\n    }\n\n\n    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source){\n        //destination.addItem(source);\n    }\n        \n            \n}",
      "Weapon.java": "public class Weapon implements Item{\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage){\n        this.name=name;\n        this.value=value;\n        this.damage=damage;\n    }\n\n    \n\n    public int getDamage() {\n        return damage;\n    }\n\n    public void setDamage(int damage) {\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n        \n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n\n}\n",
      "Armor.java": "public class Armor implements Item{\n    private String name;\n    private int value;\n    private int defense;\n\n    public Armor(String name, int value, int defense){\n        this.name=name;\n        this.value=value;\n        this.defense=defense;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n\n    public void setDefense(int defense) {\n        this.defense = defense;\n    }\n    \n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    \n\n}\n",
      "Potion.java": "\n    public class Potion implements Item{\n        private String name;\n        private int value;\n        private String effect;\n    \n        public Potion(String name, int value, String effect){\n            this.name=name;\n            this.value=value;\n            this.effect=effect;\n        }\n    \n        public String getEffect() {\n            return effect;\n        }\n\n        public void setEffect(String effect) {\n            this.effect = effect;\n        }\n        \n        @Override\n        public String getName() {\n            return name;\n        }\n    \n        @Override\n        public int getValue() {\n            return value;\n        }\n        \n    \n    }\n    \n\n\n",
      "Driver.java": "public class Driver{\n    public static void main(String[] args) {\n\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        Inventory<Item> generalInventory = new Inventory<>();\n        Weapon bow = new Weapon(\"Legolas's bow\", 50, 50);\n        Weapon sword = new Weapon(\"Excalibur\", 70, 60);\n        Weapon wand = new Weapon(\"Merlin's Wand\", 500, 150);\n        \n        Potion hpotion = new Potion(\"Health Potion\", 200, \"Heals 50 HP\");\n        Potion spotion = new Potion(\"Strength Potion\", 200, \"Armor 10\");\n        Armor shield = new Armor(\"Silver Shield \", 1500, 200);\n        Armor helmet = new Armor(\"Random Helmet\", 500, 50);\n        \n\n        \n\n        \n        weaponInventory.addItem(sword);\n        weaponInventory.addItem(bow);\n        weaponInventory.addItem(wand);\n        \n\n        \n        generalInventory.addItem(sword);\n        generalInventory.addItem(wand);\n        generalInventory.addItem(bow);\n        generalInventory.addItem(hpotion);\n        generalInventory.addItem(helmet);\n        generalInventory.addItem(shield);\n        generalInventory.addItem(spotion);\n\n        System.out.println(\"Weapon Inventory:\");\n        weaponInventory.printInventory();\n        System.out.println(\"\\nGeneral Inventory:\");\n        generalInventory.printInventory();\n\n        System.out.println(\"\\nMost Valuable Item in Weapon Inventory:\");\n        Inventory.printMostValuableItem(weaponInventory);\n\n        System.out.println(\"\\nMost Valuable Item in General Inventory:\");\n        Inventory.printMostValuableItem(generalInventory);\n\n       \n    }\n    \n    \n}\n\n"
    },
    {
      "id": "6418019",
      "Driver.java": "import java.nio.channels.Pipe.SourceChannel;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.print.attribute.standard.Destination;\n\npublic class Driver{ \n    public static void main(String[] args) {\n        \n        Inventory<Weapon> weapon = new Inventory<>();\n        Inventory<Item> item = new Inventory<>();\n\n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Weapon sword2 = new Weapon(\"Sword2\", 500, 50);\n        Weapon sword3 = new Weapon(\"Weapon3\", 600, 120);\n\n        weapon.addItem(sword);\n        weapon.addItem(sword2);\n        weapon.addItem(sword3);\n\n        Armor armor1 = new Armor(\"Armor1\", 400, 40);\n        Potion potion1 = new Potion(\"potion1\", 470, \"kill\");\n\n        item.addItem(armor1);\n        item.addItem(potion1);\n        item.addItem(sword);\n        item.addItem(sword2);\n\n        System.out.println(\"printInventor metodu:\");\n        item.printInventort();\n\n        System.out.println(\"find item has name Armor1\");\n        System.out.println(item.findItemByName(\"Armor1\"));\n\n        System.out.println(\"item that has value 400\");\n        System.out.println(item.findItemsByValue(400));\n\n        System.out.println(\"most valuable inventory in item\");\n        System.out.println(item.mostValuableItem());\n\n        System.out.println(\"most valuable item in item inventory\");\n        Inventory.printMostValuableItem(item);\n\n        System.out.println(\"total weapon damage\");\n        System.out.println(item.getTotalWeaponDamage());\n\n        \n\n;\n    }\n\n}\n\ninterface Item{\n    String getName();\n    int getValue();\n}\n\nclass Weapon implements Item{\n    String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage){\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public int getDamage(){\n        return damage;\n    }\n\n    public String toString(){\n        return \"name: \" + name + \" value: \" + value + \" damage: \" + damage;\n    }\n}\n\nclass Armor implements Item{\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense){\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n    \n    public int getDefense(){\n        return defense;\n    }\n\n    public String toString(){\n        return \"name: \" + name + \" value: \" + value + \" defense: \" + defense;\n    }\n}\n\nclass Potion implements Item{\n    String name;\n    int value;\n    String effect ;\n\n    public Potion(String name, int value, String effect){\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public String getEffect(){\n        return effect;\n    }\n\n    public String toString(){\n        return \"name: \" + name + \" value: \" + value + \" effect: \" + effect;\n    }\n}\n\nclass Inventory<T> {\n    ArrayList<T> list;\n\n    public Inventory(){\n        list = new ArrayList<>();\n    }\n\n    void addItem(T item){\n        list.add(item);\n    }\n\n    void removeItem(T item){\n        list.remove(item);\n    }\n\n    void printInventort(){\n        for(T element : list){\n            System.out.println(element);\n        }\n    }\n\n    T mostValuableItem(){\n        int mostValuable = 0;\n        int index = 0;\n        for(int i = 0; i<list.size(); i++){\n            if(((Item) list.get(i)).getValue() > mostValuable){ \n                mostValuable = ((Item) list.get(i)).getValue();\n                index = i;\n            }\n        }\n\n        return list.get(index);\n    }\n\n    T findItemByName(String name){\n\n        for(int i = 0; i<list.size(); i++){\n            if(name.equals(((Item) list.get(i)).getName())){\n                return list.get(i);\n            }\n        }\n\n        return null;\n    }\n\n    List<T> findItemsByValue(int value){\n        List<T> moreValuable = new ArrayList<>();\n\n        for(int i = 0; i<list.size(); i++){\n            if(value > ((Item) list.get(i)).getValue()){\n                moreValuable.add(list.get(i));\n            }\n        }\n\n        return moreValuable;\n    }\n\n    int getTotalValue(){\n        int totalValue = 0;\n        for(T elements : list){\n            totalValue += ((Item)elements).getValue();\n        }\n\n        return totalValue;\n    }\n\n    List<T> filterByType(Class<?> type){\n        List<T> filteredList = new ArrayList<>();\n        for(T elements : list){\n            if(type == ((Item) elements).getClass()){\n                filteredList.add(elements);\n            }\n        }\n\n        return filteredList;\n    }\n\n\n    int getTotalWeaponDamage(){\n        int totalDamage = 0;\n        for(T elements : list){\n            if(elements.getClass() == Weapon.class){\n                totalDamage += ((Weapon)elements).getDamage();\n            }\n        }\n\n        return totalDamage;\n    }\n\n    void sortByValue(){\n        for(int i = 0; i<list.size(); i++){\n\n            for(int j = i+1; j<list.size()-1; j++){\n                if(((Item) list.get(i)).getValue() < ((Item) list.get(j)).getValue()){\n\n                    T temp = list.get(i);\n                    T temp2 =  list.get(j);\n                    list.set(i,temp2);\n                    list.remove(i+1);\n                    list.set(j, temp);\n                    list.remove(j+1);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item>inventory){\n        \n        Item a = inventory.mostValuableItem();\n        System.out.println(\"name : \" + a.getName() + \"value : \" + a.getValue());\n        if(a instanceof Weapon){\n            System.out.println(\"damage: \" + ((Weapon)a).getDamage());\n        }\n        else if(a instanceof Armor){\n            System.out.println(\"defense: \" + ((Armor)a).getDefense());\n        }\n        else if(a instanceof Potion){\n            System.out.println(\"effect: \" + ((Potion)a).getEffect());\n        }\n\n        \n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source){\n        List<Armor> armors = source.filterByType(Armor.class);\n\n        for(Armor armor : armors){\n            destination.addItem(armor);\n            source.removeItem(armor);\n        }\n    }\n\n\n}"
    },
    {
      "id": "3963286",
      "Lab4.java": ""
    },
    {
      "id": "9245287",
      "Q1.java": "import java.util.ArrayList;\nimport java.util.List;\n\n//classtan implenet edlmis interface nasıl erisilir \npublic class Q1 {\n    public static void main(String[] args) {\n        Inventory<Item> arr = new Inventory<Item>();\n        arr.addItem(new Weapon(\"kalak\", 100, 10));\n        arr.addItem(new Weapon(\"kalak2\", 110, 10));\n        arr.addItem(new Armor(\"armmm\", 18, 10));\n        arr.addItem(new Potion(\"kalak2\", 75, \"10\"));\n        Inventory<Armor> arrArmor = new Inventory<Armor>();\n        arrArmor.addItem(new Armor(\"armor1\", 120, 90));\n        arrArmor.addItem(new Armor(\"armor2\", 10, 900));\n        arrArmor.addItem(new Armor(\"armor3\", 94, 40));\n        arrArmor.sortByValue();\n        arrArmor.printInventory();\n        arr.mostValuableItem();\n        arr.filterByType(Weapon.class);\n\n    }\n}\n\ninterface Item {\n\n    String getName();\n\n    int getValue();\n}\n\nclass Weapon implements Item {\n    private String name;\n    private int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return getName() + \" \" + getValue() + \" \" + \"Damage: \" + damage;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n}\n\nclass Armor implements Item {\n    int defence;\n    private String name;\n    private int value;\n\n    public Armor(String name, int value, int defence) {\n        this.name = name;\n        this.value = value;\n        this.defence = defence;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return getName() + \" \" + getValue() + \" \" + \"Defence: \" + defence;\n    }\n}\n\nclass Potion implements Item {\n    private String name;\n    private int value;\n    String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return getName() + \" \" + getValue() + \" \" + \"Effect: \" + effect;\n    }\n}\n\nclass Inventory<T extends Item> {\n    ArrayList<T> arr = new ArrayList<T>();\n\n    // public Inventory() {\n    // arr = new ArrayList<T>();\n    // }\n    void addItem(T itemT) {\n        arr.add(itemT);\n    }\n\n    void removeItem(T itemT) {\n        arr.remove(itemT);\n    }\n\n    void printInventory() {\n        System.out.println(arr);\n    }\n\n    T mostValuableItem() {\n        int maxVal = -1;\n        T mostValItem = null;\n        for (T t : arr) {\n            if (t.getValue() > maxVal) {\n                maxVal = t.getValue();\n                mostValItem = t;\n            }\n        }\n        return mostValItem;\n    }\n\n    T findItemByName(String name) {\n        T itemT = null;\n        for (T t : arr) {\n            if (t.getName().equals(name)) {\n                itemT = t;\n                break;\n            }\n        }\n        return itemT;\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> returnList = new ArrayList<T>(); // neden private List olmuyor??\n        for (T t : arr) {\n            if (t.getValue() > value) {\n                returnList.add(t);\n            }\n        }\n        return returnList;\n    }\n\n    int getTotalValue() {\n        int cnt = 0;\n        for (T t : arr) {\n            cnt += t.getValue();\n        }\n        return cnt;\n    }\n\n    List<T> filterByType(Class<?> type) { // ? kaldırsak neden olmuyor??\n        ArrayList<T> returnArray = new ArrayList<T>();\n        for (T t : arr) {\n            if (t.getClass() == type) {\n                returnArray.add(t);\n            }\n        }\n        return returnArray;\n    }\n\n    int getTotalWeaponDamage() {\n        int cnt = 0;\n        for (T t : arr) {\n            if (t instanceof Weapon) {\n                Weapon tnew = (Weapon) t;\n                cnt += tnew.getDamage();\n            }\n        }\n        return cnt;\n    }\n\n    void sortByValue() {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = 0; j < arr.size() - 1; j++) {\n                if (arr.get(j).getValue() < arr.get(j + 1).getValue()) {\n                    T temp = arr.get(j);\n                    arr.set(j, arr.get(j + 1));\n                    arr.set(j + 1, temp);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor itemArmor : source.arr) {\n            destination.addItem(itemArmor);\n        }\n    }\n}"
    },
    {
      "id": "6429016",
      "Inventory.java": "package Quiz4;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport javax.lang.model.type.NullType;\nclass Inventory<T extends Item> {\n    private List<T> items = new ArrayList<>();\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n    public void removeItem(T item) {\n        \n        items.remove(item);\n    }\n\n    public void printInventory(){\n        for(T item: items){\n            System.out.println(item);\n        }\n    }\n\n    public T mostValuableItem(){\n        T mostValuable= null;\n        for(T item : items){\n            if(mostValuable == null || item.getValue() > mostValuable.getValue()){\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n    \n\n    public T findItemByName(String name) {\n        for(T item : items){\n            if(item.getName().equals(name)){\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> matchingItems = new ArrayList<>();\n        for(T item : items){\n            if(item.getValue() >= value){\n                matchingItems.add(item);\n            }\n        }\n        return matchingItems;\n    }\n    \n\n    public int getTotalValue() {\n        int totalValue = 0;\n        for(T item: items){\n            totalValue = totalValue + item.getValue();\n        }\n        return totalValue;\n    }\n\n    public List<T> filterByType(Class<?> type) {\n        List<T> filteredItems = new ArrayList<>();\n        for(T item: items){\n            if (type.isInstance(item)){\n                filteredItems.add(item);\n            }\n        }\n        return filteredItems;\n    }\n\n    public int getTotalWeaponDamage() {\n        int weaponDamage=0;\n        for (T t : items) {\n            if (t instanceof Weapon) {\n                Weapon weapon = (Weapon) t;\n                weaponDamage+= weapon.getDamage();\n            }\n            \n        }\n        return weaponDamage;\n    }\n\n        \n    public void sortByValue() {\n        for (int i = 0; i < items.size() - 1; i++) {\n                for (int j = i + 1; j < items.size(); j++) {\n                    if (items.get(i).getValue() < items.get(j).getValue()) {\n                        T temp = items.get(i);\n                        items.set(i, items.get(j));\n                        items.set(j, temp);\n                    }\n                }\n            }\n        }\n    \n        public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n            Item item = inventory.mostValuableItem();\n            if (item != null) {\n                System.out.println(\"Most valuable item: \" + item.getName() + \" Value: \" + item.getValue());\n            }\n        }\n    \n        public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n            for (Armor armor : new ArrayList<>(source.items)) {\n                destination.addItem(armor);\n                source.removeItem(armor);\n            }\n        }\n    }\n\n\n\n",
      "Weapon.java": "package Quiz4;\n\nclass Weapon implements Item {\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public int getDamage(){\n        return damage;\n    }\n\n    @Override\n    public String getName(){\n        return name;\n    }\n\n    @Override\n    public int getValue(){\n        return value;\n    }\n\n    public String toString() {\n        return \"Weapon name= \" + name + \" value= \" + value + \" damage= \" + damage ;\n    }\n}\n\n",
      "Item.java": "package Quiz4;\nimport java.util.*;\ninterface Item {\n    String getName();\n    int getValue();\n}",
      "Armor.java": "package Quiz4;\n\nclass Armor implements Item {\n    private String name;\n    private int value;\n    private int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n        \n    }\n\n    public int getDefense() {\n        return defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Armor name= \" + name + \" value= \" + value + \" defense= \" + defense;\n    }\n}\n",
      "Potion.java": "package Quiz4;\n\nclass Potion implements Item {\n    private String name;\n    private int value;\n    private String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public String toString() {\n        return \"Potion name= \" + name + \" value= \" + value + \" effect= \" + effect;\n    }\n}",
      "Driver.java": "package Quiz4;\npublic class Driver {\n    public static void main(String[] args) {\n\n        \n\n        Inventory<Armor> armorInventory = new Inventory<>();\n        armorInventory.addItem(new Armor(\"Randuin's Omen\", 2900, 60));\n        armorInventory.addItem(new Armor(\"Warden's Mail\", 1000, 40));\n\n\n\n        Inventory<Item> MyInventory = new Inventory<>();\n        MyInventory.addItem(new Weapon(\"Long Sword\", 350, 10));\n        MyInventory.addItem(new Armor(\"Chain Vest\", 800, 40));\n        MyInventory.addItem(new Potion(\"Health Potion\", 50, \"Restore 150 HP\"));\n       \n        \n\n        System.out.println(\"\\n Inventory:\");\n        \n        MyInventory.printInventory();\n        System.out.println(\"************************************\");\n\n        System.out.println(\"Most valuable item: \" + MyInventory.mostValuableItem());\n        System.out.println(\"Find by name: \" + MyInventory.findItemByName(\"Long Sword\"));\n        System.out.println(\"Items above value: \" + MyInventory.findItemsByValue(500));\n        System.out.println(\"Total inventory value: \" + MyInventory.getTotalValue());\n\n\n\n        MyInventory.sortByValue();\n        System.out.println(\"Inveentory is sorted\");\n        MyInventory.printInventory();\n\n        System.out.println(\"************************************\");\n\n\n\n        System.out.println(\"Filtered Weapons: \" + MyInventory.filterByType(Weapon.class));\n        System.out.println(\"Filtered Armors: \" + MyInventory.filterByType(Armor.class));\n\n        Inventory.printMostValuableItem(MyInventory);\n\n        System.out.println(\"************************************\");\n\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        weaponInventory.addItem(new Weapon(\"Infinity Edge\", 3400, 80));\n        weaponInventory.addItem(new Weapon(\"B.F Sword\", 1300, 40));\n        weaponInventory.printInventory();\n        System.out.println(\"Total Weapon Damage: \" + weaponInventory.getTotalWeaponDamage());\n\n        \n\n        Inventory<Item> destinationInventory = new Inventory<>();\n        Inventory.transferArmor(destinationInventory, armorInventory);\n        System.out.println(\"\\nTransferred Armor to Destination Inventory:\");\n        destinationInventory.printInventory();\n    }\n}\n\n"
    },
    {
      "id": "7732416",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T> {\n    public ArrayList<T> inventory = new ArrayList<>();\n\n    void addItem(T item){\n        inventory.add(item);\n    }\n    void removeItem(T item){\n        inventory.remove(item);\n    }\n    void printInventory() {\n        Item i;\n        for(T item : inventory){\n            if (item instanceof Item){\n                i = (Item)item;\n                System.out.println(i.getName());\n            }\n        }\n    }\n    T mostValuableItem() {\n        T valuable = inventory.getFirst();\n        int value = 0;\n        Item i = new Weapon(); // initialize etme acisindan\n        for (T item : inventory){\n            if (item instanceof Weapon){\n                i = (Weapon)item;\n            }\n            if (item instanceof Armor){\n                i = (Armor)item;\n            }\n            if (item instanceof Potion){\n                i = (Potion)item;\n            }\n            value = i.getValue();\n            if (value < i.getValue())\n                valuable = item ;\n        }\n        return valuable;\n    }\n    T findItemByName(String name){\n        for(T item : inventory){\n            if (item instanceof Item){\n                if (((Item) item).getName().equals(name)){\n                    return item;\n                }\n            }\n        }\n        return null;\n    }\n    List<T> findItemsByValue(int value){\n        ArrayList<T> list = new ArrayList<>();\n        Item i = new Weapon(); // initialize etme acisindan\n        for (T item : inventory){\n            if (item instanceof Weapon){\n                i = (Weapon)item;\n            }\n            if (item instanceof Armor){\n                i = (Armor)item;\n            }\n            if (item instanceof Potion){\n                i = (Potion)item;\n            }\n            if (i.getValue() >= value){\n                list.add(item);\n            }\n        }\n        return (List<T>) list;\n    }\n    int getTotalValue() {\n        Item i = new Weapon(); // initialize etme acisindan\n        int totalValue = 0;\n        for (T item : inventory) {\n            if (item instanceof Weapon) {\n                i = (Weapon) item;\n            }\n            if (item instanceof Armor) {\n                i = (Armor) item;\n            }\n            if (item instanceof Potion) {\n                i = (Potion) item;\n            }\n            totalValue += i.getValue();\n        }\n        return totalValue;\n    }\n    List<T> filterByType(Class<?> type){\n        ArrayList<T> list = new ArrayList<>();\n        for (T item : inventory){\n            if (item.getClass() == type){\n                list.add(item);\n            }\n        }\n        return (List<T>)list ;\n    }\n    void sortByValue(){\n        ArrayList<T> copy = new ArrayList<>();\n        for (int i = 0; i < inventory.size(); i++) {\n            copy.add(mostValuableItem());\n            removeItem(mostValuableItem());\n        }\n        inventory = copy ;\n    }\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        inventory.mostValuableItem().getName();\n    }\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){\n        for(Armor armor : source.inventory){\n            destination.inventory.add(armor);\n        }\n    }\n\n}\n",
      "Weapon.java": "public class Weapon implements Item{\n    int value;\n    int damage;\n\n    @Override\n    public String getName() {\n        return \"Weapon\";\n    }\n    @Override\n    public int getValue() {\n        return value;\n    }\n}\n",
      "Item.java": "public interface Item {\n\n    String getName();\n    int getValue();\n\n\n}\n",
      "Armor.java": "public class Armor implements Item{\n    int value;\n    int defense;\n\n    @Override\n    public String getName() {\n        return \"Armor\";\n    }\n    @Override\n    public int getValue() {\n        return value;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item{\n    int value ;\n    String effect;\n\n    @Override\n    public String getName() {\n        return \"Potion\";\n    }\n    @Override\n    public int getValue() {\n        return value;\n    }\n}\n",
      "Driver.java": "public class Driver {\n\n}\n"
    },
    {
      "id": "9905145",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Inventory <T extends Item> {\n\n    ArrayList<T> inventory = new ArrayList<T>();\n\n    void addItem(T item) {\n        inventory.add(item);\n    }\n\n    void removeItem(T item) {\n        inventory.remove(item);\n    }\n\n    void printInventory() {\n        System.out.println(inventory);\n    }\n\n    T mostValuableItem() {\n        T temp = inventory.get(0);\n        for(int i = 0; i < inventory.size(); i++) {\n            if(inventory.get(i).getValue() >= temp.getValue()) {\n                temp = inventory.get(i);\n            }\n        }\n        return temp;\n    }\n\n    T findItemByName(String name) {\n\n        for(int i = 0; i < inventory.size(); i++) {\n            if(inventory.get(i).getName().equals(name)) {\n                return inventory.get(i);\n            }\n        }\n        return null;\n    }\n\n    List<T>findItemsByValue(int value) {\n        List<T> ItemsByValue = new ArrayList<>();\n        for(int i = 0; i < inventory.size(); i++) {\n            if(inventory.get(i).getValue() > value) {\n                ItemsByValue.add(inventory.get(i));\n            }\n        }\n        return ItemsByValue;\n    }\n\n    int getTotalValue() {\n        int totalValue = 0;\n        for(int i = 0; i < inventory.size(); i++) {\n            totalValue += inventory.get(i).getValue();\n        }\n        return totalValue;\n    }\n\n    List<T>filterByType(Class<?>type) {\n        List<T> ByType = new ArrayList<>();\n        for(int i = 0; i < inventory.size(); i++){\n            if(type.isInstance(inventory.get(i))) {\n                ByType.add(inventory.get(i));\n            }\n        }\n        return ByType;\n    }\n\n    int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for(int i = 0; i < inventory.size(); i++) {\n            if(inventory.get(i) instanceof Weapon) {\n                totalDamage += ((Weapon) inventory.get(i)).getDamage();\n            }\n        }\n        return totalDamage;\n    }\n\n    void sortByValue() {\n        for(int i = 0; i < inventory.size(); i++) {\n            for(int y = 0; y < inventory.size()-1; y++){\n                if(inventory.get(y).getValue() < inventory.get(y+1).getValue()){\n                    Collections.swap(inventory,y,y+1);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor>source) {\n        for(int i = 0; i < source.inventory.size(); i++) {\n            destination.addItem(source.inventory.get(i));\n            source.removeItem(source.inventory.get(i));\n        }\n    }\n}",
      "Weapon.java": "public class Weapon implements Item {\n\n    String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n    @Override\n    public String toString(){\n        return name +\" \"+ value +\" \"+ damage;\n\n    }\n}\n",
      "Item.java": "public interface Item {\n\n    String getName();\n\n    int getValue();\n\n    String toString();\n}\n",
      "Armor.java": "public class Armor implements Item {\n\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString(){\n        return name +\" \"+ value +\" \"+ defense;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString(){\n        return name +\" \"+ value +\" \"+ effect;\n    }\n}\n",
      "Driver.java": "public class Driver {\n\n    public static void main(String[] args) {\n\n        Class<Weapon> weaponClass = Weapon.class;\n        System.out.println(\"Sınıf adı: \" + weaponClass.getName());\n\n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName());\n\n        Inventory<Item> inventory = new Inventory<Item>();\n\n        Weapon silah = new Weapon(\"Excalibur\",100,10);\n        Potion potion = new Potion(\"Can\",200,\"Heal\");\n        Armor armor = new Armor(\"Zirh\",500,50);\n\n        inventory.addItem(silah);\n        inventory.addItem(potion);\n        inventory.addItem(armor);\n\n        inventory.printInventory();\n        inventory.sortByValue();\n        inventory.removeItem(armor);\n        inventory.printInventory();\n\n        System.out.println(inventory.getTotalValue());\n        System.out.println(inventory.filterByType(Weapon.class));\n        System.out.println(inventory.findItemByName(\"Can\"));\n        System.out.println(inventory.getTotalWeaponDamage());\n        System.out.println(inventory.mostValuableItem());\n    }\n}\n"
    },
    {
      "id": "2103960",
      "Inventory.java": "import java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> items;\n\n    public Inventory() {\n        this.items = new ArrayList<>();\n    }\n\n    void addItem(T item) {\n        items.add(item);\n    }\n\n    void removeItem(T item) {\n        items.remove(item);\n    }\n\n    void printInventory() {\n        for (T item : items) {\n            if (item instanceof Weapon)\n                ((Weapon) item).printWeapon();\n            else if (item instanceof Armor)\n                ((Armor) item).printArmor();\n            else if (item instanceof Potion)\n                ((Potion) item).printPotion();\n\n        }\n    }\n\n    T mostValuableItem() {\n        int maxIndex = 0;\n        int maxValue = 0;\n        if (this.items.size() == 0)\n            return null;\n        else {\n            for (T item : items) {\n                if (item instanceof Item) {\n                    if (((Item) item).getValue() > maxValue) {\n                        maxValue = ((Item) item).getValue();\n                        maxIndex = items.indexOf(item);\n                    }\n                }\n\n            }\n            return items.get(maxIndex);\n        }\n    }\n\n    T findItemByName(String name) {\n        for (T item : items) {\n            if (item instanceof Item) {\n                if ((((Item) item).getName()).equals(name)) {\n                    return item;\n                }\n            }\n        }\n        return null;\n    }\n\n    List<T> findItemsByValue(int value) { //\n        ArrayList<T> moreValueable = new ArrayList<>();\n\n        for (T item : items) {\n            if (item instanceof Item) {\n                if ((((Item) item).getValue()) > value) {\n                    moreValueable.add(item);\n                }\n            }\n        }\n        return moreValueable;\n    }\n\n    int getTotalValue() {\n        int totalValue = 0;\n        for (T item : items) {\n            totalValue += item.getValue();\n        }\n        return totalValue;\n    }\n\n    List<T> filterByType(Class<?> type){ //\n        ArrayList<?> filteredArrayList = new ArrayList<>();\n        for (T item : items) {\n            if (item instanceof ?)\n            filteredArrayList.add(item);\n        }\n        return filteredArrayList;\n    }\n\n    int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDamage += ((Weapon) item).damage;\n            }\n        }\n        return totalDamage;\n    }\n\n    void sortByValue() { //\n        for (int i = 0; i < items.size(); i++) {\n            for (int j = 0; j < items.size(); j++) {\n\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item item = inventory.mostValuableItem();\n        if (item instanceof Weapon)\n            ((Weapon) item).printWeapon();\n        else if (item instanceof Armor)\n            ((Armor) item).printArmor();\n        else if (item instanceof Potion)\n            ((Potion) item).printPotion();\n\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {//\n        ArrayList<? super Armor> myArmors = source.items;\n        destination.items = myArmors;\n    }\n\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n\n    public void printWeapon() {\n        System.out.println(\n                \"Class: Weapon Name: \" + this.getName() + \" Value: \" + this.getValue() + \" Damage: \" + this.damage);\n    }\n}\n",
      "Item.java": "public interface Item {\n\n    String getName();\n\n    int getValue();\n}",
      "Armor.java": "public class Armor implements Item {\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n\n    public void printArmor() {\n        System.out.println(\n                \"Class: Armor Name: \" + this.getName() + \" Value: \" + this.getValue() + \" Defense: \" + this.defense);\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n\n    public void printPotion() {\n        System.out.println(\n                \"Class: Potion Name: \" + this.getName() + \" Value: \" + this.getValue() + \" Effect: \" + this.effect);\n    }\n\n}",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        Inventory<Armor> armors = new Inventory<>();\n        Inventory<Item> items = new Inventory<>();\n        Inventory<Weapon> weapons = new Inventory<>();\n        Weapon sword = new Weapon(\"sword\", 22, 30);\n        Armor kalkan = new Armor(\"kalkan1\", 44, 60);\n        Potion potion1 = new Potion(\"potion1\", 80, \"zehir\");\n        items.addItem(sword);\n        weapons.addItem(sword);\n        items.addItem(kalkan);\n        armors.addItem(kalkan);\n        items.addItem(potion1);\n\n        items.findItemByName(\"potion1\");\n        items.sortByValue();\n\n    }\n}\n"
    },
    {
      "id": "2384475",
      "Driver.java": "package bil211lab4;\n\nimport java.nio.file.WatchEvent;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Class<Weapon> weaponClass = Weapon.class;\n        System.out.println(\": \" + weaponClass.getName());\n\n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName());\n\n        Inventory<Item> envantor = new Inventory<>();\n        Item w = new Weapon(\"A\", 100, 100);\n        Item a = new Armor(\"B\", 200, 700);\n        Item p = new Potion(\"C\", 150, \"Effect\");\n        envantor.addItem(sword);\n        envantor.addItem(w);\n        envantor.addItem(a);\n        envantor.addItem(p);\n\n        envantor.printInventory();\n\n        System.out.println(\"Most Valuable: \" + envantor.mostValuableItem().getName());\n        System.out.println(envantor.findItemByName(\"B\").toString());\n        System.out.println(envantor.findItemsByValue(130));\n        System.out.println(envantor.getTotalValue());\n        System.out.println(envantor.filterByType(clazz));\n        envantor.sortByValue();\n        envantor.printInventory();\n        Inventory.printMostValuableItem(envantor);\n\n    }\n\n}\n\ninterface Item {\n\n    String getName();\n\n    int getValue();\n}\n\nclass Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n\n    Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n}\n\nclass Armor implements Item {\n    String name;\n    int value;\n    int defense;\n\n    Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n}\n\nclass Potion implements Item {\n    String name;\n    int value;\n    String effect;\n\n    Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n\n}\n\nclass Inventory<T extends Item> {\n    T item;\n    List<T> liste = new ArrayList<T>();\n\n    void addItem(T item) {\n        liste.add(item);\n    }\n\n    void removeItem(T item) {\n        liste.remove(item);\n    }\n\n    void printInventory() {\n        for (T item : liste) {\n            if (item instanceof Weapon) {\n                System.out.println(\"Name: \" + item.getName() + \" Value: \" + item.getValue() + \" Damage: \"\n                        + ((Weapon) item).getDamage());\n            } else if (item instanceof Armor) {\n                System.out.println(\"Name: \" + item.getName() + \" Value: \" + item.getValue() + \" Damage: \"\n                        + ((Armor) item).getDefense());\n            } else if (item instanceof Potion) {\n                System.out.println(\"Name: \" + item.getName() + \" Value: \" + item.getValue() + \" Damage: \"\n                        + ((Potion) item).getEffect());\n            }\n        }\n\n    }\n\n    T mostValuableItem() {\n        T mostV = null;\n        int max = 0;\n        for (T item : liste) {\n            if (item.getValue() > max) {\n                mostV = item;\n            }\n        }\n        return mostV;\n\n    }\n\n    T findItemByName(String name) {\n        for (T item : liste) {\n            if (item.getName() == name) {\n                return item;\n            }\n        }\n        return null;\n\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> lst = new ArrayList<T>();\n        for (T item : liste) {\n            if (item.getValue() > value) {\n                lst.add(item);\n            }\n        }\n        return lst;\n\n    }\n\n    int getTotalValue() {\n        int totalV = 0;\n        for (T item : liste) {\n            totalV += item.getValue();\n        }\n        return totalV;\n\n    }\n\n    List<T> filterByType(Class<?> type) {\n        List<T> lst = new ArrayList<T>();\n        for (T item : liste) {\n            if (item.getClass() == type) {\n                lst.add(item);\n            }\n        }\n        return lst;\n    }\n\n    int getTotalWeaponDamage() {\n        int totalD = 0;\n        for (T item : liste) {\n            if (item instanceof Weapon) {\n                totalD += ((Weapon) item).getDamage();\n            }\n        }\n        return totalD;\n    }\n\n    void sortByValue() {\n        for (int i = 0; i < liste.size(); i++) {\n            for (int j = 0; j < liste.size() - 1; j++) {\n                if (liste.get(j).getValue() < liste.get(j + 1).getValue()) {\n                    T temp = liste.get(j);\n                    liste.set(j, liste.get(j + 1));\n                    liste.set(j + 1, temp);\n                }\n\n            }\n        }\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item x = inventory.mostValuableItem();\n        if (x instanceof Weapon) {\n            System.out.println(\n                    \"Name: \" + x.getName() + \" Value: \" + x.getValue() + \" Damage: \" + ((Weapon) x).getDamage());\n        } else if (x instanceof Armor) {\n            System.out.println(\n                    \"Name: \" + x.getName() + \" Value: \" + x.getValue() + \" Damage: \" + ((Armor) x).getDefense());\n        } else if (x instanceof Potion) {\n            System.out.println(\n                    \"Name: \" + x.getName() + \" Value: \" + x.getValue() + \" Damage: \" + ((Potion) x).getEffect());\n        }\n\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n\n        for (int i = 0; i < source.liste.size(); i++) {\n            destination.liste.add(source.liste.get(i));\n        }\n    }\n\n}"
    },
    {
      "id": "6914659",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\npublic class Inventory<T extends Item>{\n    public List<T> items = new ArrayList<>();\n    public void addItem(T i){ //envntere istenilen esyayi eklemeli\n        items.add(i);\n    }\n    public void removeItem(T i){ //envanterden istenilen esyayi silmeli\n        items.remove(i);\n    }\n    public void printInventory(){ //envanteri basmali\n        for (T i: items){\n            System.out.println(i);\n        }\n    }\n    public T mostValuableItem(){ //en degerli esyayi donmeli\n        if(items.isEmpty()){ \n            return null;\n        }\n        T mostValIt = items.get(0);\n        for(T i: items){\n            if(i.getValue() > mostValIt.getValue()){\n                mostValIt = i;\n            }\n        }\n        return mostValIt;\n    }\n    public T findItemByName(String name){ //verilen isme karsilik gelen esyayi doner, eger yoksa null don\n        for(T i: items){\n            if(i.getName().equals(name)){\n                return i;\n            }\n        }\n        return null;\n    }\n    public List<T> findItemsByValue(int value){ //verilen degerden daha degerli esyalarin listesi\n        List<T> itms = new ArrayList<>();\n        for(T i: items){\n            if(i.getValue() > value){\n                itms.add(i);\n            }\n        }\n        return itms;\n    }\n    public int getTotalValue(){ //weapon classinin toplam hasari\n        int total_damage = 0;\n        for (T i: items){\n            total_damage += i.getValue();\n        }\n        return total_damage;\n    }\n    public List<T> filterByType(Class<?> type){ //istenilen sinifa ait ogeler, sinifin ne oldugunu bilmedigimiz icin ? wildcard kullandim\n        List<T> ogeler = new ArrayList<>();\n        for (T i: items){\n            if(i.getClass().equals(type)){\n                ogeler.add(i);\n            }\n        }\n        return ogeler;\n    }\n    public int getTotalWeaponDamage(){ //Weapon classina ait olan nesnelerin toplam hasarini don\n        int total_damage = 0;\n        for(T i: items){\n            if (i instanceof Weapon) {\n                total_damage += ((Weapon)i).getDamage();\n            }\n        }\n        return total_damage;\n    }\n    public void sortByValue(){ //degeri azalan seklinde envanteri sirala\n        for(int i=0 ; i<items.size()-1 ; i++){\n            for(int j=i+1 ; j<items.size() ; j++){\n                if(items.get(i).getValue() < items.get(j).getValue()){ \n                    T temp = items.get(i);\n                    items.set(i, items.get(j));\n                    items.set(j, temp);\n                }\n            }\n        }\n    }\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){ //verilen envanterdem en degerli esyayi ekrana bas\n        Item i = inventory.mostValuableItem();\n        if(i != null){\n            System.out.println(\"Most valuable item: \" + i);\n        }\n    }\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){ //Verilen hedef envantere zirhi tasi\n        List<Armor> move = new ArrayList<>();\n        for(Item i: source.items){\n            if(i instanceof Armor){ //ekle\n                move.add((Armor)i);\n            }\n        }\n        for(Armor a: move){ //tasi\n            destination.addItem(a);\n            source.removeItem(a);\n        }\n    }\n}",
      "Weapon.java": "public class Weapon implements Item{\n    private String name;\n    private int value;\n    private int damage;\n    public Weapon(String name, int value, int damage){\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n    @Override\n    public String getName(){\n        return name;\n    }\n    @Override\n    public int getValue(){\n        return value;\n    }\n    public int getDamage(){\n        return damage;\n    }\n    @Override\n    public String toString(){\n        return \"Weapon{\" + \"name='\" + name + '\\'' + \", value=\" + value + \", damage=\" + damage + '}';\n    }\n}\n",
      "Item.java": "public interface Item{\n    String getName();\n    int getValue();\n}",
      "Armor.java": "public class Armor implements Item{\n    private String name;\n    private int value;\n    private int defense;\n    public Armor(String name, int value, int defense){\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n    @Override\n    public String getName(){\n        return name;\n    }\n    @Override\n    public int getValue(){\n        return value;\n    }\n    public int getDefense(){\n        return defense;\n    }\n    @Override\n    public String toString(){\n        return \"Armor{\" + \"name='\" + name + '\\'' + \", value=\" + value + \", defense=\" + defense + '}';\n    }\n}\n",
      "Potion.java": "public class Potion implements Item{\n    private String name;\n    private int value;\n    private String effect;\n\n    public Potion(String name, int value, String effect){\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n    @Override\n    public String getName(){\n        return name;\n    }\n    @Override\n    public int getValue(){\n        return value;\n    }\n    public String getEffect(){\n        return effect;\n    }\n    @Override\n    public String toString(){\n        return \"Potion{\" + \"name='\" + name + '\\'' + \", value=\" + value + \", effect='\" + effect + '\\'' + '}';\n    }\n}\n",
      "Driver.java": "public class Driver{\n    /*public static void main(String[] args){\n        Class<Weapon> weaponClass = Weapon.class;\n        System.out.println(\"Sınıf adı: \" + weaponClass.getName()); // Çıktı: Weapon\n        \n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName()); // Çıktı: Weapon\n    }*/   \n    public static void main(String[] args){\n        Inventory<Weapon>weaponInventory = new Inventory<>();\n        weaponInventory.addItem(new Weapon(\"Excalibur\", 1000, 100));\n        weaponInventory.addItem(new Weapon(\"Excalibur2\", 300, 50));\n        Inventory<Item>generalInventory = new Inventory<>();\n        generalInventory.addItem(new Weapon(\"Weapon1\", 400, 85));\n        generalInventory.addItem(new Weapon(\"Weapon2\", 500, 80));\n        System.out.println(\"Weapon Inventory:\");\n        weaponInventory.printInventory();\n        System.out.println(\"Total weapon damage: \" + weaponInventory.getTotalWeaponDamage());\n        System.out.println(\"Most valuable weapon: \" + weaponInventory.mostValuableItem());\n        System.out.println(\"Verilen isme karsilik gelip gelmedigini kontrol et: \" + weaponInventory.findItemByName(\"Excalibur\"));\n        System.out.println(\"Verilen degerden daha degerli esyalar: \" + weaponInventory.findItemsByValue(30));\n        System.out.println(\"Toplam deger: \" + weaponInventory.getTotalValue());\n        System.out.println(\"Toplam weapon hasari: \" + weaponInventory.getTotalWeaponDamage());\n        System.out.println();\n        System.out.println(\"General Inventory:\");\n        generalInventory.printInventory();\n        System.out.println();\n\n        Class<Weapon> weaponClass = Weapon.class;\n        System.out.println(\"Sınıf adı: \" + weaponClass.getName()); // Çıktı: Weapon\n        \n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName()); // Çıktı: Weapon\n    }    \n}\n"
    },
    {
      "id": "4810237",
      "Inventory.java": "package lab4;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n\tArrayList<T> envanter=new ArrayList<>();\n\tvoid addItem(T item) {\n\t\tenvanter.add(item);\n\t}\n\tvoid removeItem(T item) {\n\t\tenvanter.remove(item);\n\t}\n\tvoid printInventory() {\n\t\tfor(T item:envanter) {\n\t\t\tSystem.out.println(item);\n\t\t}\n\t}\n\tT mostValuableItem() {\n\t\tT mostvaluableitem=envanter.get(0);\n\t\tfor(T item:envanter) {\n\t\t\tif(item.getValue()>mostvaluableitem.getValue()) {\n\t\t\t\tmostvaluableitem=item;\n\t\t\t}\n\t\t}\n\t\treturn mostvaluableitem;\n\t}\n\tT findItemByName(String name) {\n\t\tint sayac=0;\n\t\tfor(T item:envanter) {\n\t\t\tif(item.getName().equals(name)) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tList<T> findItemsByValue(int value){\n\t\tArrayList<T>list=new ArrayList<>();\n\t\tfor(T item:envanter) {\n\t\t\tif(item.getValue()>value) {\n\t\t\t\tlist.add(item);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tint getTotalValue() {\n\t\tint total_value=0;\n\t\tfor(T item:envanter) {\n\t\t\ttotal_value+=item.getValue();\n\t\t}\n\t\treturn total_value;\n\t}\n\tList<T> filterByType(Class<?> type){\n\t\tArrayList<T>list=new ArrayList<>();\n\t\tfor(T item:envanter) {\n\t\t\tClass<?> clazz = item.getClass(); \n\t\t\tif(clazz.getName().equals(type)) {\n\t\t\t\tlist.add(item);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\t/*int getTotalWeaponDamage() {\n\t\tint total_damage=0;\n\t\tfor(T item:envanter) {\n\t\t\tClass<?> clazz = item.getClass(); \n\t\t\tif(clazz.getName().equals(\"Weapon\")) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}*/\n\tvoid sortByValue() {\n\t\tfor(T item:envanter) {\n\t\t\tfor(T item2:envanter) {\n\t\t\t\tif(item2.getValue()>item.getValue()) {\n\t\t\t\t\tint indexof2=envanter.indexOf(item2);\n\t\t\t\t\tint indexof=envanter.indexOf(item);\n\t\t\t\t\tenvanter.remove(item);\n\t\t\t\t\tenvanter.remove(item2);\n\t\t\t\t\tenvanter.add(indexof, item2);\n\t\t\t\t\tenvanter.add(indexof2, item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void printMostValuableItem(Inventory<? extends Item>inventory){\n\t\tSystem.out.println(inventory.mostValuableItem());\n\t}\n\tpublic static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source) {\n\t\tfor(Armor item:source.envanter) {\n\t\t\tdestination.envanter.add(item);\n\t\t}\n\t}\n\t\n}\n",
      "Weapon.java": "package lab4;\n\npublic class Weapon implements Item{\n\tprivate int value;\n\tprivate String name;\n\tprivate int damage;\n\t\n\tpublic String getName() {\n\t\t\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\t// TODO Auto-generated method stub\n\t\treturn value;\n\t}\n\t\n\n\tpublic int getDamage() {\n\t\treturn damage;\n\t}\n\n\n\tpublic Weapon(int value, String name, int damage) {\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t\tthis.damage = damage;\n\t}\n\t\n\t\n}\n",
      "Item.java": "package lab4;\n\npublic interface Item {\n\tpublic String getName();\n\tpublic int getValue();\n\t\n}\n",
      "Armor.java": "package lab4;\n\npublic class Armor implements Item{\n\tprivate int value;\n\tprivate String name;\n\tprivate int defense;\n\t@Override\n\tpublic String getName() {\n\t\t// TODO Auto-generated method stub\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\t// TODO Auto-generated method stub\n\t\treturn value;\n\t}\n\tpublic Armor(int value, String name, int defense) {\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t\tthis.defense = defense;\n\t}\n\n}\n",
      "Potion.java": "package lab4;\n\npublic class Potion implements Item{\n\tprivate int value;\n\tprivate String name;\n\tprivate String effect;\n\t@Override\n\tpublic String getName() {\n\t\t// TODO Auto-generated method stub\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\t// TODO Auto-generated method stub\n\t\treturn value;\n\t}\n\n\tpublic Potion(int value, String name, String effect) {\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t\tthis.effect = effect;\n\t}\n\t\n\n}\n",
      "Driver.java": "package lab4;\n\npublic class Driver {\n\n\tpublic static void main(String[] args) {\n\t\tInventory<Weapon>inventory1=new Inventory<>();\n\t\tInventory<Item>inventory2=new Inventory<>();\n\t\tArmor armor=new Armor(100,\"bir\",200);\n\t\tPotion potion=new Potion(100,\"name\",\"effect\");\n\t\tWeapon weapon=new Weapon(200,\"weapon\",300);\n\t\tinventory2.addItem(armor);\n\t\tinventory2.addItem(potion);\n\t\tinventory1.addItem(weapon);\n\t\tSystem.out.println(inventory1.envanter.get(0));\n\t\t//inventory2.removeItem(potion);\n\t\tSystem.out.println(inventory2.envanter.get(0));\n\t\tinventory1.printInventory();\n\t\tSystem.out.println(inventory2.mostValuableItem());\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t}\n\n}\n"
    },
    {
      "id": "5361565",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> items=new ArrayList<>();\n    void addItem(T item){\n        items.add(item);\n    }\n    void removeItem(T item){\n        items.remove(item);\n    }\n    void printInventory(){\n        for(Item f:items){\n            System.out.println(f);\n        }\n    }\n    T mostValuableItem(){\n        T p=items.get(0);\n        for(T f:items){\n            if(f.getValue()>p.getValue()){\n                p=f;\n            }\n        }\n        return p;\n    }\n    T findItemByName(String name){\n         T f=null;\n        for(T p: items){\n            if(p.getName().equals(name)){\n                f=p;\n            }\n        }\n        return f;\n    }\n    List<T> findItemsByValue(int value){\n        List<T> over=new ArrayList<>();\n        for(T p:items){\n            if(p.getValue()>value){\n                over.add(p);\n            }\n        }\n        return over;\n    }\n    int getTotalValue(){\n        int value=0;\n        for(T p: items){\n            value+=p.getValue(); \n        }\n        return value;\n    }\n    List<T> filterbytype(Class<?> type){\n        List<T> filtered=new ArrayList<>();\n        for(T p: items){\n            if(p.getClass().equals(type))\n            filtered.add(p);\n        }\n        return filtered;\n    }\n    int getTotalWeaponDamage(){\n        int v=0;\n        for(T p: items){\n            if(p instanceof Weapon){\n                v+=((Weapon) p).damage;\n            }\n        }\n        return v;\n    }\n    void sortByValue(){\n        items.sort((a,b)-> Integer.compare(a.getValue(), b.getValue()));\n    }\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        Item s=new Armour(null, 0, 0);\n        for(Item p:inventory.items){\n            if(p.getValue()>s.getValue()){\n                s=p;\n            }\n        }\n        System.out.println(s);\n    } \n    public static void transferArmour(Inventory<? super Armour> destination,Inventory<? super Armour> source){\n        for(int a=0; a<source.items.size();a++){\n            Armour p=(Armour)source.items.get(a);\n            destination.items.add(p);\n        }\n\n    }\n\n}\n",
      "Weapon.java": "class Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n    public Weapon(String name,int value,int damage) {\n        this.name=name;\n        this.damage=damage;\n        this.value=value;\n    }\n    @Override\n    public String getName(){\n        return name;\n    }\n    @Override\n    public int getValue(){\n        return value;\n    }\n    @Override\n    public String toString(){\n        return name + \" \" + value + \" \" +damage;\n    }\n}\n",
      "Item.java": " interface Item {\n    int getValue();\n    String getName();\n\n\n    \n}\n",
      "Potion.java": "public class Potion implements Item {\n    String name;\n    int value;\n    String effect;\n    public Potion(String name,int value,String effect){\n        this.name=name;\n        this.value=value;\n        this.effect=effect;\n    }\n    @Override\n    public String getName(){\n        return name;\n    }\n    @Override\n    public int getValue(){\n        return value;\n    }\n    @Override\n    public String toString(){\n        return name + \" \" + value + \" \" + effect;\n    }\n\n}\n",
      "Armour.java": "public class Armour implements Item {\n    int defense;\n    String name;\n    int value;\n    public Armour(String name,int value,int defense){\n        this.name=name;\n        this.value=value;\n        this.defense=defense;\n    }\n    @Override\n    public String getName(){\n        return name;\n    }\n    @Override\n    public int getValue(){\n        return value;\n    }\n    @Override\n    public String toString(){\n        return name + \" \" + value + \" \" +defense;\n    }\n\n}\n",
      "Driver.java": "import java.util.List;\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory<Weapon> w=new Inventory<>();\n        Weapon w1=new Weapon(\"w1\", 2, 4);\n        Weapon w2=new Weapon(\"w2\", 1, 7);\n        Weapon w3=new Weapon(\"w3\", 7, 1);\n        Weapon w4=new Weapon(\"w4\", 3, 8);\n        w.addItem(w1);\n        w.addItem(w2);\n        w.addItem(w3);\n        w.addItem(w4);\n        w.removeItem(w3);\n        w.printInventory();\n        System.out.println(\" Most valueable: \" +w.mostValuableItem());//bak buna\n        System.out.println(\"Item found by name: \"+w.findItemByName(\"w2\"));\n        List<Weapon> p=w.findItemsByValue(2);\n        for(Weapon t:p){\n            System.out.println(t);\n        }\n        System.out.println(w.getTotalValue());\n        System.out.println(\"Total weapon damage:\" +w.getTotalWeaponDamage());\n        System.out.println(\"Sorted list:\");\n        w.sortByValue();\n        w.printInventory();\n        System.out.println(\"Printing most valuable item\");\n        Inventory.printMostValuableItem(w);\n        System.out.println(\"\");\n        System.out.println(\"\");\n        Inventory<Item> i=new Inventory<>();\n        Item wi1=new Weapon(\"wi1\", 1, 4);\n        Item wi2=new Weapon(\"wi2\", 1, 4);\n        Item ai1=new Armour(\"ai1\", 7, 6);\n        Item pi1=new Potion(\"pi1\", 3, \"effect1\");\n        Item pi2=new Potion(\"pi2\", 6, \"effect2\");\n        i.addItem(wi1);\n        i.addItem(wi2);\n        i.addItem(ai1);\n        i.addItem(pi1);\n        i.addItem(pi2);\n        i.removeItem(pi1);\n        i.printInventory();\n        System.out.println(\" Most valueable: \" +i.mostValuableItem());\n        System.out.println(\"Item found by name: \"+i.findItemByName(\"ai1\"));\n        List<Item> o=i.findItemsByValue(3);\n        for(Item t: o){\n            System.out.println(o);\n        }\n        System.out.println(\"Total:\" +i.getTotalValue());\n        List filt=i.filterbytype(wi1.getClass());\n        for(int a=0; a<filt.size() ;a++){\n            System.out.println(filt.get(a));\n        }\n        System.out.println(\"Total weapon damage:\" +i.getTotalWeaponDamage());\n        i.sortByValue();\n        System.out.println(\"Sorted list:\");\n        i.printInventory();\n        System.out.println(\"Printing most valuable item\");\n        Inventory.printMostValuableItem(i);\n        System.out.println(\"\");\n        System.out.println(\"\");\n        Inventory<Armour> source=new Inventory<>();\n        Armour a1=new Armour(\"a1\", 2, 3);\n        Armour a2=new Armour(\"a2\", 4, 6);\n        Armour a3=new Armour(\"a3\", 7, 8);\n        Armour a4=new Armour(\"a4\", 3, 5);\n        Armour a5=new Armour(\"a5\", 7, 6);\n        Armour a6=new Armour(\"a6\", 4, 9);\n        source.addItem(a1);\n        source.addItem(a2);\n        source.addItem(a3);\n        Inventory<Armour> dest=new Inventory<>();\n       \n        dest.addItem(a4);\n        dest.addItem(a5);\n        dest.addItem(a6);  for(int a=0 ;a<dest.items.size(); a++){\n            System.out.println(dest.items.get(a));\n        }       \n        \n        System.out.println(\"Transferring armour\");\n        Inventory.transferArmour(dest,source);\n        for(int a=0 ;a<dest.items.size(); a++){\n            System.out.println(dest.items.get(a));\n        }\n    }\n\n}\n"
    },
    {
      "id": "4114373",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T> {\n\n    ArrayList<T> items = new ArrayList<>();\n\n    void addItem(T item){\n        items.add(item);\n    }\n\n    void removeItem(T item){\n        items.remove(item);\n    }\n\n    void printInventory(){\n        for(int i = 0; i < items.size(); i++){\n            System.out.println(items.get(i));\n        }\n    }\n\n    T mostValuableItem(){\n        T most = items.get(0);\n        for(int i = 1; i < items.size(); i++){\n            Item item = (Item)items.get(i);\n            if(item.getValue()>((Item)most).getValue()){\n                most = items.get(i);\n            }\n        }\n        return most;\n    }\n\n    T findItemByName(String name){\n        T foundedItem = null;\n        for(int i = 0; i < items.size(); i++){\n\n            Item item = (Item)items.get(i);\n\n            if(item.getName().equals(name)){\n                foundedItem = items.get(i);\n            }\n        }\n        return foundedItem;\n    }\n\n    List<T> findItemsByValue(int value){\n        ArrayList<T> list = new ArrayList<>();\n\n        for(int i = 0; i < items.size(); i++){\n\n            Item item = (Item)items.get(i);\n\n            if(item.getValue()>value){\n                list.add(items.get(i));\n            }\n        }\n\n        return list;\n        \n    }\n\n    int getTotalValue(){\n        int totalValue = 0;\n\n        for(int i = 0; i<items.size();i++){\n\n            Item item = (Item)items.get(i);\n\n            totalValue += item.getValue();\n        }\n\n        return totalValue;\n    }\n\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    List<T> filterByType(Class<?> type){\n        ArrayList<T> list = new ArrayList<>();\n\n        Class<?> class1 = type;\n\n        for(int i = 0; i<items.size(); i++){\n            if(items.get(i).getClass().equals(class1)){\n                list.add(items.get(i));\n            }\n        }\n\n        return list;\n    }\n\n    int getTotalWeaponDamage(){\n        Class<Weapon> weaponClass = Weapon.class;\n        int totalWeaponDamage = 0;\n\n        for(int i = 0; i < items.size(); i++){\n            if(items.get(i).getClass() == weaponClass){\n                Weapon weapon = (Weapon)items.get(i);\n                totalWeaponDamage += weapon.getDamage();\n            }\n        }\n\n        return totalWeaponDamage;\n    }\n\n    void sortByValue(){\n\n        for(int i = 0; i < items.size(); i++){\n            for(int j = i; j < items.size(); j++){\n\n                Item item1 = (Item)items.get(i);\n                Item item2 = (Item)items.get(j);\n\n                if(item1.getValue()<item2.getValue()){\n                    T temp = items.get(i);\n                    items.set(i, items.get(j));\n                    items.set(j, temp);\n                }\n            }\n        }\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){\n\n        for(int i = 0; i<source.items.size(); i++){\n            destination.addItem(source.items.get(i));\n        }\n        \n    }\n\n\n}\n",
      "Weapon.java": "public class Weapon implements Item{\n    int damage;\n    String name;\n    int value;\n\n    public Weapon(String name, int value, int damage){\n        this.damage = damage;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public int getDamage(){\n        return damage;\n    }\n    \n    public String toString(){\n        return name + \" \" + value + \" \" + damage;\n    }\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n}",
      "Armor.java": "public class Armor implements Item{\n    int defense;\n    int value;\n    String name;\n\n    public Armor(String name, int value, int defense){\n        this.defense = defense;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public int getDefense(){\n        return defense;\n    }\n\n    public String toString(){\n        return name + \" \" + value + \" \" + defense;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item{\n\n    String effect;\n    int value;\n    String name;\n\n    public Potion(String name, int value, String effect){\n        this.effect = effect;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public String getEffect(){\n        return effect;\n    }\n\n    public String toString(){\n        return name + \" \" + value + \" \" + effect;\n    }\n}\n",
      "Driver.java": "import java.util.List;\n\npublic class Driver {\n\n    public static void main(String[] args){\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n\n        weaponInventory.addItem(new Weapon(\"Sniper Rifle\", 700, 70));\n        weaponInventory.addItem(new Weapon(\"Pistol\", 200, 20));\n        weaponInventory.addItem(new Weapon(\"Rocket Launcher\", 1000, 100));\n        weaponInventory.addItem(new Weapon(\"Rifle\", 400, 40));\n\n        System.out.println(\"Total weapon damage: \");\n        int totalWeaponDamage = weaponInventory.getTotalWeaponDamage();\n        System.out.println(totalWeaponDamage);\n\n        System.out.println();\n\n        Inventory<Item> itemInventory = new Inventory<>();\n\n        itemInventory.addItem(new Potion(\"Speed Potion\", 500, \"Gives Speed\"));\n        Item goldenChestplate = new Armor(\"Golden Chestplate\", 250, 25);\n        itemInventory.addItem(goldenChestplate);\n        itemInventory.addItem(new Weapon(\"Diamond Sword\", 1000, 100));\n        itemInventory.addItem(new Armor(\"Iron Boots\", 300, 30));\n        itemInventory.addItem(new Potion(\"Invisibility Potion\", 2000, \"Makes You Invisible\"));\n        itemInventory.addItem(new Armor(\"Diamond Leggings\", 600, 60));\n        itemInventory.addItem(new Weapon(\"Iron Sword\", 750, 75));\n        itemInventory.removeItem(goldenChestplate);\n\n        System.out.println(\"Item Inventory: \");\n        itemInventory.printInventory();\n\n        System.out.println();\n\n        System.out.println(\"Most Valuable item of Item Inventory: \");\n        System.out.println(itemInventory.mostValuableItem());\n\n        System.out.println();\n\n        System.out.println(\"Armor 'Iron Boots' in Item Inventory\");\n        System.out.println(itemInventory.findItemByName(\"Iron Boots\"));\n\n        System.out.println();\n\n        System.out.println(\"Items that have more value than 400: \");\n        List<Item> valuableItems = itemInventory.findItemsByValue(400);\n        for(int i = 0; i<valuableItems.size();i++){\n            System.out.println(valuableItems.get(i));\n        }\n\n        System.out.println();\n\n        System.out.println(\"Total value of Item Inventory: \");\n        System.out.println(itemInventory.getTotalValue());\n\n        System.out.println();\n\n        System.out.println(\"Just Weapon items in Item Inventory: \");\n        Class<Weapon> weaponClass = Weapon.class;\n        List<Item> weapons = itemInventory.filterByType(weaponClass);\n        for(int i = 0; i<weapons.size();i++){\n            System.out.println(weapons.get(i));\n        }\n\n        System.out.println();\n\n        System.out.println(\"Just Armor items in Item Inventory: \");\n        Class<Armor> armorClass = Armor.class;\n        List<Item> armors = itemInventory.filterByType(armorClass);\n        for(int i = 0; i<armors.size();i++){\n            System.out.println(armors.get(i));\n        }\n\n        System.out.println();\n\n        itemInventory.sortByValue();\n        System.out.println(\"Sorted Inventory: \");\n        itemInventory.printInventory();\n\n        System.out.println();\n\n        System.out.println(\"Most valuable item in Item Inventory: \");\n        Inventory.printMostValuableItem(itemInventory);\n        \n        System.out.println();\n        \n        System.out.println(\"Most valuable item in Weapon Inventory: \");\n        Inventory.printMostValuableItem(weaponInventory);\n\n        System.out.println();\n\n        Inventory<Armor> armorInventory = new Inventory<>();\n\n        armorInventory.addItem(new Armor(\"Emerald Boots\", 1000, 100));\n        armorInventory.addItem(new Armor(\"Emerald Leggings\", 1000, 100));\n        armorInventory.addItem(new Armor(\"Emerald Chestplate\", 1000, 100));\n        \n        Inventory.transferArmor(itemInventory, armorInventory);\n\n        System.out.println(\"Item Inventory with Armor Inventory armors: \");\n        itemInventory.printInventory();\n\n\n    }\n\n}\n"
    },
    {
      "id": "8862077",
      "Inventory.java": "import java.util.ArrayList;\n\n\npublic class Inventory <T extends Item>{\n\n\t\n\tprivate ArrayList<T> itemList = new ArrayList<>();\n\n\t\n    public void addItem(T item) {\n        itemList.add(item);\n    }\n\n\n    \n    public void removeItem(T item) {\n        itemList.remove(item);\n    }\n\n    \n    \n    \n    public void printInventory() {\n        for (T item : itemList) {\n            System.out.println(item);\n        }\n    }\n\n    \n    \n    \n    \n    \n    public T mostValuableItem() {\n    \t\n        if (itemList.isEmpty()) \n        \treturn null;\n        \n        T endegerli = itemList.get(0);\n        \n        for (T item : itemList) {\n        \t\n            if (item.getValue() > endegerli.getValue()) {\n                endegerli = item;\n           } }\n        return endegerli;\n    }\n\n    \n    \n    \n    public T findItemByName(String name) {\n    \t\n        for (T item : itemList) {\n            if (item.getName().equals(name)) {\n                return item;\n            }}\n        return null;\n    }\n\n    \n    public ArrayList<T> finditemListByValue(int value) {\n    \t\n        ArrayList<T> result = new ArrayList<>();\n        \n        for (T item : itemList) {\n            if (item.getValue() > value) {\n                result.add(item);\n            }}\n        return result;\n    }\n\n    \n    \n    \n    \n    \n    \n    public int getTotalValue() {\n        int total = 0;\n        \n        for (T item : itemList) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n    \n    \n    \n    \n    public ArrayList<T> filterByType(Class<?> type) {\n    \t\n    \tArrayList<T> filtered = new ArrayList<>();\n    \t\n        for (T item : itemList) {\n            if ((type == Weapon.class && item instanceof Weapon) ||(type == Armor.class && item instanceof Armor) ||(type == Potion.class && item instanceof Potion)) {\n                filtered.add(item);\n            }\n        }\n        return filtered;\n\n    }\n    \n    \n    \n\n    \n    public int getTotalWeaponDamage() {\n    \t\n        int total=0;\n        \n        for (T item : itemList) {\n            if (item instanceof Weapon) {\n                total+= ((Weapon)item).getDamage();\n            }}\n        \n        return total;\n    }\n    \n    \n    \n    \n    \n    public void sortByValue() {\n        for (int i = 0; i < itemList.size() - 1; i++) {\n            for (int j = i + 1; j < itemList.size(); j++) {\n                if (itemList.get(i).getValue() < itemList.get(j).getValue()) {\n                    T temp = itemList.get(i);\n                    itemList.set(i, itemList.get(j));\n                    itemList.set(j, temp);\n                }\n            }\n        }\n    }\n\n    \n    \n    \n    \n    \n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(\"Most Valuable Item: \" + inventory.mostValuableItem());\n    }\n\n    \n    \n    \n    \n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        ArrayList<Armor> armors = source.filterByType(Armor.class);\n        for (Armor armor : armors) {\n            destination.addItem(armor);\n            source.removeItem(armor);\n        }\n    }\n    \n    \n    \n}\n",
      "Weapon.java": "\npublic class Weapon implements Item{\n\t\n\t\n\tprivate String name;\n    private int value;\n    private int damage;\n\n    \n    \n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    \n    public int getDamage() {\n        return damage;\n    }\n\n    \n    \n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    @Override\n    public String toString() {\n        return \"Weapon Name=\" + name +\"  Value=\" + value + \"  Damage=\" + damage;\n    }\n    \n}\n",
      "Item.java": "\npublic interface Item {\n\tString getName();\n\tint getValue();\n}\n",
      "Armor.java": "\npublic class Armor implements Item{\n\t\n\t private String name;\n\t  private int value;\n\t  private int defense;\n\n\t    public Armor(String name, int value, int defense) {\n\t        this.name = name;\n\t        this.value = value;\n\t        this.defense = defense;\n\t    }\n\n\t    \n\t    \n\t    public int getDefense() {\n\t        return defense;\n\t    }\n\n\t    \n\t    @Override\n\t    public String getName() {\n\t        return name;\n\t    }\n\n\t    @Override\n\t    public int getValue() {\n\t        return value;\n\t    }\n\n\t\t@Override\n\t    public String toString() {\n\t        return \"Armor Name= \" + name + \"  Value=\" + value + \"  Defense=\" + defense;\n\t    }\n\n\t    \n}\n",
      "Potion.java": "\npublic class Potion implements Item{\n\t\n\n\tprivate String name;\n    private int value;\n    private String effect;\n\n    \n    \n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    \n    \n    public String getEffect() {\n        return effect;\n    }\n\n    \n    \n    \n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Potion Name= \" + name + \"  Value=\" + value + \"  Effect=\" + effect;\n    }}\n",
      "Driver.java": "\npublic class Driver {\n\t\n\t    public static void main(String[] args) {\n\t    \t\n\t    \t  Inventory<Item> inventory = new Inventory<>();\n\t    \t  \n\t          inventory.addItem(new Weapon(\"W1\", 1000, 100));\n\t          inventory.addItem(new Weapon(\"W2\", 1200, 150));\n\t          inventory.addItem(new Armor(\"A1\", 800, 80));\n\t          inventory.addItem(new Armor(\"A2\", 1400, 120));\n\t          inventory.addItem(new Potion(\"P1\", 700, \"Can İksiri\"));\n\n\t          \n\t          System.out.println(\"Envanter:\");\n\t          inventory.printInventory();\n\n\t          \n\t          \n\t          System.out.println(\"\\nEn Değerli: \" + inventory.mostValuableItem());\n\n\t          \n\t          System.out.println(\"\\nDeğeri 800'den büyük itemlar:\");\n\t          for (Item item : inventory.finditemListByValue(800)) {\n\t              System.out.println(item);\n\t          }\n\n\t          \n\t          \n\t          System.out.println(\"\\nToplam Envanter Değeri: \" + inventory.getTotalValue());\n\n\t          \n\t          \n\t          System.out.println(\"\\nTüm Silahların Toplam Hasarı: \" + inventory.getTotalWeaponDamage());\n\t          System.out.println(\" \");\n\t          \n\t          \n\t          inventory.sortByValue();\n\t          System.out.println(\"Sıralanmış Envanter:\");\n\t          inventory.printInventory();\n\n\t          \n\t          System.out.println(\"\\nA1 isimli öğe bulundu: \" + inventory.findItemByName(\"A1\"));\n\t      }\n}\n"
    },
    {
      "id": "2112376",
      "Inventory.java": "import java.util.*;\n\npublic class Inventory<T extends Item> {\n    private List<T> items;\n\n    public Inventory() {\n        items = new ArrayList<>();\n    }\n    public void addItem(T item) {\n        items.add(item);\n    }\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item);\n        }\n    }\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n    public int getTotalWeaponDamage() {\n        int total = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                Weapon w = (Weapon) item;\n                total += w.getDamage();\n            }\n        }\n        return total;\n    }\n\n    public T mostValuableItem() {\n        if (items.isEmpty()) \n        return null;\n        else {\n            T max = items.get(0);\n            for (T item : items) {\n                if (item.getValue() > max.getValue()) {\n                max = item;\n                 }\n             }\n        return max;\n        }\n    }\n\n    public T findItemByName(String name) {\n        for(T item : items) {\n            if (item.getName().equals(name))\n            return item;\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> moreValuable = new ArrayList<>();\n        for (T item : items) {\n            if (item.getValue() == value) {\n                moreValuable.add(item);\n            }\n        }\n        return moreValuable;\n    }\n\n    public <R extends Item> List<R> filterByType(Class<R> type) {\n        List<R> result = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                result.add((R) item);\n            }\n        }\n        return result;\n    }\n    public void sortByValue() {\n        for (int i = 0; i < items.size() - 1; i++) {\n            for (int j = i + 1; j < items.size(); j++) {\n            \n                if (items.get(i).getValue() > items.get(j).getValue()) {\n            T temp = items.get(i);\n            items.set(i, items.get(j));\n            items.set(j, temp);\n            }\n            }\n        }\n    }\n    public static void printMostValuableItem(Inventory<? extends Item> envanter) {\n        Item vItem = envanter.mostValuableItem();\n        if (vItem != null)\n            System.out.println(\"En değerli eşya: \" + vItem);\n        else\n            System.out.println(\"Eşya bulunamadı\");\n       \n    }\n    public static <T extends Armor> void transferArmor(Inventory<? super Armor> next, Inventory<T> prev) {\n        for (int i = 0; i < prev.items.size(); i++) {\n            Armor armor = prev.items.get(i);\n            next.addItem(armor);\n        }\n    }\n}",
      "Weapon.java": "\n\npublic class Weapon implements Item {\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n}",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n}",
      "Armor.java": "public class Armor implements Item {\n    \n    private String name;\n    private int value;\n    private int defense;\n    \n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getValue() {\n        return value;\n    }\n    \n}",
      "Potion.java": "public class Potion implements Item {\n    private String name;\n    private int value;\n    private String effect;\n    \n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getValue() {\n        return value;\n    }\n    \n}",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        Class<Weapon> weaponClass = Weapon.class; \n        System.out.println(\"Sınıf adı: \" + weaponClass.getName());  // Çıktı: Weapon \n         \n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100); \n        Class<?> clazz = sword.getClass(); \n        System.out.println(clazz.getName()); // Çıktı: Weapon \n    }\n}"
    },
    {
      "id": "2179244",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.*;\n\nclass Inventory <T extends Item> {\n    private List<T> items= new ArrayList<>();\n    public void addItem(T item){\n        items.add(item);\n    }\n    public void removeItem(T item){\n        items.remove(item);\n    }\n    public void printInventory(){\n        for(T item : items){\n            System.out.println(item);\n        }\n    }\n    public T mostValuableItem(){\n        T mostValuable= items.get(0);\n        for(T item: items){\n            if(item.getValue() > mostValuable.getValue()){\n                mostValuable=item;\n            }\n        }\n        return mostValuable;\n    }\n    \n     public T findItemByName(String name){\n        for(T item: items){\n            if(item.getName().equals(name)){\n                return item;\n            }\n        }\n        return null;\n    }\n    public List<T> findItemsByValue(int value){\n        List<T> itemsWithValue= new ArrayList<>();\n        for(T item: items){\n            if(item.getValue()<value){\n                itemsWithValue.add(item);\n            }\n        }\n        return itemsWithValue;\n    }\n    public int getTotalValue(){\n        int totalValue=0;\n        for(T item: items){\n            totalValue +=item.getValue();\n        }\n        return totalValue;\n    }\n    public List<T> filterByType(Class<? extends T> type){  // ????????????????????\n        List<T> itemsOfType= new ArrayList<>();\n        for(T item:items){\n            if(item.getClass()==type){\n                itemsOfType.add(item);\n            }\n        }\n        return itemsOfType;\n    }\n    public int getTotalWeaponDamage(){\n        int totalDamage=0;\n        for(T item: items){\n            if(item instanceof Weapon){\n                totalDamage += ((Weapon)item).getDamage();\n                //((Weapon)item)?\n            } \n        }\n        return totalDamage;\n    }\n    public void sortByValue(){\n        List<T> sortedList= new ArrayList<>();\n        for(T item: items){\n            if(sortedList.isEmpty()){\n                sortedList.add(item);\n            }\n            else{\n                for(int i=0; i<sortedList.size();i++){\n                    if(item.getValue()>sortedList.get(i).getValue()){\n                        sortedList.add(i, item);\n                    }\n                }\n            }\n        }\n    }\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        System.out.println(\"Most Valuable: \"+inventory.mostValuableItem());\n    }\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){\n        for(Armor armor: source.items){\n            destination.addItem(armor);\n        }\n    }\n    \n}\n",
      "Weapon.java": "import java.util.*;\nclass Weapon implements Item{\n    public int damage;\n    private String name;\n    private int value;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public int getDamage() {\n        return damage;\n    }  \n   \n    public String getName() { \n        return name; }\n \n    public int getValue() { \n        return value; }\n        public String toString() { return name + \" (Damage: \" + damage + \", Value: \" + value + \")\"; }\n}\n",
      "Item.java": "import java.util.*;\ninterface Item {\n\n    String getName();\n    int getValue();\n\n    \n}\n",
      "Armor.java": "import java.util.*;\nclass Armor implements Item{\n    public int defense;\n    private String name;\n    private int value;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public int getDefense() {\n        return defense; \n    }\n    \n    public String getName() { \n        return name; }\n    \n    public int getValue() { \n        return value; }\n        public String toString() { return name + \" (Defense: \" + defense + \", Value: \" + value + \")\"; }\n}\n",
      "Potion.java": "import java.util.*;\nclass Potion implements Item{\n    public String effect;\n    private String name;\n    private int value;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getEffect() { \n        return effect; }\n\n    public String getName() { \n        return name; \n    }\n    \n    public int getValue() {\n        return value; \n    }\n    public String toString() { return name + \" (Effect: \" + effect + \", Value: \" + value + \")\"; }\n}\n",
      "Driver.java": "import java.util.*;\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        Inventory<Item> itemInventory = new Inventory<>();\n\n        Class<Weapon> weaponClass = Weapon.class; \n        System.out.println(\"Sınıf adı: \" + weaponClass.getName());  // Çıktı: Weapon\n\n        Weapon sword = new Weapon(\"Excalibur\",1000, 100); \n        Class<?> clazz = sword.getClass(); \n        System.out.println(clazz.getName());  // Çıktı: Weapon \n\n        Weapon axe = new Weapon(\"Axe\",800, 80);\n        Armor shield = new Armor(\"Shield\",600, 50);\n        Potion Potion2 = new Potion(\" Potion\", 300, \"Restores HP\");\n\n        weaponInventory.addItem(sword);\n        weaponInventory.addItem(axe);\n        itemInventory.addItem(sword);\n        itemInventory.addItem(axe);\n        itemInventory.addItem(shield);\n        itemInventory.addItem(Potion2);\n\n        System.out.println(\"Weapon Inventory:\");\n        weaponInventory.printInventory();\n\n        System.out.println(\"Total Weapon Damage: \" + weaponInventory.getTotalWeaponDamage());\n        System.out.println(\"Most Valuable Weapon: \" + weaponInventory.mostValuableItem());\n\n        System.out.println(\"Item Inventory:\");\n        itemInventory.printInventory();\n\n        System.out.println(\"Total Value: \" + itemInventory.getTotalValue());\n        System.out.println(\"Most Valuable Item: \" + itemInventory.mostValuableItem());\n    }\n}\n"
    },
    {
      "id": "6094496",
      "Inventory.java": "package lab1;\nimport java.util.List;\nimport java.util.ArrayList;\n\nimport java.util.Collections;\nimport java.util.Comparator;\n\npublic class Inventory <T extends Item> {\n\t\n\tprivate List<T> items = new ArrayList<>();\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n    \n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item.getName() + \" Value: \" + item.getValue() );\n        }\n    }\n    \n    public T mostValuableItem() {\n        if (items.isEmpty()) {\n            return null;\n        }\n        return Collections.max(items, Comparator.comparingInt(Item::getValue));\n    }\n\n   public List<T> findItemByName(String name) {\n        List<T> sonuc = new ArrayList<>();\n        for (T item : items) {\n            if (item.getName().equals(name)) {\n                sonuc.add(item);\n            }\n       }\n        return sonuc;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> sonuc = new ArrayList<>();\n        for (T item : items) {\n            if (item.getValue() > value) {\n                sonuc.add(item);\n            }\n        }\n        return sonuc;\n    }\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n    \n   \n\n    public List<T> filterByType(Class<?> type) {\n        List<T> updatedItems = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                updatedItems.add(item);\n            }\n        }\n        return updatedItems;\n    }\n\n    public int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDamage = totalDamage + ((Weapon) item).getValue();\n            }\n        }\n        return totalDamage;\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"Most Valuable Item: \" + mostValuable.getName() + \" (Value: \" + mostValuable.getValue() + \")\");\n        } else {\n            System.out.println(\"Empty!!.\");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor armor : source.items) {\n            destination.addItem(armor);\n        }\n      \n    }\n}\n\n\n\n",
      "Deriver.java": "package lab1;\n\npublic class Deriver {\n\n\tpublic static void main(String[] args) {\n\t\t Inventory<Weapon> weapon = new Inventory<>();\n\t        weapon.addItem(new Weapon(\"Excalibur\", 100, 50));\n\t        weapon.addItem(new Weapon(\"Dagger\", 30, 50));\n\n\t        Inventory<Armor> armor = new Inventory<>();\n\t        armor.addItem(new Armor(\"Kalkan\", 50));\n\t        armor.addItem(new Armor(\"Zırh\", 45));\n\n\t        System.out.println(\"Total Weapon Value: \" + weapon.getTotalValue());\n\t       \n\n\t        System.out.println(\"Weapon Inventory:\");\n\t        weapon.printInventory();\n\n\t        Inventory.printMostValuableItem(weapon);\n\n\t        \n\t       armor.printInventory();\n\t       \n\t       Class<Weapon> weaponClass = Weapon.class;\n\t       System.out.println(\"Sınıf adı: \" + weaponClass.getSimpleName());\n\t       Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n\t       Class<?> clazz = sword.getClass();\n\t       System.out.println(clazz.getSimpleName());\n\t    }\n\t\n\n\t}\n\n\n",
      "Weapon.java": "package lab1;\n\npublic class Weapon implements Item {\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n    \n    @Override\n    public int getValue() {\n    return value;\n    }\n}\n",
      "Item.java": "package lab1;\n\npublic interface Item {\n\t\n\t   public String getName();\n\t   public int getValue();\n\t\n\n}\n",
      "Armor.java": "package lab1;\n\npublic  class Armor implements Item {\n    private String name;\n    private int value;\n    private int defense;\n\n    public Armor(String name, int defense) {\n        this.name = name;\n        this.defense = defense;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n    @Override\n    public  int getValue() {\n    return value;\n    }\n}",
      "Potion.java": "package lab1;\n\npublic class Potion implements Item {\n    private String name;\n    private int value;\n    private int effect;\n\n    public Potion(String name, int effect) {\n        this.name = name;\n        this.effect = effect;\n    }\n\n    public int getEffect() {\n        return effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n    @Override\n    public  int getValue() {\n    return value;\n    }\n}"
    },
    {
      "id": "6343320",
      "Lab4.java": "package pckg;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Lab4 {\n\n\tpublic static void main(String[] args) {\n\n\t\t\t\n\t}\n\n}\n\ninterface Item{\n\t\n\tString getName();\n\tint getValue();\n\t\n}\n\nclass Weapon implements Item{\n\t\n\tint damage;\n\t\n\tWeapon(String name, int x, int y){}\n\n\tpublic String getName() {\n\t\treturn null;\n\t}\n\n\tpublic int getValue() {\n\t\treturn 0;\n\t}\n\t\n\tClass<Weapon> weaponClass = Weapon.class;\n\t\n}\n\nclass Armor implements Item{\n\t\n\tint defense;\n\t\n\tArmor(){\n\t\t\n\t}\n\n\tpublic String getName() {\n\t\treturn null;\n\t}\n\n\tpublic int getValue() {\n\t\treturn 0;\n\t}\n\t\n}\n\nclass Potion implements Item{\n\t\n\tString effect;\n\n\tPotion(){\n\t\t\n\t}\n\n\tpublic String getName() {\n\t\treturn null;\n\t}\n\t\n\tpublic int getValue() {\n\t\treturn 0;\n\t}\n}\n\nclass  Inventory <T>{\n\t\n\tArrayList<String> inv = new ArrayList<>();\n\tString T;\n\t \n\tvoid addItem(T item) {\n\t\tinv.add(T);\n\t}\n\t\n\tvoid removeItem(T item) {\n\t\tinv.remove(T);\n\t}\n\t\n\tvoid printInventory() {\n\t \n\t}\n\t\n\tT mostValuableItem() {\n\t\treturn null;\n\t}\n\t\n\tT findItemByName(String name) {\n\tfor(int i = 0; i < inv.size(); i++) {\n\t\tif(inv.get(i).equals(name)) {\n\t\t\treturn (T) inv.get(i);\n\t\t}\n\t}\n\treturn null;\n\t}\n\t\n\tList<T> findItemsByValue(int value){\n\t\treturn null;\n\t}\n\t\n\tint getTotalValue() {\n\t\treturn 0;\n\t}\n\t\n\tList<T> filterByType(Class<?> type){\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\tint getTotalWeaponDamage() {\n\t\treturn 0;\n\t}\n\t\n\tvoid sortByValue() {\n\t\t\n\t}\n\t\n\tpublic static void printMostValuableItem(Inventory<? extends Item> inventory) {\n\t\t\n\t}\n\t\n\tpublic static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n\t\t\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "id": "6539697",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T> {\n    ArrayList<T> list;\n\n    public Inventory() {\n        list = new ArrayList<T>();\n    }\n\n    void addItem(T item) {\n        list.add(item);\n    }\n    void removeItem(T item) {\n        list.remove(item);\n    }\n    void printInventory() {\n        for(T item : list)\n            System.out.println(((Item) item).getName());\n    }\n    void sortByValue() {\n        Item item1 = null;\n        Item item2 = null;\n        for(int i = 0; i < list.size()-1; i++) {\n            item1 = (Item)list.get(i);\n            item2 = (Item)list.get(i+1);\n            if(item1.getValue()< item2.getValue()) {\n                list.set(i, (T) item2);\n                list.set(i+1, (T) item1);\n            }\n        }\n    }\n\n    int getTotalWeaponDamage() {\n        int result = 0;\n        for(T item : list)\n            if(item instanceof Weapon)\n                result += ((Weapon) item).getDamage();\n        return result;\n    }\n    int getTotalValue() {\n        int result = 0;\n        for(T item : list)\n            result += ((Item) item).getValue();\n        return result;\n    }\n\n    T mostValuableItem() {\n        ArrayList<T> tempList1 = list;\n        ArrayList<T> tempList2 = null;\n        this.sortByValue();\n        tempList2 = list;\n        list = tempList1;\n        return tempList2.get(0);\n    }\n    T findItemByName(String name) {\n        for(T item : list)\n            if(((Item)item).getName().equals(name))\n                return item;\n        return null;\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> valuableList = new ArrayList<T>();\n        for(T item : list)\n            if(((Item)item).getValue()>value)\n                valuableList.add(item);\n        return valuableList;\n    }\n    List<T> filterByType(Class<?> type) {\n        List<T> typeList = new ArrayList<T>();\n        for(T item : list)\n            if(item.getClass()==type)\n                typeList.add(item);\n        return typeList;\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(\"Most valuable item: \"+inventory.mostValuableItem().getName());\n    }\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        destination.list.addAll(source.list);\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public int getValue() {\n        return value;\n    }\n    public int getDamage() {\n        return damage;\n    }\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n}\n",
      "Armor.java": "public class Armor implements Item {\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getValue() {\n        return value;\n    }\n    public int getDefense() {\n        return defense;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getValue() {\n        return value;\n    }\n    public String getEffect() {\n        return effect;\n    }\n}\n",
      "Driver.java": "import java.util.List;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Weapon sword = new Weapon(\"sword\",30,15);\n        Weapon gun = new Weapon(\"gun\",50,25);\n        Armor armor = new Armor(\"armor\",25,10);\n        Armor shield = new Armor(\"shield\",10,5);\n        Potion swiftnessPotion = new Potion(\"fast\",15,\"speed boost\");\n        Potion strengthPotion = new Potion(\"strong\",20,\"strength boost\");\n\n        Inventory<Item> inventory = new Inventory<Item>();\n        inventory.addItem(sword);\n        inventory.addItem(gun);\n        inventory.addItem(armor);\n        inventory.addItem(shield);\n        inventory.addItem(swiftnessPotion);\n        inventory.addItem(strengthPotion);\n\n        System.out.println(\"Inventory:\");\n        inventory.printInventory();\n        System.out.println();\n\n        System.out.println(\"Most valuable item: \"+inventory.mostValuableItem().getName());\n        System.out.println(\"Find by name(shield): \"+inventory.findItemByName(\"shield\").getName());\n        System.out.println();\n\n        System.out.println(\"More valuable then 20:\");\n        List<Item> valueList = inventory.findItemsByValue(20);\n        for(Item item : valueList)\n            System.out.println(item.getName());\n        System.out.println();\n\n        inventory.sortByValue();\n        System.out.println(\"Sorted by value:\");\n        inventory.printInventory();\n        System.out.println();\n\n        System.out.println(\"Total value: \"+inventory.getTotalValue());\n        System.out.println();\n\n        System.out.println(\"Weapon Items:\");\n        List<Item> typeList = inventory.filterByType(Weapon.class);\n        for(Item item : typeList)\n            System.out.println(item.getName());\n        System.out.println();\n\n        System.out.println(\"Total Weapon Damage: \"+inventory.getTotalWeaponDamage());\n        System.out.println();\n\n        Inventory.printMostValuableItem(inventory);\n        System.out.println();\n\n        Inventory<Armor> armorInventory = new Inventory<Armor>();\n        armorInventory.addItem(armor);\n        armorInventory.addItem(shield);\n        Inventory<Item> transferInventory = new Inventory<Item>();\n        Inventory.transferArmor(transferInventory,armorInventory);\n        System.out.println(\"Transferred inventory:\");\n        for(Item item : transferInventory.list)\n            System.out.println(item.getName());\n    }\n}"
    },
    {
      "id": "5187413",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n\n    ArrayList<T> objects = new ArrayList<>();\n\n    void addItem(T item) {\n        objects.add(item);\n\n    }\n\n    void removeItem(T item) {\n        objects.remove(item);\n\n    }\n\n    void printInventory() {\n        for (T object : objects) {\n            System.out.println(object);\n        }\n\n    }\n\n    T mostValuableItem() {\n\n        T temp = null;\n        for (int i = 0; i < objects.size() - 1; i++) {\n            if (objects.get(i).getValue() < objects.get(i + 1).getValue()) {\n\n                temp = objects.get(i + 1);\n            }\n        }\n        return temp;\n\n    }\n\n    T findItemByName(String name) {\n\n        for (T items : objects) {\n            if (items.getName().equals(name)) {\n                return items;\n\n            }\n        }\n        return null;\n\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> greater = new ArrayList<>();\n        for (T items : objects) {\n            if (items.getValue() > value) {\n                greater.add(items);\n            }\n        }\n        return greater;\n\n    }\n\n    int getTotalValue() {\n        int total = 0;\n        for (T items : objects) {\n            total += items.getValue();\n        }\n        return total;\n\n    }\n\n    List<T> filterByType(Class<?> type) {\n        List<T> clas = new ArrayList<>();\n\n        for (T items : objects) {\n            if (items.getClass().equals(type)) {\n                clas.add(items);\n            }\n        }\n        return clas;\n\n    }\n\n    int getTotalWeaponDamage() {\n        int total = 0;\n        for (T item : objects) {\n            if (item.getClass() == Weapon.class) {\n\n                total += ((Weapon) item).getDamage();\n\n            }\n        }\n        return total;\n\n    }\n\n    void sortByValue() {\n        T temp;\n        for (int i = 0; i < objects.size(); i++) {\n            if (objects.get(i).getValue() < objects.get(i).getValue()) {\n                temp = objects.get(i);\n                objects.set(i, objects.get(i + 1));\n                objects.set(i + 1, temp);\n            }\n\n        }\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination,\n            Inventory<Armor> source) {\n        for (int i = 0; i < source.objects.size(); i++) {\n            if (source.objects.get(i).getClass() == Armor.class) {\n                destination.objects.add(source.objects.get(i));\n\n            }\n\n        }\n\n    }\n\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    private int damage;\n    private String name;\n    private int value;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.damage = damage;\n        this.value = value;\n\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n\n    }\n\n    public String toString() {\n        return (\"Name: \" + getName() + \"Value: \" + getValue() + \"Damage: \" + getDamage());\n    }\n\n}\n",
      "Armor.java": "public class Armor implements Item {\n    private int defense;\n    private String name;\n    private int value;\n\n    public Armor(String name, int value, int defense) {\n        this.defense = defense;\n        this.name = name;\n        this.value = value;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n\n    }\n\n    public String toString() {\n        return (\"Name: \" + getName() + \"Value: \" + getValue() + \"Defense: \" + getDefense());\n    }\n\n}\n",
      "Potion.java": "public class Potion implements Item {\n    private String effect;\n    private String name;\n    private int value;\n\n    public Potion(String name, int value, String effect) {\n        this.effect = effect;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n\n    }\n\n    public String toString() {\n        return (\"Name: \" + getName() + \"Value: \" + getValue() + \"Effect: \" + getEffect());\n    }\n\n}\n",
      "Driver.java": "\npublic class Driver {\n    public static void main(String[] args) {\n\n        Weapon sword = new Weapon(\"Excalibur\", 1000, 100);\n        Weapon wea = new Weapon(\"wea\", 50, 40);\n        Weapon wep = new Weapon(\"wep\", 30, 10);\n\n        Armor armor = new Armor(\"ARMOR\", 90, 100);\n        Armor arm = new Armor(\"arm\", 5, 10);\n        Armor mo = new Armor(\"mo\", 60, 70);\n\n        Potion pot = new Potion(\"pot\", 13, \"light\");\n\n        Inventory<Item> items = new Inventory<>();\n        items.addItem(mo);\n        items.addItem(wep);\n        items.addItem(pot);\n\n        Inventory<Weapon> wp = new Inventory<>();\n        wp.addItem(sword);\n        wp.addItem(wep);\n        wp.addItem(wea);\n        Inventory<Armor> ar = new Inventory<>();\n        ar.addItem(armor);\n        ar.addItem(arm);\n\n        Inventory<Armor> mor = new Inventory<>();\n        mor.addItem(mo);\n\n        System.out.println(wp.getTotalWeaponDamage());\n        Inventory.transferArmor(mor, ar);\n        mor.printInventory();\n        System.out.println(\"----------------\");\n\n        System.out.println(items.filterByType(Weapon.class));\n\n    }\n}\n"
    },
    {
      "id": "4275079",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> items;\n    Inventory(){\n         this.items=new ArrayList<>();\n    }\n\n    void addItem(T item) {\n        items.add((T) item);\n    }\n\n    void removeItem(T item) {\n        items.remove(item);\n    }\n\n    void printInventory() {\n        for (T item : items) {\n            System.out.println(\"Item's name: \" + item.getName() + \" Item's value: \" + item.getValue());\n        }\n    }\n    T mostValuableItem() {\n            int max=0;\n        T valuedItem=null;\n            for(T item:items){\n            if(item.getValue()>max){\n                max=item.getValue();\n                 valuedItem=item;\n            }\n        }\n            return  valuedItem;\n    }\n\n    T findItemByName(String name) {\n        for(T item:items){\n            if(item.getName().equals(name)){\n                return item;\n\n            }\n        }\n        return null;\n    }\n            List<T> findItemsByValue(int value) {\n        ArrayList<T> item2=new ArrayList<>();\n                for(T item:items){\n                    if(item.getValue()>value){\n                        item2.add(item);\n                    }\n                }\n                return item2;\n    }\n\n    int getTotalValue() {\n        int sum=0;\n        for(T item:items){\n            sum+=item.getValue();\n    }\n        return sum;}\n    List<T> filterByType(Class<?> type) {\n        ArrayList<T> item3=new ArrayList<>();\n        for (T item:items){\n            if(item.getClass().equals(type)) {\n                item3.add(item);\n            }}\n        return item3;\n    }\n\n    int getTotalWeaponDamage() {\n        int sum2=0;\n        for (T item:items){\n            if (item instanceof Weapon){\n                sum2+=((Weapon) item).damage;\n            }\n        }\n        return sum2;\n\n    }\n\n\n    void sortByValue() {\n        for(int i=0;i<items.size();i++){\n            for(int j=i;j<items.size();j++){\n                if((items.get(i).getValue()<items.get(j).getValue())){\n                    T temp=items.get(i);\n                    T temp2=items.get(j);\n                    items.remove(i);\n                    items.add(i,temp2);\n                    items.remove(j);\n                    items.add(j,temp);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n            System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory< Armor> source) {\n            for(int i=0;i<source.items.size();i++){\n                destination.items.add(source.items.get(i));\n                source.items.remove(i);\n        }\n    }\n}",
      "Weapon.java": "public class Weapon implements Item{\n   public int damage;\n   public  String name;\n   public int value;\n\n   Weapon(String name, int value, int damage){\n      this.name=name;\n      this.value=value;\n      this.damage=damage;\n   }\n   @Override\n   public String getName() {\n      return name;\n   }\n\n   @Override\n   public String toString() {\n      return name +\" \" + value;\n   }\n\n   @Override\n   public int getValue() {\n      return value;\n   }\n\n\n   @Override\n   public int compareTo(Object o) {\n      return 0;\n   }\n}\n",
      "Item.java": "public interface Item extends Comparable{\n     String getName();\n    int getValue();\n\n}\n",
      "Armor.java": "public class Armor implements Item {\n    public int defense;\n    public String name;\n    public int value;\n\n    Armor(String name, int value,int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense=defense;\n    }\n    @Override\n    public String toString() {\n        return name +\" \" + value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    @Override\n    public int compareTo(Object o) {\n        return 0;\n    }\n\n}",
      "Potion.java": "public class Potion implements Item{\n    public String effect;\n    public  String name;\n    public int value;\n Potion(String name,int value,String effect){\n    this.name=name;\n    this.value=value;\n    this.effect=effect;\n}\n    @Override\n    public String getName() {\n        return name;\n    }\n    @Override\n    public String toString() {\n        return name +\" \" + value;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n    @Override\n    public int compareTo(Object o) {\n        return 0;\n    }\n}\n",
      "Driver.java": "//TransferArmor da ufak bir hata var kalan her şey doğru çalışıyor.\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory inventory=new Inventory<>();\n        Inventory inventory2=new Inventory<>();\n        Class<Weapon> weaponClass = Weapon.class;\n        Class<Armor> armorClass = Armor.class;\n        Class<Potion> potionClass = Potion.class;\n        System.out.println(\"Sınıf adı: \" + weaponClass.getName());  // Çıktı: Weapon\n        System.out.println(\"Sınıf adı: \" + potionClass.getName());\n        System.out.println(\"Sınıf adı: \" + armorClass.getName());  // Çıktı: Weapon\n\n        Weapon sword2 = new Weapon(\"kılıç2\", 1000,100);\n        Weapon sword3 = new Weapon(\"kılıç3\", 500,100);\n        Armor armor= new Armor(\"armor1\" , 10000,100);\n        Weapon sword = new Weapon(\"kılıç\", 1000,100);\n        Armor armor2 = new Armor(\"armor2\", 500,100);\n        Class<?> clazz = sword.getClass();\n        System.out.println(clazz.getName());\n        inventory.addItem(sword);\n        inventory.addItem(sword2);\n        inventory.addItem(sword3);\n        inventory.addItem(armor);\n        inventory.addItem(armor2);\n        System.out.println(\"En değeri item:\");\n        System.out.println(inventory.mostValuableItem().getName());\n        System.out.println(\"inventory1:\");\n        inventory.printInventory();\n        System.out.println(\"filtered inventory by type\");\n        System.out.println(inventory.filterByType(weaponClass));\n        System.out.println(\"sorted inventory\");\n        inventory.sortByValue();\n        inventory.printInventory();\n        System.out.println(\"bulunan item\");\n        System.out.println(inventory.findItemByName(\"kılıç\").getName());\n        System.out.println(\"total value\");\n        System.out.println(inventory.getTotalValue());\n        System.out.println(\"total weapon damage\");\n        System.out.println(inventory.getTotalWeaponDamage());\n        System.out.println(\"item bulundu:\");\n        System.out.println(inventory.findItemsByValue(1000));\n        System.out.println(\"En değerli item\");\n        Inventory.printMostValuableItem(inventory);\n        Inventory.transferArmor(inventory2,inventory);\n        System.out.println(\"En değerli item\");\n        Inventory.printMostValuableItem(inventory2);\n        System.out.println(\"inventory2\");\n        inventory2.printInventory();\n        System.out.println(\"inventory1\");\n        inventory.printInventory();\n\n    }\n}\n"
    },
    {
      "id": "1280995",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T> {\n    ArrayList<T> items;\n\n    public Inventory(){\n        items = new ArrayList<>();\n    }\n\n    void addItem(T item){\n        items.add(item);\n    }\n\n    void removeItem(T item){\n        items.remove(item);\n    }\n\n    void printInventory(){\n        System.out.print(\"[\");\n        for (int i = 0; i < items.size(); i++){\n            if (items.get(i) instanceof Item) {\n                Item a = (Item) items.get(i);\n                if (i != items.size()-1) System.out.print(a.getName() + \", \");\n                else System.out.println(a.getName() + \"]\");\n            }\n        }\n    }\n\n    T mostValueableItem(){\n        int value = 0;\n        T valueableItem = null;\n        for (T item : items) {\n            if (item instanceof Item) {\n                Item a = (Item) item;\n                if (a.getValue() > value) {\n                    value = a.getValue();\n                    valueableItem = item;\n                }\n            }\n        }\n        return valueableItem;\n    }\n\n\n    T findItemByName(String name) {\n        T neededItem = null;\n        for (T item : items) {\n            if (item instanceof Item) {\n                Item a = (Item) item;\n                if (a.getName().equals(name)) neededItem = item;\n            }\n        }\n        return neededItem;\n    }\n\n    List<T> findItemsByValue(int value) {\n        ArrayList<T> valueList = new ArrayList<>();\n        for (T item : items) {\n            if (item instanceof Item) {\n                Item a = (Item) item;\n                if (a.getValue() > value) {\n                    valueList.add(item);\n                }\n            }\n        }\n        return valueList;\n    }\n\n    int getTotalValue(){\n        int value = 0;\n        for (T item : items) {\n            if (item instanceof Item) {\n                Item a = (Item) item;\n                value += a.getValue();\n            }\n        }\n        return value;\n    }\n\n    List<T> filterByType(Class<?> type){\n        ArrayList<T> typeList = new ArrayList<>();\n        for (T item : items) {\n            if (item.getClass().getName().equals(type.getName())){\n                typeList.add(item);\n            }\n        }\n        return typeList;\n    }\n\n    int getTotalWeaponDamage(){\n        int damage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                Weapon a = (Weapon) item;\n                damage += a.getDamage();\n            }\n        }\n        return damage;\n    }\n\n    void sortByValue(){\n        ArrayList<T> orderedList = new ArrayList<>(items);\n        for (int i = 0; i < orderedList.size(); i++){\n            if (orderedList.get(i) instanceof Item) {\n                Item a = (Item) orderedList.get(i);\n                for (int j = 0; j < orderedList.size(); j++){\n                    if (orderedList.get(j) instanceof Item) {\n                        Item b = (Item) orderedList.get(j);\n                        if (b.getValue() <= a.getValue()){\n                            T temp = orderedList.get(i);\n                            orderedList.set(i, orderedList.get(j));\n                            orderedList.set(j, temp);\n                        }\n                    }\n                }\n            }\n        }\n        items = orderedList;\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        int value = 0;\n        Item valueableItem = null;\n        for (int i = 0; i < inventory.items.size(); i++){\n            if (inventory.items.get(i) instanceof Item) {\n                Item a = (Item) inventory.items.get(i);\n                if (a.getValue() > value) {\n                    value = a.getValue();\n                    valueableItem = inventory.items.get(i);\n                }\n            }\n        }\n        System.out.println(valueableItem.getName());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){\n        for (int i = 0; i< source.items.size(); i++){\n            destination.addItem(source.items.get(i));\n        }\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    private String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage){\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() { \n        return name;\n    }\n    @Override\n    public int getValue() {\n        return value;\n    }\n    public int getDamage() {\n        return damage;\n    }\n}\n",
      "Item.java": "public interface Item {\n    public String getName();\n    public int getValue();\n}",
      "Armor.java": "public class Armor implements Item {\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense){\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String getName() { \n        return name;\n    }\n    @Override\n    public int getValue() {\n        return value;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect){\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName() { \n        return name;\n    }\n    @Override\n    public int getValue() {\n        return value;\n    }\n}\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        Inventory<Weapon> silahenvanter = new Inventory<Weapon>();\n        silahenvanter.addItem(new Weapon(\"Excalibur\", 1000, 100));\n        silahenvanter.addItem(new Weapon(\"Caliburn\", 999999, 200));\n        silahenvanter.addItem(new Weapon(\"Some Sword\", 80, 10));\n        Inventory<Potion> potenvanter = new Inventory<Potion>();\n        potenvanter.addItem(new Potion(\"leziz iksir\", 100, \"leziz\"));\n        potenvanter.addItem(new Potion(\"ekşi iksir\", 5, \"çok ekşi\"));\n        Inventory<Armor> zirhenvanter1 = new Inventory<Armor>();\n        Inventory<Armor> zirhenvanter2 = new Inventory<Armor>();\n        zirhenvanter1.addItem(new Armor(\"güçlü zırh\", 100, 100));\n        zirhenvanter2.addItem(new Armor(\"zayıf zırh\", 10, 10));\n        Inventory.transferArmor(zirhenvanter2, zirhenvanter1);\n\n        Inventory.printMostValuableItem(silahenvanter);\n        silahenvanter.sortByValue();\n        silahenvanter.printInventory();\n        zirhenvanter2.printInventory();\n        \n        \n    }\n}\n"
    }
  ]
}