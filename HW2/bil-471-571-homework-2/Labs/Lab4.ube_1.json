{
  "questions": [
    "Generic\n\n1)  Envanter Yönetim Sistemi\n\nBu labda amacımı bir oyun için envanter sistemi eklemektir.\nItem isminde bir arayüz tanımlayın:\nAşağıdaki metotları içermelidir:\nString getName()\nint getValue()\n\nWeapon sınıfı tanımlayın. Bu sınıf Item arayüzünü uygulamalıdır.\n\nint damage isimli bir özelliği olmalıdır.\n\nArmor sınıfı tanımlayın. Bu sınıf da Item arayüzünü uygulamalıdır.\n\nint defense isimli bir değişkeni olmalıdır.\n\nPotion sınıfı tanımlayın. Bu sınıf da Item arayüzünü uygulamalıdır.\n\nString effect isimli bir değişkeni olmalıdır.\n\nGeneric Inventory<T> sınıfı\nbir arraylist kullanarak nesneleri saklamalıdır.\nvoid addItem(T item): envantere istenilen eşyayı eklemeli\nvoid removeItem(T item): envanterden istenilen eşyayı silmeli\nvoid printInventory(): envanteri basmalı\nT mostValuableItem(): en değerli eşyayı dönmeli\nT findItemByName(String name): verilen isme karşılık gelen eşyayı dönmeli.\n\nİsimlerin unique olduğunu varsayabilirsiniz. Eğer yoksa null dönün.\n\nList<T> findItemsByValue(int value): verilen değerden daha değerli eşyaarın\n\nlistesini döndürür.\n\nint getTotalValue(): Envanterin toplam değerini döner.\nList<T> filterByType(Class<?> type): istenilen sınıfa ait ögeleri döner.\nint getTotalWeaponDamage(): Weapon classına ait olan nesnelerin toplam\n\nhasarınıdöner.\n\nvoid sortByValue(): değeri azalan şekilde envanteri sıralamalıdır.\npublic static void printMostValuableItem(Inventory<? extends Item>\n\ninventory): verilen envanterdem en değerli eşayı ekrana basmalıdır.\n\npublic static void transferArmor(Inventory<? super Armor> destination,\n\nInventory<Armor> source): Verilen hedef envantere zırhı taşımalıdır.\n\nDriver class: main metodu burada olmalıdır. Sadece Weapon’dan oluşan ve\n\nItemdan oluşan Invertory classı yazıp test ediniz.\n\nYardımcı olabilecek metotlar:\nClass<Weapon> weaponClass = Weapon.class;\nSystem.out.println(\"Sınıf adı: \" + weaponClass.getName());  // Çıktı: Weapon\n\nWeapon sword = new Weapon(\"Excalibur\", 1000, 100);\nClass<?> clazz = sword.getClass();\nSystem.out.println(clazz.getName());  // Çıktı: Weapon\n\n"
  ],
  "answers": [
    {
      "id": "7817361",
      "Generic.java": "package Lab4;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\n\nclass Inventory<T extends Item> {\n\n    private T data;\n\n    public Inventory(){}\n\n    public Inventory(T data){\n        this.data = data;\n    }\n\n    public T getData(){\n        return data;\n    }\n\n    public void setData(T data){\n        this.data = data;\n    }\n\n\n    ArrayList<T> items = new ArrayList<T>();\n\n    void addItem(T item){\n        items.add(item);\n    }\n\n    void removeIte(T item){\n        items.remove(item);\n    }\n\n    void printInventory(){\n        for(int i = 0; i< items.size(); i++){\n            System.out.println(items.getClass().getName());\n        }\n    }\n    T mostValuableItem(){\n\n        int count = 0;\n        int max = 0;\n\n        for(int i = 0; i< items.size(); i++){\n\n            if(max<items.get(0).getValue()){\n\n                max = items.get(0).getValue();\n\n                count = i;\n            }\n        }\n\n        return items.get(count);\n        \n\n    }\n\n    T findItemByName(String name){\n        int count = -1;\n\n        for (int i = 0; i< items.size(); i++){\n\n            if(items.get(i).getName().equals(name)){\n                count = i;\n            }\n            \n        }\n        if(count == -1){\n            return null;\n        }\n\n        return items.get(0);\n    }\n    List<T> findItemsByValue(int value){\n\n        List<T> dahaDegerli = new ArrayList<T>() ;\n\n            \n\n        for(int i = 0; i< items.size(); i++){\n            if(value< items.get(i).getValue()){\n\n                dahaDegerli.add(items.get(i));\n            }\n        }\n\n        return dahaDegerli;\n\n    }\n    \n    int getTotalValue(){\n\n        int total = 0;\n        for(int i = 0; i< items.size() ; i++){\n            total += items.get(i).getValue();\n        }\n        return total;\n    }\n    List<T> filterByType(Class<?> type){\n        List<T> typeItems = new ArrayList<T>();\n\n        for (int i = 0; i< items.size();i++ ){\n            if(items.get(0).getClass()== type){\n                typeItems.add(items.get(i));\n            }\n        }\n        return typeItems;\n    }\n\n    int getTotalWeaponDamage(){\n\n        List<T> weapons = new ArrayList<T>();\n\n        Weapon wp = new Weapon();\n        weapons = filterByType(wp.getClass());\n        int totalDamage=0;\n\n        for(int i =0; i< weapons.size(); i++){\n\n            totalDamage+=((Weapon) weapons.get(i)).getDamage();\n\n        }\n\n        return totalDamage;\n        \n    }\n    public void sortByValue(){\n\n        \n\n        for(int i = 0; i<items.size(); i++){\n            for(int j=i ; j<items.size(); j++){\n\n                if(items.get(i).getValue()>items.get(j).getValue()){\n\n                    T temp = items.get(i);\n                    items.remove(i);\n                    items.add(i,items.get(j));\n                    items.remove(j);\n                    items.add(j, temp);\n\n\n                }\n        \n            }\n        }\n        \n        \n    }\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n\n        String valuable = inventory.mostValuableItem().getName();\n\n        System.out.println(valuable);\n\n\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){\n\n        source.setData((Armor) destination.getData());\n        \n        \n    }\n        \n            \n\n}\ninterface Item{\n\n    String getName();\n\n    int getValue();\n\n}\n\nclass Weapon implements Item{\n\n    String name;\n    int value;\n\n    public Weapon(){}\n\n    public Weapon(String name, int value, int damage){\n\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n\n    int damage;\n\n    public int getDamage(){\n        return damage;\n    }\n}\n\nclass Armor implements Item{\n\n    String name;\n    int value;\n\n    \n\n\n\n    public Armor(String name, int value){\n\n        this.name = name;\n        this.value = value;\n\n    }\n   \n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    int defence;\n\n    \n\n}\n\nclass Potion implements Item{\n    String effect;\n\n    String name;\n    int value;\n\n    public Potion(String name, int value){\n\n        this.name = name;\n        this.value = value;\n\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n}\nclass Driver{\n\n    public static void main(String[] args){\n\n\n        Weapon wp = new Weapon(\"Excalibur\",10000,100);\n        \n    }\n}\n"
    },
    {
      "id": "4731282",
      "Driver.java": "import java.util.ArrayList;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory<Item> inv = new Inventory<Item>();\n        Weapon w = new Weapon(\"Greatsword\", 6758, 2123);\n        Armor a = new Armor(\"Strong Dragon\", 1232, 345);\n        Potion p = new Potion(\"Invisibility\", \"godpot\", 4324);\n        inv.addItem(p);\n        inv.addItem(w);\n        inv.addItem(a);\n        inv.printInventory();\n        System.out.println(inv.mostValuableItem().getName());\n        System.out.println(inv.findItemByName(\"Greatsword\"));\n        inv.sortByValue();\n        inv.printInventory();\n        inv.printMostValuableItem(inv);\n\n    }\n}\n\ninterface Item {\n\n    String getName();\n\n    int getValue();\n}\n\nclass Weapon implements Item {\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return this.name;\n\n    }\n\n    public int getValue() {\n        return this.value;\n\n    }\n\n    public int getDamage() {\n        return this.damage;\n    }\n\n}\n\nclass Armor implements Item {\n    private int defense;\n    private String name;\n    private int value;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n\n    }\n\n    @Override\n    public int getValue() {\n        return this.value;\n\n    }\n\n    public int getDefense() {\n        return this.defense;\n    }\n\n}\n\nclass Potion implements Item {\n    private String effect;\n    private String name;\n    private int value;\n\n    public Potion(String effect, String name, int value) {\n        this.effect = effect;\n        this.name = name;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public int getValue() {\n        return this.value;\n\n    }\n\n    public String getEffect() {\n        return this.effect;\n    }\n\n}\n\nclass Inventory<T extends Item> {\n    ArrayList<T> inv = new ArrayList<T>();\n\n    void addItem(T item) {\n        inv.add(item);\n\n    }\n\n    void removeItem(T item) {\n        if (inv.indexOf(item) < 0) {\n            System.out.println(\"HATA : Çıkarılmak istenen eşya bulunamadı.\");\n        }\n        inv.remove(item);\n\n    }\n\n    void printInventory() {\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) instanceof Armor) {\n                Armor a = (Armor) inv.get(i);\n                System.out.println(\"Name : \" + a.getName() + \" Value: \" + a.getValue() + \" Defense: \" + a.getDefense());\n\n            }\n            if (inv.get(i) instanceof Weapon) {\n                Weapon w = (Weapon) inv.get(i);\n                System.out.println(\"Name : \" + w.getName() + \" Value: \" + w.getValue() + \" Damage: \" + w.getDamage());\n\n            }\n            if (inv.get(i) instanceof Potion) {\n                Potion p = (Potion) inv.get(i);\n                System.out.println(\"Name : \" + p.getName() + \" Value: \" + p.getValue() + \" Effect: \" + p.getEffect());\n\n            }\n\n        }\n\n    }\n\n    T mostValuableItem() {\n        int max = 0;\n        T item = null;\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i).getValue() > max) {\n                max = inv.get(i).getValue();\n                item = inv.get(i);\n            }\n        }\n        return item;\n\n    }\n\n    T findItemByName(String name) {\n        for (int i = 0; i < inv.size(); i++) {\n            if ((inv.get(i).getName()).equals(name)) {\n                return inv.get(i);\n            }\n\n        }\n        return null;\n\n    }\n\n    ArrayList<T> findItemsByValue(int value) {\n        ArrayList<T> arr = new ArrayList<T>();\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i).getValue() > value) {\n                arr.add(inv.get(i));\n            }\n        }\n        return arr;\n\n    }\n\n    int getTotalValue() {\n        int sum = 0;\n        for (int i = 0; i < inv.size(); i++) {\n            sum += inv.get(i).getValue();\n        }\n        return sum;\n\n    }\n\n    ArrayList<T> filterByType(Class<?> type) {\n        ArrayList<T> arr = new ArrayList<T>();\n        for (int i = 0; i < inv.size(); i++) {\n            if ((inv.get(i).getClass()).equals(type)) {\n                arr.add(inv.get(i));\n\n            }\n        }\n        return arr;\n\n    }\n\n    int getTotalWeaponDamage() {\n        int sum = 0;\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) instanceof Weapon)\n                sum += ((Weapon) inv.get(i)).getDamage();\n        }\n        return sum;\n\n    }\n\n    void sortByValue() {\n        T temp;\n        for (int i = 0; i < inv.size(); i++) {\n            for (int y = 0; y < inv.size() - 1; y++) {\n                if (inv.get(y).getValue() <= inv.get(y + 1).getValue()) {\n                    temp = inv.get(y);\n                    inv.set(y, inv.get(y + 1));\n                    inv.set(y + 1, temp);\n\n                }\n            }\n\n        }\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        int max = 0;\n        Item item = null;\n        for (int i = 0; i < inventory.inv.size(); i++) {\n            if (inventory.inv.get(i).getValue() > max) {\n                max = inventory.inv.get(i).getValue();\n                item = inventory.inv.get(i);\n            }\n\n        }\n        System.out.println(item.getName());\n\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        int index = 0;\n        for (int i = 0; i < source.inv.size(); i++) {\n            if (source.inv.get(i).getClass().equals(Armor.class)) {\n                destination.inv.add(index, source.inv.get(i));\n\n            }\n\n        }\n\n    }\n}\n"
    },
    {
      "id": "6897869",
      "Inventory.java": "\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n\n    public ArrayList<T> items;\n\n    public Inventory() {\n        items = new ArrayList<>();\n    }\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n    public void printInventory() {\n        System.out.println(\"Inventory\");\n        System.out.println(items);\n    }\n\n    public T mostValuableItem() {\n        T mostValuable;\n        int mostValue = 0;\n\n        if (items.size() == 0) {\n            return null;\n        } else {\n\n            mostValuable = items.get(0);\n\n            for (T t : items) {\n                if (t.getValue() > mostValue) {\n                    mostValuable = t;\n                    mostValue = t.getValue();\n                }\n            }\n\n            return mostValuable;\n        }\n    }\n\n    public T findItemByName(String item) {\n        T out = null;\n\n        for (T t : items) {\n            if (t.getName().equals(item)) {\n                out = t;\n            }\n        }\n\n        return out;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        ArrayList<T> itemsByValue = new ArrayList<>();\n\n        for (T t : items) {\n            if (t.getValue() > value) {\n                itemsByValue.add(t);\n            }\n        }\n\n        if (itemsByValue.size() > 0) {\n            return itemsByValue;\n        } else {\n            System.err.println(\"Verilen değerde bir item bulunamadı.\");\n            return null;\n        }\n    }\n\n    public List<T> filterByType(Class<?> type) {\n        ArrayList<T> filtered = new ArrayList<>();\n\n        for (T t : items) {\n            Class<?> clas = t.getClass();\n            if (clas.equals(type)) {\n                filtered.add(t);\n            }\n\n        }\n\n        if (filtered.size() > 0) {\n            return filtered;\n        } else {\n            return null;\n        }\n    }\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T t : items) {\n            total += t.getValue();\n        }\n\n        return total;\n    }\n\n    public int getTotalWeaponDamage() {\n        int total = 0;\n        Weapon w = new Weapon();\n        for (T t : items) {\n            if (t.getClass().equals(w.getClass())) {\n                total += t.getValue();\n            }\n        }\n\n        return total;\n    }\n\n    public void sortByValue() {\n        Item[] arr = new Item[items.size()];\n        items.toArray(arr);\n\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr.length - 1; j++) {\n                if (arr[j].getValue() < arr[j + 1].getValue()) {\n                    Item temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n\n        items.clear();\n        for (int i = 0; i < arr.length; i++) {\n            items.add((T) arr[i]);\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuableitem = inventory.mostValuableItem();\n        System.out.println(\"Most valuable item : \" + mostValuableitem.getName());\n        System.out.println(\"Value : \" + mostValuableitem.getValue());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n\n        for (int i = 0; i < source.items.size(); i++) {\n            destination.items.add(source.items.get(i));\n        }\n    }\n\n}",
      "Weapon.java": "public class Weapon implements Item {\n    private int damage;\n    private String name;\n    private int value;\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n    public Weapon() {\n        name = \"default\";\n        damage = 0;\n        value = 0;\n    }\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String toString() {\n        return name + \" \" + value;\n    }\n\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n\n    int getValue();\n}\n",
      "Armor.java": "public class Armor implements Item {\n    private String name;\n    private int defense;\n    private int value;\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String toString() {\n        return name + \" \" + value;\n    }\n\n}\n",
      "Potion.java": "public class Potion implements Item {\n    private String name;\n    private String effect;\n    private int value;\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.effect = effect;\n        this.value = value;\n    }\n\n    public Potion() {\n        name = \"default\";\n        value = 0;\n        effect = \"\";\n    }\n\n    public String toString() {\n        return name + \" \" + value;\n    }\n}\n",
      "Driver.java": "\nimport java.util.List;\n\npublic class Driver {\n    public static void main(String[] args) throws Exception {\n        Inventory<Weapon> weapons = new Inventory<>();\n        Inventory<Item> items = new Inventory<>();\n\n        weapons.addItem(new Weapon(\"AK47\", 4000, 100));\n        weapons.addItem(new Weapon(\"Canik\", 500, 500));\n        weapons.addItem(new Weapon(\"Glock\", 3000, 500));\n\n        // Method Test\n        // finditembyname\n        Item item1 = weapons.findItemByName(\"AK47\");\n        System.out.println(item1);\n\n        // mostvaluableitem\n        item1 = weapons.mostValuableItem();\n        System.out.println(item1);\n\n        // finditemsbyvalue\n        List<Weapon> list1 = weapons.findItemsByValue(2500);\n        for (Weapon w : list1) {\n            System.out.println(w);\n        }\n\n        // sort by value\n        weapons.sortByValue();\n        System.out.println(\"sıralı\");\n        weapons.printInventory();\n\n        // gettotalvalue\n        System.out.println(\"Total value\");\n        System.out.println(weapons.getTotalValue());\n\n        // remove item\n        weapons.removeItem((Weapon) item1);\n        weapons.printInventory();\n\n        items.addItem(new Armor(\"Zırh\", 1000, 1000));\n        items.addItem(new Potion(\"Potion1\", 200, \"zehir\"));\n        items.addItem(new Weapon(\"Sniper\", 6000, 3000));\n\n        // filterbytype\n        System.out.println(\"filtered list\");\n        List<Item> list2 = items.filterByType(new Potion().getClass());\n        for (Item i : list2) {\n            System.out.println(i);\n        }\n\n        // gettotalweapondamage\n        System.out.println(\"total damage\");\n        System.out.println(items.getTotalWeaponDamage());\n\n        Inventory<Armor> armors = new Inventory<>();\n        armors.addItem(new Armor(\"armor10\", 100, 100));\n        armors.addItem(new Armor(\"armor20\", 100, 100));\n        armors.addItem(new Armor(\"armor20\", 100, 100));\n\n        // print most valuable item\n        Inventory.printMostValuableItem(armors);\n\n        // transfer armor\n        System.out.println(\"Armors transferred\");\n        Inventory.transferArmor(items, armors);\n        items.printInventory();\n    }\n}\n"
    },
    {
      "id": "8190737",
      "Driver.java": "import java.util.*;\n\ninterface Item{\n    String getName();\n    int getValue();\n}\n\nclass Weapon implements Item{\n    String name;\n    int value;\n    int damage;\n    \n    public Weapon(String name, int value, int damage){\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName(){\n        return name;\n    }\n    public int getValue(){\n        return value;\n    }\n}\n\nclass Armor implements Item{\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense){\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String getName(){\n        return name;\n    }\n    public int getValue(){\n        return value;\n    }\n}\n\nclass Potion implements Item{\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect){\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName(){\n        return name;\n    }\n    public int getValue(){\n        return value;\n    }\n}\n\nclass Inventory<T extends Item>{\n    ArrayList<T> list;\n    public Inventory(){\n        list = new ArrayList<>();\n    }\n\n    void addItem(T item){\n        list.add(item);\n    }\n\n    void removeItem(T item){\n        list.remove(item);\n    }\n\n    void printInventory(){\n        for(T item:list){\n            System.out.println(item.getName());\n        }\n    }\n\n    T mostValuableItem(){\n        if(list.size() == 0)\n            return null;\n        T ret = list.get(0);\n        for(int i = 1;i < list.size();i++){\n            if(list.get(i).getValue() > ret.getValue())\n                ret = list.get(i);\n        }\n        return ret;\n    }\n\n    T findItemByName(String name){\n        for(T item:list){\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    ArrayList<T> findItemsByValue(int value){\n        ArrayList<T> retList = new ArrayList<T>();\n        for(T item:list){\n            if(item.getValue() > value)\n                retList.add(item);\n        }\n        return retList;\n    }\n\n    int getTotalValue(){\n        int total = 0;\n        for(T item:list)\n            total += item.getValue();\n        return total;\n    }\n\n    ArrayList<T> filterByType(Class<?> type){\n        ArrayList<T> retList = new ArrayList<>();\n        for(T item:list){\n            Class<?> currentClass = item.getClass();\n            if(type.getName().equals(currentClass.getName()))\n                retList.add(item);\n        }\n        return retList;\n    }\n\n    int getTotalWeaponDamage(){\n        int total = 0;\n        for(T item:list){\n            Class<?> currentClass = item.getClass();\n            if(currentClass.getName().equals(\"Weapon\"))\n                total += ((Weapon)item).damage;\n        }\n        return total;\n    }\n\n    void sortByValue(){\n        for(int i = 0;i < list.size();i++){\n            for(int j = 1;j < list.size();j++){\n                T item1 = list.get(j-1);\n                T item2 = list.get(j);\n\n                if(item1.getValue() < item2.getValue()){\n                    list.set(j-1, item2);\n                    list.set(j, item1);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        System.out.println(inventory.mostValuableItem().getName());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source){\n        for(Armor armor:source.list){\n            destination.addItem(armor);\n        }\n    }\n}\n\npublic class Driver {\n    public static void main(String[] args) {\n\n        Inventory<Item> inventory = new Inventory<>();\n\n        Armor ar = new Armor(\"armor10\", 10, 20);\n        inventory.addItem(ar);\n        inventory.addItem(new Weapon(\"weapon11\", 11, 25));\n        inventory.addItem(new Potion(\"potion12\", 12, \"potipoti\"));\n        inventory.addItem(new Weapon(\"weapon23\", 23, 51));\n\n        inventory.sortByValue();\n\n        inventory.printInventory();\n        Inventory.printMostValuableItem(inventory);\n        System.out.println(inventory.getTotalWeaponDamage());\n        System.out.println(inventory.getTotalValue());\n\n        System.out.println(\"-------------------------\");\n        \n        Class<?> cls = Potion.class;\n        ArrayList<Item> list = inventory.filterByType(cls);\n        for(Item item:list){\n            System.out.println(item.getName());\n        }\n\n        System.out.println(\"-------------------------\");\n\n        inventory.removeItem(ar);\n        inventory.printInventory();\n\n        System.out.println(\"-------------------------\");\n\n        Inventory<Armor> armors = new Inventory<>();\n        armors.addItem(new Armor(\"a1\", 1, 1));\n        armors.addItem(new Armor(\"a2\", 2, 2));\n        armors.addItem(new Armor(\"a3\", 3, 3));\n        armors.addItem(new Armor(\"a4\", 4, 4));\n\n        Inventory.transferArmor(inventory, armors);\n\n        inventory.printInventory();\n\n        Item tt = inventory.findItemByName(\"a4\");\n        System.out.println(tt.getName() + \" \" + tt.getValue());\n\n        System.out.println(\"-------------------------\");\n        \n        list = inventory.findItemsByValue(3);\n        for(Item item:list){\n            System.out.println(item.getName());\n        }\n\n        System.out.println(\"-------------------------\");\n    }\n\n}"
    },
    {
      "id": "4380745",
      "Inventory.java": "package Bil211Lab4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> inventory;\n\n    public Inventory(){\n        inventory = new ArrayList<>();\n    }\n\n    public List<T> getInventory(){\n        return inventory;\n    }\n\n    public void addItem(T item){\n        if(inventory != null){\n            inventory.add(item);\n        }\n    }\n\n    public void removeItem(T item){\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                if(inventory.get(i).getName().equals(item.getName())){\n                    inventory.remove(i);\n                    break;\n                }\n            }\n        }\n    }\n\n    public void printInventory(){\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                System.out.println(\"Name: \" + inventory.get(i).getName());\n                System.out.println(\"Value: \" + inventory.get(i).getValue());\n            }\n        }\n    }\n\n    public T mostValuableItem(){\n        T mValuable = null;\n        \n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                if(mValuable != null && mValuable.getValue() < inventory.get(i).getValue()){\n                    mValuable = inventory.get(i);\n                }\n                if(mValuable == null){\n                    mValuable = inventory.get(i);\n                    continue;\n                }\n            }\n        }\n\n        return mValuable;\n    }\n\n    public T findItemByName(String name){\n        T item = null;\n        \n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                if(inventory.get(i).getName().equals(name)){\n                    item = inventory.get(i);\n                    break;\n                }\n            }\n        }\n\n        return item;\n    }\n\n    public ArrayList<T> findItemsByValue(int value){\n        ArrayList<T> list = new ArrayList<>();\n\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                if(inventory.get(i).getValue() > value){\n                    list.add(inventory.get(i));\n                }\n            }\n        }\n\n        return list;\n    }\n\n    public int getTotalValue(){\n        int value =0;\n\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                value += inventory.get(i).getValue();\n            }\n        }\n\n        return value;\n    }\n\n    public ArrayList<T> filterByType(Class<?> type){\n        ArrayList<T> list = new ArrayList<>();\n\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                if(inventory.get(i).getClass().getName().equals(type.getName())){\n                    list.add(inventory.get(i));\n                }\n            }\n        }\n\n        return list;\n    }\n\n    public int getTotalWeaponDamage(){\n        int totalDamage = 0;\n\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                if(inventory.get(i) instanceof Weapon){\n                    totalDamage += ((Weapon)inventory.get(i)).damage;\n                }\n            }\n        }\n\n        return totalDamage;\n    }\n\n    public void sortByValue(){\n\n        if(inventory != null){\n            for(int i = 0; i < inventory.size(); i++){\n                for(int j = 0; j < inventory.size() - 1; j++){\n                    if(inventory.get(j).getValue() < inventory.get(j + 1).getValue()){\n                        T temp = inventory.get(j);\n                        inventory.set(j, inventory.get(j + 1));\n                        inventory.set(j + 1, temp);\n                    }\n                }\n            }\n        }\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        Item item = null;\n        if(inventory != null){\n            for(int i = 0; i < inventory.getInventory().size(); i++){\n                if(item != null && item.getValue() < inventory.getInventory().get(i).getValue()){\n                    item = inventory.getInventory().get(i);\n                }\n                if(item == null){\n                    item = inventory.getInventory().get(i);\n                }\n            }\n        }\n        if(item != null){\n            System.out.println(\"Name: \" + item.getName());\n            System.out.println(\"Value: \" + item.getValue());\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> inventory2){\n\n        if(destination != null && inventory2 != null){\n            for(int i = 0; i < inventory2.getInventory().size(); i++){\n                destination.getInventory().add(inventory2.getInventory().get(i));\n            }\n        }\n    }\n}\n",
      "Weapon.java": "package Bil211Lab4;\n\npublic class Weapon implements Item{\n    int damage = 10;\n    \n    String name;\n    int value;\n\n    public Weapon(String name, int value, int damage){\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n       return value;\n    }\n\n}\n",
      "Item.java": "package Bil211Lab4;\n\npublic interface Item {\n    String getName();\n    int getValue();\n} \n",
      "Armor.java": "package Bil211Lab4;\n\npublic class Armor implements Item{\n    int defense;\n\n    String name;\n    int value;\n\n    public Armor(String name, int value, int defense){\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n       return value;\n    }\n\n}\n",
      "Potion.java": "package Bil211Lab4;\n\npublic class Potion implements Item{\n\n    String effect;\n\n    String name;\n    int value;\n\n    public Potion(String name, int value, String effect){\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n       return value;\n    }\n}\n",
      "Driver.java": "package Bil211Lab4;\n\nimport java.util.ArrayList;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory<Weapon> inventory1 = new Inventory<Weapon>();\n        Inventory<Item> inventory2 = new Inventory<Item>();\n\n        for(int i = 0; i < 5; i++){\n            inventory1.addItem(new Weapon(\"Weapon\" + i, i,i));\n            if(i%3 == 0){\n                inventory2.addItem(new Armor(\"Armor\" + i, i,i));\n            }\n            else if(i%3 == 1){\n                inventory2.addItem(new Potion(\"Potion\" + i, i, \"Effect\" + i));\n            }\n            else{\n                inventory2.addItem(new Weapon(\"Weapon\" + i, i, i));\n            }\n        }\n\n        //inventory1.printInventory();\n        //inventory2.printInventory();\n\n        //inventory1.removeItem(inventory1.getInventory().get(2));\n        //inventory1.printInventory();\n\n        //Item item = inventory2.mostValuableItem();\n        //System.out.println(\"Name: \" + item.getName());\n        //System.out.println(\"Value: \" + item.getValue());\n\n        //Item item = inventory2.findItemByName(\"Potion4\");\n        //System.out.println(item);\n\n        //ArrayList<Item> list = inventory2.findItemsByValue(2);\n        //for(int i = 0; i < list.size(); i++){\n        //    System.out.println(list.get(i).getName());\n        //    System.out.println(list.get(i).getValue());\n        //}\n\n        //System.out.println(inventory1.getTotalWeaponDamage());\n        //System.out.println(inventory1.getTotalValue());\n\n        //ArrayList<Item> list = inventory2.filterByType(Potion.class);\n        //for(int i = 0; i < list.size(); i++){\n        //    System.out.println(list.get(i).getName());\n        //    System.out.println(list.get(i).getValue());\n        //}\n\n        //inventory2.sortByValue();\n        //inventory2.printInventory();\n\n        //Inventory.printMostValuableItem(inventory2);\n\n        //Inventory<Armor> inventory3 = new Inventory<Armor>();\n        //inventory3.addItem(new Armor(\"A1\",1,1));\n        //inventory3.addItem(new Armor(\"A2\",2,2));\n        //inventory3.addItem(new Armor(\"A3\",3,3));\n        //inventory3.addItem(new Armor(\"A4\",4,4));\n        //Inventory<Armor> inventory4 = new Inventory<Armor>();\n        //Inventory.transferArmor(inventory4, inventory3);\n        //inventory4.printInventory();\n    }\n}\n"
    },
    {
      "id": "9830856",
      "Inventory.java": "import java.util.*;\n\npublic class Inventory<T extends Item> \n{\n    private ArrayList<T> items;\n\n    public Inventory() \n    {\n        items = new ArrayList<>();\n    }\n\n    public void addItem(T item) \n    {\n        items.add(item);\n        System.out.println(item.getName() + \" eşyası eklendi\");\n    }\n\n    public void removeItem(T item) \n    {\n    for(int i=0; i<items.size(); i++)\n    {\n        if(item.getName().equals(items.get(i).getName())&& item.getValue()==items.get(i).getValue())\n        {\n            items.remove(i);\n            System.out.println();\n            break;\n        }\n    \n    }\n        \n        System.out.println(item.getName() + \" eşyası çıkarıldı\");\n    }\n\n    public void printInventory() \n    {\n        for (T item : items) \n        {\n            System.out.println(item.getName() + \"---> eşyasının değeri:\" + item.getValue());\n        }\n    }\n\n    public T mostValuableItem() \n    {\n        if (items.isEmpty()) \n        return null;\n \n        else \n        return items.stream()\n                   .max(Comparator.comparingInt(Item::getValue))\n                   .orElse(null);\n\n            \n    }\n\n    public T findItemByName(String name) \n    {\n        return items.stream()\n                   .filter(item -> item.getName().equals(name))\n                   .findFirst()\n                   .orElse(null);\n    }\n\n    public List<T> findItemsByValue(int value) \n    {\n        return items.stream()\n                   .filter(item -> item.getValue() > value)\n                   .toList();\n    }\n\n    public int getTotalValue() \n    {\n        return items.stream()\n                   .mapToInt(Item::getValue)\n                   .sum();\n    }\n\n    public List<T> filterByType(Class<?> type) \n    {\n        return items.stream()\n                   .filter(item -> type.isInstance(item))\n                   .toList();\n    }\n\n    public int getTotalWeaponDamage() {\n        return items.stream()\n                   .filter(item -> item instanceof Weapon)\n                   .mapToInt(item -> ((Weapon) item).getDamage())\n                   .sum();\n    }\n\n    public void sortByValue() \n    {\n        items.sort((item1, item2) -> Integer.compare(item2.getValue(), item1.getValue()));\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) \n    {\n        Item item = inventory.mostValuableItem();\n\n        if (item != null) \n        {\n            System.out.println(item.getName() + \" ---> Değeri: \" + item.getValue());\n        }\n\n        else\n        System.out.println(\"Envanter şu anda boş\");\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) \n    {\n        List<Armor> armors = source.filterByType(Armor.class);\n        for (Armor armor : armors) \n        {\n            destination.addItem(armor);\n            \n        }\n    }\n}",
      "Weapon.java": "public class Weapon implements Item \n{\n    private String name;\n    private int value;\n    private int damage;\n\n    public Weapon(String name, int value, int damage) \n    {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() \n    {\n        return name;\n    }\n\n    @Override\n    public int getValue() \n    {\n        return value;\n    }\n\n    public int getDamage() \n    {\n        return damage;\n    }\n}\n",
      "Item.java": "public interface Item \n{\n    String getName();\n    int getValue();\n}\n\n\n\n",
      "Armor.java": "public class Armor implements Item \n{\n    private String name;\n    private int value;\n    private int defense;\n\n    public Armor(String name, int value, int defense) \n    {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() \n    {\n        return name;\n    }\n\n    @Override\n    public int getValue() \n    {\n        return value;\n    }\n\n    public int getDefense() \n    {\n        return defense;\n    }\n}\n",
      "Potion.java": "\npublic class Potion implements Item {\n    private String name;\n    private int value;\n    private String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n}\n\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        \n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        weaponInventory.addItem(new Weapon(\"Taş Balta \", 100, 50));\n        weaponInventory.addItem(new Weapon(\"Altın Kılıç\", 150, 30));\n        weaponInventory.addItem(new Weapon(\"Elmas Kılıç\", 200, 70));\n        weaponInventory.addItem(new Weapon(\"Demir Kılıç\", 120, 60));\n\n        System.out.println(\"Silah Envanteri:\");\n        weaponInventory.printInventory();\n        System.out.println(\"Toplam Hasar: \" + weaponInventory.getTotalWeaponDamage());\n        \n\n        Inventory<Item> generalInventory = new Inventory<>();\n        generalInventory.addItem(new Weapon(\"Excalibur\", 1000, 100));\n        generalInventory.addItem(new Armor(\"Elmas Zırh\", 500, 80));\n        generalInventory.addItem(new Potion(\"Can İksiri\", 90, \"Healing\"));\n        generalInventory.addItem(new Potion(\"Fİre Resistance Potion\", 70, \"Not-to-burn\"));\n\n\n        System.out.println();\n        System.out.println(\"Genel Envanter:\");\n        generalInventory.printInventory();\n        \n        generalInventory.sortByValue();\n        System.out.println();\n        System.out.println(\"Değere Göre Sıralanmış Envanter:\");\n        generalInventory.printInventory();\n\n        System.out.println();\n        System.out.println(\"En Değerli Eşyalar:\");\n        System.out.print(\"Silah envanterinin en değerli eşyası :\");\n        Inventory.printMostValuableItem(weaponInventory);\n        System.out.print(\"Genel envanterin en değerli eşyası :\");\n        Inventory.printMostValuableItem(generalInventory);\n\n        \n        Inventory<Armor> armorInventory = new Inventory<>();\n        Armor zırh=new Armor(\"Demir Zirh\", 300, 60);\n        armorInventory.addItem(zırh);\n        Inventory.transferArmor(generalInventory, armorInventory);\n        armorInventory.printInventory();\n        armorInventory.removeItem(zırh);\n        armorInventory.printInventory();\n        System.out.println();\n        System.out.println(\"-------------------------------\");\n    }\n}"
    },
    {
      "id": "7214465",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    private List<T> items;\n\n    public Inventory() {\n        items = new ArrayList<>();\n    }\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item.getName() + \" : \" + item.getValue());\n        }\n    }\n\n    public T mostValuableItem() {\n        if (items.isEmpty()){\n            return null; \n        }\n        T mostValuable = items.get(0);\n        for (T item : items) {\n            if (item.getValue() > mostValuable.getValue()) {\n                mostValuable = item;\n            }\n        }\n        return mostValuable;\n    }\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (item.getName().equals(name)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (item.getValue() > value) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public int getTotalValue() {\n        int total = 0;\n        for (T item : items) {\n            total += item.getValue();\n        }\n        return total;\n    }\n\n    public List<T> filterByType(Class<?> type) {     \n        List<T> result = new ArrayList<>();\n        for (T item : items) {\n            if (type.isInstance(item)) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public int getTotalWeaponDamage() {\n        int totalDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalDamage += ((Weapon) item).getDamage();\n            }\n        }\n        return totalDamage;\n    }\n\n    public void sortByValue() {    \n        items.sort((item1, item2) -> Integer.compare(item2.getValue(), item1.getValue()));\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"En değerli item: \" + mostValuable.getName() + \" - \" + mostValuable.getValue());\n        } else {\n            System.out.println(\"Envanter boş. \");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor ar : source.items) {\n            destination.addItem(ar);\n        }\n    }\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n}\n\nclass Weapon implements Item {\n    private final String name;\n    private final int value;\n    private final int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n}\n\nclass Armor implements Item {\n    private final String name;\n    private final int value;\n    private final int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public int getDefense() {\n        return defense;\n    }\n}\n\nclass Potion implements Item {\n    private final String name;\n    private final int value;\n    private final String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n}\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        weaponInventory.addItem(new Weapon(\"Excalibur\", 1000, 100));\n        weaponInventory.addItem(new Weapon(\"ABC\", 500, 50));\n\n        Inventory<Item> itemInventory = new Inventory<>();\n        itemInventory.addItem(new Weapon(\"W1\", 200, 20));\n        itemInventory.addItem(new Weapon(\"W2\", 300, 30));\n        Weapon asd =  new Weapon(\"W3\", 180, 15);\n        itemInventory.addItem(asd);\n        itemInventory.addItem(new Armor(\"A1\", 300, 30));\n        itemInventory.addItem(new Potion(\"P1\", 150, \"-Etki-\"));\n\n        weaponInventory.printInventory();\n        itemInventory.printInventory();\n\n        System.out.println(\"W3 Silahı çıkartılıyor... \");\n        itemInventory.removeItem(asd);\n        System.out.println(\"Güncellenmiş Envanter: \");\n        itemInventory.printInventory();\n        System.out.println();\n\n        Inventory.printMostValuableItem(weaponInventory);\n        Inventory.printMostValuableItem(itemInventory);\n        System.out.println();\n        \n        System.out.print(\"Toplam Değer: \" + itemInventory.getTotalValue());\n        System.out.println();\n\n        System.out.print(\"Toplam Silah Hasarı: \" + itemInventory.getTotalWeaponDamage());\n        System.out.println();\n\n        Inventory<Armor> itemInventory2 = new Inventory<>();\n        Inventory.transferArmor(itemInventory, itemInventory2);\n\n    }\n}"
    },
    {
      "id": "8783086",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> inv = new ArrayList<T>();\n\n    public void addItem(T item) {\n        inv.add(item);\n    }\n\n    public void removeItem(T item) {\n        inv.remove(item);\n    }\n\n    public T mostValuableItem() {\n        T mostvaluable = inv.get(0);\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                if (inv.get(i).getValue() > mostvaluable.getValue()) {\n                    mostvaluable = inv.get(i);\n                }\n            }\n        }\n        return mostvaluable;\n    }\n\n    public void printInventory() {\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                System.out.println(\"Name: \" + inv.get(i).getName() + \" value: \" + inv.get(i).getValue());\n            }\n        }\n    }\n\n    public T findItemByName(String name) {\n        T found = null;\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                if (inv.get(i).getName().equals(name)) {\n                    found = inv.get(i);\n                }\n            }\n        }\n        return found;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> foundItems = new ArrayList<T>();\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                if (inv.get(i).getValue() >= value) {\n                    foundItems.add(inv.get(i));\n                }\n            }\n        }\n        return foundItems;\n    }\n\n    public int getTotalValue() {\n        int total = 0;\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                total += inv.get(i).getValue();\n            }\n        }\n        return total;\n    }\n\n    List<T> filterByType(Class<?> type) {\n        List<T> filtered = new ArrayList<T>();\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                if (inv.get(i).getClass().equals(type)) {\n                    filtered.add(inv.get(i));\n                }\n            }\n        }\n        return filtered;\n    }\n\n    int getTotalWeaponDamage() {\n        int total = 0;\n        for (int i = 0; i < inv.size(); i++) {\n            if (inv.get(i) != null) {\n                if (inv.get(i).getClass().equals(Weapon.class)) {\n                    total += ((Weapon) inv.get(i)).getDamage();\n                }\n            }\n        }\n        return total;\n    }\n\n    public void sortByValue() {\n        ArrayList<T> temp = new ArrayList<T>();\n        while (inv.size() != 0) {\n            T max = inv.get(0);\n            for (int i = 0; i < inv.size(); i++) {\n\n                if (inv.get(i).getValue() > max.getValue()) {\n                    max = inv.get(i);\n                }\n            }\n            temp.add(max);\n            inv.remove(max);\n        }\n        inv = temp;\n\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item item = inventory.mostValuableItem();\n        if (item != null) {\n            System.out.println(\"Name: \" + item.getName() + \" Value: \" + item.getValue());\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (int i = 0; i < source.inv.size(); i++) {\n            if (source.inv.get(i).getClass().equals(Armor.class)) {\n                destination.inv.add(source.inv.get(i));\n            }\n\n        }\n    }\n}\n",
      "Weapon.java": "\npublic class Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public int getDamage() {\n        return damage;\n    }\n\n}\n",
      "Item.java": "public interface Item {\n\n    String getName();\n\n    int getValue();\n\n}\n",
      "Armor.java": "public class Armor implements Item {\n    int defence;\n    String name;\n    int value;\n\n    public Armor(String name, int value, int defence) {\n        this.name = name;\n        this.value = value;\n        this.defence = defence;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n}\n",
      "Potion.java": "public class Potion implements Item {\n    String effect;\n    String name;\n    int value;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n}\n",
      "Driver.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Weapon sword = new Weapon(\"Excalibur\", 10, 100);\n        Weapon sword1 = new Weapon(\"Excalibur1\", 100, 100);\n        Weapon sword2 = new Weapon(\"Excalibur2\", 1000, 100);\n        Weapon sword3 = new Weapon(\"Excalibur3\", 2000, 100);\n        Inventory<Weapon> weaponInv = new Inventory<Weapon>();\n        weaponInv.addItem(sword);\n        weaponInv.addItem(sword1);\n        weaponInv.addItem(sword2);\n        weaponInv.addItem(sword3);\n        weaponInv.printInventory();\n        weaponInv.removeItem(sword2);\n        weaponInv.sortByValue();\n        weaponInv.printInventory();\n        weaponInv.addItem(sword2);\n        System.out.println(\"Total value: \" + weaponInv.getTotalValue());\n        System.out.println(\"get total weapon damage: \" + weaponInv.getTotalWeaponDamage());\n\n        // isme göre eşyayı bulan method\n        Item newItem = weaponInv.findItemByName(\"Excalibur\");\n        System.out.println(newItem.getName() + \" Value: \" + newItem.getValue());\n\n        // en değerli itemi bulan method\n        Item mostValuable = weaponInv.mostValuableItem();\n        System.out.println(\"Name: \" + mostValuable.getName() + \" Value: \" + mostValuable.getValue());\n\n        // 20 değerinden büyük itemleri bulan method\n        List<Weapon> sortCost = weaponInv.findItemsByValue(20);\n        for (int i = 0; i < sortCost.size(); i++) {\n            System.out.println(\"Name: \" + sortCost.get(i).getName() + \" Value: \" + sortCost.get(i).getValue());\n        }\n\n        Armor armor = new Armor(\"Kalkan\", 10, 200);\n        Armor armor1 = new Armor(\"Kalkan1\", 100, 200);\n        Potion potion = new Potion(\"Can\", 1000, \"Canı arttırır\");\n\n        Inventory<Item> inv = new Inventory<>();\n\n        inv.addItem(sword);\n        inv.addItem(sword1);\n\n        inv.addItem(potion);\n        List<Item> filtered = inv.filterByType(Weapon.class);\n        System.out.println(\"filtered: \\n\\n\");\n        for (int i = 0; i < filtered.size(); i++) {\n\n            System.out.println(\"Name: \" + filtered.get(i).getName() + \" Value: \" + filtered.get(i).getValue());\n        }\n\n        System.out.println(\"ikinci kısım \\n \\n\");\n        Inventory.printMostValuableItem(inv);\n\n        Inventory<Armor> armorInv = new Inventory<>();\n        armorInv.addItem(armor);\n        armorInv.addItem(armor1);\n        Inventory.transferArmor(inv, armorInv);\n        inv.printInventory();\n\n    }\n}\n"
    },
    {
      "id": "8435496",
      "Inventory.java": "package Lab.Lab4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item>\n{\n    private ArrayList<T> list;\n\n    public Inventory()\n    {\n        list = new ArrayList<>();\n    }\n\n    public void addItem(T item)\n    {\n        list.add(item);\n    }\n\n    public void removeItem(T item)\n    {\n        list.remove(item);\n    }\n\n    public void printInventory()\n    {\n        System.out.println(list);\n    }\n\n    public T mostValuableItem()\n    {\n        T mostVal = null;\n        for (T t : list)\n        {\n            if (mostVal == null || mostVal.getValue() < t.getValue())\n            {\n                mostVal = t;\n            }\n        }\n        return mostVal;\n    }\n\n    public T findItemByName(String name)\n    {\n        for (T t : list)\n        {\n            if (t.getName().equals(name))\n            {\n                return t;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value)\n    {\n        ArrayList<T> sameVal = new ArrayList<>();\n        for (T t : list)\n        {\n            if (value == t.getValue())\n            {\n                sameVal.add(t);\n            }\n        }\n        return sameVal;\n    }\n\n    public int getTotalValue()\n    {\n        int sum = 0;\n        for(T t : list)\n        {\n            sum += t.getValue();\n        }\n        return sum;\n    }\n\n    public List<T> filterByType(Class<?> type)\n    {\n        ArrayList<T> filtered = new ArrayList<>();\n        for (T t : list)\n        {\n            if (t.getClass().getName().equals(type.getName()))\n            {\n                filtered.add(t);\n            }\n        }\n        return filtered;\n    }\n\n    public int getTotalWeaponDamage()\n    {\n        int sum = 0;\n        for (T t : list)\n        {\n            if (t.getClass().getName().equals(Weapon.class.getName()))\n            {\n                sum += t.getValue();\n            }\n        }\n        return sum;\n    }\n\n    public void sortByValue()\n    {\n        int length = list.size();\n        ArrayList<T> sorted = new ArrayList<>();\n\n        for (int i = 0; i < length; i++)\n        {\n            int max = 0;\n            T t = null;\n            for (int j = 0; j < list.size(); j++)\n            {\n                T tmp = list.get(j);\n                if (tmp.getValue() > max)\n                {\n                    t = tmp;\n                    max = t.getValue();\n                }\n            }\n            sorted.add(t);\n            list.remove(t);\n        }\n        list = sorted;\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory)\n    {\n        System.out.println(inventory.mostValuableItem());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source)\n    {\n        for (Armor armor : source.filterByType(Armor.class))\n        {\n            destination.addItem(armor);\n            source.removeItem(armor);\n        }\n    }\n}\n",
      "Weapon.java": "package Lab.Lab4;\n\npublic class Weapon implements Item\n{\n    String name;\n    int damage;\n\n    public Weapon(String name, int damage)\n    {\n        this.name = name;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName()\n    {\n        return name;\n    }\n\n    @Override\n    public int getValue()\n    {\n        return damage;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"{Weapon-> Name: \" + name + \", Damage: \" + damage + \"}\";\n    }\n}\n",
      "Item.java": "package Lab.Lab4;\n\npublic interface Item\n{\n    String getName();\n    int getValue();\n}\n",
      "Armor.java": "package Lab.Lab4;\n\npublic class Armor implements Item\n{\n    String name;\n    int defence;\n\n    public Armor(String name, int defence)\n    {\n        this.name = name;\n        this.defence = defence;\n    }\n\n    @Override\n    public String getName()\n    {\n        return name;\n    }\n\n    @Override\n    public int getValue()\n    {\n        return defence;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"{Armor-> Name: \" + name + \", Defence: \" + defence + \"}\";\n    }\n}\n",
      "Potion.java": "package Lab.Lab4;\n\npublic class Potion implements Item\n{\n    String name;\n    String effect;\n    int value;\n\n    public Potion(String name, String effect, int value)\n    {\n        this.name = name;\n        this.effect = effect;\n        this.value = value;\n    }\n\n    @Override\n    public String getName()\n    {\n        return name;\n    }\n\n    @Override\n    public int getValue()\n    {\n        return value;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"{Potion-> Name: \" + name + \", Effect: \" +\n                effect + \", Value: \" + value + \"}\";\n    }\n}\n",
      "Driver.java": "package Lab.Lab4;\n\npublic class Driver\n{\n    public static void main(String[] args)\n    {\n        Inventory<Weapon> w = new Inventory<>();\n        w.addItem(new Weapon(\"w1\", 4));\n        w.addItem(new Weapon(\"w2\", 2));\n        System.out.print(\"Weapon Inventory: \");\n        w.printInventory();\n\n        Inventory<Item> i = new Inventory<>();\n        i.addItem(new Potion(\"p1\", \"e1\", 1));\n        i.addItem(new Armor(\"a1\", 1));\n        i.addItem(new Armor(\"a2\", 3));\n        i.addItem(new Weapon(\"w3\", 0));\n        System.out.print(\"Item inventory: \");\n        i.printInventory();\n\n        Inventory<Armor> a = new Inventory<Armor>();\n        a.addItem(new Armor(\"a1\", 2));\n        a.addItem(new Armor(\"a2\", 1));\n        System.out.print(\"Armor Inventory: \");\n        a.printInventory();\n\n        System.out.println();\n\n        System.out.print(\"Most valuable in Item Inventory: \");\n        Inventory.printMostValuableItem(i);\n\n        System.out.print(\"Most valuable in Weapon Inventory: \");\n        Inventory.printMostValuableItem(w);\n\n        System.out.println();\n\n        System.out.println(\"Sort Armor Inventory by value (desc):\");\n        a.sortByValue();\n        System.out.print(\"Sorted Armor Inventory: \");\n        a.printInventory();\n\n        System.out.println();\n\n        System.out.println(\"Weapon Inventory -> Item Inventory, transfer weapons and sort: \");\n        Inventory.transferArmor(i, a);\n        System.out.print(\"Item Inventory: \");\n        i.printInventory();\n        System.out.print(\"Armor Inventory: \");\n        a.printInventory();\n\n        System.out.println();\n\n        System.out.println(\"Find item with name a1: \" + i.findItemByName(\"a1\"));\n        System.out.println(\"Find items with value 2: \" + i.findItemsByValue(2));\n        System.out.println(\"Total value of Item Inventory: \" + i.getTotalValue());\n        System.out.println(\"Total weapon damage of Weapon Inventory: \" + w.getTotalWeaponDamage());\n    }\n}\n"
    },
    {
      "id": "6202193",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.ToolTipManager;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> list;  \n\n    public Inventory(){\n        list = new ArrayList<>();\n    }\n\n    void addItem(T item ){\n        list.add(item);\n    }\n\n    void removeItem(T item){\n        list.remove(item);\n    }\n\n    void printInventory(){\n        for(T item : list){\n            System.out.println(item.getName());\n        }\n    }\n\n    T mostValuableItem(){\n        int temp = 0;\n        Item esya = null;\n        for(T item : list){\n            if(item.getValue()>temp){\n                temp = item.getValue();\n                esya = item;\n            }\n            \n        }\n        return (T)esya;\n    }\n\n    T findItemByName(String name){\n        T output = null;\n        for(Item i : list){\n            if(name.equals(i.getName()))output = (T)i;\n        }\n        return output;\n    }\n\n    List<T> findItemsByValue(int value){\n        ArrayList output = new ArrayList<T>();\n\n        for(Item item : list){\n            if(item.getValue()==value){\n                output.add(item);\n            }\n        }\n\n        return output;\n    }\n\n    int getTotalValue(){\n        int total =0;\n        for(Item item : list){\n            total +=item.getValue();\n        }\n        return total;\n    }\n\n    List<T> filterByType(Class<?> type){\n        ArrayList output = new ArrayList<T>();\n        for(Item item : list){\n            if(item.getClass()==type){\n                output.add(item);\n            }\n        }\n        return output;\n    }\n\n    int getTotalWeaponDamage(){\n        int count=0;\n        for(Item item : list){\n            if(item instanceof Weapon){\n                count+=((Weapon)item).damage;\n            }\n        }\n        return count;\n    }\n\n    void sortByValue(){\n        ArrayList<String> output = new ArrayList<String>();\n\n        for(int i = 0;i<list.size();i++){\n            int max = -1;\n            Item added = null;\n            for(int a = 0;a<list.size();a++){\n                \n                if(list.get(a).getValue()>max&&!output.contains(list.get(a).getName())){\n                    max = list.get(a).getValue();\n                    added = list.get(a);\n                    output.add(added.getName());\n                    \n                    \n                    \n                }\n            }\n            System.out.println(added.getName()+\" fiyat:\"+added.getValue());\n        }\n\n        \n        \n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory){\n        int max =0;\n        String name = \"\";\n        for(int i = 0;i<inventory.list.size();i++){\n            if(inventory.list.get(i).getValue()>max){\n                max=inventory.list.get(i).getValue();\n                name = inventory.list.get(i).getName();\n            }\n\n        }\n\n        System.out.println(name);\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination,Inventory<Armor> source){\n        for(Armor armor: source.list){\n            destination.list.add(armor);\n        }\n    }\n\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    String name;\n    int value;\n    int damage;\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public Weapon(String name, int value, int damage){\n        this.name=name;\n        this.value=value;\n        this.damage= damage;\n    }\n}\n",
      "Item.java": "public interface Item {\n    abstract String getName();\n    abstract int getValue();\n}\n",
      "Armor.java": "public class Armor implements Item {\n    String name;\n    int value;\n    int defense;\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public Armor(String name, int value, int defense){\n        this.name=name;\n        this.value=value;\n        this.defense=defense;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    String name;\n    int value;\n    String effect;\n\n    public String getName(){\n        return name;\n    }\n\n    public int getValue(){\n        return value;\n    }\n\n    public Potion(String name, int value, String effect){\n        this.name=name;\n        this.value=value;\n        this.effect=effect;\n    }\n}\n",
      "Driver.java": "import java.util.ArrayList;\n\npublic class Driver {\n    public static void main(String[] args) throws Exception {\n      Inventory<Item> a = new Inventory<Item>();\n      a.addItem(new Armor(\"ahmet\",1,2));\n      a.addItem(new Weapon(\"enes\", 0, 50));\n      Armor armor = new Armor(null, 0, 0);\n      ArrayList<Item> c = (ArrayList<Item>)a.filterByType(armor.getClass());\n      System.out.println(c.get(0).getName());\n    System.out.println(a.getTotalWeaponDamage());\n    a.sortByValue();\n    Inventory.printMostValuableItem(a);\n\n      Inventory<Armor> armolist = new Inventory<Armor>();\n      armolist.addItem(new Armor(\"armor\", 0, 0));\n      Inventory.transferArmor(a, armolist);\n\n      a.printInventory();\n\n      Inventory<Weapon> weaponlist = new Inventory<Weapon>();\n      weaponlist.addItem(new Weapon(\"weapon\", 0, 1111));\n      Weapon temp = weaponlist.findItemByName(\"weapon\");\n    System.out.println(temp.damage);\n\n    Inventory<Armor> newlist = new Inventory<>();\n    newlist.list= (ArrayList)a.filterByType(armor.getClass());\n      System.out.println(\"a\");\n    newlist.printInventory();\n    a.sortByValue();\n    System.out.println(a.getTotalValue());\n    Inventory.printMostValuableItem(a);\n\n    }\n}\n"
    },
    {
      "id": "1764665",
      "Inventory.java": "\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n\n    List<T> Itemlist = new ArrayList<T>();\n\n    void addItem(T item) {\n        Itemlist.add(item);\n    }\n\n    void removeItem(T item) {\n        try {\n            Itemlist.remove(Itemlist.indexOf(item));\n        } catch (Exception e) {\n            System.out.println(item.getName() + \" listede yok\");\n        }\n    }\n\n    void printInventory() {\n        System.out.println(\"---------Inventory---------\");\n        for (T elem : Itemlist) {\n            System.out.println(elem);\n        }\n    }\n\n    T mostValuableItem() {\n        int curr = -1;\n        T i = null;\n        for (T elem : Itemlist) {\n            if (elem.getValue() > curr) {\n                i = elem;\n                curr = elem.getValue();\n            }\n        }\n        return i;\n    }\n\n    T findItemByName(String name) {\n        for (T elem : Itemlist) {\n            if (elem.getName().equals(name)) {\n                return elem;\n            }\n        }\n        return null;\n    }\n\n    List<T> findItemsByValue(int value) {\n        List<T> list = new ArrayList<T>();\n        for (T elem : Itemlist) {\n            if (elem.getValue() > value) {\n                list.add(elem);\n            }\n        }\n        return list;\n    }\n\n    int getTotalValue() {\n        int value = 0;\n        for (T elem : Itemlist) {\n            value += elem.getValue();\n        }\n        return value;\n    }\n\n    List<T> filterByType(Class<?> type) {\n        List<T> list = new ArrayList<T>();\n        for (T elem : Itemlist) {\n            if (type == elem.getClass()) {\n                list.add(elem);\n            }\n        }\n        return list;\n    }\n\n    int getTotalWeaponDamage() {\n        List<T> list = filterByType(Weapon.class);\n        int damage = 0;\n        for (T elem : list) {\n            Weapon it = (Weapon) elem;\n            damage += it.damage;\n        }\n        return damage;\n    }\n\n    void sortByValue() {\n        List<T> list = new ArrayList<>();\n        while (!Itemlist.isEmpty()) {\n            int curr = -1;\n            T i = null;\n            for (T elem : Itemlist) {\n                if (elem.getValue() > curr) {\n                    i = elem;\n                    curr = elem.getValue();\n                }\n            }\n            this.removeItem(i);\n            list.add(i);\n        }\n        Itemlist = list;\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        System.out.println(inventory.mostValuableItem().toString());\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        for (Armor elem : source.Itemlist) {\n            destination.addItem(elem);\n            source.removeItem(elem);\n        }\n    }\n}\n",
      "Weapon.java": "\npublic class Weapon implements Item {\n    int damage, value;\n    String name = \"Weapon\";\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.value = value;\n        this.damage = damage;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Weapon: \" + name + \", Value: \" + value + \", Damage: \" + damage;\n    }\n\n}\n",
      "Item.java": "public interface Item {\n    public String getName();\n\n    public int getValue();\n}\n",
      "Armor.java": "public class Armor implements Item {\n    int defense, value;\n    String name = \"Armor\";\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Armor: \" + name + \", Value: \" + value + \", Defense: \" + defense;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    int value;\n    String name = \"Potion\", effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Potion: \" + name + \", Value: \" + value + \", Effect: \" + effect;\n    }\n\n}\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) throws Exception {\n        Inventory<Item> generalInventory = new Inventory<>();\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        Inventory<Armor> ArmorInventory = new Inventory<>();\n\n        Weapon sword = new Weapon(\"Sword\", 100, 20);\n        Weapon axe = new Weapon(\"Axe\", 80, 25);\n        Armor shield = new Armor(\"Shield\", 120, 15);\n        Potion healthPotion = new Potion(\"Health Potion\", 50, \"Heals 50 HP\");\n\n        generalInventory.addItem(sword);\n        generalInventory.addItem(shield);\n        generalInventory.addItem(healthPotion);\n        generalInventory.addItem(axe);\n        weaponInventory.addItem(axe);\n        weaponInventory.addItem(sword);\n\n        generalInventory.sortByValue();\n        weaponInventory.sortByValue();\n\n        generalInventory.printInventory();\n        System.out.println(generalInventory.findItemByName(\"Axe\"));\n        generalInventory.removeItem(axe);\n        System.out.println(generalInventory.findItemByName(\"Axe\"));\n        System.out.println(generalInventory.findItemsByValue(50));\n        System.out.println(\"Total value: \" + generalInventory.getTotalValue());\n        generalInventory.filterByType(Weapon.class);\n        System.out.println(\"Total Weapon Damage: \" + generalInventory.getTotalWeaponDamage());\n        System.out.print(\"Most Valuable Item: \");\n        Inventory.printMostValuableItem(generalInventory);\n\n        System.out.println(\"\\n \");\n\n        weaponInventory.printInventory();\n        System.out.println(weaponInventory.findItemByName(\"Axe\"));\n        weaponInventory.removeItem(axe);\n        System.out.println(weaponInventory.findItemByName(\"Axe\"));\n        System.out.println(weaponInventory.findItemsByValue(50));\n        System.out.println(\"Total value: \" + weaponInventory.getTotalValue());\n        weaponInventory.filterByType(Weapon.class);\n        System.out.println(\"Total Weapon Damage: \" + weaponInventory.getTotalWeaponDamage());\n        System.out.print(\"Most Valuable Item: \");\n        Inventory.printMostValuableItem(weaponInventory);\n\n        Inventory.transferArmor(generalInventory, ArmorInventory);\n    }\n}\n"
    },
    {
      "id": "3659398",
      "Inventory.java": "import java.util.*;\n\npublic class Inventory<T> {\n    ArrayList<T> list;\n    public  Inventory()\n    {\n        list = new ArrayList<>();\n    }\n    void addItem(T item) {\n        list.add(item);\n    }\n\n    void removeItem(T item) {\n        list.remove(item);\n    }\n\n    T mostValuableItem() {\n        int value = 0;\n        int indis = 0;\n        for (int i = 0; i < list.size(); i++) {\n            if (((Item) list.get(i)).getValue() > value) {\n                value = ((Item) list.get(i)).getValue();\n                indis = 0;\n            }\n        }\n        return list.get(indis);\n    }\n\n    T findItemByName(String name) {\n        if (list.indexOf(name) == -1)\n            return null;\n        return list.get(list.indexOf(name));\n    }\n\n    List<T> findItemsByValue(int value)\n        {\n            ArrayList<T>res = new ArrayList<>();\n            for(int i = 0; i < list.size(); i++)\n            {\n                if(((Item) list.get(i)).getValue() > value)\n                res.add(list.get(i));\n            }\n            return  res;\n        }\n\n    int getTotalValue() {\n        int res = 0;\n        for (int i = 0; i < list.size(); i++) {\n\n            res = res + ((Item) list.get(i)).getValue();\n        }\n        return res;\n    }\n\n    List<T> filterByType(Class<?> type) {\n        ArrayList<T> res = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n\n            if (list.get(i).getClass() == type)\n                res.add(list.get(i));\n\n        }\n        return res;\n    }\n\n    void sortByValue() {\n        \n        // Item[] arr = (Item[]) list.toArray();\n        // for(int i = 0; i < arr.length; i++)\n        // {\n        //     for(int j = 0; j < arr.length - 1; j++)\n        //     {\n        //         if(arr[j].getValue() > arr[j + 1].getValue())\n        //         {\n        //             Item temp = arr[j];\n                    \n        //             arr[j] = arr[j + 1];\n        //             arr[j + 1] = temp;\n        //         }\n        //     }\n        // }\n        // list.clear();\n        // for(int i = 0; i < arr.length; i++)\n        // {\n        //     list.add((T) arr[i]);\n        // }\n        for(int i = 0; i < list.size(); i++)\n        {\n            for(int j = 0; j < list.size() - 1; j++)\n            {\n                if(((Item) list.get(j)).getValue() > ((Item) list.get(j + 1)).getValue())\n                {\n                    Item temp = (Item) list.get(j);\n                    list.set(j, list.get(j + 1));\n                    list.set(j + 1, (T) temp);\n                    \n                    \n                }\n            }\n        }\n    }\n\n    public  void printMostValuableItem(Inventory<? extends Item> inventory) {\n        int value = 0;\n        int indis = 0;\n        for (int i = 0; i < list.size(); i++) {\n            if (((Item) list.get(i)).getValue() > value) {\n                value = ((Item) list.get(i)).getValue();\n                indis = i;\n            }\n        }\n        System.out.println(\"En değerli item: \"+ list.get(indis).getClass() + \" İsmi:\" + ((Item) list.get(indis)).getName() + \" Değeri:\" + ((Item) list.get(indis)).getValue() );\n       \n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n       for(int i = 0; i < destination.list.size(); i++)\n       {\n       source.addItem((Armor) destination.list.get(i));\n       }\n    }\n    public void print()\n    {\n        for(int i = 0; i<  list.size(); i++)\n        {\n            System.out.println(\" item: \"+ list.get(i).getClass() + \" İsmi:\" + ((Item) list.get(i)).getName() + \" Değeri:\" + ((Item) list.get(i)).getValue() );\n        }\n    }\n\n}\n",
      "Weapon.java": "public class Weapon implements Item{\n    int damage;\n    String name;\n    int value;\n    public Weapon(int damage, String name, int value)\n    {\n        this.damage = damage;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName()\n    {\n        return name;\n    }\n    public int getValue()\n    {\n        return value;\n    }\n\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n\n}\n",
      "Armor.java": "public class Armor implements Item {\n    int defence;\n\n    String name;\n    int value;\n    public Armor(int defence, String name, int value)\n    {\n        this.defence = defence;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName()\n    {\n        return name;\n    }\n    public int getValue()\n    {\n        return value;\n    }\n\n}\n",
      "Potion.java": "public class Potion implements Item{\n    String effect;\n    \n    String name;\n    int value;\n    public Potion(String effect, String name, int value)\n    {\n        this.effect = effect;\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName()\n    {\n        return name;\n    }\n    public int getValue()\n    {\n        return value;\n    }\n\n}\n",
      "Driver.java": "import java.nio.InvalidMarkException;\nimport java.util.*;\npublic class Driver {\n    public static void main(String[] args)\n    {\n        Inventory<Weapon> inventory = new Inventory<>();\n        inventory.addItem(new Weapon(5, \"eren\", 3));\n        inventory.addItem(new Weapon(5, \"hilal\", 5));\n        inventory.addItem(new Weapon(5, \"merhaba\", 4));\n        Inventory<Armor> armorli = new Inventory<>();\n        Inventory<Armor> armorli2 = new Inventory<>();\n        armorli.addItem(new Armor(4, \"Ay\", 2));\n        \n     new Inventory<Armor>().transferArmor(armorli, armorli2);\n     armorli2.printMostValuableItem(inventory);\n        inventory.printMostValuableItem(inventory);\n       inventory.print();\n      \n        int a = inventory.getTotalValue();\n        System.out.println(a);\n        \n        inventory.sortByValue();\n        System.out.println(inventory.mostValuableItem());\n        inventory.print();\n        inventory.printMostValuableItem(inventory);\n        \n    }\n    \n}\n"
    },
    {
      "id": "6275288",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T extends Item> {\n    ArrayList<T> inventory = new ArrayList<>();\n\n    public void addItem(T item) {\n        inventory.add(item);\n    }\n\n    public void remove(T item) {\n        inventory.remove(item);\n    }\n\n    public void printInventory() {\n        for (int i = 0; i < inventory.size(); i++) {\n            System.out.println(inventory.get(i));\n        }\n    }\n\n    public T mostValuableItem() {\n        int i = 0;\n        int location = 0;\n        for (int j = 0; j < inventory.size(); j++) {\n            if (inventory.get(j).getValue() > i) {\n                location = j;\n            }\n        }\n        return inventory.get(location);\n    }\n\n    public T findItemByName(String name) {\n        int location = 0;\n        boolean isContain = false;\n        for (int i = 0; i < inventory.size(); i++) {\n            if (inventory.get(i).getName().equals(name)) {\n                isContain = true;\n                location = i;\n                break;\n            }\n        }\n        if (isContain) {\n            return inventory.get(location);\n        } else {\n            return null;\n        }\n    }\n\n    public List<T> findItemsByValue(int value) {\n        ArrayList<T> myList = new ArrayList<T>();\n        for (int i = 0; i < inventory.size(); i++) {\n            if (value < inventory.get(i).getValue()) {\n                myList.add(inventory.get(i));\n            }\n        }\n        return myList;\n    }\n\n    public int getTotalValue() {\n        int count = 0;\n        for (int i = 0; i < inventory.size(); i++) {\n            count += inventory.get(i).getValue();\n        }\n        return count;\n    }\n\n    public List<T> filterByType(Class<?> type) {\n        ArrayList<T> myList = new ArrayList<>();\n        for (int i = 0; i < inventory.size(); i++) {\n            if (type.equals(inventory.get(i).getClass())) {\n                myList.add(inventory.get(i));\n            }\n        }\n        return myList;\n    }\n\n    public int getTotalWeaponDamage() {\n        int count = 0;\n        for (int i = 0; i < inventory.size(); i++) {\n            if (inventory.get(i) instanceof Weapon) {\n                Weapon weapon = (Weapon) inventory.get(i);\n                count += weapon.damage;\n            }\n        }\n        return count;\n    }\n\n    public void sortByValue() {\n        for (int i = 0; i < inventory.size() - 1; i++) {\n            for (int j = 0; j < inventory.size() - 1; j++) {\n                if (inventory.get(j).getValue() < inventory.get(j + 1).getValue()) {\n                    T temp = inventory.get(j);\n                    inventory.set(j, inventory.get(j + 1));\n                    inventory.set(j + 1, temp);\n                }\n            }\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        ArrayList<? super Armor> myList = destination.inventory;\n        ArrayList<Armor> mySourceList = source.inventory;\n        for (int i = 0; i < mySourceList.size(); i++) {\n            myList.add(mySourceList.get(i));\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        ArrayList<? extends Item> myList = inventory.inventory;\n        int count = 0;\n        int location = 0;\n        for (int i = 0; i < myList.size(); i++) {\n            if (myList.get(i).getValue() > count) {\n                count = myList.get(i).getValue();\n                location = i;\n            }\n        }\n        System.out.println(myList.get(location).getName());\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n    public int damage, value;\n    public String name;\n\n    public Weapon(String name, int value, int damage) {\n        this.name = name;\n        this.damage = damage;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n\n    int getValue();\n}\n",
      "Armor.java": "public class Armor implements Item {\n    public int defense, value;\n    public String name;\n\n    public Armor(String name, int value, int defense) {\n        this.defense = defense;\n        this.name = name;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n}\n",
      "Potion.java": "public class Potion implements Item {\n    public String effect, name;\n    public int value;\n\n    public Potion(String name, String effect, int value) {\n        this.effect = effect;\n        this.name = name;\n        this.value = value;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n}\n",
      "Driver.java": "import java.util.ArrayList;\n\npublic class Driver {\n    public static void main(String[] args) {\n        Inventory<Item> first = new Inventory<>();\n        Inventory<Armor> second = new Inventory<>();\n        ArrayList<Item> myFirstList = first.inventory;\n        second.addItem(new Armor(\"Mykalkan\", 51, 76));\n        first.addItem(new Weapon(\"Zülfikar\", 2000, 1000));\n        first.addItem(new Armor(\"Kalkan\", 50, 75));\n        first.addItem(new Potion(\"Zehir\", \"Öldürücü\", 40));\n        Inventory.transferArmor(first, second);\n        System.out.println(first.inventory.get(3).getName());// 3 tane zaten vardı yukarıdaki metod ile 4. ekledim\n        System.out.print(\"En değerli item:\");\n        Inventory.printMostValuableItem(first);\n        first.sortByValue();\n        for (int i = 0; i < myFirstList.size(); i++) {\n            System.out.println(myFirstList.get(i).getName());\n        }\n        System.out.println(first.getTotalWeaponDamage());\n        System.out.println(first.getTotalValue());\n    }\n}\n"
    },
    {
      "id": "8964453",
      "Inventory.java": "import java.util.*;\n\npublic class Inventory<T extends Item> {\n    private ArrayList<T> items = new ArrayList<>();\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item.getName() + \" - Value: \" + item.getValue());\n        }\n    }\n\n    public T mostValuableItem() {\n        T mostValuableItem = null;\n        int mostValuableItemIndex = 0;\n        for (T item : items) {\n            if (item.getValue() > mostValuableItem.getValue()) {\n                mostValuableItem = item;\n            }\n        }\n\n        return (T) mostValuableItem;\n    }\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (item.getName().equals(name)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List<T> newList = new ArrayList<T>();\n        for (T item : items) {\n            if (item.getValue() == value) {\n                newList.add(item);\n            }\n        }\n        return newList;\n    }\n\n    public int getTotalValue()\n    {\n        int totalValue = 0;\n\n        for (T item : items) {\n            totalValue += item.getValue();\n        }\n        return totalValue;\n    }\n\n    public List<T> filterByType(Class<?> type)\n    {\n        List<T> newList = new ArrayList<>();\n        for(T item : items) {\n            if(item.getClass().equals(type))\n            {\n                newList.add(item);\n            }\n        }\n        return newList;\n    }\n\n    public int getTotalWeaponDamage()\n    {\n        int totalDamage = 0;\n        for (T item : items) {\n            if(item instanceof Weapon)\n            {\n                Weapon x = (Weapon) item;\n                totalDamage += x.getValue();\n            }\n        }\n        return totalDamage;\n    }\n    public void sortByValue()\n    {\n        T temp = null;\n        for (int i =0; i<items.size(); i++) {\n            for(int j=i+1; j<items.size(); j++) {\n                if(items.get(i).getValue() < items.get(j).getValue()) {\n                    temp = items.get(j);\n                    items.set(j, items.get(i));\n                    items.set(i, temp);\n                }\n            }\n        }\n    }\n\n    public static void printMostValuableItem(Inventory<? extends Item> list)\n    {\n        if(list.mostValuableItem() != null) {\n            System.out.println(list.mostValuableItem());\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source)\n    {\n        for(Item item : source.items) {\n            if(item instanceof Armor)\n            {\n                destination.addItem((Armor) item);\n            }\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
      "Weapon.java": "public class Weapon implements Item{\n    int damage;\n    int value;\n    String name;\n\n    public Weapon(String name, int value, int damage){\n        this.damage = damage;\n        this.value = value;\n        this.name = name;\n    }\n\n    public String getName()\n    {\n        return name;\n    }\n\n    public int getDamage()\n    {\n        return damage;\n    }\n\n\n    public int getValue()\n    {\n        return value;\n    }\n\n    public String toString()\n    {\n        return name + \" \" + value + \" \" + damage;\n    }\n\n\n\n\n\n}\n",
      "Item.java": "public interface Item {\n    String getName();\n    int getValue();\n    String toString();\n}\n",
      "Armor.java": "public class Armor implements Item{\n    String name;\n    int value;\n    int defense;\n\n    public Armor(String name, int value, int defense) {\n        this.name = name;\n        this.value = value;\n        this.defense = defense;\n    }\n\n    public String getName()\n    {\n        return name;\n    }\n\n    public int getValue()\n    {\n        return value;\n    }\n\n    public String toString()\n    {\n        return name + \" \" + value + \" \" + defense;\n    }\n\n\n}\n",
      "Potion.java": "public class Potion implements Item{\n    String name;\n    int value;\n    String effect;\n\n    public Potion(String name, int value, String effect) {\n        this.name = name;\n        this.value = value;\n        this.effect = effect;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public String toString(){\n        return name + \" \" + value + \" \" + effect;\n    }\n}\n",
      "Driver.java": "public class Driver {\n    public static void main(String[] args) {\n        //Weapon envanteri\n        Inventory<Weapon> weaponInventory = new Inventory<>();\n        Weapon alpi = new Weapon(\"alpi\", 1000, 30000);\n        Weapon keles = new Weapon(\"keles\", 450, 1000);\n        weaponInventory.addItem(alpi);\n        weaponInventory.addItem(keles);\n\n        System.out.println(\"=== Weapon Inventory ===\");\n        weaponInventory.printInventory();\n\n        System.out.println(\"\\nAranan Silah: alpi\");\n        Weapon foundWeapon = weaponInventory.findItemByName(\"alpi\");\n        if (foundWeapon != null) {\n            System.out.println(\"Bulundu! \" + foundWeapon.getName() + \" Damage: \" + foundWeapon.getDamage());\n        } else {\n            System.out.println(\"Aranan silah envanterde bulunamadı.\");\n        }\n\n        System.out.println(\"\\n=== Sınıf Bilgileri ===\");\n        System.out.println(\"Weapon Sınıfı: \" + foundWeapon.getClass());\n    }\n}"
    },
    {
      "id": "1762204",
      "Inventory.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Inventory<T> {\n    private List<T> items = new ArrayList<T>();\n\n    public void addItem(T item) {\n        items.add(item);\n    }\n    public void removeItem(T item) {\n        items.remove(item);\n    }\n    public void printInventory() {\n        for (T item : items) {\n            System.out.println(item);\n        }\n    }\n    public List<T> getItems() {\n        return items;\n    }\n    public void setItems(List<T> items) {\n        this.items = items;\n    }\n\n    public T mostValuableItem() {\n        T mostValuable = null;\n        for (T item : items) {\n            if (item instanceof Item) {\n                if (mostValuable == null) {\n                    mostValuable = item;\n                } else {\n                    if (((Item) item).getValue() > ((Item) mostValuable).getValue()) {\n                        mostValuable = item;\n                    }\n                }\n            }\n        }\n        return mostValuable;\n    }\n\n    public T findItemByName(String name) {\n        for (T item : items) {\n            if (item instanceof Item) {\n                if (((Item) item).getName().equals(name)) {\n                    return item;\n                }\n            }\n        }\n        return null;\n    }\n\n    public List<T> findItemsByValue(int value) {\n        List <T> higerByValueItems = new ArrayList<T>();\n        for (T item : items) {\n            if (item instanceof Item) {\n                if (((Item) item).getValue() > value) {\n                    higerByValueItems.add(item);\n                }\n            }\n        }\n        return higerByValueItems;\n    }\n\n    public int getTotalValue() {\n        int totalValue = 0;\n        for (T item : items) {\n            if (item instanceof Item) {\n                totalValue += ((Item) item).getValue();\n            }\n        }\n        return totalValue;\n    }\n\n    public List<T> filterByType(Class<?> type) {\n        List<T> filteredItems = new ArrayList<T>();\n        for (T item : items) {\n            if (item.getClass() == type) {\n                filteredItems.add(item);\n            }\n        }\n        return filteredItems;\n    }\n\n    public int getTotalWeaponDamage() {\n        int totalWeaponDamage = 0;\n        for (T item : items) {\n            if (item instanceof Weapon) {\n                totalWeaponDamage += ((Weapon) item).getDamage();\n            }\n        }\n        return totalWeaponDamage;\n    }\n\n    public void sortByValue() {\n        List<T> sortedList = new ArrayList<>();\n        while (!items.isEmpty()) {\n            T highestValueItem = null;\n            int highestIndex = -1;\n            \n            for (int i = 0; i < items.size(); i++) {\n                T currentItem = items.get(i);\n                if (highestValueItem == null || \n                    ((Item) currentItem).getValue() > ((Item) highestValueItem).getValue()) {\n                    highestValueItem = currentItem;\n                    highestIndex = i;\n                }\n            }\n            \n            if (highestIndex != -1) {\n                items.remove(highestIndex);\n                sortedList.add(highestValueItem);\n            }\n        }\n        items = sortedList;\n    }\n    \n    public static void printMostValuableItem(Inventory<? extends Item> inventory) {\n        Item mostValuable = inventory.mostValuableItem();\n        if (mostValuable != null) {\n            System.out.println(\"Most valuable item: \" + mostValuable.getName());\n        } else {\n            System.out.println(\"There are no items\");\n        }\n    }\n\n    public static void transferArmor(Inventory<? super Armor> destination, Inventory<Armor> source) {\n        List<Armor> armorsToRemove = new ArrayList<>();\n        for (int i = 0; i < source.getItems().size(); i++) {\n            destination.addItem(source.getItems().get(i));\n            armorsToRemove.add(source.getItems().get(i));\n        }\n        source.getItems().removeAll(armorsToRemove);\n    }\n}\n",
      "Weapon.java": "public class Weapon implements Item {\n\tprivate int damage;\n\tprivate int value;\n\tprivate String name;\n\n\tpublic Weapon(int damage, int value, String name) {\n\t\tthis.damage = damage;\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\treturn value;\n\t}\n\n\tpublic int getDamage() {\n\t\treturn damage;\n\t}\n\tpublic void setDamage(int damage) {\n\t\tthis.damage = damage;\n\t}\n}\n",
      "Item.java": "interface Item {\n\tString getName();\n\tint getValue();\n}",
      "Armor.java": "public class Armor implements Item {\n\tprivate int defense;\n\tprivate int value;\n\tprivate String name;\n\n\tpublic Armor(int defense, int value, String name) {\n\t\tthis.defense = defense;\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\treturn value;\n\t}\n\n\tpublic int getDefense() {\n\t\treturn defense;\n\t}\n\tpublic void setDefense(int defense) {\n\t\tthis.defense = defense;\n\t}\n}\n",
      "Potion.java": "public class Potion implements Item {\n    private String effect;\n\tprivate int value;\n\tprivate String name;\n\n\tpublic Potion(String effect, int value, String name) {\n\t\tthis.effect = effect;\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic int getValue() {\n\t\treturn value;\n\t}\n\n\tpublic String getEffect() {\n\t\treturn effect;\n\t}\n\tpublic void setEffect(String effect) {\n\t\tthis.effect = effect;\n\t}\n}\n",
      "Driver.java": "public class Driver {\n\tpublic static void main(String[] args) {\n\t\tWeapon weapon1 = new Weapon(50, 50, \"weapon1\");\n\t\tWeapon weapon2 = new Weapon(100, 100, \"weapon2\");\n\t\tArmor armor1 = new Armor(50, 50, \"armor1\");\n\t\tArmor armor2 = new Armor(100, 100, \"armor2\");\n\t\tPotion potion1 = new Potion(\"effect1\", 50, \"potion1\");\n\t\tPotion potion2 = new Potion(\"effect2\", 200, \"potion2\");\n\t\tInventory<Item> inventory1 = new Inventory<>();\n\t\tinventory1.addItem(weapon1);\n\t\tinventory1.addItem(weapon2);\n\t\tinventory1.addItem(armor1);\n\t\tinventory1.addItem(armor2);\n\t\tinventory1.addItem(potion1);\n\t\tinventory1.addItem(potion2);\n\n\t\tArmor armor3 = new Armor(200, 200, \"armor3\");\n\t\tArmor armor4 = new Armor(300, 300, \"armor4\");\n\t\tInventory<Armor> inventory2 = new Inventory<>();\n\t\tinventory2.addItem(armor3);\n\t\tinventory2.addItem(armor4);\n\n\t\tWeapon weapon3 = new Weapon(200, 200, \"weapon3\");\n\t\tWeapon weapon4 = new Weapon(300, 300, \"weapon4\");\n\t\tInventory<Weapon> inventory3 = new Inventory<>();\n\t\tinventory3.addItem(weapon3);\n\t\tinventory3.addItem(weapon4);\n\t\t\n\t\tSystem.out.println(\"Most valuable item: \" + inventory1.mostValuableItem().getName());\n\t\tSystem.out.println(\"Item name 'weapon1': \" + inventory1.findItemByName(\"weapon1\").getName());\n\t\tSystem.out.println(\"Items with value higher than 75: \" + inventory1.findItemsByValue(75));\n\t\tSystem.out.println(\"Total value: \" + inventory1.getTotalValue());\n\t\tSystem.out.println(\"Items with type 'Weapon': \" + inventory1.filterByType(Weapon.class));\n\t\tSystem.out.println(\"Total weapon damage: \" + inventory1.getTotalWeaponDamage());\n\t\tinventory1.sortByValue();\n\t\tSystem.out.println(\"Sorted items: \" + inventory1.getItems());\n\t\tInventory.printMostValuableItem(inventory1);\n\t\tSystem.out.println(\"Before armor transfer\");\n\t\tSystem.out.println(\"Inventory1: \" + inventory1.getItems());\n\t\tSystem.out.println(\"Inventory2: \" + inventory2.getItems());\n\t\tInventory.transferArmor(inventory1, inventory2);\n\t\tSystem.out.println(\"After armor transfer\");\n\t\tSystem.out.println(\"Inventory1: \" + inventory1.getItems());\n\t\tSystem.out.println(\"Inventory2: \" + inventory2.getItems());\n\t\tSystem.out.println(\"--------------------------------\");\n\t\tSystem.out.println(\"Items in inventory1: \" + inventory1.getItems());\n\t\tSystem.out.println(\"Items in inventory2: \" + inventory2.getItems());\n\t\tSystem.out.println(\"Items in inventory3: \" + inventory3.getItems());\n\t}\n}\n"
    }
  ]
}