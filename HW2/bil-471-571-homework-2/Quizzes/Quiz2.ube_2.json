{
  "questions": [
    "Robot Fabrikası\nBIL 211 - Quiz 2\n13 Şubat 2025\n1 Giriş\nBu laboratuvarda Inheritance, Polymorphism ve Interface kullanarak bir Robot Fabrikası geliştireceğiz.\n2 Genel Yapı\nSistem, üç ana bileşenden oluşmaktadır:\nBataryalı ( WithBattery ) arayüzü. Bataryası olan objelerle etkileşimi tanımlar.\nSoyut Robot Sınıfı ( AbstractRobot ).Ortak robot özelliklerini içerir.\nÖzel Robot Sınıfları ( CleaningRobot veSecurityRobot ).Farklı robot türlerini temsil eder.\nRobot Fabrikası ( RobotFactory ).Robotların üretilmesini ve yönetilmesini sağlar.\n3 Sınıf ve Arayüz Tanımları\n3.1 WithBattery Arayüzü\nMetotlar:\n-int getBatteryLife()\nBatarya ömrünü döner.\n-void recharge()\nBataryayı yeniler.\n3.2 AbstractRobot Sınıfı (Soyut Sınıf) - WithBattery arayüzünü gerçekler (implement)\nDeğişkenler:\n-modelName (protected String)\nRobotun modeli.\n-batteryLife (protected int)\nRobotun batarya ömrü.\nMetotlar:\n-public AbstractRobot(String modelName, int batteryLife)\nConstructor.\n-public String getModelName()\nModel adını döner.\n-public abstract void performTask()\nSoyut metod. CleaningRobot veSecurityRobot sınıfları tarafından tanımlanacak.\n3.3 CleaningRobot Sınıfı - AbstractRobot sınıfını geliştirir (extend)\nEkstra Değişken:\n-cleaningPower (private int)\nRobotun temizlik gücü.\nEkstra Metotlar:\n-CleaningRobot(String modelName, int batteryLife, int cleaningPower)\nConstructor.\n1\n\n-public void performTask()\nEğer batarya ömrü 10 ya da daha fazla ise \"[ modelName ] Cleaning in progress... Cleaning Power:\ncleaningPower \" mesajını yazdırır ( modelName vecleaningPower yerine değişken değerleri göster-\nilmeli). Mesaj gösterildikten sonra batarya ömrü 10 azalır. Metod çağırıldığında yeterli batarya ömrü\nyoksa \"[modelName ] Not enough battery to clean...\" mesajı gösterilmeli.\n-public void boostCleaningPower(int miktar)\nTemizlik gücünü miktarkadar artırır.\n3.4 SecurityRobot Sınıfı - AbstractRobot sınıfını geliştirir (extend)\nEkstra Değişken:\n-isArmed (private boolean)\nRobotun silahlı olup olmadığı.\nEkstra Metotlar:\n-SecurityRobot(String modelName, int batteryLife, bool isArmed)\nConstructor.\n-public void performTask()\nEğer batarya ömrü 10 ya da daha fazla ise \"[ modelName ] Scanning for threats... Armed: isArmed\"\nmesajını yazdırır ( modelName veisArmed yerine değişken değerleri göstermeli). Mesaj gösterildikten\nsonra batarya ömrü 10 azalır. Metod çağırıldığında yeterli batarya ömrü yoksa \"[ modelName ] Not\nenough battery to scan threats...\" mesajı gösterilmeli.\n-public void toggleArmedMode()\nSilah modunu değiştirir.\n3.5 RobotFactory Sınıfı\nDeğişkenler:\n-robots(private ArrayList<AbstractRobot>)\nÜretilen robotları saklar.\nMetotlar:\n-public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower)\nrobotsdizisine verilen parametrelerle bir CleaningRobot ekler.\n-public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed)\nrobotsdizisine verilen parametrelerle bir SecurityRobot ekler.\n-public void performAllTasks()\nrobotsdizisindeki robotların dizi sırasında performTask metodlarını çağırır.\n-public void displayRobots()\nTüm robotları ekrana yazdırır (Çıktının formatı Ana Program bölümünde mevcut).\n-public void upgradeCleaningRobots(int miktar)\nTemizlik robotlarının gücünü miktarkadar artırır.\n-public void toggleSecurityRobotsMode()\nGüvenlik robotlarının modunu tersine döndürür.\n-???\nBu fonksiyon tüm farklı RobotFactory’ler tarafından üretilmiş robot sayısını ekrana \"Tum fabrikalar\ntarafindan toplam toplamRobotUretimi robot uretildi\" yazdırır ( toplamRobotUretimi yerine toplam\nüretilen robot sayısı yazılmalıdır). Bu fonksiyonu tamamlamak için RobotFactory sınıfına yardımcı\ndeğişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın .\n2\n\n4 Ana Program ( MainSınıfı)\npublic class Main {\npublic static void main(String[] args) {\nRobotFactory factory = new RobotFactory();\nfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\nfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\nfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\nfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\nSystem.out.println(\"\\nProduced Robots:\");\nfactory.displayRobots();\nSystem.out.println(\"\\Performing All Robot Tasks:\");\nfactory.performAllTasks();\nSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\nfactory.upgradeCleaningRobots(10);\nSystem.out.println(\"\\nToggling Security Robot Modes:\");\nfactory.toggleSecurityRobotsMode();\nSystem.out.println(\"\\nFinal Robot Status:\");\nfactory.displayRobots();\n// ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\nRobotFactory anotherFactory = new RobotFactory();\nanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\nanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\nSystem.our.println(\"\\n\");\n??? // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n}\n}\n5 Çıktı Örneği\nProduced Robots:\nCleaningRobot - Model: CleanMaster 3000, Battery: 100, Cleaning Power: 80\nSecurityRobot - Model: GuardBot X, Battery: 150, Armed: true\nSecurityRobot - Model: PatrolBot, Battery: 120, Armed: false\nCleaningRobot - Model: CleanMaster 3500, Battery: 5, Cleaning Power: 150\nPerformıng All Robot Tasks:\n[CleanMaster 3000] Cleaning in progress... Cleaning Power: 80\n[GuardBot X] Scanning for threats... Armed: true\n[PatrolBot] Scanning for threats... Armed: false\n[CleanMaster 3500] Not enough battery to clean...\nUpgrading Cleaning Robots:\nCleaningRobot - CleanMaster 3000 now has Cleaning Power: 90\nCleaningRobot - CleanMaster 3500 now has Cleaning Power: 160\nToggling Security Robot Modes:\nSecurityRobot - GuardBot X is now Unarmed\nSecurityRobot - PatrolBot is now Armed\n3\n\nFinal Robot Status:\nCleaningRobot - Model: CleanMaster 3000, Battery: 90, Cleaning Power: 90\nSecurityRobot - Model: GuardBot X, Battery: 140, Armed: false\nSecurityRobot - Model: PatrolBot, Battery: 110, Armed: true\nCleaningRobot - Model: CleanMaster 3500, Battery: 5, Cleaning Power: 160\nTum fabrikalar tarafindan toplam 6 robot uretildi\n6 Gönderim Formatı\n- Tüm sınıflar için ayrı bir dosya oluşturun (Main.java, RobotFactory.java, ...).\n- Quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından\nherhangi birisi uygun).\n- SıkıştırılmışarşivinisminiIsim_Numara_Sube2şeklindeisimlendirin(örn.,JohnNash_181101014_Sube2.zip).\n- İsimlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine \"Quiz2 Şube2\" başlıklı bir mail ile\ngönderin.\n4"
  ],
  "answers": [
    {
      "id": "6094496",
      "WithBattery.java": "package lab1111;\n\npublic interface WithBattery {\n\t\n\t    int getBatteryLife();  // Batarya ömrünü döndürür\n\t    void recharge();       // Bataryayı yeniler\n\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "AbstractRobot.java": "package lab1111;\n\npublic abstract class AbstractRobot implements WithBattery {\n\t protected String modelName;\n\t protected int batteryLife;\n\t    public AbstractRobot(String modelName, int batteryLife) {\n\t        this.modelName = modelName;\n\t        this.batteryLife = batteryLife;\n\t    }\n\n\t    public String getModelName() {\n\t        return modelName;\n\t    }\n\n\t    public int getBatteryLife() {\n\t        return batteryLife;\n\t    }\n\n\t    @Override\n\t    public void recharge() {\n\t        this.batteryLife = 100;  \n\t        System.out.println(modelName + \" recharged to full battery.\");\n\t    }\n\n\t    public abstract void performTask(); \n\t}\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\t    \n\n\n",
      "Main.java": "package lab1111;\n\npublic class Main {\n\n\t\n\t\t\tpublic static void main(String[] args) {\n\t\t\tRobotFactory factory = new RobotFactory();\n\t\t\tfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n\t\t\tfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\n\t\t\tfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\n\t\t\tfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\t\t\tSystem.out.println(\"\\nProduced Robots:\");\n\t\t\tfactory.displayRobots();\n\t\t\tSystem.out.println(\"\\nPerforming All Robot Tasks:\");\n\t\t\tfactory.performAllTasks();\n\t\t\tSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\n\t\t\tfactory.upgradeCleaningRobots(10);\n\t\t\tSystem.out.println(\"\\nToggling Security Robot Modes:\");\n\t\t\tfactory.toggleSecurityRobotsMode();\n\t\t\tSystem.out.println(\"\\nFinal Robot Status:\");\n\t\t\tfactory.displayRobots();\n\t\t\t    // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n\t\t\tRobotFactory anotherFactory = new RobotFactory();\n\t\t\tanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n\t\t\tanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\t\t\tSystem.out.println(\"\\nRobot sayımızı gösteriyoruz\");\n\t\t\t anotherFactory.showrobotSayac(); // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n\t\t\t}\n\t\t\t}\n\n\t\n\n\n",
      "SecurityRobot.java": "package lab1111;\n\npublic class SecurityRobot extends AbstractRobot {\n private boolean isArmed;   //robotun silahlı olup olmadığını tutuyoruz\n \n \n public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t super(modelName, batteryLife);\n\t this.isArmed = isArmed;\n }\n \n public boolean getİsArmed() {\n\t return isArmed;\n }\n @Override\n public void performTask() {\n\t if(batteryLife >= 10) {\n\t\t System.out.println(modelName + \"Scanning for threats...\" + \"Armed:\" + isArmed);\n\t\t batteryLife = batteryLife - 10;\n\t } else {\n\t\t System.out.println(modelName + \"Not enough battery to scan threats...\");\n\t\t \n\t }\n }\n \n public void toggleArmedMode() {\n\t isArmed = !isArmed;\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "CleaningRobot.java": "package lab1111;\n\npublic  class CleaningRobot extends AbstractRobot{\n\tprivate int cleaningPower;  // robotun temizlik gücü\n\n\t\n\tpublic CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\tsuper(modelName, batteryLife);\n\t\tthis.cleaningPower = cleaningPower;\n\t\t\n\t}\n\tpublic int getCleaningPower() {\n\t\treturn cleaningPower;\n\t}\n\t\n\tpublic void performTask() {\n\t\tif(batteryLife >= 10) {\n\t\t    System.out.println(modelName + \" Cleaning in progress... Cleaning Power: \" + cleaningPower);\n\t\t    batteryLife = batteryLife - 10;\n\t\t} else {\n\t\t\tSystem.out.println(modelName + \" Not enough battery to scan threats...\");\n\t\t}\n\t}\n\t\n\t public void boostCleaningPower(int miktar) {\n\t        this.cleaningPower += miktar;\n\t        System.out.println(modelName + \" cleaning power boosted by \" + miktar);\n\t    }\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "RobotFactory.java": "package lab1111;\nimport java.util.ArrayList;\n\n\npublic class RobotFactory {\n\tprivate static int robotSayac = 0;\n\tprivate ArrayList<AbstractRobot> robots;     // üretilen robotları saklar\n\t public RobotFactory() {\n\t        this.robots = new ArrayList<>();\n\t    }\n\t\n\tpublic void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\t CleaningRobot robot = new CleaningRobot(modelName, batteryLife, cleaningPower);\n\t        robots.add(robot);\n\t        robotSayac++;\n\t}\n\tpublic void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed ) {\n\t\tSecurityRobot robot = new SecurityRobot(modelName, batteryLife, isArmed);\n\t\trobots.add(robot);\n\t\trobotSayac++;\n\t}\n\t\n\tpublic void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n}\n\t\n\tpublic void displayRobots() {\n\t\tfor (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                System.out.println(\"CleaningRobot - Model: \" + robot.getModelName() + \", Battery: \" + robot.getBatteryLife() + \", Cleaning Power: \"  + ((CleaningRobot) robot).getCleaningPower());\n            } else if (robot instanceof SecurityRobot) {\n                System.out.println(\"SecurityRobot  Model: \" + robot.getModelName() + \", Battery: \" + robot.getBatteryLife() + \", Armed: \" + ((SecurityRobot) robot).getİsArmed());\n            }\n        }\n\t}\n\t\n\t public void upgradeCleaningRobots(int miktar) {\n\t        \n\t        for (AbstractRobot robot : robots) {\n\t            if (robot instanceof CleaningRobot) {\n\t                ((CleaningRobot) robot).boostCleaningPower(miktar);\n\t            }\n\t        }\n\t    }\n\n\t    public void toggleSecurityRobotsMode() {\n\t       \n\t        for (AbstractRobot robot : robots) {\n\t            if (robot instanceof SecurityRobot) {\n\t                ((SecurityRobot) robot).toggleArmedMode();\n\t            }\n\t        }\n\t    }\n\t    \n\t    public void showrobotSayac() {\n\t    \tSystem.out.println(\"Tüm fabrikalar tarafından toplam\" + robotSayac + \" robot üretildi\");\n\t    }\n}\n\n\n\n\n \n//+ ((SecurityRobot) robot).isArmed\n"
    },
    {
      "id": "7732416",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "abstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int batteryLife;\n    public static int toplamRobotUretimi;\n\n    public abstract void performTask();\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n    public String getModelName() {\n        return modelName;\n    }\n    public static int getToplamRobotUretimi() {\n        return toplamRobotUretimi;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        System.out.println(\"\\n\");\n        RobotFactory.TotalRobots();\n    }\n\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n    private boolean isArmed;\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n        toplamRobotUretimi++;\n\n    }\n\n    public void toggleArmedMode(){\n        if (isArmed) {\n            isArmed = false;\n            System.out.println(\"SecurityRobot - \" + modelName + \" is now Unarmed\");\n        }else {\n            isArmed = true;\n            System.out.println(\"SecurityRobot - \" + modelName + \" is now Armed\");\n        }\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10){\n            System.out.println(\"[\"+ modelName +\"]  Scanning for threats... Armed: \" + isArmed );\n            this.batteryLife -= 10;\n        }else{\n            System.out.println(\"[\"+ modelName +\"] Not enough battery to scan threats...\");\n        }\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return this.batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife += 10;\n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n        toplamRobotUretimi++;\n    }\n    public void boostCleaningPower(int miktar){\n        cleaningPower += miktar;\n        System.out.println(\"CleaningRobot - \"+ modelName +\" now has Cleaning Power: \"+ cleaningPower);\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10){\n            System.out.println(\"[\"+ modelName +\"] Cleaning in progress... Cleaning Power: \" + cleaningPower );\n            this.batteryLife -= 10;\n        }else{\n            System.out.println(\"[\"+ modelName +\"] Not enough battery to clean...\");\n        }\n    }\n    @Override\n    public int getBatteryLife() {\n        return this.batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife += 10;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n    }\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n    }\n    public void performAllTasks(){\n        for (AbstractRobot robot : robots){\n            robot.performTask();\n        }\n    }\n    public void displayRobots(){\n        for (AbstractRobot robot : robots){\n            if (robot instanceof CleaningRobot){\n                CleaningRobot a = (CleaningRobot) robot;\n                System.out.println(\"CleaningRobot - Model: \" + a.getModelName()\n                                    + \", Battery: \" + a.getBatteryLife()\n                                    + \", Cleaning power: \" + a.getCleaningPower());\n            }\n            if (robot instanceof SecurityRobot){\n                SecurityRobot b = (SecurityRobot) robot;\n                System.out.println(\"SecurityRobot - Model: \" + b.getModelName()\n                        + \", Battery: \" + b.getBatteryLife()\n                        + \", Armed: \" + b.isArmed());\n            }\n        }\n\n    }\n    public void upgradeCleaningRobots(int miktar){\n        for (AbstractRobot robot : robots){\n            if (robot instanceof CleaningRobot){\n                CleaningRobot a = (CleaningRobot) robot;\n                a.boostCleaningPower(miktar);\n            }\n        }\n    }\n    public void toggleSecurityRobotsMode(){\n        for (AbstractRobot robot : robots){\n            if (robot instanceof SecurityRobot){\n                SecurityRobot a = (SecurityRobot) robot;\n                a.toggleArmedMode();\n            }\n        }\n    }\n    public static void TotalRobots(){\n        System.out.println( \"Tum fabrikalar tarafindan toplam \"+ AbstractRobot.getToplamRobotUretimi() +\" robot uretildi\");\n    }\n\n\n\n}\n"
    },
    {
      "id": "4779274",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public void recharge() {\n        batteryLife=100;\n    }\n\n    public abstract void performTask();\n}",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.print(\"\\n\"); \n        //static method yazdım ??? sorusu için\n        RobotFactory.toplamRobotUretimi();\n        }\n}\n",
      "SecurityRobot.java": "\npublic class SecurityRobot extends AbstractRobot{\n    private boolean isArmed;\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if(batteryLife < 10) {\n            System.out.println(\"[\"+modelName+\n                                \"] Not enough battery to scan threats...\");  \n        }\n        else{\n            System.out.println(\"[\"+modelName+\n                                \"] Scanning for threats... Armed: \"+\n                                isArmed);\n        batteryLife -= 10;       \n        }\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n    }\n\n    // gerekiyordu\n    public boolean getArmed() {\n        return isArmed;\n    }\n\n}\n",
      "CleaningRobot.java": "\npublic class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n\n    //gerekiyodu:)\n    public int getCleaning() {\n        return cleaningPower;\n    }\n\n    public void setCleaning(int miktar) {\n        cleaningPower += miktar;\n    }\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if(batteryLife < 10) {\n            System.out.println(\"[\"+modelName+\n                                \"] Not enough battery to clean...\");  \n        }\n        else{\n            System.out.println(\"[\"+modelName+\n                                \"] Cleaning in progress... Cleaning Power: \"+\n                                cleaningPower);\n        batteryLife -= 10;       \n        }\n    }\n\n    public void boostCleaningPower() {\n        cleaningPower++; //?? arttırır yazmış anlamadım 1 tane artsın\n    }\n}\n\n\n\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n\n    static int toplam = 0;\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        AbstractRobot newrob = new CleaningRobot(modelName, batteryLife, cleaningPower);\n        robots.add(newrob);\n        toplam++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        AbstractRobot newrob = new SecurityRobot(modelName, batteryLife, isArmed);\n        robots.add(newrob);\n        toplam++;\n    }\n\n    public void performAllTasks() {\n        for(AbstractRobot robot: robots) {\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for(AbstractRobot robot: robots) {\n            String type = (robot instanceof CleaningRobot) ? \"CleaningRobot\" : \"SecurityRobot\";\n            String info = (robot instanceof CleaningRobot) ? \"Cleaning Power: \" + ((CleaningRobot)robot).getCleaning() : \"Armed: \" + ((SecurityRobot)robot).getArmed();\n            System.out.println(type+\n                                \" - Model: \"+\n                                robot.getModelName()+ \", Battery: \"+\n                                robot.getBatteryLife()+\", \"+info);\n        }\n    }\n\n    //bunun için de ister istemez setter gerekiyor, ilgili yerde oluşturdum.\n    public void upgradeCleaningRobots(int miktar) {\n        for(AbstractRobot robot: robots) {\n            if(robot instanceof CleaningRobot) {\n                ((CleaningRobot)robot).setCleaning(miktar);\n                System.out.println(\"CleaningRobot - \" +\n                                    robot.getModelName() + \n                                    \" now has Cleaning Power: \" +\n                                    ((CleaningRobot)robot).getCleaning());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for(AbstractRobot robot: robots) {\n            if(robot instanceof SecurityRobot) {\n                ((SecurityRobot)robot).toggleArmedMode();\n                String type = ((SecurityRobot)robot).getArmed() == true ? \"Armed\": \"Unarmed\";\n                System.out.println(\"SecurityRobot - \" +\n                                    robot.getModelName() + \n                                    \" is now \" + type);\n            }\n        }\n    }\n\n    //??? sorusu\n    //static int toplam ile class içinde herhangi bi objede herhangi bi robot oluşumunda saymayı sağladım\n    public static int toplamRobotUretimi() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \"+ toplam + \" robot uretildi\");\n        return toplam;\n    }\n\n\n}\n"
    },
    {
      "id": "5281670",
      "WithBattery.java": "public interface WithBattery{\n    int getBatteryLife();\n    void recharge();\n\n}",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n    \n    public abstract void performTask();\n    \n}\n",
      "Main.java": "public class Main {\n        public static void main(String[] args) {\n            RobotFactory factory = new RobotFactory();\n            factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n            factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n            factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n            factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n            System.out.println(\"\\nProduced Robots:\");\n            factory.displayRobots();\n            System.out.println(\"\\nPerforming All Robot Tasks:\");\n            factory.performAllTasks();\n            System.out.println(\"\\nUpgrading Cleaning Robots:\");\n            factory.upgradeCleaningRobots(10);\n            System.out.println(\"\\nToggling Security Robot Modes:\");\n            factory.toggleSecurityRobotsMode();\n            System.out.println(\"\\nFinal Robot Status:\");\n            factory.displayRobots();\n            // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n            RobotFactory anotherFactory = new RobotFactory();\n            anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n            anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n            System.out.println(\"\\n\");\n            //??? // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n            factory.allRobots();\n        }\n    }",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n\n    private boolean isArmed;\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n            super(modelName, batteryLife);\n            this.isArmed = isArmed;\n        }\n    \n    @Override\n    public int getBatteryLife() {\n        return this.batteryLife;\n    }\n\n    int keeper = getBatteryLife();\n\n    @Override\n    public void recharge() {\n        this.batteryLife = keeper;\n    }\n\n    @Override\n    public void performTask() {\n        if(this.batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"]\" + \"  Scanning for threats... Armed: \" + isArmed);\n            this.batteryLife-=10;\n        }\n\n        else if(this.batteryLife < 10){\n            System.out.println(\"[\" + modelName + \"]\" + \"  Not enough battery to scan threats...\");\n\n        }\n    }\n\n    public void toggleArmedMode(){\n        if(this.isArmed){\n            this.isArmed = false;\n        }\n\n        else{\n            this.isArmed = true;\n        }\n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n    \n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n\n    private int cleaningPower;\n\n    int keeper = getBatteryLife();\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    \n    \n    public int getBatteryLife() {\n        return this.batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        this.batteryLife = keeper;\n    }\n\n    @Override\n    public void performTask() {\n        if(this.batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"]\" + \" Cleaning in progress...  Cleaning Power: \" + cleaningPower);\n            this.batteryLife-=10;\n        }\n\n        else if(this.batteryLife < 10){\n            System.out.println(\"[\" + modelName + \"]\" + \"  Not enough battery to clean...\" );\n\n        }\n    }\n\n    public void boostCleaningPower(){\n        this.cleaningPower += 50;\n    }\n\n\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n\n\n    public void setCleaningPower(int cleaningPower) {\n        this.cleaningPower = cleaningPower;\n    }\n\n    \n\n    \n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    \n    private ArrayList<AbstractRobot> robots;\n\n    static int totalProduced = 0;\n    \n\n\n    public RobotFactory() {\n        robots = new ArrayList<>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        totalProduced++;\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        totalProduced++;\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n    }\n\n    public void performAllTasks(){\n\n        for(int i= 0; i < robots.size(); i++){\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots(){\n\n        for(int i= 0; i < robots.size(); i++){\n            \n            if(robots.get(i) instanceof SecurityRobot){\n                System.out.println(\"SecurityRobot - Model: \" + robots.get(i).getModelName() + \", Battery: \" + robots.get(i).getBatteryLife() + \", Armed: \" + ((SecurityRobot) robots.get(i)).isArmed());           \n               \n            }\n\n            if(robots.get(i) instanceof CleaningRobot){\n                System.out.println(\"CleaningRobot - Model: \" + robots.get(i).getModelName() + \", Battery: \" + robots.get(i).getBatteryLife() + \", Cleaning Power: \" + ((CleaningRobot) robots.get(i)).getCleaningPower());\n            }\n        }\n        \n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        for(int i= 0; i < robots.size(); i++){\n\n            if(robots.get(i) instanceof CleaningRobot){\n                ((CleaningRobot) robots.get(i)).setCleaningPower(((CleaningRobot) robots.get(i)).getCleaningPower() + miktar);\n                System.err.println(\"CleaningRobot - \" + robots.get(i).getModelName() +\" now has Cleaning Power: \" + ((CleaningRobot) robots.get(i)).getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode(){\n        for(int i= 0; i < robots.size(); i++){\n\n            if(robots.get(i) instanceof SecurityRobot){\n                SecurityRobot s = (SecurityRobot)robots.get(i);             \n                s.toggleArmedMode();\n\n                if(s.isArmed()){\n                    System.out.println(\"SecurityRobot - \" + s.getModelName() + \" is now armed\");\n                }\n\n                else{\n                    System.out.println(\"SecurityRobot - \" + s.getModelName() + \" is now unarmed\");\n                }\n                \n            }\n        }\n    }\n\n\n    public void allRobots(){\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + totalProduced + \" robot uretildi\\r\");\n    }\n\n\n\n\n}\n"
    },
    {
      "id": "2384475",
      "WithBattery.java": "package robot;\n\npublic interface WithBattery {\n    int getBatteryLife();\n\n    void recharge();\n}\n",
      "AbstractRobot.java": "package robot;\n\npublic abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public abstract void performTask();\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public void recharge() {\n        final int temp = batteryLife;\n        this.batteryLife = temp;\n        System.out.println(batteryLife);\n    }\n}\n",
      "Main.java": "package robot;\n\npublic class Main {\n  public static void main(String[] args) {\n    RobotFactory factory = new RobotFactory();\n    factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n    factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n    factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n    factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n    System.out.println(\"\\nProduced Robots:\");\n    factory.displayRobots();\n    System.out.println(\"\\nPerforming All Robot Tasks:\");\n    factory.performAllTasks();\n    System.out.println(\"\\nUpgrading Cleaning Robots:\");\n    factory.upgradeCleaningRobots(10);\n    System.out.println(\"\\nToggling Security Robot Modes:\");\n    factory.toggleSecurityRobotsMode();\n    System.out.println(\"\\nFinal Robot Status:\");\n    factory.displayRobots();\n    // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n    RobotFactory anotherFactory = new RobotFactory();\n    anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n    anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n    System.out.println(\"\\n\");\n\n    RobotFactory.robotnumber();\n    // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n\n  }\n}\n",
      "SecurityRobot.java": "package robot;\n\npublic class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed:\" + isArmed);\n            batteryLife = batteryLife - 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n    }\n\n    public boolean getIsArmed() {\n        return isArmed;\n    }\n}\n",
      "CleaningRobot.java": "package robot;\n\npublic class CleaningRobot extends AbstractRobot {\n   private int cleaningPower;\n\n   CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n      super(modelName, batteryLife);\n      this.cleaningPower = cleaningPower;\n   }\n\n   @Override\n   public void performTask() {\n      if (batteryLife >= 10) {\n         System.out.println(\"[\" + modelName + \"] Cleaning in progress... Cleaning Power:\" + cleaningPower);\n         batteryLife = batteryLife - 10;\n      } else {\n         System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n      }\n   }\n\n   public void boostCleaningPower() {\n      cleaningPower = cleaningPower + 10;\n   }\n\n   public int getCleaningPower() {\n      return cleaningPower;\n   }\n}\n",
      "RobotFactory.java": "package robot;\n\nimport java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots;\n    static int number;\n\n    RobotFactory() {\n        robots = new ArrayList<AbstractRobot>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        CleaningRobot x = new CleaningRobot(modelName, batteryLife, cleaningPower);\n        number++;\n        robots.add(x);\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        SecurityRobot x = new SecurityRobot(modelName, batteryLife, isArmed);\n        number++;\n        robots.add(x);\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot r : robots) {\n            r.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot r : robots) {\n            if (r instanceof CleaningRobot) {\n                CleaningRobot x = (CleaningRobot) r;\n                System.out.println(\"- Model: \" + x.modelName + \", Battery: \" + x.batteryLife + \", Cleaning Power: \"\n                        + x.getCleaningPower());\n            } else if (r instanceof SecurityRobot) {\n                SecurityRobot x = (SecurityRobot) r;\n                System.out.println(\n                        \"- Model: \" + x.modelName + \", Battery: \" + x.batteryLife + \", Armed: \" + x.getIsArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (AbstractRobot r : robots) {\n            if (r instanceof CleaningRobot) {\n                CleaningRobot x = (CleaningRobot) r;\n                x.boostCleaningPower();\n                System.out\n                        .println(\"CleaningRobot - \" + x.modelName + \" now has Cleaning Power: \" + x.getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot r : robots) {\n            if (r instanceof SecurityRobot) {\n                SecurityRobot x = (SecurityRobot) r;\n                x.toggleArmedMode();\n                System.out.print(\"SecurityRobot - \" + x.modelName + \" is now \");\n                if (x.getIsArmed()) {\n                    System.out.println(\"Armed\");\n                } else {\n                    System.out.println(\"Unarmed\");\n                }\n            }\n        }\n\n    }\n\n    public static void robotnumber() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + number + \" robot uretildi\");\n    }\n}\n"
    },
    {
      "id": "2179244",
      "WithBattery.java": "// WithBattery Interface\npublic interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "// AbstractRobot Class\npublic abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public void recharge() {\n        batteryLife = 100;\n    } //?\n\n    public abstract void performTask();\n    //Soyut metod. CleaningRobot ve SecurityRobot sınıfları tarafından tanımlanacak. \n}",
      "SecurityRobot.java": "// SecurityRobot Class\npublic class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public boolean getIsArmed() {\n        return isArmed;\n    }\n\n    public void performTask(){\n        if(batteryLife>=10){\n            System.out.println(modelName+\" Scanning for threats... Armed: \"+isArmed);\n            batteryLife-=10;\n        }\n        \n        else{\n            System.out.println(modelName+ \" Not enough battery to scan threats...\" );\n        }\n    }\n\n   \n    public void toggleArmedMode(){\n        isArmed=!isArmed;\n    }\n    public String displayArmedMode(){\n        return (isArmed ? \"Armed\" : \"Unarmed\");\n    }\n\n\n}",
      "CleaningRobot.java": "// CleaningRobot Class\npublic class CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n    /*public void setCleaningPower(int cleaningPower) {\n        this.cleaningPower = cleaningPower;\n    }*/\n\n    public void performTask() {\n        if (batteryLife>=10) {\n            System.out.println(modelName + \" Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife-=10;\n        } else {\n            System.out.println(modelName + \" Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower() {\n        cleaningPower +=10;\n    }\n}",
      "Main_quiz2.java": "// Main Class\npublic class Main_quiz2 {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        \n        //YENİ ROBOT\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        System.out.println(\"\\n\");\n        RobotFactory.displayTotalRobotProduction();\n        System.out.println(\"\\n\");\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n    private static int toplamRobotUretimi = 0;\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        toplamRobotUretimi++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        toplamRobotUretimi++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                System.out.println(\"CleaningRobot- Model: \" + robot.getModelName() + \", Battery: \" + robot.getBatteryLife()+ \", Cleaning Power: \" + ((CleaningRobot) robot).getCleaningPower());\n            } else if (robot instanceof SecurityRobot) {\n                System.out.println(\"SecurityRobot- Model: \" + robot.getModelName() + \", Battery: \" + robot.getBatteryLife()+ \",  Armed: \" + ((SecurityRobot) robot).getIsArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int amount) {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower();\n                System.out.println(\"CleaningRobot - \" + robot.getModelName() + \" now has CleaningPower: \"+ ((CleaningRobot) robot).getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof SecurityRobot) {\n                ((SecurityRobot) robot).toggleArmedMode();\n                System.out.println(\"SecurityRobot - \" + robot.getModelName() + \" is now \" + ((SecurityRobot) robot).displayArmedMode());\n            }\n        }\n    }\n    //???\n    public static void displayTotalRobotProduction() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + toplamRobotUretimi + \" robot uretildi\");\n    }\n}\n"
    },
    {
      "id": "5628146",
      "WithBattery.java": "package quiz2_1;\n\npublic interface WithBattery {\n\tint getBatteryLife();\n\tvoid recharge();\n\n}\n",
      "AbstractRobot.java": "package quiz2_1;\n\nabstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public void recharge() {\n        batteryLife = 100;\n    }\n\n    public abstract void performTask();\n}",
      "main.java": "package quiz2_1;\n\npublic class main {public static void main(String[] args) {\n\t RobotFactory factory = new RobotFactory();\n\n     factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n     factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n     factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n     factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n     System.out.println(\"\\nProduced Robots:\");\n     factory.displayRobots();\n\n     System.out.println(\"\\nPerforming All Robot Tasks:\");\n     factory.performAllTasks();\n\n     System.out.println(\"\\nUpgrading Cleaning Robots:\");\n     factory.upgradeCleaningRobots(10);\n\n     System.out.println(\"\\nToggling Security Robot Modes:\");\n     factory.toggleSecurityRobotsMode();\n\n     System.out.println(\"\\nFinal Robot Status:\");\n     factory.displayRobots();\n\n     RobotFactory anotherFactory = new RobotFactory();\n     anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n     anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n     System.out.println(\"\\n\");\n     RobotFactory.displayTotalProduction();\n\n}\n}\n\n",
      "SecurityRobot.java": "package quiz2_1;\n\nclass SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n        System.out.println(\"SecurityRobot - \" + modelName + \" is now \" + (isArmed ? \"Armed\" : \"Unarmed\"));\n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n}",
      "CleaningRobot.java": "package quiz2_1;\n\nclass CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(int amount) {\n        cleaningPower += amount;\n        System.out.println(\"CleaningRobot - \" + modelName + \" now has Cleaning Power: \" + cleaningPower);\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n}\n",
      "RobotFactory.java": "package quiz2_1;\nimport java.util.ArrayList;\n\nclass RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n    private static int totalRobotProduction = 0;\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalRobotProduction++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalRobotProduction++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                CleaningRobot cr = (CleaningRobot) robot;\n                System.out.println(\"CleaningRobot - Model: \" + cr.getModelName() + \", Battery: \" + cr.getBatteryLife() + \", Cleaning Power: \" + cr.getCleaningPower());\n            } else if (robot instanceof SecurityRobot) {\n                SecurityRobot sr = (SecurityRobot) robot;\n                System.out.println(\"SecurityRobot - Model: \" + sr.getModelName() + \", Battery: \" + sr.getBatteryLife() + \", Armed: \" + sr.isArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int amount) {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower(amount);\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof SecurityRobot) {\n                ((SecurityRobot) robot).toggleArmedMode();\n            }\n        }\n    }\n\n    public static void displayTotalProduction() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + totalRobotProduction + \" robot uretildi\");\n    }\n}\n"
    },
    {
      "id": "2786122",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public abstract void performTask();\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"Produced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"Performing All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"Upgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"Toggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"Final Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println();\n        factory.robotCount();\n    }\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n    private boolean isArmed;\n    private int yedekbatteryLife;\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n        this.yedekbatteryLife = batteryLife;\n    }\n\n    public void performTask() {\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        }\n        else\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n        if(isArmed == true)\n            System.out.println(\"Armed\");\n        else    \n            System.out.println(\"Unarmed\");     \n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = yedekbatteryLife;\n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n    private int yedekbatteryLife;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n        this.yedekbatteryLife = batteryLife;\n    }\n\n    public void performTask() {\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        }\n        else\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n    }\n\n    public void boostCleaningPower(int miktar) {\n        System.out.println(cleaningPower += miktar);\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = yedekbatteryLife;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList <AbstractRobot> robots = new ArrayList<>();\n    private static int count = 0;\n\n    public void produceCleaningRobot(String modelName,int batteryLife, int cleaningPower) {\n        CleaningRobot r1 = new CleaningRobot(modelName,batteryLife,cleaningPower);\n        robots.add(r1);\n        setCount(count + 1);\n    }\n\n    public void produceSecurityRobot(String modelName,int batteryLife, boolean isArmed) {\n        SecurityRobot r1 = new SecurityRobot(modelName,batteryLife,isArmed);\n        robots.add(r1);\n        setCount(count + 1);\n    }\n\n    public void performAllTasks() {\n        for (int x = 0; x < robots.size(); x++) {\n            robots.get(x).performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (int x = 0; x < robots.size(); x++) {\n            System.out.print(robots.get(x).getClass().getName() + \" - Model: \" + robots.get(x).modelName + \", Battery: \" + robots.get(x).batteryLife + \", \");\n            if(robots.get(x).getClass().getName() == \"CleaningRobot\"){\n                CleaningRobot c1 = (CleaningRobot) robots.get(x);\n                System.out.println(\"Cleaning Power: \" + c1.getCleaningPower());\n            }\n            else{\n                SecurityRobot s1 = (SecurityRobot) robots.get(x);\n                System.out.println(\"Armed: \" + s1.isArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (int x = 0; x < robots.size(); x++) {\n            if(robots.get(x).getClass().getName() == \"CleaningRobot\"){\n                CleaningRobot c1 = (CleaningRobot) robots.get(x);\n                System.out.print(c1.getClass().getName() + \" - Model: \" + c1.modelName + \" now has Cleaning Power: \");\n                c1.boostCleaningPower(miktar);\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (int x = 0; x < robots.size(); x++) {\n            if(robots.get(x).getClass().getName() == \"SecurityRobot\"){\n                SecurityRobot s1 = (SecurityRobot) robots.get(x);\n                System.out.print(s1.getClass().getName() + \" - Model: \" + s1.modelName + \" is now \");\n                s1.toggleArmedMode();\n            }\n        }\n    }\n\n    public int getCount() {\n        return RobotFactory.count;\n    }\n\n    public void setCount(int count) {\n        RobotFactory.count = count;\n    }\n\n    public void robotCount() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + getCount() + \" robot uretildi\");\n    }\n}\n"
    },
    {
      "id": "6914659",
      "WithBattery.java": "public interface WithBattery{\n    int getBatteryLife(); //Batarya omrunu doner\n    void recharge(); //Bataryayi yeniler\n}",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    protected String modelName; //Robotun modeli\n    protected int batteryLife; //Robotun batarya omru\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n    public String getModelName(){\n        return modelName;\n    }\n    public abstract void performTask(); //abstract metod oldugu icin govdesiz\n    public int getBatteryLife(){\n        return batteryLife;\n    }\n    public void recharge(){\n        this.batteryLife = 100;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n    RobotFactory factory = new RobotFactory();\n    factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n    factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n    factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n    factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n    System.out.println(\"\\nProduced Robots:\");\n    factory.displayRobots();\n    System.out.println(\"\\nPerforming All Robot Tasks:\");\n    factory.performAllTasks();\n    System.out.println(\"\\nUpgrading Cleaning Robots:\");\n    factory.upgradeCleaningRobots(10);\n    System.out.println(\"\\nToggling Security Robot Modes:\");\n    factory.toggleSecurityRobotsMode();\n    System.out.println(\"\\nFinal Robot Status:\");\n    factory.displayRobots();\n    // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n    RobotFactory anotherFactory = new RobotFactory();\n    anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n    anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n    System.out.println(\"\\n\");\n    //?? // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n    RobotFactory.toplamRobotUretimi();\n    }\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n    private boolean isArmed; //robotun silahli olup olmadigini gosterir\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n    /*\n    Eğer batarya ömrü 10 ya da daha fazla ise \"[modelName] Scanning for threats... Armed: isArmed\"\n    mesajını yazdırır (modelName ve isArmed yerine değişken değerleri göstermeli). Mesaj gösterildikten\n    sonra batarya ömrü 10 azalır. Metod çağırıldığında yeterli batarya ömrü yoksa \"[modelName] Not\n    enough battery to scan threats...\" mesajı gösterilmeli.\n    */\n    public void performTask(){\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"]\" + \" Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"]\" + \" Not enough battery to scan threats...\");\n        }\n    }\n    public void toggleArmedMode(){ //silah modunu degistirir\n        //SecurityRobot - GuardBot X is now Unarmed\n        this.isArmed = !this.isArmed;\n        if(isArmed == true)\n            System.out.println(\"SecurityRobot - \" + modelName + \" is now Armed\");\n        else\n        System.out.println(\"SecurityRobot - \" + modelName + \" is now Unarmed\");\n    }\n    public boolean getIsArmed(){\n        return isArmed;\n    }\n    public void setIsArmed(boolean isArmed){\n        this.isArmed = isArmed;\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n    /*\n    Eğer batarya ömrü 10 ya da daha fazla ise \"[modelName] Cleaning in progress... Cleaning Power:\n    cleaningPower\" mesajını yazdırır (modelName ve cleaningPower yerine değişken değerleri gösterilmeli). \n    Mesaj gösterildikten sonra batarya ömrü 10 azalır. Metod çağırıldığında yeterli batarya ömrü\n    yoksa \"[modelName] Not enough battery to clean...\" mesajı gösterilmeli.\n    */\n    public void performTask(){ \n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"]\" + \" Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"]\" + \" Not enough battery to clean...\");\n        }\n\n    }\n    public void boostCleaningPower(){ //temizlik gucunu artirir\n        this.cleaningPower += 10;\n        System.out.println(\"CleaningRobot - \" + modelName + \" now has Cleaning Power: \" + cleaningPower);\n    }\n    public int getCleaningPower(){\n        return cleaningPower;\n    }\n    public void setCleaningPower(int cleaningPower){\n        this.cleaningPower = cleaningPower;\n    }\n}\n\n\n",
      "RobotFactory.java": "import java.util.ArrayList;\nclass RobotFactory{\n    private ArrayList<AbstractRobot> robots;\n    private static int totalRobotProduction = 0; // main metodunda obje olusturmadan cagirmak icin static\n    public RobotFactory(){\n        robots = new ArrayList<>();\n    }\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalRobotProduction++;\n    }\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalRobotProduction++;\n    }\n    public void performAllTasks(){\n        for (AbstractRobot robot: robots){\n            robot.performTask();\n        }\n    }\n    public void displayRobots(){\n        for (AbstractRobot r: robots){\n            if (r instanceof CleaningRobot){\n                CleaningRobot cr = (CleaningRobot)r;\n                System.out.println(\"CleaningRobot - Model: \" + cr.getModelName() + \", Battery: \" + cr.getBatteryLife() + \", Cleaning Power: \" + cr.getCleaningPower());\n            } else if (r instanceof SecurityRobot){\n                SecurityRobot sr = (SecurityRobot)r;\n                System.out.println(\"SecurityRobot - Model: \" + sr.getModelName() + \", Battery: \" + sr.getBatteryLife() + \", Armed: \" + sr.getIsArmed());\n            }\n        }\n    }\n    public void upgradeCleaningRobots(int miktar){ //cleaning robot sinifindayken\n        for (AbstractRobot r: robots){\n            if (r instanceof CleaningRobot){\n                ((CleaningRobot)r).boostCleaningPower();\n            }\n        }\n    }\n    public void toggleSecurityRobotsMode(){ //security robot sinifindayken\n        for (AbstractRobot r: robots){\n            if (r instanceof SecurityRobot){\n                ((SecurityRobot)r).toggleArmedMode();\n            }\n        }\n    }\n    public static void toplamRobotUretimi(){\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + totalRobotProduction + \" robot uretildi\");\n    }\n}\n"
    },
    {
      "id": "4856424",
      "WithBattery.java": "\npublic interface WithBattery {\n\n\tint getBatteryLife();\n\tvoid recharge();\n}\n",
      "Quiz2.java": "\npublic class Quiz2 {\n\n\tpublic static void main(String[] args) {\n\t\t\n\n\t\tRobotFactory factory = new RobotFactory();\n\t\t\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n\t\tfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\n\t\tfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\t\t\n\t\tSystem.out.println(\"\\nProduced Robots:\");\n\t\t//factory.displayRobots();\n\t\t\n\t\tSystem.out.println(\"\\nPerforming All Robot Tasks:\");\n\t\tfactory.performAllTasks();\n\t\t\n\t\tSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\n\t\tfactory.upgradeCleaningRobots(10);\n\t\t\n\t\tSystem.out.println(\"\\nToggling Security Robot Modes:\");\n\t\t//factory.toggleSecurityRobotsMode();\n\t\t\n\t\tSystem.out.println(\"\\nFinal Robot Status:\");\n\t\tfactory.displayRobots();\n\t\t\n\t\tRobotFactory anotherFactory = new RobotFactory();\n\t\tanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n\t\tanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\t\t\n\t\tSystem.out.println(\"\\n\");\n\n\t}\n\n}\n",
      "AbstractRobot.java": "\npublic abstract class AbstractRobot implements WithBattery {\n\n\tprotected String  modelName;\n\tprotected int batteryLife;\n\t\n\t\n\tpublic AbstractRobot(String modelName,int bbatteryLife) {\n\t\tthis.modelName = modelName;\n\t\tthis.batteryLife = batteryLife;\n\t}\n\t\n\tpublic String getModelName() {\n\t\treturn modelName;\n\t}\n\t\n\tpublic abstract void performTask();\n\t\n}\n",
      "SecurityRobot.java": "\npublic class SecurityRobot extends AbstractRobot{\n\n\tprivate boolean isArmed;\n\t\n\tSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n\t\tsuper(modelName,batteryLife);\n\t\tthis.isArmed = isArmed;\n\t}\n\t\n\tpublic int getBatteryLife() {\n\t\t\n\t\treturn this.batteryLife;\n\t}\n\n\t\n\tpublic void recharge() {\n\t\t\n\t\tthis.batteryLife = 100;\n\t\t\n\t}\n\n\t@Override\n\tpublic void performTask() {\n\t\tif(this.batteryLife>=10) {\n\t\t\tSystem.out.println(\"[\"+this.modelName+\"]\"+ \" Scanning for threats...\"+ \"  Armed:\"+this.isArmed);\n\t\t\tthis.batteryLife -= 10;\n\t\t\t\n\t\t}else {\n\t\t\tSystem.out.println(\"[\"+this.modelName+\"]\"+ \" Not enough battery to scan threats...\");\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void toggleArmedMode() {\n\t\tif(isArmed == true) {\n\t\t\tisArmed = false;\n\t\t}else {\n\t\t\tisArmed = true;\n\t\t}\n\t}\n\n\t\n}\n",
      "CleaningRobot.java": "\npublic class CleaningRobot extends AbstractRobot {\n\n\n\tprivate int cleaningPower;\n\t\n\tCleaningRobot(String modelName,int batteryLife,int cleaningPower){\n\t\tsuper(modelName,batteryLife);\n\t\tthis.cleaningPower = cleaningPower;\n\t\t\n\t}\n\t\n\tpublic int getBatteryLife() {\n\t\t\n\t\treturn this.batteryLife;\n\t}\n\n\t\n\tpublic void recharge() {\n\t\t\n\t\tthis.batteryLife = 100;\n\t\t\n\t}\n\n\t\n\tpublic void performTask() {\n\t\t \n\t\tif(this.batteryLife>=10) {\n\t\t\tSystem.out.println(\"[\"+this.modelName+\"]\"+ \" Cleaning in progress...\"+ \"  CleaningPower:\"+this.cleaningPower);\n\t\t\tthis.batteryLife -= 10;\n\t\t\t\n\t\t}else {\n\t\t\tSystem.out.println(\"[\"+this.modelName+\"]\"+ \" Not enough battery to clean...\");\n\t\t}\n\t\t\n\t\t\n\t\n\t//public void boostCleaningPower() {\n\t\t\n\t}\n\t}\n\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n\n\tprivate ArrayList<AbstractRobot> robots;\n\t\n\tpublic void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\t CleaningRobot robot = new CleaningRobot(modelName, batteryLife, cleaningPower);\n\t\t String modelName1;\n\t\t int batteryLife1; \n\t\t int cleaningPower1;\n\t\t  \n\t\t\t}\n\t\t\n\t\n\tpublic void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\tSecurityRobot robot = new SecurityRobot(modelName, batteryLife, isArmed);\n\t\t String modelName1;\n\t\t int batteryLife1; \n\t\t int cleaningPower1;\n\t}\n\t\n\tpublic void performAllTasks() {\n\t\tfor(AbstractRobot robot: robots) {\n\t\t\trobot.performTask();\n\t\t}\n\t}\n\t\n\tpublic void displayRobots() {\n\t\tfor(AbstractRobot robot: robots) {\n\t\t\tif(robot instanceof CleaningRobot){\n\t\t         System.out.println(\"CleaningRobot\" + \" -\" + \"Model:\" + robot.modelName + \", \" + \"Battery:\" + robot.batteryLife +\", \" + \"Cleaning Power:\"  );\n\t\t      }else {\n\t\t\t     System.out.println(\"SecurityRobot\" + \" -\" + \"Model:\" + robot.modelName + \", \" + \"Battery:\" + robot.batteryLife +\", \" + \"Armed:\"   );\n\t\t}\n\t}\n\t}\n\n\t\n\tpublic void upgradeCleaningRobots(int miktar) {\n\t\t\n\t}\n\t\n\tpublic void toggleSecurityRobotsModel() {\n\t\t\n\t}\n\t\n}\n\t\n\t\n",
      "._AbstractRobot.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000El\u000fs\u000e",
      "._WithBattery.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000El\u000fs\u000e",
      "._RobotFactory.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000El\u000fs\u000e",
      "._Quiz2.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000El\u000fs\u000e",
      "._SecurityRobot.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000El\u000fs\u000e",
      "._CleaningRobot.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000El\u000fs\u000e"
    },
    {
      "id": "6429016",
      "WithBattery.java": "package Quiz2bil211;\n\npublic interface WithBattery {\n\n    public int  getBatteryLife();\n    void recharge();\n    \n}\n",
      "AbstractRobot.java": "package Quiz2bil211;\n\npublic abstract class AbstractRobot implements WithBattery{\n    \n    protected String modelName;\n    protected int batteryLife;\n    \n    public AbstractRobot(String modelname, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    \n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public abstract void performTask();\n}\n",
      "Main.java": "package Quiz2bil211;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n        factory.Countrobots();\n        }\n        \n    \n}\n",
      "SecurityRobot.java": "package Quiz2bil211;\n\npublic class SecurityRobot extends AbstractRobot{\n\n    private boolean isArmed;\n\n    public String getIsArmed() {\n        if(isArmed==true){\n            return \"Armed\";\n        }\n        else{\n            return \"Unarmed\";\n        }\n        \n    }\n    public boolean getArmed() {\n        \n        return isArmed;\n        \n    }\n\n\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed=isArmed;\n        this.modelName=modelName;\n        this.isArmed=isArmed;\n    }\n\n    public void toggleArmedMode(){\n        isArmed=!isArmed;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n    \n    @Override\n    public void recharge() {\n        batteryLife=batteryLife+150;\n    }\n\n    \n    @Override\n    public void performTask() \n    {\n        if(batteryLife==10 || batteryLife>10){\n            System.out.println(\"[\"+modelName+\"]\"+\" Scanning for threats... Armed: \" + isArmed);\n            batteryLife=batteryLife-10;\n        }\n        else if(batteryLife<10){\n            System.out.println(\"[\"+modelName+\"]\"+ \" Not enough battery to scan threats...\");\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"SecurityRobot - Model: \" + getModelName() + \", Battery: \" + getBatteryLife() + \", Armed: \" + getIsArmed();\n    }\n\n       \n}\n",
      "CleaningRobot.java": "package Quiz2bil211;\n\npublic class CleaningRobot extends AbstractRobot {\n\n    \n\n    private int cleaningPower;\n    protected String modelName;\n    protected int batteryLife;\n\n    \n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower=cleaningPower;\n        this.modelName=modelName;\n        this.batteryLife=batteryLife;\n        \n\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n\n    public void boostCleaningPower(int amount){\n        cleaningPower=cleaningPower+amount;\n    }\n\n\n\n    public String getModelName(){\n        return modelName;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife=batteryLife+150;\n    }\n\n    @Override\n    public void performTask() {\n        if(batteryLife==10 || batteryLife>10){\n            System.out.println(\"[\"+modelName+\"]\"+\" Cleaning in progress...  Cleaning power: \" + cleaningPower);\n            batteryLife=batteryLife-10;\n        }\n        else if(batteryLife<10){\n            System.out.println(\"[\"+modelName+\"]\"+ \" Not enough battery to clean...\");\n        }\n\n    }\n\n    @Override\npublic String toString() {\n    return \"CleaningRobot - Model: \" + getModelName() + \", Battery: \" + getBatteryLife() + \", Cleaning Power: \" + cleaningPower;\n}\n\n    \n    \n    \n}\n",
      "RobotFactory.java": "package Quiz2bil211;\n\nimport java.util.ArrayList;\n\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>(); \n    private static int totalRobotCount = 0; \n\n    \n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalRobotCount++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalRobotCount++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            System.out.println(robot);\n        }\n    }\n\n\n\n\n    public void upgradeCleaningRobots(int amount) {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower(amount);   \n            }\n            if(robot instanceof CleaningRobot){\n            System.out.println(\"CleaningRobot - \" + robot.getModelName() + \" now has Cleaning Power: \"+ ((CleaningRobot) robot).getCleaningPower() );}\n        }\n    }\n\n    \n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof SecurityRobot) {\n                ((SecurityRobot) robot).toggleArmedMode();\n            }\n            if(robot instanceof SecurityRobot){\n                System.out.println(\"SecurityRobot - \" + robot.getModelName() + \" Armed: \"+ ((SecurityRobot) robot).getArmed() );\n                \n            }\n        }\n    }\n\n    public void Countrobots(){\n        System.out.println(\"Tüm fabrikalar tarafından \"+totalRobotCount+\" robot üretildi.\");\n    }\n}"
    },
    {
      "id": "6343320",
      "AbstractRobot.java": "interface WithBattery{\n\t\n\tint getBatteryLife();\n\tString getVariety();\n\tvoid recharge();\n\t\n}\n\nabstract class AbstractRobot implements WithBattery{\n\t\n\tString modelVariety;\n\tString modelName;\n\tint batteryLife;\n\t\n\tpublic AbstractRobot(String modelName, int batteryLife) {}\n\t\n\tpublic String getModelName() {\n\t\treturn modelName;\n\t}\n\t\n\tpublic abstract void performTask();\n\t\n\tpublic int getBatteryLife() {\n\t\treturn batteryLife;\n\t}\n\t\n\tpublic String getVariety() {\n\t\treturn modelVariety;\n\t}\n\t\n\tpublic void recharge() {\n\t\tbatteryLife = 100;\n\t}\n\t\n}",
      "Main.java": "public class Quiz2 {\n\n\tpublic static void main(String[] args) {\n\t\tRobotFactory factory = new RobotFactory();\n\t\t\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n\t\tfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\n\t\tfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\t\t\n\t\tSystem.out.println(\"\\nProduce Robots: \");\n\t\tfactory.displayRobots();\n\t\t\n\t\tSystem.out.println(\"\\nPerforming All Robot Tasks: \");\n\t\tfactory.performAllTasks();\n\t\t\n\t\tSystem.out.println(\"\\nUpgrading Cleaning Robots: \");\n\t\tfactory.upgradeCleaningRobots(10);\n\t\t\n\t\tSystem.out.println(\"\\nToggling Security Robot Modes: \");\n\t\tfactory.toggleSecurityRobotsMode();\n\t\t\n\t\tSystem.out.println(\"\\nFinal Robot Status: \");\n\t\tfactory.displayRobots();\n\t\t\n\t\tRobotFactory anotherFactory = new RobotFactory();\n\t\tanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n\t\tanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\t\t\n\t\tSystem.out.println(\"\\n\");\n\t\tanotherFactory.numberOfRobots();\n\t\t\n\t}\n}",
      "SecurityRobot.java": "class SecurityRobot extends AbstractRobot{\n\t\n\tprivate boolean isArmed;\n\t\n\tSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\tsuper(modelName, batteryLife);\n\t\n\t}\n\n\tpublic void performTask() {}\n\t\n\tpublic void toggleArmedMode() {\n\t\tif(isArmed == false)\n\t\t\tisArmed = true;\n\t\telse\n\t\t\tisArmed = false;\n\t}\n\t\n}",
      "CleaningRobot.java": "class CleaningRobot extends AbstractRobot{\n\t\n\tprivate int cleaningPower;\n\t\n\tCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\tsuper(modelName, batteryLife);\n\t}\n\t\n\tpublic void performTask() {\n\t\tif(batteryLife >= 10) {\n\t\t\tSystem.out.println( modelName + \"Cleaning in progress...   Cleaning Power: \" + cleaningPower);\n\t\t\tbatteryLife -= 10;\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(modelName + \"not enough battery to clean...\");\n\t\t}\t\n\t}\n\t\n\tpublic void boostCleaningPower() {\n\t\tcleaningPower += 10;\n\t}\t\n\t\t\n}",
      "RobotFactory.java": "class RobotFactory{\n\t\n\tprivate ArrayList<AbstractRobot> robots;\n\t\n\tpublic void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\trobots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n\t}\n\t\n\tpublic void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\trobots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n\t}\n\t\n\tpublic void performAllTasks() {\n\t\tfor(int i = 0; i < robots.size(); i++) {\n\t\t\trobots.get(i).performTask();\n\t\t}\n\t}\n\t\n\tpublic void displayRobots() {\n\t\tfor(int i = 0; i < robots.size(); i++) {\n\t\t\tSystem.out.println(\"Model\" + robots.get(i).getModelName() +\", Battery:\" + robots.get(i).getBatteryLife());\n\t\t}\n\t}\n\t\n\tpublic void upgradeCleaningRobots(int miktar) {\n\t\tfor(int i = 0; i < robots.size(); i++) {\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\t\n\tpublic void toggleSecurityRobotsMode() {\n\t\tfor(int i = 0; i < robots.size(); i++) {\n\t\t\t\n\t\t}\n\t}\n\t\n\tpublic void numberOfRobots() {\n\t\tSystem.out.println(\"Tüm fabrikalar tarafından toplam \" + (robots.size() - 1) + \" robot üretildi\");\n\t}\n\t\n}\n"
    },
    {
      "id": "4275079",
      "WithBattery.java": "interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n\n}\n",
      "AbstractRobot.java": "import java.lang.reflect.Constructor;\n\nabstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int batteryLife;\n    protected int batteryLife2;\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName=modelName;\n        this.batteryLife=batteryLife;\n        this.batteryLife2=batteryLife;\n    }\n\n   public abstract void performTask();\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public int getBatteryLife2() {\n        return batteryLife2;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n        //Toplam üretilen robot sayısı için yazdığım fonksiyonum.\n        RobotFactory.NUMOFROBOTS();\n\n    }\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n  private boolean isArmed ;\n    public SecurityRobot(String modelName, int batteryLife,boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed=isArmed;\n    }\n    public void performTask(){\n        if(getBatteryLife()>=10){\n            System.out.println( \"[\"+modelName+\"] Scanning for threats... Armed: \"+isArmed);\n\n            batteryLife = batteryLife - 10;\n        }\n        else {\n            System.out.println(\"[\"+modelName+\"] Not enough battery to scan  threats....\");\n        }\n    }\n    public void toggleArmedMode(){\n        if(isArmed){\n            isArmed=false;\n        }\n        else{\n            isArmed=true;\n        }\n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife=getBatteryLife();\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n  private int cleaningPower;\n    public CleaningRobot(String modelName, int batteryLife,int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower=cleaningPower;\n    }\n    public void performTask(){\n        if(getBatteryLife()>=10){\n            System.out.println(\"[\"+ modelName +\"] Cleaning in progress... Cleaning Power: \"+cleaningPower);\n            batteryLife = batteryLife - 10;\n        }\n        else {\n            System.out.println(\"[\"+modelName+\"] Not enough battery to clean...\");\n        }\n    }\n    public void boostCleaningPower(int miktar){\n        cleaningPower+=miktar;\n    }\n\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife=getBatteryLife2();\n    }\n}\n",
      "RobotFactory.java": "import java.awt.*;\nimport java.util.ArrayList;\n\npublic class RobotFactory {\n    static int numberOfRobots;\n    ArrayList<AbstractRobot> robots;\n    RobotFactory(){\n        this.robots=new ArrayList<>();\n    }\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName,batteryLife,cleaningPower));\n        numberOfRobots++;\n    }\n    //Toplam üretilen robot sayısı için yazdığım fonksiyonum.\n    public static void NUMOFROBOTS(){\n       System.out.println(\" Tum fabrikalar tarafindan toplam \"+numberOfRobots+\" robot uretildi\");\n    }\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName,batteryLife,isArmed));\n        numberOfRobots++;\n    }\n    public void upgradeCleaningRobots(int miktar){\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower(miktar);\n                System.out.println(\" CleaningRobot - \"+robot.modelName+\"  now has Cleaning Power: \"+((CleaningRobot) robot).getCleaningPower());\n\n            }\n        }\n    }\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof SecurityRobot) {\n                ((SecurityRobot) robot).toggleArmedMode();\n                if (((SecurityRobot) robot).isArmed() == false) {\n                    System.out.println(\"SecurityRobot - \" + robot.modelName + \" is now Unarmed\");\n                } else\n                    System.out.println(\"SecurityRobot - \" + robot.modelName + \" is now Armed\");\n            }\n        }\n    }\n    public void displayRobots(){\n        for (AbstractRobot robot : robots) {\n            if(robot instanceof CleaningRobot){\n            System.out.println( robot.getClass().getName() +\" - Model: \"+robot.getModelName()+ \", Battery: \"+robot.batteryLife\n            +\", Cleaning Power: \"+((CleaningRobot) robot).getCleaningPower());\n        }\n            else if(robot instanceof SecurityRobot){\n                System.out.println( robot.getClass().getName() +\" - Model: \"+robot.getModelName()+ \", Battery: \"+robot.batteryLife\n                        +\", Cleaning Power: \"+ ((SecurityRobot) robot).isArmed());\n            }\n            }\n    }\n    public void performAllTasks(){\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n            }\n        }\n    }\n\n\n"
    },
    {
      "id": "7374887",
      "WithBattery.java": "public interface WithBattery {\n\n    int getBatteryLife();\n\n    void recharge();\n}",
      "AbstractRobot.java": "abstract class AbstractRobot implements WithBattery {\n\n    protected String modelName;\n    protected int batteryLife;\n    private final int originalBatteryLevel;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        originalBatteryLevel = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public void recharge() {\n        batteryLife = originalBatteryLevel;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public abstract void performTask();\n}",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        System.out.print(\"\\n\");\n        RobotFactory.displayRobotCount();\n    }\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if (this.batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \"Scanning for threats... Armed:\" + isArmed);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"]\" + \"Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n        if (isArmed) {\n            System.out.println(\"SecurityRobot - \" + modelName + \" is now Armed\");\n        } else {\n            System.out.println(\"SecurityRobot - \" + modelName + \" is now Unarmed\");\n        }\n    }\n\n    public boolean getIsArmed() {\n        return isArmed;\n    }\n\n}",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n\n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if (this.batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \"Cleaning in progress... Cleaning Power:\" + cleaningPower);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"]\" + \"Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(int x) {\n        this.cleaningPower += x;\n        System.out.println(\"CleaningRobot - \" + modelName + \" now has Cleaning Power: \" + cleaningPower);\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n}",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private static int robotCount = 0;\n\n    private ArrayList<AbstractRobot> robots = new ArrayList<AbstractRobot>();\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        robotCount++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        robotCount++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot abstractRobot : robots) {\n            abstractRobot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (int i = 0; i < robots.size(); i++) {\n            AbstractRobot abstractRobot = robots.get(i);\n            if (abstractRobot.getClass() == SecurityRobot.class) {\n                SecurityRobot k = (SecurityRobot) abstractRobot;\n                System.out.println(\"SecurityRobot - Model: \" + k.modelName + \", Battery: \"\n                        + k.getBatteryLife() + \", Armed: \" + k.getIsArmed());\n            } else {\n                CleaningRobot k = (CleaningRobot) abstractRobot;\n                System.out.println(\"Cleaning Robot - Model: \" + k.modelName + \", Battery: \"\n                        + k.getBatteryLife() + \", Armed: \" + k.getCleaningPower());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (AbstractRobot abstractRobot : robots) {\n            if (abstractRobot.getClass() == CleaningRobot.class) {\n                CleaningRobot k = (CleaningRobot) abstractRobot;\n                k.boostCleaningPower(miktar);\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot abstractRobot : robots) {\n            if (abstractRobot.getClass() == SecurityRobot.class) {\n                SecurityRobot k = (SecurityRobot) abstractRobot;\n                k.toggleArmedMode();\n            }\n        }\n    }\n\n    public static void displayRobotCount() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + RobotFactory.robotCount + \" robot uretildi\");\n    }\n}"
    },
    {
      "id": "5187413",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n\n    }\n\n    public abstract void performTask();\n\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n\n    private boolean isArmed;\n\n    public boolean getIsArmed() {\n        return isArmed;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = super.batteryLife;\n\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n\n    }\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n\n    }\n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n\n    private int cleaningPower;\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = super.batteryLife;\n\n    }\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress... Cleaning power: \" + cleaningPower);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(int cleaningPower, int miktar) {\n        cleaningPower += miktar;\n    }\n\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        CleaningRobot cleaningRobot = new CleaningRobot(modelName, batteryLife, cleaningPower);\n        robots.add(cleaningRobot);\n        counter++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        SecurityRobot securityRobot = new SecurityRobot(modelName, batteryLife, isArmed);\n        robots.add(securityRobot);\n        counter++;\n    }\n\n    public void performAllTasks() {\n        for (int i = 0; i < robots.size(); i++) {\n            robots.get(i).performTask();\n        }\n\n    }\n\n    public void displayRobots() {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i).getClass() == CleaningRobot.class) {\n                CleaningRobot r1 = (CleaningRobot) robots.get(i);\n                System.out.println(\"Cleaning Robot - Model: \" + robots.get(i).getModelName() + \", Battery: \"\n                        + robots.get(i).getBatteryLife() + \", Cleaning Power: \" + r1.getCleaningPower());\n            } else {\n                SecurityRobot r2 = (SecurityRobot) robots.get(i);\n                System.out.println(\"Security Robot - Model: \" + robots.get(i).getModelName() + \", Battery: \"\n                        + robots.get(i).getBatteryLife() + \", Armed: \" + r2.getIsArmed());\n            }\n\n        }\n\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i).getClass() == CleaningRobot.class) {\n                CleaningRobot r3 = (CleaningRobot) robots.get(i);\n                r3.boostCleaningPower(r3.getCleaningPower(), miktar);\n                System.out.println(\"CleaningRobot - \" + robots.get(i).modelName + \"now has Cleaning power:\"\n                        + r3.getCleaningPower());\n            }\n\n        }\n\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i).getClass() == SecurityRobot.class) {\n                SecurityRobot r4 = (SecurityRobot) robots.get(i);\n                r4.toggleArmedMode();\n                System.out.println(\"SecurityRobot - \" + robots.get(i).modelName + \"is now \" + r4.getIsArmed());\n            }\n\n        }\n\n    }\n\n    public static int counter;\n\n    public void allRobots() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + counter + \" üretildi.\");\n\n    }\n\n}\n",
      "Main1.java": "\npublic class Main1 {\n\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        System.out.println(\"\\n\");\n        anotherFactory.allRobots();\n\n    }\n\n}\n"
    },
    {
      "id": "6539697",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n    public void recharge() {\n        batteryLife = 150;\n    }\n    public boolean hasEnoughBattery() {\n        return batteryLife >= 10;\n    }\n    public abstract void performTask();\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"Produced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        System.out.println();\n        RobotFactory.getTotalRobots();\n    }\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName,batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if(hasEnoughBattery()) {\n            System.out.println(\"[\"+modelName+\"]\"+\" Scanning for threats... Armed: \"+isArmed);\n            batteryLife -= 10;\n        }\n        else\n            System.out.println(\"[\"+modelName+\"]\"+\" Not enough battery to scan threats...\");\n    }\n    public void toggleArmedMode() {\n        if(isArmed)\n            System.out.println(\"Security Robot - \"+modelName+\" is now Unarmed\");\n        else\n            System.out.println(\"Security Robot - \"+modelName+\" is now Armed\");\n        isArmed = !isArmed;\n    }\n    protected boolean getIsArmed() {\n        return isArmed;\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName,batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if(hasEnoughBattery()) {\n            System.out.println(\"[\"+modelName+\"]\"+\" Cleaning in progress... Cleaning Power: \"+cleaningPower);\n            batteryLife -= 10;\n        }\n        else\n            System.out.println(\"[\"+modelName+\"]\"+\" Not enough battery to clean...\");\n    }\n    public void boostCleaningPower(int miktar) {\n        cleaningPower += miktar;\n        System.out.println(\"CleaningRobot - \"+modelName+\" now has Cleaning Power: \"+cleaningPower);\n    }\n    protected int getCleaningPower() {\n        return cleaningPower;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots;\n    private static int totalRobots;\n\n    public RobotFactory() {\n        this.robots = new ArrayList<AbstractRobot>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName,batteryLife,cleaningPower));\n        totalRobots++;\n    }\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName,batteryLife,isArmed));\n        totalRobots++;\n    }\n\n    public void performAllTasks() {\n        for(AbstractRobot robot : robots)\n            robot.performTask();\n    }\n    public void displayRobots() {\n        for(AbstractRobot robot : robots)\n            if(robot instanceof CleaningRobot)\n                System.out.println(\"CleaningRobot - Model: \"+robot.modelName+\",\"+\" Battery: \"+robot.batteryLife+\",\"+\" Cleaning Power: \"+ ((CleaningRobot) robot).getCleaningPower());\n            else\n                System.out.println(\"SecurityRobot - Model: \"+robot.modelName+\",\"+\" Battery: \"+robot.batteryLife+\",\"+\" Armed: \"+ ((SecurityRobot) robot).getIsArmed());\n    }\n    public void upgradeCleaningRobots(int miktar) {\n        for(AbstractRobot robot : robots)\n            if(robot instanceof CleaningRobot)\n                ((CleaningRobot) robot).boostCleaningPower(miktar);\n    }\n    public void toggleSecurityRobotsMode() {\n        for(AbstractRobot robot : robots)\n            if(robot instanceof SecurityRobot)\n                ((SecurityRobot) robot).toggleArmedMode();\n    }\n    public static void getTotalRobots() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \"+totalRobots+\" robot uretildi\");\n    }\n}\n"
    },
    {
      "id": "9905145",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n\n    }\n\n    public String getModelName() {\n        return this.modelName = modelName;\n    }\n\n    public abstract void performTask();\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots();\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n\n        // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n        System.out.println(\"\\nToplam Üretilen Robot Sayısı:\");\n        factory.toplamRobotUretimi();\n    }\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n\n    private boolean isArmed;\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName,batteryLife);\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.isArmed = isArmed;\n    }\n\n    @Override\n    public void performTask() {\n        if(batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \"Scanning for threats...\" + \"Armed: \" + isArmed);\n            batteryLife -= 10;\n        }\n        else {\n            System.out.println(\"[\" + modelName + \"]\" + \"Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode() {\n        if(!isArmed) {\n            isArmed = true;\n        }\n        else if(isArmed) {\n            isArmed = false;\n        }\n    }\n\n    public String getModelName() {\n        return this.modelName = modelName;\n    }\n\n    public int getBatterylife() {\n        return this.batteryLife = batteryLife;\n    }\n\n    public boolean getIsArmed() {\n        return this.isArmed = isArmed;\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName,batteryLife);\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.cleaningPower = cleaningPower;\n    }\n\n    @Override\n    public void performTask() {\n        if(batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \"Cleaning in progress...\" + \"Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        }\n        else {\n            System.out.println(\"[\" + modelName + \"]\" + \"Not enough battery to clean...\");\n        }\n    }\n\n    public String getModelName() {\n        return this.modelName = modelName;\n    }\n\n    public int getBatterylife() {\n        return this.batteryLife = batteryLife;\n    }\n\n    public int getCleaningPower() {\n        return this.cleaningPower = cleaningPower;\n    }\n\n    public void boostCleaningPower() {\n        cleaningPower += 10;\n    }\n}\n",
      "RobotFactory.java": "import java.awt.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RobotFactory {\n\n    private ArrayList<AbstractRobot> robots;\n\n    RobotFactory() {\n        robots = new ArrayList<>();\n    }\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        CleaningRobot cleaningRobot = new CleaningRobot(modelName,batteryLife,cleaningPower);\n        robots.add(cleaningRobot);\n    }\n\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        SecurityRobot securityRobot = new SecurityRobot(modelName,batteryLife,isArmed);\n        robots.add(securityRobot);\n    }\n\n    public void performAllTasks() {\n        for(int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                robots.get(i).performTask();\n            }\n            else if(robots.get(i) instanceof  SecurityRobot) {\n                robots.get(i).performTask();\n            }\n        }\n    }\n\n    public void displayRobots() {\n        for(int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                String modelName = robots.get(i).getModelName();\n                int batteryLife = ((CleaningRobot) robots.get(i)).getBatterylife();\n                int cleaningPower = ((CleaningRobot) robots.get(i)).getCleaningPower();\n                System.out.println(\"CleaningRobot - Model: \" + modelName + \"Battery: \" + batteryLife + \"Cleaning Power: \" + cleaningPower);\n            }\n            else if(robots.get(i) instanceof  SecurityRobot) {\n                String modelName = robots.get(i).getModelName();\n                int batteryLife = ((SecurityRobot) robots.get(i)).getBatterylife();\n                boolean isArmed = ((SecurityRobot) robots.get(i)).getIsArmed();\n                System.out.println(\"SecurityRobot - Model: \" + modelName + \"Battery: \" + batteryLife + \"Armed: \" + isArmed);\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots() {\n        for(int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                ((CleaningRobot) robots.get(i)).boostCleaningPower();\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for(int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof SecurityRobot) {\n                ((SecurityRobot) robots.get(i)).toggleArmedMode();\n            }\n        }\n    }\n\n    public void toplamRobotUretimi() {\n        System.out.println(\"Tüm fabrikalar tarafından toplam \" + robots.size() + \" robot üretildi\");\n    }\n}\n"
    },
    {
      "id": "5902250",
      "WithBattery.java": "package quiz2;\n\ninterface WithBattery {\n\tint getBatteryLife();\n\tvoid recharge();\n}\n",
      "AbstractRobot.java": "package quiz2;\n\npublic abstract class AbstractRobot implements WithBattery {\n\tprotected String modelName;\n\tprotected int batteryLife;\n\tpublic AbstractRobot(String modelName, int batteryLife) {\n\t\tthis.modelName = modelName;\n\t\tthis.batteryLife = batteryLife;\n\t}\n\tpublic String getModelName() {\n\t\treturn this.modelName;\n\t}\n\tpublic abstract void performTask();\n\tpublic void recharge() {\n\t\tif(this.batteryLife < 100)\n\t\t\tthis.batteryLife = 100;\n\t\telse\n\t\t\tthis.batteryLife += 10;\n\t}\n}\n",
      "Main.java": "package quiz2;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tRobotFactory factory = new RobotFactory();\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n\t\tfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\n\t\tfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\t\tSystem.out.println(\"Produced Robots:\");\n\t\tfactory.displayRobots();\n\t\tSystem.out.println(\"\\nPerforming All Robot Tasks:\");\n\t\tfactory.performAllTasks();\n\t\tSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\n\t\tfactory.upgradeCleaningRobots(10);\n\t\tSystem.out.println(\"\\nToggling Security Robot Modes:\");\n\t\tfactory.toggleSecurityRobotsMode();\n\t\tSystem.out.println(\"\\nFinal Robot Status:\");\n\t\tfactory.displayRobots();\n\t\t// ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n\t\tRobotFactory anotherFactory = new RobotFactory();\n\t\tanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n\t\tanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\t\tSystem.out.println(\"\\n\");\n\t\tRobotFactory.getTotalProduction(); // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n\t\t}\n}\n",
      "SecurityRobot.java": "package quiz2;\n\npublic class SecurityRobot extends AbstractRobot {\n\tprivate boolean isArmed;\n\t\n\tSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\tsuper(modelName, batteryLife);\n\t\tthis.isArmed = isArmed;\n\t}\n\n\t@Override\n\tpublic void performTask() {\n\t\tif(this.batteryLife >= 10) {\n\t\t\tSystem.out.println(\"[\" + this.getModelName() + \"] Scanning for threats...Armed: \" + this.getAR());\n\t\t\tthis.batteryLife -= 10;\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"[\" + this.getModelName() + \"] Not enough battery to scan threats...\");\n\t\t}\n\t}\n\tpublic void toggleArmedMode() {\n\t\tthis.isArmed = !this.isArmed;\n\t\tSystem.out.println(\"SecurityRobot - \" + this.getModelName() + \" is now \" + this.strArmed());\n\t}\n\tpublic boolean getAR() {\n\t\treturn this.isArmed;\n\t}\n\t@Override\n\tpublic int getBatteryLife() {\n\t\treturn this.batteryLife;\n\t}\n\tpublic String strArmed() {\n\t\tif(this.isArmed)\n\t\t\treturn \"Armed\";\n\t\treturn \"Unarmed\";\n\t}\n}\n",
      "CleaningRobot.java": "package quiz2;\n\npublic class CleaningRobot extends AbstractRobot {\n\tprivate int cleaningPower;\n\tCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\tsuper(modelName, batteryLife);\n\t\tthis.cleaningPower = cleaningPower;\n\t}\n\t@Override\n\tpublic void performTask() {\n\t\tif(this.batteryLife >= 10) {\n\t\t\tSystem.out.println(\"[\" + this.getModelName() + \"] Cleaning in progress...Cleaning Power: \" + this.getCP());\n\t\t\tthis.batteryLife -= 10;\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"[\" + this.getModelName() + \"] Not enough battery to clean...\");\n\t\t}\n\t}\n\tpublic void boostCleaningPower(int miktar) {\n\t\tthis.cleaningPower += miktar;\n\t\tSystem.out.println(\"CleaningRobot - \" + this.getModelName() + \" now has Cleaning Power: \" + this.getCP());\n\t}\n\tpublic int getCP() {\n\t\treturn this.cleaningPower;\n\t}\n\t@Override\n\tpublic int getBatteryLife() {\n\t\treturn this.batteryLife;\n\t}\n}\n",
      "RobotFactory.java": "package quiz2;\n\nimport java.util.ArrayList;\n\npublic class RobotFactory {\n\tprivate ArrayList<AbstractRobot> robots;\n\tstatic int toplamRobotUretimi = 0; // Bu ekilde ???'ni hallettim.\n\t\n\tRobotFactory() {\n\t\tthis.robots = new ArrayList<AbstractRobot>();\n\t}\n\tpublic void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\trobots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n\t\ttoplamRobotUretimi++; // Byle\n\t}\n\tpublic void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\trobots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n\t\ttoplamRobotUretimi++; // Byle\n\t}\n\tpublic void performAllTasks() {\n\t\tfor(AbstractRobot robot : robots)\n\t\t\trobot.performTask();\n\t}\n\t\n\tpublic void displayRobots() {\n\t\tfor(AbstractRobot robot : robots) {\n\t\t\tif(robot instanceof CleaningRobot) {\n\t\t\t\tCleaningRobot cr = (CleaningRobot) robot;\n\t\t\t\tSystem.out.println(\"CleaningRobot - Model: \" + cr.getModelName() + \", Battery: \" \n\t\t\t\t+ cr.getBatteryLife() + \", Cleaning Power: \" + cr.getCP());\n\t\t\t}\n\t\t\t\n\t\t\telse if(robot instanceof SecurityRobot) {\n\t\t\t\tSecurityRobot sr = (SecurityRobot) robot;\n\t\t\t\tSystem.out.println(\"SecurityRobot - Model: \" + sr.getModelName() + \", Battery: \" \n\t\t\t\t+ sr.getBatteryLife() + \", Armed: \" + sr.getAR());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void upgradeCleaningRobots(int miktar) {\n\t\tfor(AbstractRobot robot: robots) {\n\t\t\tif(robot instanceof CleaningRobot) {\n\t\t\t\tCleaningRobot cr = (CleaningRobot) robot;\n\t\t\t\tcr.boostCleaningPower(miktar);\n\t\t\t\tcr.recharge();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void toggleSecurityRobotsMode() {\n\t\tfor(AbstractRobot robot: robots) {\n\t\t\tif(robot instanceof SecurityRobot) {\n\t\t\t\tSecurityRobot sr = (SecurityRobot) robot;\n\t\t\t\tsr.toggleArmedMode();\n\t\t\t\tsr.recharge();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void getTotalProduction() {\n\t\tSystem.out.println(\"Tum fabrikalar tarafindan \" + toplamRobotUretimi + \" robot uretildi\");\n\t}\n}\n"
    },
    {
      "id": "4810237",
      "WithBattery.java": "\npublic interface WithBattery {\n\tint getBatteryLife();\n\tvoid recharge();\n}\n",
      "AbstractRobot.java": "\nabstract class AbstractRobot implements WithBattery{\n\tprotected String modelName;\n\tprotected int batteryLife;\n\t\n\tpublic AbstractRobot(String modelName, int batteryLife) {\n\t\tthis.modelName=modelName;\n\t\tthis.batteryLife=batteryLife;\n\t}\n\n\tpublic String getModelName() {\n\t\treturn modelName;\n\t}\n\t\n\tpublic int getBatteryLife() {\n\t\treturn batteryLife;\n\t}\n\tpublic void recharge() {\n\t\tbatteryLife=getBatteryLife();\n\t}\n\tpublic abstract void performTask();\n}\n",
      "SecurityRobot.java": "\npublic class SecurityRobot extends AbstractRobot{\n\tprivate boolean isArmed;\n\tpublic SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\tsuper(modelName, batteryLife);\n\t\tthis.isArmed = isArmed;\n\t}\n\t\n\tpublic void performTask() {\n\t\tif(batteryLife>=10) {\n\t\t\tSystem.out.println(\"|\"+modelName+\"|  Scanning for threats... Armed:\"+isArmed);\n\t\t\tbatteryLife=-10;\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"|\"+modelName+\"|  Not enough battery to sean threads...\");\n\t\t}\n\t}\n\tpublic void toggleArmedMode() {\n\t\tif(isArmed==false) {\n\t\t\tisArmed=true;\n\t\t}\n\t\telse {\n\t\t\tisArmed=false;\n\t\t}\n\t}\n\n\t\n}\n",
      "CleaningRobot.java": "\npublic class CleaningRobot extends AbstractRobot{\n\tprivate int cleaningPower;\n\tpublic CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\tsuper(modelName, batteryLife);\n\t\tthis.cleaningPower = cleaningPower;\n\t}\n\tpublic int getCleaningPower() {\n\t\treturn cleaningPower;\n\t}\n\tpublic void performTask() {\n\t\tif(batteryLife>=10) {\n\t\t\tSystem.out.println(\"|\"+modelName+\"| Cleaning in progress... Cleaning Power:\"+cleaningPower);\n\t\t\tbatteryLife=-10;\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"|\"+modelName+\"| Not enough battery to clean...\");\n\t\t}\n\t}\n\tpublic void boostCleaningPower(int i) {\n\t\tcleaningPower=+i;\n\t}\n\n\n\t\n\t\n\t\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n\tprivate ArrayList<AbstractRobot> robots;\n\tpublic void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\tCleaningRobot a = new CleaningRobot(modelName,batteryLife,cleaningPower);\n\t\trobots.add(a);\n\t}\n\tpublic void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\tSecurityRobot b=new SecurityRobot(modelName,batteryLife,isArmed);\n\t\trobots.add(b);\n\t}\n\tpublic void performAllTasks() {\n\t\tSecurityRobot[] a = (SecurityRobot[]) robots.toArray();\n\t\tfor(int i=0;i<a.length;i++) {\n\t\t\ta[i].performTask();\n\t\t}\n\t}\n\tpublic void displayRobots() {\n\t\tObject[] a = robots.toArray();\n\t\tfor(int i=0;i<a.length;i++) {\n\t\t\tSystem.out.println(a[i]);\n\t\t}\n\t}\n\tpublic void upgradeCleaningRobots(int miktar) {\n\t\tCleaningRobot[] a = (CleaningRobot[]) robots.toArray();\n\t\tfor(int i=0;i<a.length;i++) {\n\t\t\ta[i].boostCleaningPower(miktar);\n\t\t}\n\t}\n\tpublic void toggleSecurityRobotsMode() {\n\t\tSecurityRobot[] a = (SecurityRobot[]) robots.toArray();\n\t\tfor(int i=0;i<a.length;i++) {\n\t\t\ta[i].toggleArmedMode();\n\t\t}\n\t}\n\n\n\tpublic static void main(String[] args) {\n\t\tRobotFactory factory = new RobotFactory();\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n\t\tfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\n\t\tfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\t\tSystem.out.println(\"\\nProduced Robots:\");\n\t\tSystem.out.println(\"\\nPerforming All Robot Tasks:\");\n\t\tfactory.performAllTasks();\n\t\tSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\n\t\tfactory.upgradeCleaningRobots(10);\n\t\tSystem.out.println(\"\\nToggling Security Robot Modes:\");\n\t\tfactory.toggleSecurityRobotsMode();\n\t\tSystem.out.println(\"\\nFinal Robot Status:\");\n\t\tfactory.displayRobots();\n\t\t// ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n\t\tRobotFactory anotherFactory = new RobotFactory();\n\t\tanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n\t\tanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\t\tSystem.out.println(\"\\n\");\n\t}\n}\n"
    },
    {
      "id": "4540765",
      "WithBattery.java": "package q2bil211nebiyanar;\n\npublic interface WithBattery {\n int getBatteryLife();\n void recharge();\n \n}\n",
      "AbstractRobot.java": "package q2bil211nebiyanar;\n\npublic  abstract class AbstractRobot implements WithBattery {\n\n\tprotected String modelName;\n\tprotected int batteryLife;\n\t\n\tint maxbattery;\n\tpublic AbstractRobot(String modelName,int batteryLife)\n\t{\n\t\tthis.modelName=modelName;\n\t\tthis.batteryLife=batteryLife;\n\t\tthis.maxbattery=batteryLife;\n\t}\n\t\n\tpublic String getModelName()\n\t{\n\t\treturn modelName;\n\t}\n\t\n\tpublic void recharge()\n\t{\n\t\tif(maxbattery<100)\n\t\t{\n\t\t\tthis.batteryLife=100;\n\t\t}\n\t\t\n\t\telse {\n\t\tthis.batteryLife=maxbattery;\t\n\t\t}\n\t}\n\t\n\t\n\tpublic int getBatteryLife()\n\t{\n\t\treturn batteryLife;\n\t}\n\t\n\tpublic abstract void performTask();\n\t\n}\n",
      "main.java": "package q2bil211nebiyanar;\n\npublic class main {\n\t\n\tpublic static void main(String[] args) {\n\t\tRobotFactory factory = new RobotFactory();\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n\t\tfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\n\t\tfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\n\t\tfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\t\tSystem.out.println(\"\\nProduced Robots:\");\n\t\tfactory.displayRobots();\n\t\tSystem.out.println(\"\\nPerforming All Robot Tasks:\");\n\t\tfactory.performAllTasks();\n\t\tSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\n\t\tfactory.upgradeCleaningRobots(10);\n\t\tSystem.out.println(\"\\nToggling Security Robot Modes:\");\n\t\tfactory.toggleSecurityRobotsMode();\n\t\tSystem.out.println(\"\\nFinal Robot Status:\");\n\t\tfactory.displayRobots();\n\t\t// ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n\t\tRobotFactory anotherFactory = new RobotFactory();\n\t\tanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n\t\tanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\t\tSystem.out.println(\"\\n\");\n\t\t RobotFactory.totalrobotproduced();\n\t\t}\n\t\n\n}\n",
      "SecurityRobot.java": "package q2bil211nebiyanar;\n\npublic class SecurityRobot extends AbstractRobot {\n\t\nprivate boolean isArmed;\n\npublic SecurityRobot(String modelName,int batteryLife,boolean isArmed) \n{\n\tsuper(modelName, batteryLife);\n\tthis.isArmed=isArmed;\n}\n\t\n\t\npublic void performTask()\n{\n\t\n\tif(batteryLife<10)\n\t{\n\tSystem.out.println(\"[\"+modelName+\"] Not enough battery to scan threads\");\n\t}\n\t\n\telse \n\t{\n\tSystem.out.println(\"[\"+modelName+\"]\" + \"Scanning for threads... Armed:\"+isArmed);\t\n\t\tbatteryLife-=10;\n\t\t\n\t}\n\t\n}\n\npublic void toogleArmedMode()\n{\n\tif(isArmed)\n\t{\n\tisArmed=false;\n\tSystem.out.println(\"SecurityRobot - \"+this.modelName+ \" is now Unarmed\");\n\t}\t\n\telse \n\t{\n\t\tisArmed=true;\n\t\tSystem.out.println(\"SecurityRobot - \"+this.modelName+ \" is now Unarmed\");\n\t}\n}\n\n\npublic boolean isArmed() {\n\treturn isArmed;\n}\n\n\npublic void setArmed(boolean isArmed) {\n\tthis.isArmed = isArmed;\n}\n\n\n\n\n\n\n}\n",
      "CleaningRobot.java": "package q2bil211nebiyanar;\n\npublic class CleaningRobot extends AbstractRobot {\n\t\n\tprivate int cleaningpower;\n\t\n\tpublic CleaningRobot(String modelName,int batteryLife,int cleaningpower)\n\t{\n\t\tsuper(modelName, batteryLife);\n\t\tthis.cleaningpower=cleaningpower;\n\t}\n\n\tpublic int getCleaningpower() {\n\t\treturn cleaningpower;\n\t}\n\n\tpublic void setCleaningpower(int cleaningpower) {\n\t\tthis.cleaningpower = cleaningpower;\n\t}\n\t\n\t\n\tpublic void performTask()\n\t{\n\t\t\n\t\tif(batteryLife<10)\n\t\t{\n\t\tSystem.out.println(\"[\"+modelName+\"] Not enough battery to clean\");\n\t\t}\n\t\t\n\t\telse \n\t\t{\n\t\tSystem.out.println(\"[\"+modelName+\"] Cleaning in progress .. Cleaning Power:\"+cleaningpower);\t\n\t\t\tbatteryLife-=10;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t\n\tpublic void boostCleaningPower(int miktar)\n\t{\n\t\tthis.cleaningpower+=miktar;\n\t\tSystem.out.println(\"CleaningRobot - \"+this.modelName+\" now has Cleaning Power:\"+this.cleaningpower);\n\t}\n\n\t\n\t\n}\n",
      "RobotFactory.java": "package q2bil211nebiyanar;\nimport java.util.ArrayList;\npublic class RobotFactory {\n\t\n\t private ArrayList<AbstractRobot> robots=new ArrayList<AbstractRobot>();\n\t static int n=0;\n\t public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower)\n\t {\n\t\t robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n\t\t n++;\n\t }\n\t \n\t  public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed)\n\t  {\n\t\t  \n\t\t  robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n\t\t  n++;\n\t  }\n\t  \n\t  public void performAllTasks()\n\t  {\n\t\t  for(int i=0;i<robots.size();i++)\n\t\t  {\n\t\t\t  robots.get(i).performTask();\n\t\t  }\n\t  }\n\t  \n\t  \n\t  public void displayRobots()\n\t  {\n\t\t  for(int i=0;i<robots.size();i++)\n\t\t  {\n\t\t\t if(robots.get(i) instanceof CleaningRobot)\n\t\t\t {\n\t\t\t\t CleaningRobot r1=(CleaningRobot) robots.get(i);\n\t\t\t\t System.out.println(\"CleaningRobot - Model: \"+r1.getModelName()\n\t\t\t\t +\", Battery:\"+r1.getBatteryLife()+\", Cleaning Power:\"+r1.getCleaningpower());\n\t\t\t }\n\t\t\t \n\t\t\t else if(robots.get(i) instanceof SecurityRobot)\n\t\t\t {\n\t\t\t\t SecurityRobot r1=(SecurityRobot) robots.get(i);\n\t\t\t\t System.out.println(\"SecurityRobot - Model: \"+r1.getModelName()\n\t\t\t\t +\", Battery:\"+r1.getBatteryLife()+\", Armed:\"+r1.isArmed());\n\t\t\t }\n\t\t\t  \n\t\t  }\n\t\t  \n\t  }\n\t  \n\t  public void upgradeCleaningRobots(int miktar)\n\t  {\n\t\t\n\t\t  for(int i=0;i<robots.size();i++)\n\t\t  {\n\t\t\t if(robots.get(i) instanceof CleaningRobot)\n\t\t\t {\n\t\t\t\tCleaningRobot r1=(CleaningRobot) robots.get(i);\n\t\t\t\tr1.boostCleaningPower( miktar);\n\t\t\t }\n\t\t  }\n\t\t  \n\t  }\n\t  \n\t  \n\t  public void toggleSecurityRobotsMode()\n\t  {\n\t\t  for(int i=0;i<robots.size();i++)\n\t\t  {\n\t\t  \n\t\t\t  if(robots.get(i) instanceof SecurityRobot)\n\t\t\t\t  {\n\t\t\t\t \n\t\t\t\t SecurityRobot r1=(SecurityRobot) robots.get(i);\n\t\t\t\t r1.toogleArmedMode();\n\t\t\t\t  \n\t\t\t\t  }\n\t  \n\t\t  } \n\t  }\n\t\n\t  \n\t  \n\t  public static  void totalrobotproduced()\n\t  {\n\t\t  \n\t\t  System.out.println(\"Tum Fabrikalar tarafından \"+n+\" Robot Uretildi\");\n\t  }\n\t\n}\n"
    },
    {
      "id": "6418019",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName(){\n        return modelName;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public abstract void performTask();\n\n    \n}\n\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150); \n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n\n        int sayi = RobotFactory.sayi;\n        System.out.println(\"tüm fabrikalar tarafindan toplam \" + sayi + \" robot üretildi\");\n    }\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n    \n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n\n    public void recharge(){\n        batteryLife = 100;\n    }\n\n    public void performTask(){\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"]\" + \" Scanning for threats... \" + \" Armed:\" + isArmed);\n            batteryLife = batteryLife - 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"]\" + \" Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode(){\n        isArmed = !isArmed;\n    }\n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n    public void setCleaningPower(int cleaningPower) {\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void recharge(){\n        batteryLife = 100;\n    }\n\n    public void performTask(){\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"]\" + \" Cleaning in progress...\" + \" Cleaning power:\" + cleaningPower);\n            batteryLife = batteryLife - 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"]\" + \" Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(){\n        cleaningPower = cleaningPower + 20;\n    }\n\n    \n\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots;\n\n    static int sayi;\n\n    public RobotFactory(){\n        robots = new ArrayList<>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        CleaningRobot newCleaningRobot = new CleaningRobot(modelName, batteryLife, cleaningPower);\n        robots.add(newCleaningRobot);\n        sayi++;\n       \n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        SecurityRobot newSecurityRobot = new SecurityRobot(modelName, batteryLife, isArmed);\n        robots.add(newSecurityRobot);\n        sayi++;\n    }\n\n    public void performAllTasks(){\n        for(int i=0; i<robots.size(); i++){\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots(){\n        for(int i = 0; i<robots.size(); i++){\n            if(robots.get(i) instanceof CleaningRobot){\n                CleaningRobot c = (CleaningRobot) robots.get(i);\n                System.out.println(\"CleaningRobot - Model: \" + c.getModelName()+ \", Battery: \" + c.getBatteryLife() + \", Cleaning Power: \" + c.getCleaningPower());\n            }\n            else if(robots.get(i) instanceof SecurityRobot){\n                SecurityRobot s = (SecurityRobot) robots.get(i);\n                System.out.println(\"SecurityRobot - Model: \" + s.getModelName()+ \", Battery: \" + s.getBatteryLife() + \", Armed: \" + s.isArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        for(int i = 0; i<robots.size(); i++){\n            if(robots.get(i) instanceof CleaningRobot){\n                CleaningRobot c = (CleaningRobot) robots.get(i);\n                int power = c.getCleaningPower() + miktar;\n                c.setCleaningPower(power);\n                System.out.println(\"CleaningRobot - \" + c.getModelName() + \" now has Cleaning Power: \" + c.getCleaningPower() );\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode(){\n        for(int i = 0; i<robots.size(); i++){\n            if(robots.get(i) instanceof SecurityRobot){\n                SecurityRobot s = (SecurityRobot) robots.get(i);\n                s.toggleArmedMode();\n                if(s.isArmed() == false){ \n                    System.out.println(\"SecurityRobot - \" + s.getModelName() + \" is now Unarmed \" );\n                }\n                else{\n                    System.out.println(\"SecurityRobot - \" + s.getModelName() + \" is now Armed \" );\n                }\n            }\n        }\n\n    }\n\n    \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n}\n"
    },
    {
      "id": "4114373",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int defaultBattery;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.defaultBattery = batteryLife;\n    }\n\n    public String getModelName(){\n        return modelName;\n    }\n\n    public int getBatteryLife(){\n        return batteryLife;\n    }\n\n    public void recharge(){\n        this.batteryLife = defaultBattery;\n    }\n\n    public abstract void performTask();\n\n    public abstract void boostCleaningPower(int miktar);\n    public abstract void toggleArmedMode();\n    public abstract String toString();\n    \n    public abstract int getCleaningPower();\n    public abstract boolean getArmedMode();\n\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n        RobotFactory.printNumberOfRobots();\n    }\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n    private boolean isArmed;\n\n    public boolean getArmedMode(){\n        return isArmed;\n    }\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask(){\n        if(batteryLife>=10){\n            System.out.println(\"[\" + modelName + \"] \" + \"Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode(){\n        if(isArmed){\n            isArmed = false;\n        }\n        else{\n            isArmed = true;\n        }\n    }\n\n    public String toString(){\n        return \"Security Robot - Model: \" + modelName + \", Battery: \" + batteryLife + \", Armed: \" + isArmed + \"\\n\";\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n\n    public int getCleaningPower(){\n        return cleaningPower;\n    }\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask(){\n        if(batteryLife>=10){\n            System.out.println(\"[\" + modelName + \"] \" + \"Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(int power){\n        this.cleaningPower += power;\n    }\n\n    public String toString(){\n        return \"Cleaning Robot - Model: \" + modelName + \", Battery: \" + batteryLife + \", Cleaning Power: \" + cleaningPower + \"\\n\";\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n\n    public static int robotSayisi = 0;\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        robotSayisi += 1;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        robotSayisi += 1;\n    }\n\n    public void performAllTasks(){\n        for(int i = 0; i < robots.size(); i++){\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots(){\n        for(int i = 0; i < robots.size(); i++){\n            System.out.print(robots.get(i).toString());\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        for(int i = 0; i < robots.size(); i++){\n            if(robots.get(i) instanceof CleaningRobot){\n                robots.get(i).boostCleaningPower(miktar);\n                System.out.println(\"Cleaning Robot - \" + robots.get(i).modelName + \" now has Cleaning Power: \" + robots.get(i).getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode(){\n        for(int i = 0; i < robots.size(); i++){\n            if(robots.get(i) instanceof SecurityRobot){\n                robots.get(i).toggleArmedMode();\n\n                if(robots.get(i).getArmedMode()){\n                    System.out.println(\"Security Robot - \" + robots.get(i).modelName + \" is now Armed\");\n                }\n                else{\n                    System.out.println(\"Security Robot - \" + robots.get(i).modelName + \" is now Unarmed\");\n                }\n            }\n        }\n    }\n\n    public static void printNumberOfRobots(){\n        System.out.println(\"Tüm fabrikalar tarafından toplam \" + robotSayisi + \" robot üretildi.\");\n    }\n}"
    },
    {
      "id": "2112376",
      "._DoubleShot.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000v\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._VanillaSyrup.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000]\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._Americano.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000f\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._Espresso.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000c\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._Latte.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._BaseCoffee.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u00001=\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._Main.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0007\u0000kfOz\n)`>\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._Milk.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._CoffeeAddon.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000ap\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._Chocolate.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000\u000fL_\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "._CoffeeMachine.java": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0014\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u001acom.apple.lastuseddate#PS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u000fcom.apple.macl\u0000\u0000\u0000xg\u0000\u0000\u0000\u0000\n\f\u0000\u0000\u0000\u0000\u00001\u0001NQ5\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
      "Latte.java": "public class Latte extends BaseCoffee {\n    private int basePrice = 50;\n    public double calculatePrice() {\n        int total = basePrice;\n        for (CoffeeAddon addon : addons) {\n        total += addon.getCost();\n        }\n        return total;\n    }\n}",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n       CoffeeMachine machine = new CoffeeMachine();\n       BaseCoffee espresso = new Espresso();\n       machine.addAddonToCoffee(espresso, new DoubleShot());\n       machine.addAddonToCoffee(espresso, new Milk());\n       machine.heatEspressoCup(espresso);\n       machine.makeCoffee(espresso);\n       BaseCoffee latte = new Latte();\n       machine.addAddonToCoffee(latte, new Milk());\n       machine.addAddonToCoffee(latte, new VanillaSyrup());\n       machine.makeCoffee(latte);\n       // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.\n       CoffeMachine anotherMachine = new CoffeMachine();\n       BaseCoffee americano = new Americano();\n       anotherMachine.heatEspressoCup(americano);\n       anotherMachine.makeCoffee(americano);\n       System.our.println(\"\\n\");\n       // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n    }\n}",
      "Espresso.java": "import java.util.ArrayList;\n\npublic class Espresso extends BaseCoffee {\n    \n    private boolean isHeated = false;\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();\n\n    private int basePrice = 40;\n\n    public void heatCup() {\n        isHeated = true;\n    }\n    public double calculatePrice() {\n        int total = basePrice;\n        for (CoffeeAddon addon : addons) {\n        total += addon.getCost();\n        }\n        return total;\n    }\n}",
      "VanillaSyrup.java": "public class VanillaSyrup implements CoffeeAddon {\n    public double getCost() {\n        return 6;\n    }\n    public String getName() {\n        return \"VanillaSyrup\";\n    }\n}",
      "CoffeeAddon.java": "interface CoffeeAddon {\n    double getCost();\n    String getName();\n}",
      "BaseCoffee.java": "import java.util.ArrayList;\n\nabstract class BaseCoffee {\n    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();\n\n    public void addAddon(CoffeeAddon addon) {\n        addons.add(addon);\n    }\n    public abstract double calculatePrice();\n\n}",
      "Americano.java": "public class Americano extends BaseCoffee {\n    \n    private int basePrice = 45;\n   \n    public double calculatePrice() {\n        int total = basePrice;\n        for (CoffeeAddon addon : addons) {\n        total += addon.getCost();\n        }\n        return total;   \n    }\n}",
      "CoffeeMachine.java": "public class CoffeeMachine {\n    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {\n\n    }\n    public void makeCoffee(BaseCoffee coffee) {\n\n    }\n    public void heatEspressoCup(BaseCoffee coffee) {\n        \n    }\n}",
      "Milk.java": "public class Milk implements CoffeeAddon {\n    public double getCost() {\n            return 5;\n        }\n    public String getName() {\n        return \"Milk\";\n    }\n}",
      "DoubleShot.java": "public class DoubleShot implements CoffeeAddon {\n    public double getCost() {\n            return 10;\n        }\n    public String getName() {\n        return \"DoubleShot\";\n    }\n}",
      "Chocolate.java": "public class Chocolate implements CoffeeAddon {\n    public double getCost() {\n        return 7;\n    }\n    public String getName() {\n        return \"Chocolate\";\n    }\n}"
    },
    {
      "id": "1889298",
      "quizq1.java": "import java.util.*;\n\npublic class quizq1 {\n\n    public static void main(String[] args) {\n    RobotFactory factory = new RobotFactory();\n    factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n    factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n    factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n    factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n    System.out.println(\"\\nProduced Robots:\");\n    factory.displayRobots();\n\n    System.out.println(\"\\nPerforming All Robot Tasks:\");\n    factory.performAllTasks();\n\n    System.out.println(\"\\nUpgrading Cleaning Robots:\");\n    factory.upgradeCleaningRobots(10);\n\n    System.out.println(\"\\nToggling Security Robot Modes:\");\n    factory.toggleSecurityRobotsMode();\n\n    System.out.println(\"\\nFinal Robot Status:\");\n    factory.displayRobots();\n    // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n    RobotFactory anotherFactory = new RobotFactory();\n    anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n    anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n    System.out.println(\"\\n\");\n    anotherFactory.fonksiyon();// Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisini\n    }\n}\n\ninterface WithBattery {\n    int getBatteryLife();\n    void recharge();\n    \n}\n\nabstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName=modelName;\n        this.batteryLife=batteryLife;\n    }\n\n    public String getModelName(){\n        return modelName;\n    }\n\n    public abstract void performTask();\n\n    public int getBatteryLife(){\n        return batteryLife;\n    }\n\n    public void recharge(){\n        this.batteryLife=100;\n    }\n    \n}\n\nclass CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n    \n    public void setCleaningPower(int cleaningPower) {\n        this.cleaningPower = cleaningPower;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n    \n    \n    CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife);\n        setCleaningPower(cleaningPower);\n  \n    }\n\n    public void performTask(){\n        if(batteryLife>=10){\n            System.out.println(modelName+\" Cleaning in progress...\"+\" Cleaning Power: \"+ getCleaningPower());\n            batteryLife=batteryLife-10;\n        }\n\n    }\n\n    public void boostCleaningPower(){\n        setCleaningPower(getCleaningPower()+10);\n    }\n\n   \n}\n\nclass SecurityRobot extends AbstractRobot{\n    private boolean isArmed;\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n\n    public void setArmed(boolean isArmed) {\n        this.isArmed = isArmed;\n    }\n    \n    public void performTask(){\n        if(batteryLife>=10){\n            System.out.println(modelName+\" Cleaning in progress...\"+\" Armed: \"+ isArmed());\n            batteryLife=batteryLife-10;\n        }\n\n    }\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        super(modelName, batteryLife);\n        setArmed(isArmed);\n    }\n\n    public void toggleArmedMode(){\n        setArmed(!isArmed());\n    }\n\n}\n\nclass RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n\n    public ArrayList<AbstractRobot> getRobots() {\n        return robots;\n    }\n\n\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        getRobots().add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        getRobots().add(new SecurityRobot(modelName, batteryLife, isArmed));\n    }\n\n    public void performAllTasks(){\n        for(int i=0;i<getRobots().size();i++){\n            getRobots().get(i).performTask();\n        }\n    }\n\n    public void displayRobots(){\n        for (int i=0;i<getRobots().size();i++){\n            if(getRobots().get(i) instanceof CleaningRobot){\n                CleaningRobot c = (CleaningRobot) robots.get(i);\n                System.out.println(\"CleaningRobot - Model: \" + c.modelName+\", Battery: \"+c.batteryLife+ \"Cleaning Power: \"+ c.getCleaningPower());\n            }\n            else{\n                SecurityRobot s = (SecurityRobot) robots.get(i);\n                System.out.println(\"SecurityRobot - Model: \" + s.modelName+\", Battery: \"+s.batteryLife+ \"Armed: \"+ s.isArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        for(int i=0;i<getRobots().size();i++){\n            if(getRobots().get(i) instanceof CleaningRobot){\n                CleaningRobot cl = (CleaningRobot) robots.get(i);\n                cl.setCleaningPower(cl.getCleaningPower()+10);\n                System.out.println(\"CleaningRobot - \"+cl.modelName+\" now has Cleaning Power:\"+ cl.getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode(){\n        for(int i=0;i<robots.size();i++){\n            if(getRobots().get(i) instanceof SecurityRobot){\n                SecurityRobot se = (SecurityRobot) robots.get(i);\n                se.toggleArmedMode();\n                if(se.isArmed()){\n                    System.out.println(\"SecurityRobot - \"+se.modelName+\" is now Armed\");\n                }\n                else{\n                    System.out.println(\"SecurityRobot - \"+se.modelName+\" is now Unarmed\");\n                }\n            }\n        }\n    }\n\n    public void fonksiyon(){\n        System.out.println(\"Tüm fabrikalar tarafından toplam \"+ getRobots().size()+ \" robot üretildi.\");\n    }\n}\n   \n"
    },
    {
      "id": "6494434",
      "WithBattery.java": "interface WithBattery {\n\n    int getBatteryLife();\n\n    void recharge();\n\n}",
      "AbstractRobot.java": "abstract class AbstractRobot implements WithBattery {\n    protected  String modelName;\n    protected int batterylife;\n\n    public AbstractRobot(String modelName, int batterylife) {\n        this.modelName = modelName;\n        this.batterylife = batterylife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n    public int getBatterylife() {\n        return batterylife;\n    }\n    public void setModelName(String modelName) {\n        this.modelName = modelName;\n    }\n\n    public void setBatterylife(int batterylife) {\n        this.batterylife = batterylife;\n    }\n\n    public abstract void performTask();\n\n    public void recharge() {\n        this.batterylife = 100;\n    }\n}",
      "SecurityRobot.java": "class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    public SecurityRobot(String modelName, int batterLife, boolean isArmed) {\n        super(modelName,batterLife);\n        this.isArmed = isArmed;\n    }\n    public boolean getisArmed(){\n        return  isArmed;\n    }\n    public void setArmed(boolean isArmed) {\n        this.isArmed = isArmed;\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n    }\n\n    public void performTask() {\n        if(batterylife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed: \" + isArmed);\n            batterylife -= 10;\n        }else{\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n    }\n\n    public int getBatteryLife() {\n        return batterylife;\n    }\n    public void recharge() {\n        this.batterylife = 100;\n    }\n}",
      "CleaningRobot.java": "class CleaningRobot extends AbstractRobot  {\n    private int cleaningPower; //robot temizlik güç\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName,batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n    public void setCleaningPower(int cleaningPower) {\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask(){\n        if(batterylife >= 10 ){\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress ... Cleaning Power: \" + cleaningPower);\n            batterylife -= 10;\n        }else{\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n    }\n    public void boostCleaningPower(int miktar){\n        cleaningPower += miktar;\n    }\n\n    public int getBatteryLife() {\n        return batterylife;\n    }\n    public void recharge() {\n        this.batterylife = 100;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\nclass RobotFactory {\n    private ArrayList<AbstractRobot> robots;\n    private static int toplamRobotlar = 0;\n\n    public RobotFactory() {\n        robots = new ArrayList<>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        toplamRobotlar++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        toplamRobotlar++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            if(robot instanceof  SecurityRobot) {\n                System.out.println(\"SecurityRobot - Model: \" + robot.getModelName() + \", Battery: \" + robot.getBatterylife() + \", Armed: \" + ((SecurityRobot) robot).getisArmed());\n            }else if (robot instanceof  CleaningRobot) {\n                System.out.println(\"CleaningRobot - Model: \" + robot.getModelName() + \", Battery: \" + robot.getBatteryLife() + \", Cleaning Power: \" + ((CleaningRobot) robot).getCleaningPower());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower(miktar);\n                System.out.println(\"CleaningRobot- \" + robot.modelName + \"now has Cleaning Power: \" + ((CleaningRobot) robot).getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for(AbstractRobot robot : robots) {\n            if(robot instanceof  SecurityRobot) {\n                ((SecurityRobot) robot ).toggleArmedMode();\n                if(((SecurityRobot) robot).getisArmed() == true){\n                    System.out.println(\"Security Robot - \" + robot.modelName + \" is now Armed\");\n                }else{\n                    System.out.println(\"Security Robot - \" + robot.modelName + \" is now Unarmed\");\n                }\n            }\n        }\n    }\n\n    public static void displayToplamRobotUretimi() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + toplamRobotlar + \" robot uretildi\");\n    }\n\n}",
      "QuizMain.java": "public class QuizMain {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n\n        RobotFactory.displayToplamRobotUretimi();\n    }\n}"
    },
    {
      "id": "8857652",
      "WithBattery.java": "public interface WithBattery {\n\n    int getBatteryLife();\n    void recharge();\n\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery{\n    protected String modelName;\n    protected int batteryLife;\n    public static int roboCount=0;\n\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName=modelName;\n        this.batteryLife=batteryLife;\n        roboCount++;\n\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public void setModelName(String modelName) {\n        this.modelName = modelName;\n    }\n\n    public void setBatteryLife(int batteryLife) {\n        this.batteryLife = batteryLife;\n    }\n\n\n\n    public abstract void performTask();\n\n\n\n}\n",
      "Main.java": "\n\npublic class Main {\n    public static void main(String[] args) {\n    \n    RobotFactory factory = new RobotFactory();\n    factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n    factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n    factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n    factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n    System.out.println(\"\\nProduced Robots:\");\n    factory.displayRobots();\n    System.out.println(\"\\nPerforming All Robot Tasks:\");\n    factory.performAllTasks();\n    System.out.println(\"\\nUpgrading Cleaning Robots:\");\n    factory.upgradeCleaningRobots(10);\n    System.out.println(\"\\nToggling Security Robot Modes:\");\n    factory.toggleSecurityRobotsMode();\n    System.out.println(\"\\nFinal Robot Status:\");\n    factory.displayRobots();\n    // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n    RobotFactory anotherFactory = new RobotFactory();\n    anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n    anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n    System.out.println(\"\\n\");\n    \n    System.out.println(\"Tum fabrikalar tarafindan toplam \" + AbstractRobot.roboCount + \" robot uretildi\");\n    \n    //??? // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n    }\n    }",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot{\n\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        super(modelName, batteryLife);\n        this.isArmed=isArmed;\n        \n    }\n\n    public boolean isArmed() {\n        return isArmed;\n    }\n    public void setArmed(boolean isArmed) {\n        this.isArmed = isArmed;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n        \n    }\n    @Override\n    public void setBatteryLife(int batteryLife) {\n        this.batteryLife=batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        setBatteryLife(getBatteryLife()+10);\n    }\n\n    @Override\n    public void performTask() {\n\n        if(getBatteryLife()>=10){\n            System.out.println(\"[\" + getModelName() + \"]\" + \" Scanning for threats... Armed: \" + isArmed);\n            batteryLife=getBatteryLife()-10;\n        }\n        else{\n            System.out.println(\"[\" + getModelName() + \"] \" + \"Not enough battery to scan threats...\");\n        }\n        \n        \n        \n    }\n\n    public void toggleArmedMode(){\n        if(isArmed()){\n            setArmed(false);\n            System.out.println(\"Security Robot -  \" + getModelName() + \" is now Unarmed\");\n        }\n        else{\n            setArmed(true);\n            System.out.println(\"Security Robot -  \" + getModelName() + \" is now Armed\");\n        }\n\n    }\n    \n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n\n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife);\n        this.cleaningPower=cleaningPower;\n    }\n\n\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n    public void setCleaningPower(int cleaningPower) {\n        this.cleaningPower = cleaningPower;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void setBatteryLife(int batteryLife) {\n        this.batteryLife=batteryLife;\n    }\n    \n\n\n    \n\n    \n\n    @Override\n    public void recharge() {\n        setBatteryLife(getBatteryLife()+10);\n        \n    }\n\n    @Override\n    public void performTask() {\n        if(getBatteryLife()>=10){\n            System.out.println(\"[\" + getModelName() + \"] \" + \"Cleaning in progress... Cleaning Power: \" + getCleaningPower());\n            batteryLife=getBatteryLife()-10;\n        }\n        else{\n            System.out.println(\"[\" + getModelName() + \"] \" + \"Not enough battery to clean...\");\n        }\n          \n        \n    }\n\n    public void boostCleaningPower(){\n        setCleaningPower(getCleaningPower()+10);\n\n    }\n\n\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    \n    //public int factoryCount=0;\n\n    private ArrayList<AbstractRobot> robots;\n\n    public RobotFactory(){\n        robots=new ArrayList<AbstractRobot>();\n        \n\n    }\n    \n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        \n\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        \n\n    }\n\n    public void performAllTasks(){\n        for(int i=0; i<robots.size(); i++){\n            if(robots.get(i) instanceof CleaningRobot){\n                robots.get(i).performTask();\n            }\n            else if(robots.get(i) instanceof SecurityRobot){\n                robots.get(i).performTask();\n            }\n        }\n\n    }\n\n    public void displayRobots(){\n        //System.out.println(\"Produced Robots:\");\n        for(int i=0; i<robots.size(); i++){\n            if(robots.get(i) instanceof CleaningRobot){\n                CleaningRobot roboC=(CleaningRobot) robots.get(i);\n                System.out.println(\"CleaningRobot - Model: \" + robots.get(i).getModelName() + \n                                    \", Battery: \" + robots.get(i).getBatteryLife() + \n                                    \", Cleaning Power: \" + roboC.getCleaningPower());\n            }\n            else if(robots.get(i) instanceof SecurityRobot){\n                SecurityRobot roboS = (SecurityRobot) robots.get(i);\n                System.out.println(\"SecurityRobot - Model: \" + robots.get(i).getModelName() + \n                                    \", Battery: \" + robots.get(i).getBatteryLife() + \n                                    \", Cleaning Power: \" + roboS.isArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        //System.out.println(\"Upgrading Cleaning Robots:\");\n        for(int i=0; i<robots.size(); i++){\n            if(robots.get(i) instanceof CleaningRobot){\n                CleaningRobot roboC=(CleaningRobot) robots.get(i);\n                roboC.setCleaningPower(roboC.getCleaningPower() + miktar); \n                System.out.println(\"Cleaning Robot - \" + robots.get(i).getModelName() + \" now has Cleaning Power: \" + roboC.getCleaningPower());\n            }\n        }\n\n    }\n\n    public void toggleSecurityRobotsMode(){\n        //System.out.println(\"Toggling Security Robot Modes:\");\n        for(int i=0; i<robots.size(); i++){\n            if(robots.get(i) instanceof SecurityRobot){\n                SecurityRobot roboS = (SecurityRobot) robots.get(i);\n                roboS.toggleArmedMode();\n                \n            }\n        }\n\n    }\n\n\n    public void finalDisplay(){\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + AbstractRobot.roboCount + \" robot uretildi\\r\");\n        \n\n    }\n\n\n\n\n\n\n\n}\n"
    },
    {
      "id": "2103960",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n\n    void recharge();\n\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n    public int batteryfull;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.batteryfull = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n\n    }\n\n    public void recharge() {\n        this.batteryLife = batteryfull;\n    }\n\n    public abstract void performTask();\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n        RobotFactory.toplamRobotUretimi();\n    }\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode() { //\n        if (isArmed)\n            isArmed = false;\n        else\n            isArmed = true;\n    }\n\n    public boolean getIsArmed() {\n        return isArmed;\n    }\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n\n    }\n\n    public void boostCleaningPower(int miktar) { //\n        this.cleaningPower += miktar;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots = new ArrayList<AbstractRobot>(); //\n    public static int factoryCount = 0;\n    public static ArrayList<RobotFactory> factories = new ArrayList<RobotFactory>();\n\n    public RobotFactory() {\n        factoryCount++;\n        factories.add(this);\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n    }\n\n    public void performAllTasks() {\n        for (int i = 0; i < robots.size(); i++) {\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                CleaningRobot c1 = (CleaningRobot) robots.get(i);\n                System.out.println(\"Cleaning Robot - Model: \" + robots.get(i).getModelName() + \" Battery: \"\n                        + robots.get(i).getBatteryLife() + \" Cleaning Power:\" + c1.getCleaningPower());\n            } else if (robots.get(i) instanceof SecurityRobot) {\n                SecurityRobot s1 = (SecurityRobot) robots.get(i);\n                System.out.println(\"Security Robot - Model: \" + robots.get(i).getModelName() + \" Battery: \"\n                        + robots.get(i).getBatteryLife() + \" Armed:\" + s1.getIsArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (int i = 0; i < robots.size(); i++) {\n            CleaningRobot c2;\n            if (robots.get(i) instanceof CleaningRobot) {\n                c2 = (CleaningRobot) robots.get(i);\n                c2.boostCleaningPower(miktar);\n                System.out.println(\n                        \"Cleaning Robot - \" + c2.getModelName() + \" now has Cleaning Power: \" + c2.getCleaningPower());\n            } else {\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (int i = 0; i < robots.size(); i++) {\n            SecurityRobot s2;\n            if (robots.get(i) instanceof SecurityRobot) {\n                s2 = (SecurityRobot) robots.get(i);\n                s2.toggleArmedMode();\n                if (s2.getIsArmed()) {\n                    System.out.println(\"Security Robot - \" + s2.getModelName() + \" is now Armed\");\n                } else {\n                    System.out.println(\"Security Robot - \" + s2.getModelName() + \" is now Unarmed\");\n                }\n\n            } else {\n            }\n        }\n\n    }\n\n    public ArrayList<AbstractRobot> getAllRobots() {\n        return robots;\n    }\n\n    public static void toplamRobotUretimi() {\n        int topRobot = 0;\n        for (int i = 0; i < factoryCount; i++) {\n            topRobot += factories.get(i).getAllRobots().size();\n        }\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + topRobot + \" robot uretildi.\");\n    }\n\n}\n"
    },
    {
      "id": "8059049",
      "AbstractRobot.java": "abstract class   AbstractRobot implements withBattery{\n    protected String modelName;\n    protected int batteryLife;\n    protected int totalrobots;\n     public AbstractRobot(String modelName, int batteryLife){\n        this.modelName=modelName;\n        this.batteryLife=batteryLife;\n     }\n     public String getModelName(){\n      return modelName;\n     }\n     public abstract void performTask();\n}\n",
      "cleaningRobot.java": "public class cleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n    private final int initialbattery;\n    public cleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName,batteryLife);\n        this.cleaningPower=cleaningPower;\n        this.initialbattery=batteryLife;\n    }\n    public int getBatteryLife(){\n        return batteryLife;\n    }\n    public void setBatteryLife(int val){\n        this.batteryLife=val;\n    }\n    public int getCleaningPower(){\n        return cleaningPower;\n    }\n    \n    public void recharge(){\n        setBatteryLife(initialbattery);\n    }\n    public void performTask(){\n        if(getBatteryLife()>=10){\n        System.out.println(\"[\"+getModelName()+\"] Cleaning in progres... Cleaning Power:\"+this.cleaningPower);\n        setBatteryLife(getBatteryLife()-10);\n        }\n        else{\n            System.out.println(\"[\"+getModelName()+\"] Not enough battery to scan threats...\");\n        }\n         \n    }\n     public void boostCleaningPower(){\n        this.cleaningPower+=10;\n        System.out.println(\"CleaningRobot- \"+getModelName()+\" now has Cleaning Power: \"+getCleaningPower());\n     }\n}\n",
      "RobotMain.java": "public class RobotMain {\n    public static void main(String[] args) {\n     RobotFactory factory = new RobotFactory();\n         factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n          factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n           factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n            factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n             System.out.println(\"\\nProduced Robots:\"); \n             factory.displayRobots(); \n            System.out.println(\"\\nPerforming All Robot Tasks:\");\n              factory.performAllTasks(); System.out.println(\"\\nUpgrading Cleaning Robots:\");\n               factory.upgradeCleaningRobots(10);\n                System.out.println(\"\\nToggling Security Robot Modes:\");\n                factory.toggleSecurityRobotsMode();\n                 System.out.println(\"\\nFinal Robot Status:\"); \n                factory.displayRobots(); \n                // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n                 RobotFactory anotherFactory = new RobotFactory();\n                  anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n                   anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n                    System.out.println(\"\\n\");\n                     RobotFactory.getSizer();\n}\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n       super(modelName, batteryLife);\n       this.isArmed=isArmed;\n      \n    }\n    public int getBatteryLife(){\n        return batteryLife;\n    }\n    public void setBatteryLife(int val){\n        this.batteryLife=val;\n    }\n    public void recharge(){\n      setBatteryLife(150);\n    }\n    public boolean getisArmed(){\n        return isArmed;\n    }\n    public void performTask(){\n        if(getBatteryLife()>=10){\n            System.out.println(\"[\"+getModelName()+\"] Scanning for threads... Armed:\"+this.isArmed);\n            setBatteryLife(getBatteryLife()-10);\n            }\n            else{\n                System.out.println(\"[\"+getModelName()+\"] Not enough battery to scan threats...\");\n            }\n             \n    }\n    public void toggleArmedMode(){\n       if(!this.isArmed){\n        this.isArmed=true;\n        System.out.println(\"SecurityRobot- \"+getModelName() +\" is now armed.\");\n       }\n        \n        else{\n            this.isArmed=false;\n            System.out.println(\"SecurityRobot- \"+getModelName()+\" is now unarmed.\");\n        }\n         \n    }\n}\n",
      "withBattery.java": "interface withBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots;\n    private static int sizer;\n    public RobotFactory(){\n        this.robots=new ArrayList<>();\n    }\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n            AbstractRobot robot=new cleaningRobot(modelName, batteryLife, cleaningPower);\n            robots.add(robot);\n            sizer++;\n    }\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        AbstractRobot robot=new SecurityRobot(modelName, batteryLife, isArmed);\n            robots.add(robot);\n            sizer++;\n    }\n    public void performAllTasks(){\n         for(AbstractRobot robot:robots){\n            robot.performTask();\n         }\n    }\n    public void displayRobots(){\n        for(AbstractRobot robot:robots){\n            if(robot instanceof cleaningRobot){\n            System.out.println(\"CleaningRobot -Model: \"+robot.getModelName()+\", Battery: \"+robot.getBatteryLife()+\", Cleaning Power: \"+((cleaningRobot) robot).getCleaningPower());\n            }\n            else\n            System.out.println(\"SecurityRobot -Model: \"+robot.getModelName()+\", Battery: \"+robot.getBatteryLife()+\", Cleaning Power: \"+((SecurityRobot) robot).getisArmed());\n             \n         }\n    }\n    public void upgradeCleaningRobots(int miktar){\n      for (AbstractRobot robot: robots ){\n        if(robot instanceof cleaningRobot)\n          ((cleaningRobot) robot).boostCleaningPower();\n         \n      }\n    }\n    public void toggleSecurityRobotsMode(){\n        for (AbstractRobot robot: robots ){\n            if(robot instanceof SecurityRobot){\n              ((SecurityRobot) robot).toggleArmedMode();\n              \n\n            }\n          }\n        }\n        public static int getsize()\n        {\n            return sizer;\n        }\n        public static void getSizer(){\n        System.out.print(\" Tüm Fabrikalar tarafından  toplam \"+getsize()+\" robot üretildi \");\n        }\n    }\n\n"
    },
    {
      "id": "5361565",
      "WithBattery.java": "public interface WithBattery {\n    public int getBatteryLife();\n    public void recharge();\n\n}\n",
      "Quiz2.java": "\n\npublic class Quiz2 {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\nTum fabrikalar tarafindan toplam \" + RobotFactory.num + \" robot uretildi\");\n    \n}}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n    int b;\n    public AbstractRobot(String modelName,int batteryLife){\n        this.batteryLife=batteryLife;\n        this.modelName=modelName;\n        b=batteryLife;\n    }\n    public String getModelName(){\n        return this.modelName;\n    }\n    public int  getBatteryLife(){\n        return this.batteryLife;\n    }\n    public void recharge(){\n        this.batteryLife=b;\n    }\n    \n    public abstract void performTask();\n    \n\n\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        super(modelName, batteryLife);\n        this.isArmed=isArmed;\n    }\n    public boolean getisArmed(){\n        return this.isArmed;\n    }\n    public void performTask(){\n        if(this.batteryLife>=10){\n            System.out.println(\"[\"+this.getModelName() + \"] Scaning for threats...  Armed: \" +this.isArmed);\n            this.batteryLife-=10;\n        }\n        else{\n            System.out.println( \"[\"+this.getModelName()+\"] Not enough battery to scan threats...\");\n        }\n    }\n    public void toggleArmedMode(){\n        if(this.isArmed){\n            this.isArmed=false;\n        }\n        else if(!this.isArmed){\n            this.isArmed=true;\n        }\n    }\n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot{\n    private int cleaningPower;\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        super(modelName, batteryLife);\n        this.cleaningPower=cleaningPower;\n    }\n    public void performTask(){\n        if(this.batteryLife>=10){\n        \n        System.out.println(\"[\"+this.getModelName()+ \"] Cleaning in progress...   Cleaning power:\" + this.cleaningPower);\n        this.batteryLife-=10;}\n        else{\n            System.out.println(\"[\"+this.getModelName() + \"] Not enough battery to clean...\");\n        }\n    }\n    public int getCleaningPower(){\n        return cleaningPower;\n    }\n    public void boostCleaningPower(int r){\n        this.cleaningPower+=r;\n    }\n\n}\n",
      "RobotFactory.java": "\nimport java.util.ArrayList;\npublic class RobotFactory {\n    static int num=0;\n    private ArrayList<AbstractRobot> robots=new ArrayList<>();\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        CleaningRobot r=new CleaningRobot(modelName, batteryLife, cleaningPower);\n        robots.add(r);\n        num++;\n    }\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        SecurityRobot r=new SecurityRobot(modelName, batteryLife, isArmed);\n        robots.add(r);\n        num++;\n    }\n    public void performAllTasks(){\n        for(int a=0 ;a<robots.size(); a++){\n            robots.get(a).performTask();\n        }\n    }\n    public void displayRobots(){\n        for(int a=0; a<robots.size(); a++){\n           if(robots.get(a) instanceof CleaningRobot){\n            CleaningRobot r=(CleaningRobot) robots.get(a);\n            System.out.println(\"CleaningRobot - Model: \"+ r.getModelName()+ \" , Battery: \" + r.batteryLife + \" , Cleaning Power: \" +r.getCleaningPower());\n           }\n           else{\n            SecurityRobot r=(SecurityRobot) robots.get(a);\n            System.out.println(\"SecurityRobot - Model: \"+ r.getModelName()+ \" , Battery: \" + r.batteryLife + \" , Armed: \" + r.getisArmed());\n           }\n        }\n    }\n    public void upgradeCleaningRobots(int miktar){\n        for(int a=0; a<robots.size(); a++){\n            if(robots.get(a) instanceof CleaningRobot){\n                CleaningRobot r=(CleaningRobot) robots.get(a);\n                r.boostCleaningPower(miktar);\n                robots.set(a,r);\n                System.out.println(\"CleaningRobot - \"+ r.modelName +\" now has Cleaning Power: \" +r.getCleaningPower());\n            }\n        }\n    }\n    public void toggleSecurityRobotsMode(){\n        for(int a=0 ;a<robots.size(); a++){\n            if(robots.get(a) instanceof SecurityRobot){\n                SecurityRobot r=(SecurityRobot) robots.get(a);\n                r.toggleArmedMode();\n                robots.set(a, r);\n                System.out.print(\"SecurityRobot - \"+ r.modelName +\" is now \");\n                if(r.getisArmed()){\n                    System.out.print(\"Armed\");\n                }\n                else if(!r.getisArmed()){\n                    System.out.print(\"Unarmed\");\n                }\n                System.out.println();\n\n            }\n        }\n    }\n    public int robsum(){\n        return num;\n    }\n}\n"
    },
    {
      "id": "3688139",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n\n    void recharge();\n}\n",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public abstract void performTask();\n\n    public void recharge(int a) {\n        batteryLife = batteryLife + a;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n}",
      "quizq2.java": "import java.util.ArrayList;\n\npublic class quizq2 {\n    public static void main(String[] args) {\n        robotfactory factory = new robotfactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"Produced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"Performing All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"Upgrading Cleaning Robots...\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"Toggling Security Robot Modes...\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"Final Robot Status:\");\n        factory.displayRobots();\n\n        robotfactory anotherfactory = new robotfactory();\n        anotherfactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherfactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        robotfactory.robotcount();\n\n    }\n}\n",
      "robotfactory.java": "import java.util.ArrayList;\n\npublic class robotfactory {\n    public static int count = 0;\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        count++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        count++;\n    }\n\n    public void performAllTasks() {\n        for (int i = 0; i < robots.size(); i++) {\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                CleaningRobot a = (CleaningRobot) robots.get(i);\n                System.out.println(\"Cleaning Robot - Model: \" + robots.get(i).getModelName() + \", Battery:\"\n                        + robots.get(i).getBatteryLife() + \", Cleaning Power:\" + a.getCleaningPower());\n            } else {\n                SecurityRobot b = (SecurityRobot) robots.get(i);\n                System.out.println(\"Security Robot - Model: \" + robots.get(i).getModelName() + \", Battery:\"\n                        + robots.get(i).getBatteryLife() + \", Cleaning Power:\" + b.getisArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                CleaningRobot a = (CleaningRobot) robots.get(i);\n                a.boostCleaningPower(miktar);\n                System.out.println(\n                        \"Cleaning Robot - \" + a.modelName + \" now has Cleaning Power: \" + a.getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof SecurityRobot) {\n                SecurityRobot c = (SecurityRobot) robots.get(i);\n                c.toggleArmedMode();\n                if (c.getisArmed()) {\n                    System.out.println(\"Security Robot - \" + c.modelName + \" is now Armed\");\n                } else {\n                    System.out.println(\"Security Robot - \" + c.modelName + \" is now Unarmed\");\n                }\n            }\n        }\n    }\n\n    public static void robotcount() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + count + \" robot uretildi\");\n    }\n}",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed:\" + isArmed);\n            batteryLife = batteryLife - 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode() {\n        if (isArmed) {\n            isArmed = false;\n        } else {\n            isArmed = true;\n        }\n    }\n\n    public boolean getisArmed() {\n        return isArmed;\n    }\n}",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress...    Cleaning Power:\" + cleaningPower);\n            batteryLife = batteryLife - 10;\n        } else {\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower() {\n        cleaningPower = cleaningPower + 10;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n    public void boostCleaningPower(int a) {\n        cleaningPower = cleaningPower + a;\n    }\n\n}"
    },
    {
      "id": "8862077",
      "WithBattery.java": "\npublic interface WithBattery {\n\n\tint getBatteryLife();\n\tvoid recharge();\n\t\n}\n",
      "AbstractRobot.java": "\npublic abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n    int ilkBattery;\n    \n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        ilkBattery=batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public void recharge() {\n        batteryLife = ilkBattery;\n    }\n\n    public abstract void performTask();\n}\n",
      "main.java": "\npublic class main {\npublic static void main(String[] args) {\nRobotFactory factory = new RobotFactory();\nfactory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\nfactory.produceSecurityRobot(\"GuardBot X\", 150, true);\nfactory.produceSecurityRobot(\"PatrolBot\", 120, false);\nfactory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\nSystem.out.println(\"\\nProduced Robots:\");\nfactory.displayRobots();\nSystem.out.println(\"\\nPerforming All Robot Tasks:\");\nfactory.performAllTasks();\nSystem.out.println(\"\\nUpgrading Cleaning Robots:\");\nfactory.upgradeCleaningRobots(10);\nSystem.out.println(\"\\nToggling Security Robot Modes:\");\nfactory.toggleSecurityRobotsMode();\nSystem.out.println(\"\\nFinal Robot Status:\");\nfactory.displayRobots();\n// ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\nRobotFactory anotherFactory = new RobotFactory();\nanotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\nanotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\nSystem.out.println(\"\\n\");\n anotherFactory.toplamRobot();// Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n}\n}",
      "SecurityRobot.java": "\npublic class SecurityRobot extends AbstractRobot{\n\t\nprivate boolean isArmed;\n\npublic SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\tsuper(modelName, batteryLife);\n\tthis.isArmed=isArmed;\n}\npublic void performTask() {\n\tif(batteryLife>=10) {\n\t\tSystem.out.println(\"[\"+modelName+\"] Scanning for threats... Armed: \"+isArmed);\n\t\tbatteryLife=batteryLife-10;\n}\n\telse {\n\t\tSystem.out.println(\"[\"+modelName+\"] Not enough battery to scan threats...\");\n\t}\n}\n\npublic void toggleArmedMode() {\n\tisArmed=!isArmed;\n\tif(isArmed)\n\tSystem.out.println(\"SecurityRobot - \"+modelName+\" is now Armed\");\n\telse {\n\t\tSystem.out.println(\"SecurityRobot - \"+modelName+\" is now Unarmed\");\n\t}\n}\npublic boolean isArmed() {\n\treturn isArmed;\n}\npublic void setArmed(boolean isArmed) {\n\tthis.isArmed = isArmed;\n}\n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n\t\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n      public void performTask() {\n        if (batteryLife >= 10) {\n        \tSystem.out.println(\"[\"+modelName+\"] Cleaning in progress... Cleaning Power: \"+cleaningPower);\n            batteryLife = batteryLife-10;\n        } else {\n            System.out.println(\"[\"+modelName+\"] Not enough battery to clean...\");\n        }\n    }\n\n      public void boostCleaningPower(int miktar) {\n        cleaningPower = cleaningPower+miktar;\n        System.out.println(\"CleaningRobot - \"+modelName+\" now has Cleaning Power: \"+cleaningPower);\n    }\n\n\tpublic int getCleaningPower() {\n\t\treturn cleaningPower;\n\t}\n\n\tpublic void setCleaningPower(int cleaningPower) {\n\t\tthis.cleaningPower = cleaningPower;\n\t}\n      \n      \n      \n      \n}",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n\t\n\tprivate ArrayList<AbstractRobot> robots=new ArrayList<AbstractRobot>();\n\tstatic int RobotSayi = 0;\n\t\n\tpublic void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n\t\trobots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n\t\tRobotSayi++;\n\t}\n\t\n\t\npublic void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n\t\trobots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n\t\tRobotSayi++;\n\t}\n\t\n\t\n\tpublic void performAllTasks() {\n\t\tfor (int i=0; i<robots.size();i++) {\n\t\t\trobots.get(i).performTask();\n\t\t}\n\t}\n\t\n\t\n\t public void displayRobots() {\n\t\t for (int i=0; i<robots.size();i++) {\n\t\t\t if (robots.get(i) instanceof CleaningRobot) {\n\t\t CleaningRobot temp = (CleaningRobot) robots.get(i);\nSystem.out.println(\"CleaningRobot - Model: \"+robots.get(i).modelName+\" Battery: \"+robots.get(i).batteryLife+\" Cleaning power: \"+temp.getCleaningPower());\n\t\t\t }\n\t\t\t else {\n\t\t\t\tSecurityRobot temp= (SecurityRobot) robots.get(i);\nSystem.out.println(\"SecurityRobot - Model: \"+robots.get(i).modelName+\" Battery: \"+robots.get(i).batteryLife+\" Armed: \"+temp.isArmed());\n\t\t\t}\n\t\t\n\t\t\t}\n\t }\n\t \n\t \n\t \n\t public void upgradeCleaningRobots(int miktar) {\n\t\t for (int i=0; i<robots.size();i++) {\n\t            if (robots.get(i) instanceof CleaningRobot) {\n\t                ((CleaningRobot) robots.get(i)).boostCleaningPower(miktar);\n\t            }\n\t        }\n\t }\n\t \n\t public void toggleSecurityRobotsMode() {\n\n\t        for (int i=0; i<robots.size();i++) {\n\t            if (robots.get(i) instanceof SecurityRobot) {\n\t                ((SecurityRobot) robots.get(i)).toggleArmedMode();\n\t            }\t\n\t        }\n\t }\n\t \n\t public static void toplamRobot() {\nSystem.out.println(\"Tum fabrikalar tarafindan toplam \"+RobotSayi+\" robot uretildi\");\n\t }\n\n}\n"
    },
    {
      "id": "1280995",
      "WithBattery.java": "package RobotFactory;\n\npublic interface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n",
      "AbstractRobot.java": "package RobotFactory;\n\npublic abstract class AbstractRobot implements WithBattery {\n\n    public AbstractRobot(){}\n\n    protected String modelName;\n    protected int batteryLife;\n    protected int maximumBattery;\n\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.maximumBattery = batteryLife;\n    }\n    public String getModelName(){\n        return new String(modelName);\n    }\n    public abstract void performTask();\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public void recharge() {\n        batteryLife = maximumBattery;\n    }\n}\n",
      "Main.java": "package RobotFactory;\n\npublic class Main {\n    public static void main(String[] args) {\n            RobotFactory factory = new RobotFactory();\n            factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n            factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n            factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n            factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n            System.out.println(\"\\nProduced Robots:\");\n            factory.displayRobots();\n            System.out.println(\"\\nPerforming All Robot Tasks:\");\n            factory.performAllTasks();\n            System.out.println(\"\\nUpgrading Cleaning Robots:\");\n            factory.upgradeCleaningRobots(10);\n            System.out.println(\"\\nToggling Security Robot Modes:\");\n            factory.toggleSecurityRobotsMode();\n            System.out.println(\"\\nFinal Robot Status:\");\n            factory.displayRobots();\n            // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n            RobotFactory anotherFactory = new RobotFactory();\n            anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n            anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n            System.out.println(\"\\n\");\n            RobotFactory.totalRobotCount();\n        }\n    }",
      "SecurityRobot.java": "package RobotFactory;\n\npublic class SecurityRobot extends AbstractRobot {\n\n    private boolean isArmed;\n\n    public boolean getIsArmed(){\n        return isArmed;\n    }\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] \" + \"Scanning for threats... Armed: \" + isArmed);\n            batteryLife-=10;\n        }\n        else {\n            System.out.println(\"[\" + modelName + \"] \" + \"Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode(){\n        isArmed = !isArmed;\n    }\n\n\n    \n}\n",
      "CleaningRobot.java": "package RobotFactory;\n\npublic class CleaningRobot extends AbstractRobot {\n\n    private int cleaningPower;\n\n    public int getCleaningPower(){\n        return cleaningPower;\n    }\n\n    public void performTask(){\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"] \" + \"Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife-=10;\n        }\n        else {\n            System.out.println(\"[\" + modelName + \"] \" + \"Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(int miktar){\n        cleaningPower+=miktar;\n    }\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.cleaningPower = cleaningPower;\n    }\n    \n}\n",
      "RobotFactory.java": "package RobotFactory;\nimport java.util.ArrayList;\n\npublic class RobotFactory {\n\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n    private static int total;\n    \n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        total++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        total++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot robot : robots){\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot){\n                CleaningRobot temp = (CleaningRobot) robot;\n                System.out.println(\"CleaningRobot - Model: \" + temp.getModelName() + \", Battery: \" + temp.getBatteryLife() + \", Cleaning Power: \" + temp.getCleaningPower());\n            }\n            else if (robot instanceof SecurityRobot){\n                SecurityRobot temp = (SecurityRobot) robot;\n                System.out.println(\"CleaningRobot - Model: \" + temp.getModelName() + \", Battery: \" + temp.getBatteryLife() + \", Armed: \" + temp.getIsArmed());\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (AbstractRobot robot : robots){\n            if (robot instanceof CleaningRobot) {\n                CleaningRobot temp = (CleaningRobot) robot;\n                temp.boostCleaningPower(miktar);\n                robot = temp;\n                System.out.println(\"CleaningRobot - \" + temp.getModelName() + \" now has Cleaning Power: \" + temp.getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots){\n            if (robot instanceof SecurityRobot) {\n                SecurityRobot temp = (SecurityRobot) robot;\n                temp.toggleArmedMode();\n                robot = temp;\n                if (temp.getIsArmed()) System.out.println(\"SecurityRobot - \" + temp.getModelName() + \" is now Armed\");\n                else System.out.println(\"SecurityRobot - \" + temp.getModelName() + \" is now Unarmed\");\n            }\n        }\n    }\n\n    public static void totalRobotCount() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + total + \" robot uretildi\");\n    }\n\n}\n"
    },
    {
      "id": "8700334",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n    void recharge(); }",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n    \n\t\n\tprotected String modelName;\n    protected int batteryLife;\n    \n    public AbstractRobot(String modelName, int batteryLife) {\n    this.modelName = modelName;\n    this.batteryLife = batteryLife;\n    }\n    \n    public String getModelName() {\n    return modelName;\n    }\n    \n    public int getBatteryLife() {\n    return batteryLife;\n    }\n    \n    public void recharge() {\n    batteryLife = 100;\n    System.out.println(modelName + \" is fully recharged.\");\n    }\n    \n    public abstract void performTask();\n}",
      "Main.java": "\npublic class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        \n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        \n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        \n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        \n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        \n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        \n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        \n        System.out.println(\"\\n\");\n        RobotFactory.KacRobotUretildi();\n    }\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    \n\tprotected boolean isArmed;\n    \n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n    super(modelName, batteryLife);\n    this.isArmed = isArmed;\n    }\n    \n    public void performTask() {\n    if (batteryLife >= 10) {\n            System.out.println(modelName + \" Scanning for threats... Armed: \" + isArmed);\n            batteryLife = batteryLife - 10;\n    } if (batteryLife < 10) {\n            System.out.println(modelName + \" Not enough battery to scan threats...\");\n        }\n    }\n    \n    public void toggleArmedMode() {\n    isArmed = !isArmed;\n    System.out.println(modelName + \" is now \" + (isArmed ? \"Armed\" : \"Unarmed\"));\n    }\n}",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n    protected int cleaningPower;\n    \n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n    super(modelName, batteryLife);\n    this.cleaningPower = cleaningPower;\n    }\n    \n    public void performTask() {\n    if (batteryLife >= 10) {\n            System.out.println(modelName + \" Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife = batteryLife - 10;\n    } if (batteryLife < 10) {\n            System.out.println(modelName + \" Not enough battery to clean...\");\n        }\n    }\n    \n    public void boostCleaningPower() {\n    cleaningPower = cleaningPower + 10;\n    System.out.println(modelName + \" now has Cleaning Power: \" + cleaningPower);\n    }\n}",
      "RobotFactory.java": "import java.util.ArrayList;\npublic class RobotFactory {\n    private static int totalRobotsProduced = 0;\n    private ArrayList<AbstractRobot> robots = new ArrayList<>();\n    \n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalRobotsProduced++;\n    }\n    \n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalRobotsProduced++;\n    }\n    \n    public void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n    }\n    \n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                CleaningRobot cRobot = (CleaningRobot) robot;\n                System.out.println(\"CleaningRobot - Model: \" + cRobot.getModelName() + \", Battery: \" + cRobot.getBatteryLife() + \", Cleaning Power: \" + cRobot.cleaningPower);\n            } else if (robot instanceof SecurityRobot) {\n                SecurityRobot sRobot = (SecurityRobot) robot;\n                System.out.println(\"SecurityRobot - Model: \" + sRobot.getModelName() + \", Battery: \" + sRobot.getBatteryLife() + \", Armed: \" + sRobot.isArmed);\n            }\n        }\n    }\n    \n    public void upgradeCleaningRobots(int amount) {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower();\n            }\n        }\n    }\n    \n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof SecurityRobot) {\n                ((SecurityRobot) robot).toggleArmedMode();\n            }\n        }\n    }\n    \n    public static void KacRobotUretildi() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + totalRobotsProduced + \" robot uretildi\");\n    }\n}"
    },
    {
      "id": "9167236",
      "WithBattery.java": "public interface WithBattery{\n    \n    int getBatteryLife();\n    void recharge();\n}",
      "AbstractRobot.java": "\n\npublic abstract class AbstractRobot implements WithBattery{\n    \n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife){\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName(){\n        return modelName;\n    }\n\n    public abstract void performTask();\n}\n",
      "Main.java": "public class Main {\n\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        \n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        \n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n        \n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n        \n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n        \n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n        \n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        \n        // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        \n        // ??? // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz\n        System.out.println(\"\\n\");\n        RobotFactory.displayTotalManufacturedRobots();\n        System.out.println(\"\\n\");\n            \n    } \n }\n ",
      "SecurityRobot.java": "\npublic class SecurityRobot extends AbstractRobot {\n    \n    private boolean isArmed;\n\n    public SecurityRobot(String name, int batteryLife, boolean isArmed) {\n        super(name, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    @Override\n    public void recharge() {\n        this.batteryLife = 100;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void performTask(){\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"] Scanning for threats... Armed: \" + isArmed);\n            batteryLife = batteryLife - 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"] Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode(){\n        this.isArmed = !this.isArmed;\n    }\n\n    public boolean isIsArmed() {\n        return isArmed;\n    }\n}\n",
      "CleaningRobot.java": "\npublic class CleaningRobot extends AbstractRobot {\n\n    private int cleaningPower;\n\n    public CleaningRobot(String name, int batteryLife, int cleaningPower) {\n        super(name, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    @Override\n    public void recharge() {\n        this.batteryLife = 100;\n    }\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void performTask(){\n        if(batteryLife >= 10){\n            System.out.println(\"[\" + modelName + \"] Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife = batteryLife - 10;\n        }\n        else{\n            System.out.println(\"[\" + modelName + \"] Not enough battery to clean...\");\n        }\n    }\n\n    public void boostCleaningPower(int miktar){\n        this.cleaningPower += miktar;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    \n    private ArrayList<AbstractRobot> robots;\n    private static int totalManufacturedRobots = 0;\n\n    public RobotFactory(){\n        this.robots = new ArrayList<>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower){\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalManufacturedRobots++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed){\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalManufacturedRobots++;\n    }\n\n    public void performAllTasks(){\n        for (int i = 0; i < robots.size(); i++) {\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots(){\n        for (int i = 0; i < robots.size(); i++) {\n            \n            if(robots.get(i) instanceof CleaningRobot cleaningRobot){\n                System.out.println(\"CleaningRobot - Model: \" + \n                                   cleaningRobot.getModelName() +\n                                   \", Battery: \" + \n                                   cleaningRobot.getBatteryLife() + \n                                   \", Cleaning Power: \" +\n                                   cleaningRobot.getCleaningPower() \n                );\n            }\n            else if(robots.get(i) instanceof SecurityRobot securityRobot){\n                System.out.println(\"SecurityRobot - Model: \" + \n                                   securityRobot.getModelName() +\n                                   \", Battery: \" + \n                                   securityRobot.getBatteryLife() + \n                                   \", Armed: \" +\n                                   securityRobot.isIsArmed() \n                );\n            }\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar){\n        for (int i = 0; i < robots.size(); i++) {\n            if(robots.get(i) instanceof CleaningRobot cleaningRobot){\n                cleaningRobot.boostCleaningPower(miktar);\n                System.out.println(\"CleaningRobot - \" + cleaningRobot.getModelName() + \" now has Cleaning Power: \" + \n                cleaningRobot.getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode(){\n        String armed = \"Armed\";\n        String unarmed = \"Unarmed\";\n        for (int i = 0; i < robots.size(); i++) {\n            if(robots.get(i) instanceof SecurityRobot securityRobot){\n                securityRobot.toggleArmedMode();\n                System.out.println(\"SecurityRobot - \" + securityRobot.getModelName() + \" is now \" + \n                (securityRobot.isIsArmed() ? armed : unarmed));\n            }\n        }\n    } \n\n    public static void displayTotalManufacturedRobots() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + totalManufacturedRobots + \" robot uretildi\");\n    }\n    \n}\n"
    },
    {
      "id": "9245287",
      "WithBattery.java": "public interface WithBattery {\n    int getBatteryLife();\n\n    void recharge();\n}",
      "AbstractRobot.java": "public abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n    protected int initialBattery = 100; // default deger 100 alindi\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n        this.initialBattery = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public void recharge() {\n        batteryLife = initialBattery;\n    }\n\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    public abstract void performTask();\n}\n",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n        System.out.println(\"\\n\");\n        RobotFactory.myMethod();\n    }\n}\n",
      "SecurityRobot.java": "public class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    public void performTask() {\n        if (batteryLife < 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \" Not enough battery to scan threats...\");\n        } else {\n            System.out.println(\"[\" + modelName + \"]\" + \" Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        }\n    }\n\n    public void toggleArmedMode() {\n        if (isArmed) {\n            isArmed = false;\n            System.out.println(\"SecurityRobot - \" + getModelName() + \" is now Unarmed\");\n        } else {\n            isArmed = true;\n            System.out.println(\"SecurityRobot - \" + getModelName() + \" is now Armed\");\n\n        }\n    }\n\n    public String toString() {\n        return \"SecurityRobot - Model: \" + modelName + \", Battery: \" + batteryLife + \", Armed: \" + isArmed;\n    }\n\n}\n",
      "CleaningRobot.java": "public class CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife); // super koymazsak hata veriyor sebebini arastir\n        this.cleaningPower = cleaningPower;\n    }\n\n    public void performTask() {\n        if (batteryLife < 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \" Not enough battery to clean...\"); // super.modelName\n        } else {\n            System.out.println(\"[\" + modelName + \"]\" + \" Cleaning in progress... Cleaning Power: \" +\n                    cleaningPower);\n            batteryLife -= 10;\n        }\n    }\n\n    public void boostCleaningPower(int miktar) {\n        cleaningPower += miktar;\n    }\n\n    public int getCleaningPower() {\n        return cleaningPower;\n    }\n\n    @Override\n    public String toString() {\n        return \"CleaningRobot - Model: \" + modelName + \", Battery: \" + batteryLife + \", Cleaning Power: \"\n                + cleaningPower;\n    }\n}\n",
      "RobotFactory.java": "import java.util.ArrayList;\n\npublic class RobotFactory {\n    private ArrayList<AbstractRobot> robots;\n    static int totalNum = 0;\n\n    public RobotFactory() {\n        robots = new ArrayList<AbstractRobot>();\n    }\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalNum += 1;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalNum += 1;\n    }\n\n    public void performAllTasks() {\n        for (int i = 0; i < robots.size(); i++) {\n            robots.get(i).performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot a : robots) {\n            System.out.println(a);\n        }\n    }\n\n    public void upgradeCleaningRobots(int miktar) {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof CleaningRobot) {\n                CleaningRobot c = (CleaningRobot) robots.get(i);\n                c.boostCleaningPower(miktar);\n                System.out.println(\n                        \"Cleaning Robot - \" + c.modelName + \" now has Cleaning Power: \" + c.getCleaningPower());\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (int i = 0; i < robots.size(); i++) {\n            if (robots.get(i) instanceof SecurityRobot) {\n                SecurityRobot s = (SecurityRobot) robots.get(i);\n                s.toggleArmedMode();\n            }\n        }\n    }\n\n    public static void myMethod() {\n        System.out.println(\"Tum fabrikalar tarafindan toplam \" + totalNum + \" robot uretildi\");\n    }\n\n}\n"
    },
    {
      "id": "9164612",
      "WithBattery.java": "// WithBattery arayüzü\ninterface WithBattery {\n    int getBatteryLife();\n    void recharge();\n}\n\n",
      "AbstractRobot.java": "abstract class AbstractRobot implements WithBattery {\n    protected String modelName;\n    protected int batteryLife;\n\n    public AbstractRobot(String modelName, int batteryLife) {\n        this.modelName = modelName;\n        this.batteryLife = batteryLife;\n    }\n\n    public String getModelName() {\n        return modelName;\n    }\n\n    public abstract void performTask();\n\n    @Override\n    public int getBatteryLife() {\n        return batteryLife;\n    }\n\n    @Override\n    public void recharge() {\n        batteryLife = 100;\n    }\n\n    public abstract String getStatus();\n}",
      "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RobotFactory factory = new RobotFactory();\n\n        factory.produceCleaningRobot(\"CleanMaster 3000\", 100, 80);\n        factory.produceSecurityRobot(\"GuardBot X\", 150, true);\n        factory.produceSecurityRobot(\"PatrolBot\", 120, false);\n        factory.produceCleaningRobot(\"CleanMaster 3500\", 5, 150);\n\n        System.out.println(\"\\nProduced Robots:\");\n        factory.displayRobots();\n\n        System.out.println(\"\\nPerforming All Robot Tasks:\");\n        factory.performAllTasks();\n\n        System.out.println(\"\\nUpgrading Cleaning Robots:\");\n        factory.upgradeCleaningRobots(10);\n\n        System.out.println(\"\\nToggling Security Robot Modes:\");\n        factory.toggleSecurityRobotsMode();\n\n        System.out.println(\"\\nFinal Robot Status:\");\n        factory.displayRobots();\n        RobotFactory anotherFactory = new RobotFactory();\n        anotherFactory.produceCleaningRobot(\"CheckMaster 3000\", 100, 80);\n        anotherFactory.produceSecurityRobot(\"CheckBot X\", 150, true);\n\n        System.out.println();\n        RobotFactory.displayTotalRobotProduction();\n    }\n}\n",
      "SecurityRobot.java": "class SecurityRobot extends AbstractRobot {\n    private boolean isArmed;\n\n    public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        super(modelName, batteryLife);\n        this.isArmed = isArmed;\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \" Scanning for threats... Armed: \" + isArmed);\n            batteryLife -= 10;\n        } else {\n            System.out.println(modelName + \" Not enough battery to scan threats...\");\n        }\n    }\n\n    public void toggleArmedMode() {\n        isArmed = !isArmed;\n        System.out.println(\"SecurityRobot - \" + modelName + \" is now \" + (isArmed ? \"Armed\" : \"Unarmed\"));\n    }\n\n    @Override\n    public String getStatus() {\n        return \"SecurityRobot - Model: \" + modelName + \", Battery: \" + batteryLife + \", Armed: \" + isArmed;\n    }\n}",
      "CleaningRobot.java": "class CleaningRobot extends AbstractRobot {\n    private int cleaningPower;\n\n    public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        super(modelName, batteryLife);\n        this.cleaningPower = cleaningPower;\n    }\n\n    @Override\n    public void performTask() {\n        if (batteryLife >= 10) {\n            System.out.println(\"[\" + modelName + \"]\" + \" Cleaning in progress... Cleaning Power: \" + cleaningPower);\n            batteryLife -= 10;\n        } else {\n            System.out.println(modelName + \" Not enough battery to clean...\");\n            recharge(); // batarya çalışamayacak durumda olduğu için recharge ettim ve final productta 100(bataryanın default değeri) olarak çıktı verdi.\n        }\n    }\n\n    public void boostCleaningPower(int amount) {\n        cleaningPower += amount;\n        System.out.println(\"CleaningRobot - \" + modelName + \" now has Cleaning Power: \" + cleaningPower);\n    }\n\n    @Override\n    public String getStatus() {\n        return \"CleaningRobot - Model: \" + modelName + \", Battery: \" + batteryLife + \", Cleaning Power: \" + cleaningPower;\n    }\n}",
      "RobotFactory.java": "import java.util.*;\nclass RobotFactory {\n    private List<AbstractRobot> robots = new ArrayList<>();\n    private static int totalRobotProduction = 0;\n\n    public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {\n        robots.add(new CleaningRobot(modelName, batteryLife, cleaningPower));\n        totalRobotProduction++;\n    }\n\n    public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed) {\n        robots.add(new SecurityRobot(modelName, batteryLife, isArmed));\n        totalRobotProduction++;\n    }\n\n    public void performAllTasks() {\n        for (AbstractRobot robot : robots) {\n            robot.performTask();\n        }\n    }\n\n    public void displayRobots() {\n        for (AbstractRobot robot : robots) {\n            System.out.println(robot.getStatus());\n        }\n    }\n\n    public void upgradeCleaningRobots(int amount) {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof CleaningRobot) {\n                ((CleaningRobot) robot).boostCleaningPower(amount);\n            }\n        }\n    }\n\n    public void toggleSecurityRobotsMode() {\n        for (AbstractRobot robot : robots) {\n            if (robot instanceof SecurityRobot) {\n                ((SecurityRobot) robot).toggleArmedMode();\n            }\n        }\n    }\n\n    public static void displayTotalRobotProduction() {\n        System.out.println(\"Tüm fabrikalar tarafından toplam \" + totalRobotProduction + \" robot uretildi\");\n    }\n}"
    }
  ]
}