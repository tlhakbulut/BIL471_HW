{
  "questions": [
    "Bil211 Quiz 4 Section 2\n\nQuizleri uzak sistemine yükleyeceksiniz.\nQ1:\n\nUndoableList<T> adında bir sınıf oluşturun.\n Bu sınıf, bir ArrayList'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır:\n\n●  undoLast() metodu, en son eklenen öğeyi kaldırmalıdır.\n●  getLastAdded() → Son eklenen öğeyi listeyi değiştirmeden döndürür.\n●  Eğer liste boşsa, undoLast() bir hata vermemeli, sadece hiçbir şey\n\nyapmamalıdır.\n\nÖrnek Kullanım:\n\nUndoableList<String> list = new UndoableList<>();\nlist.add(\"A\");\nlist.add(\"B\");\nlist.add(\"C\");\nlist.undoLast(); // \"C\" kaldırılmalı\nSystem.out.println(list); // Çıktı: [\"A\", \"B\"]\n\nQ2: Aşağıdaki generic metodu tamamlayın.\n\n●  Verilen bir Collection<T> içinde minimum veya maksimum öğeyi bulan\n\nbir metod yazın.\n\n●  Boolean parametresi true ise maksimumu, false ise minimumu\n\ndöndürmelidir.\n\n●  T öğeleri Comparable<T> arabirimini uygulamalıdır.\n\npublic static <T extends Comparable<T>> T findExtreme(Collection<T> collection,\nboolean findMax) {\n    // Metodu tamamlayın\n}\n\nÖrnek Kullanım:\n\nList<Integer> numbers = Arrays.asList(3, 9, 1, 6);\nSystem.out.println(findExtreme(numbers, true));  // Çıktı: 9 (Maksimum)\nSystem.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\nQ3: Belirli Türdeki Elemanları Filtreleme\n\n\f●  Bir Collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic\n\nmetod yazın.\n\n●  Class<T> tür filtresi olarak kullanılmalıdır.\n●  Sonucu yeni bir List<T> olarak döndürmelidir.\n\npublic static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n    // Metodu tamamlayın\n}\n\nÖrnek Kullanım:\n\nList<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\nSystem.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\nSystem.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\n"
  ],
  "answers": [
    {
      "id": "5361565",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q2 {\n    public static void main(String[] args) {\n        List<Integer> numbers=Arrays.asList(3,9,1,6);\n        System.out.println(findExtreme(numbers,true));\n        System.out.println(findExtreme(numbers,false));\n        \n        \n    }\n\n        public static <T extends Comparable<T>> T findExtreme(Collection<T> collection,\nboolean findMax) {\n    T n=null;\n    if(findMax){\n        n=collection.iterator().next();\n        for(T i:collection){\n            if(n.compareTo(i)<0){\n                n=i;\n            }\n        }\n    }\n    else{\n        n=collection.iterator().next();\n        for(T i:collection){\n            if(n.compareTo(i)>0){\n                n=i;\n            }\n        }\n\n    }\n    return n;\n}\n\n    }\n",
      "Q1.java": "\nimport java.util.ArrayList;\n\npublic class Q1 {\n    public static void main(String[] args) {\n        Undoablelist<String> list=new Undoablelist();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast();\n        System.out.println(list);\n    }\n    \n}\n\nclass Undoablelist<T> extends ArrayList<Object>{\n    public void undoLast(){\n        if(this.size()==0){\n\n        }\n        else{\n        this.remove(this.size()-1);}\n    }\n    public T getLastAdded(){\n        return (T)this.get(this.size()-1);\n    }\n\n}\n",
      "Q3.java": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n    public static void main(String[] args) {\n        List<Object> mixed=Arrays.asList(1,\"hello\",2.5,\"world\",3,true);\n        System.out.println(filterByType(mixed, String.class));\n        System.out.println(filterByType(mixed, Integer.class));\n        \n    }\n    public static <T> List<T> filterByType(Collection<?> collection,Class<T> type){\n        List<T> n = new ArrayList<>();\n        for(Object i:collection){\n            if(i.getClass().equals(type)){\n                n.add((T) i);\n            }\n        }\n        return n;\n    }\n\n}\n"
    },
    {
      "id": "4810237",
      "Main.java": "import java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.lang.model.element.Element;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tUndoableList<String>list=new UndoableList<String>();\n\t\tlist.add(\"A\");\n\t\tlist.add(\"B\");\n\t\tlist.add(\"C\");\n\t\tSystem.out.println(list.getLastAdded(list));\n\t\tlist.undoLast(list);\n\t\tSystem.out.println(list);\n\t\tList<Integer> numbers = Arrays.asList(3, 9, 1, 6); \n\t\tSystem.out.println(findExtreme(numbers, true));  \n\t\tSystem.out.println(findExtreme(numbers, false)); \n\t\tList<String> names = Arrays.asList(\"Ahmet\", \"Zeynep\", \"Fatma\", \"Ali\"); \n\t\tSystem.out.println(findExtreme(names, true));   \n\t\tSystem.out.println(findExtreme(names, false)); \n\t\tList<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true); \n\t\tSystem.out.println(filterByType(mixed, String.class)); \n\t\tSystem.out.println(filterByType(mixed, Integer.class)); \n\t\n\n\t}\n\tpublic static <T extends Comparable<T>> T findExtreme(Collection<T> collection,boolean findMax) {\n\t\tif(findMax==true) {\n\t\t\tT max;\n\t\t\tIterator<T>itr=collection.iterator();\n\t\t\tmax=itr.next();\n\t\t\tfor(T element:collection) {\n\t\t\t\tint deger=element.compareTo(max);\n\t\t\t\tif(deger>0) {\n\t\t\t\t\tmax=element;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\telse {\n\t\t\tT min;\n\t\t\tIterator<T>itr=collection.iterator();\n\t\t\tmin=itr.next();\n\t\t\tfor(T element:collection) {\n\t\t\t\tint deger=element.compareTo(min);\n\t\t\t\tif(deger<0) {\n\t\t\t\t\tmin=element;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn min;\n\t\t}\n\t\t\n\t}\n\tpublic static <T> List<T> filterByType(Collection<?> collection, Class<T> type){\n\t\tArrayList<T>list=new ArrayList<T>();\n\t\tfor(Object element:collection) {\n\t\t\tClass<?>tip=element.getClass();\n\t\t\tif(tip.equals(type)) {\n\t\t\t\tlist.add((T) element);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T>extends ArrayList<T>{\n\tvoid undoLast(UndoableList<T>list) {\n\t\tlist.remove(getLastAdded(list));\n\t}\n\tT getLastAdded(UndoableList<T>list) {\n\t\tint size=list.size();\n\t\t\n\t\treturn list.get(size-1);\n\t\t\n\t\t\n\t}\n}\n"
    },
    {
      "id": "4779274",
      "question2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class question2 {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        //ben ekledim.\n        List<String> isimler = Arrays.asList(\"eren\",\"semra\",\"bülent\",\"nebi\",\"ico\",\"resat\");\n        System.out.println(\"\\nkendi deneme listem\\nisimler listesinde minimum: \"+findExtreme(isimler, false));\n        System.out.println(\"isimler listesinde maximum: \"+findExtreme(isimler, true));\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        T answer = null;\n        for(T any:collection) {\n            if(answer==null) answer = any;\n            if (any.compareTo(answer) < 0 && !findMax\n                || any.compareTo(answer) > 0 && findMax) {\n                    answer = any;\n            }\n        }\n        return answer;\n    }\n}\n",
      "question1.java": "import java.util.ArrayList;\n\npublic class question1 {\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        System.out.println(\"son eklenen: \"+list.getLastAdded());\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n    \n}\n\nclass UndoableList<T> extends ArrayList<T>{\n\n    public void undoLast() {\n        try{\n            this.remove(this.size()-1);\n        }\n        catch (Exception e) {\n\n        }\n    }\n\n    public T getLastAdded() {\n        return this.get(this.size()-1);\n    }\n\n\n\n}",
      "question3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\n\npublic class question3 {\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(\"QUİZ DOSYASINDAKİ ÇIKTI\\n\"+filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\n        List<Number> karisik = Arrays.asList(1,(2.3),(3.8),5,-1,(0.6));\n        System.out.println(\"\\nBENİM yazdığım deneme çıktısı\\nonly integers: \"+ filterByType(karisik, Integer.class));\n        System.out.println(\"only doubles: \"+ filterByType(karisik, Double.class));\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> newList = new ArrayList<>();\n\n        //\"?\"\" yerine ne kullandığımızı unuttuğum için collectionu direkt\n        //Object üzerinden döndürdüm sanki başka bişi yapıyoduk da\n        //bu haliyle doğru çalışıyo ama type safety uyarısı veriyor sadece\n        for(Object any : collection) {\n            if(any.getClass() == type) {\n                newList.add((T)any);\n            }\n        }\n\n        return newList;\n    }\n}\n"
    },
    {
      "id": "8862077",
      "findExtreme.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class findExtreme {\n\t\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n    \t\n    \t\n        if (collection.isEmpty())\n        \treturn null;\n        \n        if (findMax) {\n        \treturn Collections.max(collection);\n\t\t}\n        else \n          return Collections.min(collection);\n    }\n\n    \n    \n    \n    public static void main(String[] args) {\n    \t\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));  // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n}",
      "filterByType.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class filterByType {\n\t\n\t\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n    \t\n        List<T> filteredList = new ArrayList<>();\n        \n        \n        for (Object object : collection) {\n        \t\n            if (type.isInstance(object)) {\n                filteredList.add(type.cast(object));\n            }\n            \n        }\n        \n        return filteredList;\n    }\n\n    \n    \n    \n    public static void main(String[] args) {\n  \n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n}",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n\t\n\t\n    public void undoLast() {\n    \t\n        if (!isEmpty()) {\n            remove(size() - 1);\n        }\n        \n    }\n\n    \n    \n    public T getLastAdded() {\n        if (!isEmpty()) {\n            return get(size() - 1);\n        }\n        \n        else\n        return null;\n    }\n\n    \n    public static void main(String[] args) {\n    \t\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n}"
    },
    {
      "id": "7374887",
      "UndoableList.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    int lastIndex;\n    ArrayList<Integer> indexList = new ArrayList<>();\n\n    UndoableList() {\n        super();\n\n    }\n\n    void undoLast() {\n        if (size() > 0) {\n            this.remove(indexList.indexOf(Collections.max(indexList)));\n        }\n    }\n\n    @Override\n    public T remove(int index) {\n        indexList.remove(index);\n        T t = super.get(index);\n        super.remove(index);\n        return t;\n\n    }\n\n    @Override\n    public boolean remove(Object o) {\n        indexList.remove(this.indexOf(o));\n        return super.remove(o);\n    }\n\n    @Override\n    public void add(int index, T element) {\n        super.add(index, element);\n        indexList.add(index, Collections.max(indexList) + 1);\n\n    }\n\n    @Override\n    public boolean add(T element) {\n        super.add(element);\n        lastIndex = indexOf(element);\n        if (indexList.size() > 0) {\n            indexList.add(lastIndex, Collections.max(indexList) + 1);\n        } else {\n            indexList.add(lastIndex, 1);\n        }\n        return super.contains(element);\n    }\n\n    T getLastAdded() {\n        return this.get(indexList.indexOf(Collections.max(indexList)));\n    }\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(0, \"C\");\n        list.add(\"D\");\n        System.out.println(list);\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list);\n        list.remove(\"B\");\n        System.out.println(list);\n        System.out.println(list.getLastAdded());\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true, false);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n        System.out.println(filterByType(mixed, Boolean.class)); // Çıktı: [true, false]\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (findMax) {\n            T t = Collections.max(collection);\n            return t;\n        }\n        T t = Collections.min(collection);\n\n        return t;\n\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> list = new ArrayList<>();\n        for (Object t : collection) {\n            if (t.getClass().equals(type)) {\n                T result = (T) t;\n                list.add(result);\n            }\n        }\n        return list;\n    }\n}\n"
    },
    {
      "id": "2112376",
      "Q3method.java": "import java.util.*;\n\npublic class Q3method {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> list = new ArrayList<>();\n        for (Object obj : collection) {\n            if (type.isInstance(obj))\n                list.add((T) obj);\n        }\n        return list;\n    }\n    \n    \n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class));  // [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // [1, 3]\n    }\n}\n\n",
      "Q2method.java": "import java.util.Collection;\n\npublic class Q2method {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (collection.isEmpty())\n            return null;\n\n        T temp = collection.iterator().next();\n        if (findMax) {\n            for (T item : collection) {\n                int value = item.compareTo(temp);\n                if (value > 0)\n                    temp = item;\n            }\n        } else {\n            for (T item : collection) {\n                int value = item.compareTo(temp);\n                if (value < 0)\n                    temp = item;\n            }\n        }\n        return temp;\n    }\n\n    public static void main(String[] args) {\n        var list = java.util.Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(list, true));  // 9\n        System.out.println(findExtreme(list, false)); // 1\n    }\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    private T lastAdded = null;\n\n    public boolean add(T element) {\n        lastAdded = element;\n        return super.add(element);\n    }\n\n    public void undoLast() {\n        if(lastAdded != null){\n            if (!this.isEmpty()) \n                this.remove(this.size() - 1);\n        }\n    }\n\n    public T getLastAdded() {\n        if(lastAdded == null) {\n            return null;\n        }\n        else\n        return lastAdded;\n    }\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n}\n"
    },
    {
      "id": "8059049",
      "Bil211Quiz4_Q3.java": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Bil211Quiz4_Q3 {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> types = new ArrayList<>();\n        for (Object element : collection) {\n            if (type.isInstance(element)) {\n                types.add(type.cast(element));\n            }\n        }\n        return types;\n    }\n}\n",
      "Bil211Quiz4_Q2.java": "import java.util.Collection;\nimport java.util.Iterator;\n\npublic class Bil211Quiz4_Q2 {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        Iterator<T> iterator = collection.iterator();\n        T number = iterator.next();\n\n        if (collection.isEmpty()) {\n            return null;\n        }\n\n        while (iterator.hasNext()) {\n            T item = iterator.next();\n            \n            if(findMax){\n                if(item.compareTo(number) > 0)\n                number=item;\n            }\n            else if (!findMax){\n                if(item.compareTo(number) < 0)\n                number=item;\n            }\n        }\n        \n\n       \n\n        return number;\n    }\n}\n",
      "UndoableList.java": "\n    import java.util.ArrayList;\n\n    public class UndoableList<T> extends ArrayList<T> {\n        public void undoLast() {\n            if (!this.isEmpty()) {\n                this.remove(this.size() - 1);\n            }       \n        }\n    \n        public T getLastAdded() {\n            if (this.isEmpty()) {\n                return null;\n            }\n            return this.get(this.size()-1);\n        }\n    }\n\n\n"
    },
    {
      "id": "2786122",
      "Q2.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Q2 {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n\n        ArrayList<T> result = new ArrayList<>();\n\n        for (T element : collection) {\n            result.add(element);\n        }\n\n        for(int x = 0; x < result.size(); x++) {\n            for(int y = 0; y < result.size() - 1; y++) {\n                if(result.get(y).compareTo(result.get(y + 1)) > 0) {\n                    Collections.swap(result, y, y + 1);\n                }\n            }\n        }\n\n        if(findMax)\n            return result.get(result.size() - 1);\n        else\n            return result.get(0);     \n    }\n}",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n\n        ArrayList<T> result = new ArrayList<>();\n\n        for (Object element : collection) {\n            if (type.isInstance(element)) {\n                result.add(type.cast(element));\n            }\n        }\n        \n        return result;\n    }\n}",
      "UndoableList.java": "import java.util.ArrayList;\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    \n    Map<Integer, T> treeMap = new TreeMap<>();\n    static int x = -1;\n\n    @Override\n    public boolean add(T element) {\n        x++;\n        treeMap.put(x, element);\n        return super.add(element);\n    }\n\n    @Override\n    public T remove(int index) {\n        return super.remove(index);\n    }\n\n    @Override\n    public T get(int index) {\n        return super.get(index);\n    }\n\n    public void undoLast() {\n        try{    \n            treeMap.remove(x);\n            remove(x);\n            x--;\n        } catch (Exception e){}    \n    }\n\n    public void getLastAdded() {\n        System.out.println(get(x));\n    }\n}"
    },
    {
      "id": "4114373",
      "Main.java": "package Q3;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\n\npublic class Main {\n    public static void main(String[] args) {\n        \n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [hello, world]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\n        \n\n        System.out.println();\n        System.out.println(\"Ek Testler: \");\n\n        ArrayList<Integer> arrayList = new ArrayList<>(); //filterByType'da kullanmak için\n        arrayList.add(1);\n        arrayList.add(2);\n        arrayList.add(3);\n\n        List<Object> mixed2 = Arrays.asList(17, \"merhaba\", 5.2, \"dünya\", 66, false, arrayList, new Vector<>(), 'c', \"!\", true);\n        System.out.println(filterByType(mixed2, String.class)); // Çıktı: [merhaba, dünya, !]\n        System.out.println(filterByType(mixed2, Integer.class)); // Çıktı: [17, 66]\n        System.out.println(filterByType(mixed2, ArrayList.class)); // Çıktı: [[1, 2, 3]]\n        System.out.println(filterByType(mixed2, Vector.class)); // Çıktı: [[]]\n        System.out.println(filterByType(mixed2, Character.class)); // Çıktı: [c]\n        System.out.println(filterByType(mixed2, Boolean.class)); // Çıktı: [false, true]\n\n\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type){\n        \n        Iterator<?> iterator = collection.iterator();\n        List<T> list1 = new ArrayList<>();\n\n        Class<T> class1 = type;\n\n        while(iterator.hasNext()){\n\n            T next = (T)iterator.next();\n\n            if(next.getClass().equals(class1)){\n                list1.add(next);\n            }\n        }\n\n        return list1;\n\n    }\n}\n",
      "Main.java_1": "package Q1;\n\npublic class Main {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n\n        String a = list.getLastAdded();\n        list.undoLast();\n\n        System.out.println(a);\n        System.out.println(list);\n    }\n}\n",
      "UndoableList.java": "package Q1;\n\nimport java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    public void undoLast(){\n\n        if(!isEmpty()){\n            remove(get(size()-1));\n        }\n        \n    }\n\n    public T getLastAdded(){\n        return get(size()-1);\n    }\n\n\n}\n",
      "Main.java_2": "package Q2;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(\"For 'numbers' list: \");\n        System.out.println(\"Max value: \" + findExtreme(numbers, true)); //MAX\n        System.out.println(\"Min value: \" + findExtreme(numbers, false)); //MIN\n\n        List<Integer> numbers2 = Arrays.asList(4,8,15,16,23,42);\n\n        System.out.println();\n        System.out.println(\"(Ek Test) For 'numbers2' list: \");\n        System.out.println(\"Max value: \" + findExtreme(numbers2, true)); //MAX\n        System.out.println(\"Min value: \" + findExtreme(numbers2, false)); //MIN\n\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax){\n        \n        Iterator<T> iterator = collection.iterator();\n        \n        if(findMax){\n\n            T max = iterator.next();\n\n            while(iterator.hasNext()){\n\n                T next = iterator.next();\n\n                if(next.compareTo(max)>0){\n                    max = next;\n                }\n            }\n            return max;\n        }\n\n        else{\n            T min = iterator.next();\n\n            while(iterator.hasNext()){\n\n                T next = iterator.next();\n\n                if(next.compareTo(min)<0){\n                    min = next;\n                }\n            }\n            return min;\n        }\n    } \n}\n"
    },
    {
      "id": "3688139",
      "quiz4q3.java": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class quiz4q3 {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> list = new ArrayList<>();\n        for (Object item : collection) {\n            if (type instanceof item) {\n                list.add(item.getClass());\n            }\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = java.util.Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(lst, String.class));\n        System.out.println(filterByType(lst, Integer.class));\n    }\n}\n",
      "quiz4q2.java": "import java.util.*;\n\npublic class quiz4q2 {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (collection.isEmpty()) {\n            return null;\n        }\n        T result;\n        if (findMax) {\n            result = Collections.max(collection);\n        } else {\n            result = Collections.min(collection);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));\n        System.out.println(findExtreme(numbers, false));\n    }\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n\n    public void undoLast() {\n        if (!isEmpty()) {\n            remove(size() - 1);\n        }\n    }\n\n    public T getLastAdded() {\n        if (isEmpty()) {\n            return null;\n        } else {\n            return get(size() - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n\n        System.out.println(list.getLastAdded());\n        list.undoLast();\n        System.out.println(list);\n    }\n}\n"
    },
    {
      "id": "6343320",
      "Quiz4.java": "package pkg;\n\npublic class Quiz4 {\n\n\tpublic static void main(String[] args) {\n\t\n\t}\n\n}\n\nclass Undoablelist<T>{\n\t\n\tClass<UndoableList> list = UndoableList.class; \n\t\n\tpublic void undoLast() {\n\t\n\t\tint length = list.length();\n\t\tlist.remove(length-1);\n\t\t\n\t}\n\t\n\tpublic String getLastAdded() {\n\t\t\n\t\tint length = list.length();\n\t\treturn list<length - 1>;\n\t\t\n\t}\n}\n\nclass Collection<T>{\n\t\n\tpublic static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n\t\t\n\t\tint max = 0;\n\t\t\n\t\tif(findMax == true) {\n\t\t\tfor(int i = 0; i < collection.length(); i++) {\n\t\t\t\tif(max  < collection.get(i)) {\n\t\t\t\t\tmax = collection.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(findMax == false) {\n\t\t\tfor(int i = 0; i < collection.length(); i++) {\n\t\t\t\tif(max > collection.get(i)) {\n\t\t\t\t\tmax = collection.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static <T> List<T> filterByType(Collection<?> colelction, Class<T> type){\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "id": "4275079",
      "Main.java": "// Her şey Doğru çalışıyor.\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.getLastAdded();\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list);//[ A , B ]\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));  // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n    //2.soru\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        List<T> list= (List<T>) collection;\n\n        for(int i=0;i<list.size();i++){\n           for(int j=0;j<list.size();j++){\n               if(list.get(i).compareTo(list.get(j))>0){\n                   T temp=list.get(i);\n                   list.set(i, list.get(j));\n                   list.set(j,temp);\n               }\n           }\n        }\n        if(findMax){\n          return list.getFirst();\n        }else\n            return list.getLast();\n    }\n\n//3.soru\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> list= (List<T>) collection;\n        List<T> list2=new ArrayList<>();\n    for(int i=0;i<collection.size();i++){\n        T eleman = list.get(i);\n        if(type.equals(eleman.getClass())){\n            list2.add(list.get(i));\n        }\n\n    }\n    return list2;\n    }\n    }\n\n\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T>{\n   public ArrayList<T> list;\n   public int count=0;\n  public UndoableList(){\n       this.list=new ArrayList<>();\n   }\n   public void undoLast(){\n       try {\n            list.remove(count-1);\n            count--;\n       }catch (Exception e){}\n\n   }\n          public void getLastAdded(){\n                System.out.println(list.get(count-1));\n          }\n\n    public void add(T a) {\n       list.add(a);\n       count++;\n    }\n\n    @Override\n    public String toString() {\n        return list.toString();\n    }\n}\n"
    },
    {
      "id": "9905145",
      "main.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class main {\n\n    public static void main(String[] args) {\n\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n\n        ArrayList<T> maxmin = new ArrayList<>();\n        maxmin.addAll(collection);\n\n        T max = maxmin.get(0);\n        T min = maxmin.get(0);\n\n        for(int i = 0; i < collection.size(); i++) {\n\n            if(maxmin.get(i).compareTo(min) < 0) {\n                min = maxmin.get(i);\n            }\n            if(maxmin.get(i).compareTo(max) > 0) {\n                max = maxmin.get(i);\n            }\n        }\n\n        if(findMax == true) {\n            return max;\n        }\n        else if(findMax == false) {\n            return min;\n        }\n        return null;\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n\n        List<T> filtered = new ArrayList<>();\n        ArrayList<T> fil = new ArrayList<>();\n        fil.addAll((Collection<? extends T>) collection);\n\n        for(int i = 0; i < collection.size(); i++) {\n            if(type.isInstance(fil.get(i))) {\n                filtered.add(fil.get(i));\n            }\n        }\n        return filtered;\n    }\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList <T> extends ArrayList<T> {\n\n    public int i = 0;\n\n\n    public void undoLast() {\n\n        try {\n            if (super.size() > 0) {\n                super.remove(super.size()-1);\n            }\n        } catch (Exception e) {\n        }\n    }\n\n    public void getLastAdded() {\n\n        try {\n\n            System.out.println(super.get(super.size()-1));\n\n        } catch (Exception e) {\n        }\n    }\n}\n"
    },
    {
      "id": "4540765",
      "q3.java": "package q4bil211nebiyanar;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class q3 {\n\t\n\tpublic static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n\n\t\t List<T> filteredlist = new ArrayList<>();\n\t        for (Object myobj : collection) {\n\t            if (type.isInstance(myobj)) {\n\t            \tfilteredlist.add((T) myobj);\n\t            }\n\t        }\n\t        return filteredlist;\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t}\n\t\n\n\t\n\t\n}\n",
      "q2.java": "package q4bil211nebiyanar;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\npublic class q2 {\n\t\n\t\n\tpublic static <T extends Comparable<T>> T findExtreme(Collection<T> collection,\n\t\t\tboolean findMax) {\n\n\t\tif (collection == null || collection.isEmpty()) {\n            return null;\n        }\n\t\t\n\t\t\n\t\tT extreme = null;\n\t\t\n\t\tfor (T element : collection) {\n\t        if (extreme == null) {\n\t            extreme = element;\n\t        } else {\n\t            int compare = element.compareTo(extreme);\n\t            if (findMax && compare > 0) {\n\t                extreme = element;\n\t            } else if (!findMax && compare < 0) {\n\t                extreme = element;\n\t            }\n\t        }\n\t    }\n\t\t\t\n\t\treturn extreme; \t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n       \n        \n        \n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\n\n",
      "test.java": "package q4bil211nebiyanar;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class test {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tUndoableList<String> list = new UndoableList<>();\n\t\t\n\t\t//Q1\n\t\tlist.add(\"A\");\n\t\tlist.add(\"B\");\n\t\tlist.add(\"C\");\n\t\tlist.undoLast(); // \"C\" kaldırılmalı\n\t\tSystem.out.println(list); // Çıktı: [\"A\", \"B\"]\n\t\tSystem.out.println(\"\");\n\t\t//Q2\n\t\tList<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n\t\tSystem.out.println(q2.findExtreme(numbers, true));\n\t\tSystem.out.println(q2.findExtreme(numbers, false));\n\t\tSystem.out.println(\"\");\n\t\t// Q3\n\t\tList<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n\t\tSystem.out.println(q3.filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n\t\tSystem.out.println(q3.filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\t\n\t}\n\n}\n",
      "UndoableList.java": "package q4bil211nebiyanar;\n\nimport java.util.ArrayList;\n\n\n//Q1\npublic class UndoableList<T> extends ArrayList<T> {\n\t\n\t\n\tpublic void undoLast() {\n\t\t\n\t\tif(!this.isEmpty()) {\n\t\t\t\n\t\t\tthis.remove(this.size()-1);\n\t\t\t//size-1 son indekse ulaş\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\t\n\t\n\tpublic T getLastAdded() {\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tif(!this.isEmpty()) {\n\t\t\treturn this.get(this.size()-1);\n\t\t}\n\t\t\n\t\treturn null;\n\t\t\n\t\t\n\t}\n\t\n\n}\n"
    },
    {
      "id": "2103960",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q2 {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        T temp = null;\n        T c = null;\n        int count = 0;\n        if (findMax) {\n            for (T t : collection) {\n                if (count == 0) {\n                    temp = t;\n                    c = t;\n                } else if (t.compareTo(temp) > 0) {\n                    c = t;\n                    temp = t;\n                }\n                count++;\n            }\n        } else {\n            for (T t : collection) {\n                if (count == 0) {\n                    temp = t;\n                    c = t;\n                } else if (t.compareTo(temp) < 0) {\n                    c = t;\n                    temp = t;\n                }\n                count++;\n            }\n\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n}\n",
      "Q1Main.java": "public class Q1Main {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast();\n        System.out.println(list);\n        System.out.println(list.getLastAdded());\n    }\n}\n",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Q3 {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> arr = new ArrayList<>();\n        Iterator it = collection.iterator();\n\n        while (it.hasNext()) {\n            Object o = it.next();\n            if (o.getClass() == type) {\n                arr.add((T) o);\n            }\n        }\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n        System.out.println(filterByType(mixed, Boolean.class));\n    }\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList {\n    int IndOfLast = -1;\n\n    @Override\n    public boolean add(Object e) {\n        super.add(e);\n        this.IndOfLast = this.indexOf(e);\n        return true;\n    }\n\n    @Override\n    public void add(int Index, Object e) {\n        super.add(Index, e);\n        IndOfLast = Index;\n    }\n\n    @Override\n    public void addFirst(Object e) {\n        super.addFirst(e);\n        IndOfLast = 0;\n    }\n\n    @Override\n    public boolean remove(Object e) {\n        IndOfLast--;\n        return super.remove(e);\n    }\n\n    @Override\n    public T remove(int Index) {\n        IndOfLast--;\n        return (T) super.remove(Index);\n\n    }\n\n    public void undoLast() {\n        this.remove(IndOfLast);\n    }\n\n    public T getLastAdded() {\n        return (T) this.get(IndOfLast);\n    }\n\n}\n"
    },
    {
      "id": "6539697",
      "Main.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Q1\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast();\n        System.out.println(list);\n\n        // Q2\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));\n        System.out.println(findExtreme(numbers, false));\n\n        //Q3\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class));\n        System.out.println(filterByType(mixed, Integer.class));\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if(findMax) {\n            T max = collection.iterator().next();\n            for(T t1 : collection)\n                if(t1.compareTo(max) > 0)\n                    max = t1;\n            return max;\n        }\n        else {\n            T min = collection.iterator().next();\n            for(T t1 : collection)\n                if(t1.compareTo(min) < 0)\n                    min = t1;\n            return min;\n        }\n    }\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> filteredList = new ArrayList<>();\n\n        for(Object t : collection)\n            if(t.getClass() == type)\n                filteredList.add((T) t);\n        return filteredList;\n    }\n}",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    public void undoLast() {\n        this.remove(this.size()-1);\n    }\n    public T getLastAdded() {\n        return this.get(this.size()-1);\n    }\n}\n"
    },
    {
      "id": "1280995",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Q2 {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        // collection'un elemanları comparable olmalı.\n        Iterator<T> iterator = collection.iterator();\n        T result = iterator.next();\n        Iterator<T> iterator2 = collection.iterator();\n        while (iterator2.hasNext()) {\n            T next = iterator2.next();\n            if (next instanceof Comparable<?>) {\n                if (findMax) {\n                    if (next.compareTo(result) > 0) {\n                        result = next;\n                    }\n                }\n                else {\n                    if (next.compareTo(result) < 0) {\n                        result = next;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n}\n",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Iterator;\n\npublic class Q3 {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        \n        Iterator<?> iterator = collection.iterator();\n        List<T> result = new ArrayList<>();\n        while (iterator.hasNext()) {\n            T a = (T) iterator.next();\n            if (a.getClass().equals(type)) {\n                result.add(a);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n}\n",
      "UndoableList.java": "\n\nimport java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    private T lastAdded;\n\n    @Override\n    public boolean add(T e) {\n        lastAdded = e;\n        return super.add(e);\n    }\n    public void undoLast() {\n        if (indexOf(lastAdded)!=-1)\n        remove(lastAdded);\n    }\n\n    public T getLastAdded() {\n        return lastAdded;\n    }\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n\n}"
    },
    {
      "id": "6429016",
      "Q2.java": "package Quiz5.question2;\nimport java.util.Collection;\nimport java.util.Iterator;\n\npublic class Q2{\n\n    public static <T extends Comparable<T>> T find(Collection<T> collection, boolean findMax) {\n        if (collection== null || collection.isEmpty()) {\n            return null;\n        }\n        \n        Iterator<T> iterator = collection.iterator();\n        T big = iterator.next();\n        \n        while (iterator.hasNext()) {\n            T element = iterator.next();\n            int cmp = element.compareTo(big);\n            if (findMax && cmp > 0) {\n                big = element;\n            } else if (!findMax && cmp < 0) {\n                big = element;\n            }\n        }\n        return big;\n    }\n\n    public static void main(String[] args) {\n        java.util.List< Integer > numbers = java.util.Arrays.asList(3, 9, 1, 6, 36, -5);\n        System.out.println(find (numbers, true)); \n        System.out.println(find (numbers, false));\n    }\n    \n}\n",
      "Q3.java": "package Quiz5.question3;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3{\n\n    public static <T> List <T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> result = new ArrayList<>();\n        for (Object element : collection) {\n            if (type.isInstance( element)) {\n                result.add(type.cast(element));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> mixed = java.util.Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class));\n        System.out.println(filterByType(mixed, Integer.class)); \n    }\n}\n\n",
      "Main.java": "package Quiz5.question1;\n\npublic class Main {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n\n        System.out.println(\"En son eklenen:\" + list.getLastAdded());\n        list.undoLast();\n\n        System.out.println(list);\n    }\n}",
      "UndoableList.java": "package Quiz5.question1;\n\nimport java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n\n    \n    public void undoLast() {\n        if (!this.isEmpty()) {\n            this.remove(this.size() - 1);\n        }\n        \n    }\n\n    public T getLastAdded() {\n        if (!this.isEmpty()) {\n            return this.get(this.size() - 1);\n        }\n        return null;\n    }\n}\n"
    },
    {
      "id": "6157698",
      "Main.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.swing.text.html.HTMLDocument.Iterator;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tUndoableList<String> list = new UndoableList<>();\n\n\t\tlist.add(\"A\");\n\t\tlist.add(\"B\");\n\t\tlist.add(\"C\");\n\t\tlist.undoLast(); // \"C\" kaldırılmalı\n\t\tSystem.out.println(list); // Çıktı: [\"A\", \"B\"]\n//----------------------------------------------------------------------------------------------\n\t\t\n\t\tList<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n\t\tSystem.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n\t\tSystem.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n//----------------------------------------------------------------------------------------------\n\t\t\n\t\tList<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n\t\tSystem.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n\t\tSystem.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\t}\n\n\tpublic static <T extends Comparable<T>> T findExtreme(Collection<T> collection,\tboolean findMax) {\n\t\t\n\t\tif(findMax) {\n\t\t\tCollections.sort((List<T>) collection);\n\t\t\tT x = null;\n\t\t\t\n\t\t\tjava.util.Iterator<T> iter = collection.iterator();\n\t\t\twhile( iter.hasNext()) {\n\t\t\t\tx = iter.next(); \n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tCollections.sort((List<T>) collection);\n\t\t\treturn  collection.iterator().next() ;\n\t\t}\n\t}\n\t\n\tpublic static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n\t\tjava.util.Iterator<Object> iter = (java.util.Iterator<Object>) collection.iterator();\n\t\t\n\t\tList<T> list = new ArrayList<T>();\n\t\t\n\t\twhile(iter.hasNext()) {\n\t\t\tObject x = iter.next();\n\n\t\t\tif( x.getClass().equals(type)) {\n\t\t\t\tlist.add((T) x);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn list;\n\t\t}\n\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T>{\n\n//\tpublic UndoableList() {\n//\t\tsuper();\n//\t}\n\tpublic void undoLast() {\n\t\tif(this.isEmpty())\n\t\t\treturn;\n\t\tthis.removeLast();\n\t}\n\tpublic T getLastAdded(){\n\t\treturn this.isEmpty() ? null : this.get(this.size());\n\t}\n\n}\n"
    },
    {
      "id": "6494434",
      "Q2.java": "import java.util.Collection;\n\npublic class Q2 {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (collection == null || collection.isEmpty()) {\n            return null;\n        }\n\n\n        T extreme = null;\n\n\n\n        for (T t : collection) {\n            if (extreme == null) {\n                extreme = t;\n            } else {\n                int result = t.compareTo(extreme);\n                if ((findMax && result > 0) || (!findMax && result < 0)) {\n                    extreme = t;\n                }\n            }\n        }\n        return extreme;\n    }\n\n\n}\n",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> newList = new ArrayList<>();\n        for (Object obj : collection) {\n            if (obj != null && obj.getClass() == type) {\n                newList.add((T) obj);\n            }\n        }\n        return newList;\n    }\n}",
      "UndoableList.java": "import java.util.ArrayList;\npublic class UndoableList<T> extends ArrayList<T> {\n\n    public boolean add(T element) {\n        return super.add(element);\n    }\n\n\n    public void undoLast() {\n        if (!this.isEmpty()) {\n            this.remove(this.size() - 1);\n        }\n    }\n\n\n\n    public T getLastAdded() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n\n        return this.get(this.size() - 1);\n    }\n\n}"
    },
    {
      "id": "9164612",
      "Main.java": "import java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Main {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n\n        list.undoLast();\n        System.out.println(list);\n        List<Integer>numbers = java.util.Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));\n        System.out.println(findExtreme(numbers, false));\n        List <Object> mixed = java.util.Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class));\n        System.out.println(filterByType(mixed, Integer.class));\n\n    }\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (collection == null || collection.isEmpty()) {\n            return null;\n        }\n\n        if (findMax) {\n            return Collections.max(collection);\n        } else {\n            return Collections.min(collection);\n        }\n    }\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> filteredList = new ArrayList<>();\n        for (Object item : collection) {\n            if (type.isInstance(item)) {\n                filteredList.add(type.cast(item));\n            }\n        }\n        return filteredList;\n    }\n}",
      "UndoableList.java": "import java.util.ArrayList;\npublic class UndoableList <T> extends ArrayList<T>{\n    public void undoLast() {\n        if (!this.isEmpty()) {\n            this.remove(this.size() - 1);\n        }\n    }\n\n    public T getLastAdded() {\n        if (!this.isEmpty()) {\n            return this.get(this.size() - 1);\n        }\n        return null;\n    }\n}\n"
    },
    {
      "id": "7732416",
      "Main.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection,\n                                                          boolean findMax) {\n        T extreme = null;\n        T[] t = (T[]) collection.toArray();\n        if (findMax){\n            for (int i = 0; i < collection.size()-1; i++) {\n                for (int j = i+1; j < collection.size(); j++) {\n                    if (t[i].compareTo(t[j]) > 0){\n                        extreme = t[i];\n                    }\n                }\n            }\n        }else{\n            for (int i = 0; i < collection.size()-1; i++) {\n                for (int j = i+1; j < collection.size(); j++) {\n                    if (t[i].compareTo(t[j]) < 0){\n                        extreme = t[i];\n                    }\n                }\n            }\n        }\n        return extreme;\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> newList = new ArrayList<>();\n        for (Object o : collection){\n            if (type.isInstance(o)){}\n                newList.add((T)o);\n        }\n        return newList;\n    }\n\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    T last = null;\n\n    @Override\n    public boolean add(T t) {\n        super.add(t);\n        last = t ;\n        return true;\n    }\n\n    public void undoLast(){\n        if (this.isEmpty())\n            return;\n        remove(last);\n    }\n    public T getLastAdded(){\n        return last ;\n    }\n}\n"
    },
    {
      "id": "6914659",
      "Utils.java": "import java.util.Collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\npublic class Utils{\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type){\n        List<T> f_l = new ArrayList<>();\n        for(Object eleman: collection){\n            if (type.isInstance(eleman)){\n                f_l.add(type.cast(eleman));\n            }\n        }\n        return f_l;\n    }\n    public static void main(String[] args){\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n}\n",
      "ExtremeFinder.java": "import java.util.Collection;\npublic class ExtremeFinder{\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax){\n        if(collection == null || collection.isEmpty()){ //bossa null don\n            return null;\n        }\n        T a = null;\n        for(T eleman: collection){\n            if(a == null){ // a bossa elemani a'ya ata\n                a = eleman;\n            } \n            else{ // a bos degilse b ile a'yi karsilastir\n                int b = eleman.compareTo(a);\n                if((findMax) && (b>0)){ // findMax true ise maksimumu doner\n                    a = eleman;\n                } \n                else if((!findMax) && (b<0)){ // findMax false ise minimumu doner\n                    a = eleman;\n                }\n            }\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n        java.util.List<Integer> numbers = java.util.Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));  // Çıktı: 9 (maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (minimum)\n    }\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\npublic class UndoableList<T> extends ArrayList<T>{\n    public void undoLast(){ // en son eklenen ogeyi kaldir\n        if(this.isEmpty()){ // liste bossa bir sey yapma\n            return;\n        }\n        else if(!this.isEmpty()){ //liste doluysa son ogeyi cikar\n            this.remove(this.size()-1);\n        }\n    }\n    public T getLastAdded(){ // son eklenen ogeyi listeyi degistirmeden dondur\n        if(!this.isEmpty()){ \n            return this.get(this.size()-1);\n        }\n        return null;\n    }\n    public static void main(String[] args){\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n}"
    },
    {
      "id": "8857652",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Q2 {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        Collections.sort((List<T>) collection);\n            if(findMax){\n                \n                return ((List<T>) collection).get(0);\n\n            }else{\n\n                return ((List<T>) collection).get(collection.size()-1);\n\n            }\n \n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        \n    }\n}\n",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n    //yeni bir list olusturup collecitoni cast ettikten sonra \n    //typei ayni istenen objeleri de sorted liste atmaya calistim\n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) { \n        //List<?> col = (List<?>) collection; \n\n        //List<T> col = (List<T>) collection;\n        \n        List<T> sorted =  new ArrayList<>();\n        for(Object obj : collection){\n            if(obj.getClass().equals(type.getClass()))//obj.getClass().getName().equals(type.getClass().getName())){\n                sorted.add((T) obj);\n            }       \n         \n\n        //obj.getClass().getSimpleName().equals(type)\n         return (List<T>) sorted;\n \n    }\n\n\n\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T>{\n    //private UndoableList<T> list;\n\n    public void undoLast(UndoableList<T> list){\n        if(list.size()<1){\n            return;\n        }else{\n            list.removeLast();\n        }\n        \n    }\n\n    public void getLastAdded(UndoableList<T> list){\n        System.out.println(list.getLast());\n    }\n\n    \n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.undoLast(list);\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.getLastAdded(list);\n        list.undoLast(list); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n\n    }\n\n\n    \n\n}\n"
    },
    {
      "id": "5628146",
      "TypeFilter.java": "package quiz4;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class TypeFilter {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> list = new ArrayList<>();\n        for (Object obj : collection) {\n            if (type.isInstance(obj)) {\n                list.add(type.cast(obj)); \n            }\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        List<Object> mixed = java.util.Arrays.asList(1, \"hello\", 2.5, \"world\", 3);\n        System.out.println(filterByType(mixed, String.class));  // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n        \n    }\n}\n\n",
      "ExtremeFinder.java": "package quiz4;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\npublic class ExtremeFinder {\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (collection == null || collection.isEmpty()) {\n            return null; \n        }\n\n        Iterator<T> iterator = collection.iterator();\n        T extreme = iterator.next(); // ilk eleman\n\n        while (iterator.hasNext()) {\n            T current = iterator.next();\n            if (findMax) {\n                if (current.compareTo(extreme) > 0) {\n                    extreme = current; \n                }\n            } \n            else {\n                if (current.compareTo(extreme) < 0) {\n                    extreme = current; \n                }\n            }\n        }\n\n        return extreme;\n    }\n\n    public static void main(String[] args) {\n        java.util.List<Integer> numbers = java.util.Arrays.asList(10,12,15,1,5,4,33);\n        System.out.println(findExtreme(numbers, true));  // max için 33\n        System.out.println(findExtreme(numbers, false));  // min için 1\n    } \n}\n\n",
      "UndoableList.java": "package quiz4;\n\nimport java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n    public void undoLast() {\n        if (!this.isEmpty()) {\n            this.remove(this.size() - 1);\n        }\n    }\n\n    public T getLastAdded() {\n        if (!this.isEmpty()) {\n            return this.get(this.size() - 1);\n        }\n        return null; \n    }\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.undoLast(); // liste boş ve hata vermiyor.\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        System.out.println(list.getLastAdded()); // Listeye bir şey yapmadan son eklenen C yi basıyor.\n        list.undoLast();  //C 'yi kaldırdım\n        System.out.println(list);  // Çıktı: [A, B]\n    } \n\n}\n\n"
    },
    {
      "id": "6094496",
      "Main.java": "package lab11;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\" Listelere ögeler ekleniyor ve siliniyor\");\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        System.out.println(\"Liste: \" + list); // \"A\" \"B\" \"C\"\n        list.undoLast();  // undolast son ögeyi siliyor son ögemiz C silinecek\n        System.out.println(\"undolast sonrası liste: \" + list); // \"A\", \"B\"\n        \n\n        System.out.println(\"\\n en büyük ve küçük ögeyi bulmaya hazırlanalım...\");\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(\"Liste: \" + numbers);   // Liste: [3,9,1,6]\n        System.out.println(\"Maksimum: \" + findMaxMin.findExtreme(numbers, true)); // findMax true olduğu için en büyük dönücek collections max 9(maksimum)\n        System.out.println(\"Minimum: \" + findMaxMin.findExtreme(numbers, false)); // findMax false olduğu için en küçük dönücek collections min  1(minimum)\n\n        System.out.println(\"\\n  Öğeler Filtreneleniyor...\");\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(\"Karışık Liste: \" + mixed);\n        System.out.println(\"String'ler: \" + ogeFiltreleme.filterByType(mixed, String.class)); // [\"hello\", \"world\"]\n        System.out.println(\"Integer'lar: \" + ogeFiltreleme.filterByType(mixed, Integer.class)); // [1, 3]\n    }\n}\n",
      "ogeFiltreleme.java": "package lab11;\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class ogeFiltreleme {\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> result = new ArrayList<>();\n        for (Object obj : collection) {\n            if (type.isInstance(obj)) {\n                result.add(type.cast(obj));\n            }\n        }\n        return result;\n    }\n    \n}\n\n ",
      "findMaxMin.java": "package lab11;\n\n\n\n\t\nimport java.util.Collection;\n\timport java.util.Collections;\n \n\n\tpublic class findMaxMin {\n\t    public static <T extends Comparable<T>> Object findExtreme(Collection<T> collection, boolean findMax) {\n\t        if (collection.isEmpty()) {\n\t            return null;  // boşsa null döndürüyoruz\n\t        }\n\t        return findMax ? Collections.max(collection) : Collections.min(collection);  // findMax true olarak gelirse Collection.max devreye giricek  false gelirse Collection.min devreye giricek\n\t    }\n\n\t}  \n",
      "UndoableList.java": "package lab11;\n\n\n\n\timport java.util.ArrayList;\n\n\tpublic class UndoableList<T> extends ArrayList<T> {\n\t    /**\n\t\t * \n\t\t */\n\t\tprivate static final long serialVersionUID = 1L;    // eclipse kullandığım için hata böyle çözülüyor\n\t\tprivate T sonOge; // Son ögeyi tutuyoruz\n\n\t    @Override\n\t    public boolean add(T oge) {\n\t        sonOge = oge; // Son eklenen öğeyi saklıyoruz\n\t        return super.add(oge);\n\t    }\n\n\t    public void undoLast() {\n\t        if (!isEmpty()) {\n\t            remove(size() - 1); // son eklenen ögeyi kaldırırız\n\t        }\n\t    }\n\n\t    public T getLastAdded() {\n\t        return sonOge; // Son eklenen öğeyi döndürürüz\n\t    }\n\t}\n\n"
    },
    {
      "id": "1889298",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q2 {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        if (findMax){\n            T[] a = collection.toArray(a);\n            T max = new T();\n            for(int i = 0;i<a.length;i++){\n                if(i==0){\n                    max = a[i];\n                }\n                if(a[i].compareTo(max)<0){\n                    max = a[i];\n                }\n                \n            }\n            return min;\n        }\n\n        if (!findMax){\n            T[] a = collection.toArray(a);\n            T min = new T();\n            for(int i = 0;i<a.length;i++){\n                if(i==0){\n                    min = a[i];\n                }\n                if(a[i].compareTo(min)<0){\n                    min = a[i];\n                }\n                \n            }\n            return min;\n        }\n\n      \n    }\n}\n\n",
      "Q1.java": "import java.util.ArrayList;\n\npublic class Q1 {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n}\n\nclass UndoableList<T> extends ArrayList {\n    public void undoLast(){\n        if(this.isEmpty()==true){\n            System.out.println(\"ArrayList boş\");\n        }\n\n        if(this.isEmpty()==false){\n            this.remove(this.size()-1);\n        }\n    }\n\n    public T getLastAdded() {return this.get(this.size()-1);}\n\n    \n}",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        ArrayList<> list = new ArrayList<>();\n        if(collection.iterator().getClass().equals(type)){\n            list.add();\n        }\n\n    }\n}\n"
    },
    {
      "id": "2179244",
      "Quiz4.java": "import java.util.*;\n//DELFİN KÜTÜKCÜ\npublic class Quiz4{\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(\"---SORU1---\");\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n\n        System.out.println(\"---SORU2---\");\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        System.out.println(\"---SORU3---\");\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\n    }\n    //Q1\n    static class UndoableList<T> {\n    \n        private Stack<T> undoStack = new Stack<>();\n        \n        public void add(T item) {\n            list.add(item);\n            undoStack.push(item);\n        }\n        private List<T> list = new ArrayList<>();\n    \n        public void undoLast(){\n            if(!list.isEmpty()){\n                list.remove(list.size()-1);\n            }\n        }\n        public T getLastAdded(){\n            return list.get(list.size()-1);\n        }\n        public List<T> getList() {\n            return list;\n        }\n        @Override\n        public String toString() {\n            return list.toString();\n        }\n    }\n        \n        // Q2\n        public static <T extends Comparable<T>> T findExtreme(List<T> collection, boolean findMax) {\n            if (collection == null || collection.isEmpty()) {\n                throw new IllegalArgumentException(\"Collection cannot be null or empty\");\n            }\n            return findMax ? Collections.max(collection) : Collections.min(collection);\n        }\n        //Q3\n        public static <T> List<T> filterByType(List<?> collection, Class <T> type){\n            List<T> result= new ArrayList<>();\n            for(Object obj: collection){\n                if(type.isInstance(obj)){\n                    result.add(type.cast(obj));\n                }\n            }\n            return result;\n        }\n     \n    \n}"
    },
    {
      "id": "5281670",
      "Main.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6,11,13,0,89,-1);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, \"sanane\" , 33,true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\n\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection,boolean findMax) {\n        //comparable comprareTo kullancan unutma \n        if(collection.isEmpty()){\n            return null;\n        }\n    \n        ArrayList<T> liste = new ArrayList<>(collection);\n        T karsilastir = liste.get(0);\n\n        for(int i  = 1; i < liste.size(); i++){\n    \n            \n            if(findMax && liste.get(i).compareTo(karsilastir) > 0){\n                \n                karsilastir = liste.get(i); \n            }\n    \n            else if(!findMax && liste.get(i).compareTo(karsilastir) < 0){\n                karsilastir = liste.get(i);\n            }\n        } \n        return karsilastir;\n    }\n      \n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n\n        ArrayList<T> res = new ArrayList<>();\n\n        for (Object obj : collection) {\n            if (type.isInstance(obj)) {\n                \n                res.add((T)(obj));\n            }\n        }\n        return res;\n    }\n\n        \n}\n\nclass UndoableList<T> extends ArrayList<T> {\n\n    public void undoLast() {\n\n        if (!this.isEmpty()) {\n            this.remove(this.size() - 1);\n        }\n    }\n\n    public T getLastAdded() {\n\n        if (!this.isEmpty()) {\n            return this.get(this.size() - 1);\n        }\n        else{\n            return null;\n        }\n    }\n}\n\n\n"
    },
    {
      "id": "9167236",
      "Main.java": "import java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    \n    public static void main(String[] args) {    \n        System.out.println();\n\n        //------------------------------------- [Q - 1] -------------------------------------\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast(); \n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n        System.out.println();\n        \n        //------------------------------------- [Q - 2] -------------------------------------\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(UndoableList.findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(UndoableList.findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n        System.out.println();\n\n        //------------------------------------- [Q - 3] -------------------------------------\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(UndoableList.filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(UndoableList.filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n        System.out.println();\n    }\n\n\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class UndoableList<T> extends ArrayList<T>{\n    \n    public UndoableList(){\n        super();\n    }\n\n    public void undoLast(){\n        if(!this.isEmpty()){\n            this.remove(this.size()-1);\n        }\n    }\n\n    public Object getLastAdded(){\n        return this.get(this.size()-1);\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        \n        if(collection.isEmpty()){\n            return null;\n        }\n\n        if(findMax){\n            T max = collection.iterator().next();\n            for(T item : collection){\n                if(item.compareTo(max) > 0){\n                    max = item;\n                }\n            }\n            return max;\n        }else{\n            T min = collection.iterator().next();\n            for(T item : collection){\n                if(item.compareTo(min) < 0){\n                    min = item;\n                }\n            }\n            return min;\n        }\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        \n        if(collection.isEmpty()){\n            return null;\n        }\n\n        List<T> filteredList = new ArrayList<>();\n\n        for(Object item : collection){\n            if(type.isInstance(item)){\n                filteredList.add(type.cast(item));\n            }\n        }\n    \n        return filteredList;\n    }\n\n}\n"
    },
    {
      "id": "2384475",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class Q2 {\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection,\n            boolean findMax) {\n        T value = null;\n\n        if (findMax == true) {\n            value = Collections.max(collection);\n        } else if (findMax == false) {\n            value = Collections.min(collection);\n        }\n        return value;\n\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        System.out.println();\n\n        List<Integer> numbers2 = Arrays.asList(3, 9, 1, 6, 15, 12, 20, 0);\n        System.out.println(findExtreme(numbers2, true)); // Çıktı: 20 (Maksimum)\n        System.out.println(findExtreme(numbers2, false)); // Çıktı: 0 (Minimum)\n\n    }\n\n}\n",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> col = (List<T>) collection;\n        List<T> lst = new ArrayList<>();\n        for (int i = 0; i < col.size(); i++) {\n            T value = col.get(i);\n            Class<T> colType = (Class<T>) value.getClass();\n            if (colType == type) {\n                lst.add(value);\n            }\n\n        }\n        return lst;\n\n    }\n\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        List<Object> mixed2 = Arrays.asList(2, \"melih\", 5.5, \"/meltla/\", 7, true, \"türker\", false);\n\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n        System.out.println(filterByType(mixed, Boolean.class));\n        System.out.println(filterByType(mixed, Double.class));\n\n        System.out.println();\n\n        System.out.println(filterByType(mixed2, String.class));\n        System.out.println(filterByType(mixed2, Integer.class));\n        System.out.println(filterByType(mixed2, Boolean.class));\n        System.out.println(filterByType(mixed2, Double.class));\n    }\n\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList<T> {\n\n    public void undoLast() {\n        if (size() == 0) {\n            return;\n        } else {\n            remove(size() - 1);\n        }\n\n    }\n\n    public T getLastAdded() {\n\n        return get(size() - 1);\n\n    }\n\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        UndoableList<String> list2 = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.add(\"D\");\n        list.add(\"E\");\n        list.add(\"F\");\n        list.add(\"G\");\n        System.out.println(list.getLastAdded());\n        list.undoLast(); // \"G\" kaldırılmalı\n        System.out.println(list);\n        System.out.println(list.getLastAdded());\n        System.out.println(list);\n        list2.undoLast();// Hata vermemeli\n    }\n\n}\n"
    },
    {
      "id": "5187413",
      "Generic.java": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Generic {\n    @SuppressWarnings(\"unchecked\")\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        Iterator<T> i = collection.iterator();\n\n        if (findMax) {\n            T max = i.next();\n            while (i.hasNext()) {\n\n                if (i.next().compareTo(max) > 0) {\n                    max = i.next();\n\n                }\n\n            }\n\n            return max;\n        } else {\n            T min = i.next();\n            while (i.hasNext()) {\n\n                if (i.next().compareTo(min) > 0) {\n                    min = i.next();\n\n                }\n\n            }\n            return min;\n\n        }\n\n    }\n\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        List<T> newList = new ArrayList<T>();\n        Iterator<?> i = collection.iterator();\n        while (i.hasNext()) {\n            if (i.next().getClass().equals(type)) {\n                newList.add((T) i.next());\n            }\n\n        }\n        return newList;\n    }\n\n}\n",
      "test.java": "import java.util.Arrays;\nimport java.util.List;\n\npublic class test {\n    public static void main(String[] args) {\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n\n        System.out.println(list.getLastAdded());\n\n        list.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(list); // Çıktı: [\"A\", \"B\"]\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n\n        System.out.println(Generic.findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(Generic.findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(Generic.filterByType(mixed, String.class)); // Çıktı: [\"hello\",\"world\"]\n        System.out.println(Generic.filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n\n    }\n}\n",
      "UndoableList.java": "import java.util.ArrayList;\n\npublic class UndoableList<T> extends ArrayList {\n\n    public UndoableList() {\n\n    }\n\n    public void undoLast() {\n        if (!this.isEmpty()) {\n            this.remove(this.getLastAdded());\n        }\n\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public T getLastAdded() {\n\n        Object e = this.get(this.size() - 1);\n        T item = (T) e;\n        return item;\n    }\n\n}\n"
    },
    {
      "id": "9245287",
      "Q2.java": "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q2 {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true)); // Çıktı: 9 (Maksimum)\n        System.out.println(findExtreme(numbers, false)); // Çıktı: 1 (Minimum)\n    }\n\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection, boolean findMax) {\n        T answer = null;\n        if (collection.isEmpty()) {\n            return answer;\n        }\n        if (findMax) {\n            for (T i : collection) {\n                if (answer == null) {\n                    answer = i;\n                }\n                if (i.compareTo(answer) >= 0) {\n                    answer = i;\n                }\n            }\n        } else {\n            for (T i : collection) {\n                if (answer == null) {\n                    answer = i;\n                }\n                if (i.compareTo(answer) <= 0) {\n                    answer = i;\n                }\n            }\n        }\n        return answer;\n    }\n}\n",
      "Q1.java": "import java.util.ArrayList;\n\npublic class Q1 {\n    public static void main(String[] args) {\n        UndoableList<String> listem = new UndoableList<>();\n        listem.add(\"A\");\n        listem.add(\"B\");\n        listem.add(\"C\");\n        listem.undoLast(); // \"C\" kaldırılmalı\n        System.out.println(listem); // Çıktı: [\"A\", \"B\"]\n    }\n}\n\nclass UndoableList<T> extends ArrayList<T> {\n    private T lastAdded;\n\n    @Override\n    public boolean add(T element) {\n        lastAdded = element;\n        return super.add(element);\n    }\n\n    public void undoLast() {\n        if (!isEmpty()) {\n            remove(this.size() - 1);\n        }\n    }\n\n    public T getLastAdded() {\n        return lastAdded;\n    }\n}\n",
      "Q3.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Q3 {\n    public static void main(String[] args) {\n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class)); // Çıktı: [\"hello\", \"world\"]\n        System.out.println(filterByType(mixed, Integer.class)); // Çıktı: [1, 3]\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type) {\n        // Metodu tamamlayın\n        List<T> arrList = new ArrayList<>();\n        for (Object item : collection) {\n            if (type.isInstance(item)) {\n                arrList.add((T) item);\n            }\n        }\n        return arrList;\n    }\n\n}\n"
    },
    {
      "id": "6418019",
      "Quiz4.java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Quiz4 {\n    public static void main(String[] args) {\n\n        UndoableList<String> list = new UndoableList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        list.undoLast();\n        System.out.println(list);\n\n        List<Integer> numbers = Arrays.asList(3, 9, 1, 6);\n        System.out.println(findExtreme(numbers, true));\n        System.out.println(findExtreme(numbers, false));\n        \n        List<Object> mixed = Arrays.asList(1, \"hello\", 2.5, \"world\", 3, true);\n        System.out.println(filterByType(mixed, String.class));\n        System.out.println(filterByType(mixed, Integer.class));\n    }\n\n    //soru 2\n    public static <T extends Comparable<T>> T findExtreme(Collection<T> collection,boolean findMax){\n        \n        if(collection.isEmpty()== true){\n            return null;\n        }\n\n        T ext = null;\n        for (T element : collection) {\n            if (ext == null){\n                ext = element;\n            } \n            else{\n                if(findMax) {\n                    if(element.compareTo(ext) > 0){\n                        ext = element;\n                    }\n                }\n                else if(!findMax){\n                    if(element.compareTo(ext) < 0){\n                        ext = element;\n                    }\n                }\n            }\n        }\n        return ext;\n    }\n\n    //soru 3\n    public static <T> List<T> filterByType(Collection<?> collection, Class<T> type){\n\n        if(collection.isEmpty() == true){\n            return null;\n        }\n\n        List<T> filtered = new ArrayList<>();\n        for(Object o : collection){\n            if(type.isInstance(o)){\n                filtered.add((T) o);\n            }\n        }\n\n        return filtered;\n    }\n    \n}\n\n//soru 1\nclass UndoableList<T> extends ArrayList<T>{\n\n    public void undoLast(){\n        this.remove(getLast());\n    }\n\n    public T getLastAdded(){\n        if(this.isEmpty()){\n            return null;\n        }\n        else{\n            return this.getLast();\n        }\n    }\n}\n"
    }
  ]
}