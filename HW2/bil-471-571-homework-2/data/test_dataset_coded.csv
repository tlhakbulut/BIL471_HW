id,answers
4380745,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3{[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac sayac = [CODE]new sayac(""100101111101010"");[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); system.out.println(sayac.say()); } } [CODE]public class lab1q2{[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] arr1 = {[/CODE]1,8,9,12,7,3,45,10}; [CODE]int[] arr2 = {[/CODE]5,4,1,2}; cocktailsort(arr2); [CODE]for(int i = 0;[/CODE] i < arr2.length; i++){ system.out.pr[CODE]intln(arr2[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] cocktailsort(arr, 0, arr.length-1); } [CODE]public static void cocktailsort(int[] arr, int i, int j){[/CODE] boolean fsflag = [CODE]forwardsort(arr, i, j, false);[/CODE] [CODE]if(!fsflag){[/CODE] [CODE]return;[/CODE] } boolean bsflag = backsort(arr, i, j, false); [CODE]if(!bsflag){[/CODE] [CODE]return;[/CODE] } cocktailsort(arr, i+1, j-1); } [CODE]public static void swap(int[] arr, int i, int j){[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[j]; arr[j] = temp; [CODE]return;[/CODE] } [CODE]public static boolean forwardsort(int[] arr, int i, int j, boolean flag){[/CODE] [CODE]if(i == j){[/CODE] [CODE]return flag;[/CODE] } [CODE]if(arr[i] >= arr[i+1]){[/CODE] swap(arr, i, i+1); flag = true; } [CODE]return forwardsort(arr, i+1, j, flag);[/CODE] } [CODE]public static boolean backsort(int[] arr, int i, int j, boolean flag){[/CODE] [CODE]if(j == i){[/CODE] [CODE]return flag;[/CODE] } [CODE]if(arr[j - 1] >= arr[j]){[/CODE] swap(arr, j, j-1); flag = true; } [CODE]return backsort(arr, i, j-1, flag);[/CODE] } } [CODE]public class sayac{[/CODE] [CODE]public string input;[/CODE] [CODE]public sayac(string input){[/CODE] this.input = input; } [CODE]public int say(){[/CODE] [CODE]return sayrecursive(0);[/CODE] } [CODE]public int sayrecursive(int index){[/CODE] if(index >= input.length()){ [CODE]return 0;[/CODE] } if(input.charat(index) == '1'){ [CODE]return 1 + sayrecursive(index + 1);[/CODE] } [CODE]else{[/CODE] [CODE]return sayrecursive(index + 1);[/CODE] } } } [CODE]public class lab1q1{[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(2));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i%2 == 0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else{[/CODE] [CODE]return 1 + collatz(3*i + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.list; import java.util.random;; [CODE]public class bil211l2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki == null){[/CODE] continue; } [CODE]if(sarki instanceof metalsarki){[/CODE] ((metalsarki)sarki).gostermetalozellikler(); } } } } abstract [CODE]class sarki {[/CODE] protected [CODE]string isim;[/CODE] protected [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]interface calmastratejisi{[/CODE] abstract [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] this.isim = [CODE]new string(isim);[/CODE] this.sanatci = [CODE]new string(sanatci);[/CODE] this.metalozellik = [CODE]new string(metalozellik);[/CODE] } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + metalozellik +"")"");[/CODE] } [CODE]public void gostermetalozellikler(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik +""]"");[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] this.isim = [CODE]new string(isim);[/CODE] this.sanatci = [CODE]new string(sanatci);[/CODE] } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + ""huzurlu ve nostaljik"" +"")"");[/CODE] } } [CODE]class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] this.isim = [CODE]new string(isim);[/CODE] this.sanatci = [CODE]new string(sanatci);[/CODE] } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" ("" + ""hafif ve sakin"" +"")"");[/CODE] } } [CODE]class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]string etiket;[/CODE] [CODE]for(sarki sarki: sarkilistesi){[/CODE] [CODE]if(sarki == null){[/CODE] continue; } [CODE]if(sarki instanceof metalsarki){[/CODE] etiket = ""[metal]""; } [CODE]else if(sarki instanceof rocksarki){[/CODE] etiket = ""[rock]""; } [CODE]else{[/CODE] etiket = ""[klasik]""; } system.out.pr[CODE]int(etiket + "" "");[/CODE] sarki.oynat(); } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] random random = [CODE]new random(666);[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]string etiket;[/CODE] list<sarki> sarkilistesi_ = [CODE]new arraylist<>();[/CODE] [CODE]for(sarki sarki: sarkilistesi){[/CODE] [CODE]if(sarki == null){[/CODE] continue; } sarkilistesi_.add(sarki); } while(sarkilistesi_.size() > 0){ int index = random.nextint(sarkilistesi_.size()); if(sarkilistesi_.get(index) == null){ sarkilistesi_.remove(index); continue; } if(sarkilistesi_.get(index) instanceof metalsarki){ etiket = ""[metal]""; } else if(sarkilistesi_.get(index) instanceof rocksarki){ etiket = ""[rock]""; } [CODE]else{[/CODE] etiket = ""[klasik]""; } system.out.pr[CODE]int(etiket + "" "");[/CODE] sarkilistesi_.get(index).oynat(); sarkilistesi_.remove(index); } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] random random = [CODE]new random(666);[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]string etiket;[/CODE] [CODE]string mode = ""metal"";[/CODE] [CODE]for(sarki sarki: sarkilistesi){[/CODE] [CODE]if(sarki == null){[/CODE] continue; } [CODE]if(sarki instanceof metalsarki){[/CODE] etiket = ""[metal]""; if(mode.equals(""rock"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } mode = ""metal""; } [CODE]else if(sarki instanceof rocksarki){[/CODE] etiket = ""[rock]""; //degisti = mode.equals(""normal"") ? false : true; if(!mode.equals(""rock"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } mode = ""rock""; } [CODE]else{[/CODE] etiket = ""[klasik]""; //degisti = mode.equals(""normal"") ? false : true; if(mode.equals(""rock"")){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } mode = ""klasik""; } system.out.pr[CODE]int(etiket + "" "");[/CODE] sarki.oynat(); } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s){[/CODE] strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } metin karşılaştırıcı bil 211 - lab 3 20 şubat 2025 1 giriş bulaboratuvarda fileio ve exceptions kullanarakbir metinkarşılaştırıcı geliştireceğiz. metinkarşılaştırıcı , verilen iki metin dosyasını karşılaştırarak ikinci metnin yalnızca yeni satırlar eklenerek oluşturulup oluştu- rulmadığını kontrol edecek ve gerektiğinde hangi satırdan sonra hangi eklemelerin yapıldığını belirleyecektir. 2 genel program program, çalıştırılırken komut satırından iki dosya adı alacaktır: - orijinal metin dosyası (ilk argüman) - değiştirilmiş metin dosyası (ikinci argüman) program şu şekilde çalıştırmalıdır (burada köşeli parantezler yerine dosyaların asıl adı gelmeli): java metinkarsilastirici [orijinal.txt] [degistirilmis.txt] program, ilk argümanda verilen dosyayı orijinal metin, ikinci argümandaki dosyayı değiştirilmiş metin olarak kabul edecek ve yalnızca yeni satırlar eklenerek oluşturulup oluşturulmadığını kontrol edecektir. eğer mümkünse, hangi satırdan sonra hangi eklemelerin yapıldığını tespit ederek bir çıktı dosyasına yazacaktır: -farklar.txt – yeni satırların hangi satırdan sonra eklendiğini gösteren çıktı dosyası. eğer dosya adları eksikse veya hatalı formatta verilmişse, program özel bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosyaokumaveyazmaişlemleriiçinjava’nın java.io paketindekisınıflarıkullanacaktır(örn., buf- ferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. program, aşağıdaki olası dosya hatalarını atmalı ve stderr’e belirlenen hata mesajlarını yazmalıdır: - dosya bulunamıyorsa: ""hata: [dosya adı] bulunamadı."" - dosya boşsa: ""hata: [dosya adı] boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: 1 - yanlisargumanexception (extends inputexception): argümanlar eksik ya da fazlaysa atılacak hata. burada[argümanlar] yerine programın çalıştırıldığı argüman listesi yazılmalıdır. - hata mesajı: ""hata: hatalı argüman kullanımı: [argümanlar]. program argüman olarak 2 dosya ismi almalı."" - dosyabulunamadiexception (extends inputexception): dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" - bosdosyaexception (extends inputexception): dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 geçersiz değişiklik hatası (gecersizdegisiklikexception class) eğerdegistirilmis.txt dosyası,orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulamıy- orsa, program gecersizdegisiklikexception hatasını atmalıdır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: hata: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. 5 dosya formatları 5.1 girdi dosyaları 5.1.1orijinal.txt vedegistirilmis.txt formatı bu dosyalar, her satırın ayrı bir metin satırı olduğu düz metin formatında olmalıdır. örnek i̇çerik ( orijinal.txt ): merhaba dünya. bu bir test dosyasıdır. son satır budur. örnek i̇çerik ( degistirilmis.txt ): merhaba dünya. bu bir test dosyasıdır. eklenen yeni bir satır. son satır budur. yeni bir satır daha eklendi. 5.2 çıktı dosyası 5.2.1farklar.txt formatı farklar.txt dosyası, hangi satırdan sonra hangi yeni satırın eklendiğini gösterecek şekilde yapılandırıl- malıdır: örnek çıktı ( farklar.txt ): 2 -> eklenen yeni bir satır. 4 -> yeni bir satır daha eklendi. burada ‘2 ->‘ ifadesi, ""2. satırdan sonra eklenmiştir"" anlamına gelir. eğer aynı yere birden fazla satır eklenmişse aynı sayıyı tekrar ederek eklenme sırasında yazılmalı. 5.3 özel hata durumları ve çıktıları eğerdegistirilmis.txt ,orijinal.txt üzerine sadece yeni satırlar eklenerek oluşturulmamışsa stderr’e şu mesaj yazılmalıdır: hata: degistirilmis.txt dosyası, orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. eğer dosya adları eksikse veya hatalıysa, stderr’e şu mesaj yazılmalıdır: hata: geçersiz dosya adı. 2 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterleri temsil eden bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regexp) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java [CODE]string sınıfı metotları 3 package bil211lab3;[/CODE] [CODE]public class gecersizdegisiklikexception extends exception {[/CODE] [CODE]public gecersizdegisiklikexception(string degistirilmis, string original){[/CODE] super(""hata: ["" + degistirilmis + ""] dosyası, ["" + original + ""] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış.""); } } [CODE]package bil211lab3;[/CODE] [CODE]public class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception(string filename) {[/CODE] super(""hata: ["" + filename + ""] boş""); } } [CODE]package bil211lab3;[/CODE] [CODE]public class yanlisargumanexception extends inputexception {[/CODE] // buraya göndermeden args -> msg dönüşümü yapılmalı [CODE]public yanlisargumanexception(string message) {[/CODE] super(""hata: hatalı argüman kullanımı: "" + message + "". program argüman olarak 2 dosya ismi almalı""); } } [CODE]package bil211lab3;[/CODE] import java.io.file; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.ioexception; import java.io.pr[CODE]intstream;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class metinkarsilastirici {[/CODE] [CODE]static arraylist<integer> indexlist = new arraylist<>();[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]try {[/CODE] method(args); } [CODE]catch (throwable e) {[/CODE] system.err.println(e.getmessage()); } } [CODE]public static void method(string[] args) throws throwable{[/CODE] if(args.length != 2){ [CODE]string message = """";[/CODE] [CODE]for(string str:args){[/CODE] message += str + "", ""; } throw [CODE]new yanlisargumanexception(message);[/CODE] } file file = new file(""farklar.txt""); if(file.create[CODE]newfile()){[/CODE]} system.setout([CODE]new printstream(new fileoutputstream(file)));[/CODE] filehandler(args[0], args[1]); } [CODE]public static void filehandler(string original, string degistirilmis) throws throwable{[/CODE] file originalfile = [CODE]new file(original);[/CODE] file degistirilmisfile = [CODE]new file(degistirilmis);[/CODE] fileinputstream originalinput; fileinputstream degistirilmisinput; [CODE]try{[/CODE] originalinput = [CODE]new fileinputstream(originalfile);[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new dosyabulunamadiexception(original);[/CODE] } [CODE]try{[/CODE] degistirilmisinput = [CODE]new fileinputstream(degistirilmisfile);[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new dosyabulunamadiexception(degistirilmis);[/CODE] } if(originalfile.length() <= 0){ throw [CODE]new bosdosyaexception(original);[/CODE] } if(degistirilmisfile.length() <= 0){ throw [CODE]new bosdosyaexception(degistirilmis);[/CODE] } [CODE]string originalline = null;[/CODE] [CODE]string degistirilmisline = null;[/CODE] scanner originalscanner = [CODE]new scanner(originalinput);[/CODE] scanner degistirilmisscanner = [CODE]new scanner(degistirilmisinput);[/CODE] [CODE]int index = 0;[/CODE] while(originalscanner.hasnextline()){ index++; originalline = originalscanner.nextline(); if(degistirilmisscanner.hasnextline()){ degistirilmisline = degistirilmisscanner.nextline(); } [CODE]else{[/CODE] degistirilmisline = null; } while(!originalline.equals(degistirilmisline) && degistirilmisline != null){ indexlist.add(index); if(degistirilmisscanner.hasnextline()){ degistirilmisline = degistirilmisscanner.nextline(); } [CODE]else{[/CODE] degistirilmisline = null; } } [CODE]if(degistirilmisfile == null){[/CODE] throw [CODE]new gecersizdegisiklikexception(degistirilmisline, originalline);[/CODE] } } while(degistirilmisscanner.hasnextline()){ indexlist.add(index); degistirilmisscanner.nextline(); } boolean flag = true; [CODE]for(int i:indexlist){[/CODE] [CODE]if(flag){[/CODE] system.out.pr[CODE]intln(i + ""-> eklenen yeni bir satır"");[/CODE] flag = false; } [CODE]else{[/CODE] system.out.pr[CODE]intln(i + ""-> yeni bir satır daha eklendi"");[/CODE] } } originalscanner.close(); degistirilmisscanner.close(); originalinput.close(); degistirilmisinput.close(); } } [CODE]package bil211lab3;[/CODE] [CODE]public class inputexception extends exception {[/CODE] [CODE]public inputexception(string message){[/CODE] super(message); } } [CODE]package bil211lab3;[/CODE] [CODE]public class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(string filename) {[/CODE] super(""hata: ["" + filename + ""] bulunamadı""); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon [CODE]package bil211lab4;[/CODE] import java.util.arraylist; import java.util.list; [CODE]public class inventory<t extends item> {[/CODE] arraylist<t> inventory; [CODE]public inventory(){[/CODE] inventory = [CODE]new arraylist<>();[/CODE] } [CODE]public list<t> getinventory(){[/CODE] [CODE]return inventory;[/CODE] } [CODE]public void additem(t item){[/CODE] [CODE]if(inventory != null){[/CODE] inventory.add(item); } } [CODE]public void removeitem(t item){[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ if(inventory.get(i).getname().equals(item.getname())){ inventory.remove(i); break; } } } } [CODE]public void printinventory(){[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ system.out.println(""name: "" + inventory.get(i).getname()); system.out.println(""value: "" + inventory.get(i).getvalue()); } } } [CODE]public t mostvaluableitem(){[/CODE] t mvaluable = null; [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ if(mvaluable != null && mvaluable.getvalue() < inventory.get(i).getvalue()){ mvaluable = inventory.get(i); } [CODE]if(mvaluable == null){[/CODE] mvaluable = inventory.get(i); continue; } } } [CODE]return mvaluable;[/CODE] } [CODE]public t finditembyname(string name){[/CODE] t item = null; [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ if(inventory.get(i).getname().equals(name)){ item = inventory.get(i); break; } } } [CODE]return item;[/CODE] } [CODE]public arraylist<t> finditemsbyvalue(int value){[/CODE] arraylist<t> list = [CODE]new arraylist<>();[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ if(inventory.get(i).getvalue() > value){ list.add(inventory.get(i)); } } } [CODE]return list;[/CODE] } [CODE]public int gettotalvalue(){[/CODE] [CODE]int value =0;[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ value += inventory.get(i).getvalue(); } } [CODE]return value;[/CODE] } [CODE]public arraylist<t> filterbytype(class<?> type){[/CODE] arraylist<t> list = [CODE]new arraylist<>();[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ if(inventory.get(i).getclass().getname().equals(type.getname())){ list.add(inventory.get(i)); } } } [CODE]return list;[/CODE] } [CODE]public int gettotalweapondamage(){[/CODE] [CODE]int totaldamage = 0;[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ if(inventory.get(i) instanceof weapon){ totaldamage += ((weapon)inventory.get(i)).damage; } } } [CODE]return totaldamage;[/CODE] } [CODE]public void sortbyvalue(){[/CODE] [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.size(); i++){ [CODE]for(int j = 0;[/CODE] j < inventory.size() - 1; j++){ if(inventory.get(j).getvalue() < inventory.get(j + 1).getvalue()){ t temp = inventory.get(j); inventory.set(j, inventory.get(j + 1)); inventory.set(j + 1, temp); } } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory){[/CODE] item item = null; [CODE]if(inventory != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory.getinventory().size(); i++){ if(item != null && item.getvalue() < inventory.getinventory().get(i).getvalue()){ item = inventory.getinventory().get(i); } [CODE]if(item == null){[/CODE] item = inventory.getinventory().get(i); } } } [CODE]if(item != null){[/CODE] system.out.println(""name: "" + item.getname()); system.out.println(""value: "" + item.getvalue()); } } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> inventory2){[/CODE] [CODE]if(destination != null && inventory2 != null){[/CODE] [CODE]for(int i = 0;[/CODE] i < inventory2.getinventory().size(); i++){ destination.getinventory().add(inventory2.getinventory().get(i)); } } } } [CODE]package bil211lab4;[/CODE] [CODE]public class weapon implements item{[/CODE] [CODE]int damage = 10;[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.name = name; this.value = value; this.damage = damage; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]package bil211lab4;[/CODE] [CODE]public interface item {[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]package bil211lab4;[/CODE] [CODE]public class armor implements item{[/CODE] [CODE]int defense;[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]public armor(string name, int value, int defense){[/CODE] this.name = name; this.value = value; this.defense = defense; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]package bil211lab4;[/CODE] [CODE]public class potion implements item{[/CODE] [CODE]string effect;[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]public potion(string name, int value, string effect){[/CODE] this.name = name; this.value = value; this.effect = effect; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]package bil211lab4;[/CODE] import java.util.arraylist; [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] inventory<weapon> inventory1 = [CODE]new inventory<weapon>();[/CODE] inventory<item> inventory2 = [CODE]new inventory<item>();[/CODE] [CODE]for(int i = 0;[/CODE] i < 5; i++){ inventory1.additem([CODE]new weapon(""weapon"" + i, i,i));[/CODE] [CODE]if(i%3 == 0){[/CODE] inventory2.additem([CODE]new armor(""armor"" + i, i,i));[/CODE] } [CODE]else if(i%3 == 1){[/CODE] inventory2.additem([CODE]new potion(""potion"" + i, i, ""effect"" + i));[/CODE] } [CODE]else{[/CODE] inventory2.additem([CODE]new weapon(""weapon"" + i, i, i));[/CODE] } } //inventory1.pr[CODE]intinventory();[/CODE] //inventory2.pr[CODE]intinventory();[/CODE] //inventory1.removeitem(inventory1.getinventory().get(2)); //inventory1.pr[CODE]intinventory();[/CODE] //item item = inventory2.mostvaluableitem(); //system.out.println(""name: "" + item.getname()); //system.out.println(""value: "" + item.getvalue()); //item item = inventory2.finditembyname(""potion4""); //system.out.pr[CODE]intln(item);[/CODE] //arraylist<item> list = inventory2.finditemsbyvalue(2); //[CODE]for(int i = 0;[/CODE] i < list.size(); i++){ // system.out.println(list.get(i).getname()); // system.out.println(list.get(i).getvalue()); //} //system.out.println(inventory1.gettotalweapondamage()); //system.out.println(inventory1.gettotalvalue()); //arraylist<item> list = inventory2.filterbytype(potion.[CODE]class);[/CODE] //[CODE]for(int i = 0;[/CODE] i < list.size(); i++){ // system.out.println(list.get(i).getname()); // system.out.println(list.get(i).getvalue()); //} //inventory2.sortbyvalue(); //inventory2.pr[CODE]intinventory();[/CODE] //inventory.pr[CODE]intmostvaluableitem(inventory2);[/CODE] //inventory<armor> inventory3 = [CODE]new inventory<armor>();[/CODE] //inventory3.additem([CODE]new armor(""a1"",1,1));[/CODE] //inventory3.additem([CODE]new armor(""a2"",2,2));[/CODE] //inventory3.additem([CODE]new armor(""a3"",3,3));[/CODE] //inventory3.additem([CODE]new armor(""a4"",4,4));[/CODE] //inventory<armor> inventory4 = [CODE]new inventory<armor>();[/CODE] //inventory.transferarmor(inventory4, inventory3); //inventory4.pr[CODE]intinventory();[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. matematikteki induction’ın proglama dünyasındaki hali recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. recursion’dan çıkış koşuludur. olmazsa sonsuz recursion’a girilir bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? index’i 0 olqcak şekilde ve başlatmayı string uzunluğunun bir eksiğinden itibaren olacak şekilde stringi gezen bir recursive metot yazılır recursive bir metotta base case olmazsa ne olur? sonsuz döngüye girer recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. stackde önceki bulununan durumun üstüne doğru yeni parametrelerle yeni durum yazılır ve hali hazırda üzerinde bulunulan fonksiyonlar bittikçe eki değerlere dönülerek veriler işlenerek önceki metotda döndürülmüş olur fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. çünkü aynı değerler tekrar ve tekrar hesaplanır tail recursion nedir, kısaca açıklayınız. ? abstraction kavramını açıklayınız. soyutlama, kodun birbirleriyle etkileşime girmesi gereken kısımları birbirinden ayırarak aralarındaki etkileşimi daha iyi yönetmemizi sağlayan kavram ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? extend yapılarak kalıtım ile oluşan ilişki türi bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? default ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya c olabilir java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? evet çünkü hiçbir kalıtım yapılmamış sınıfları java object classı ile extend eder. zaten inheritance yapılmışlar için super çağrılır java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? mümkün değildir metot overriding ve overloading kavramlarını açıklayınız. overriding inheritance yapıldığında kalıtım ile gelen sınıfın metot signature’ı korunurken içeriğinin değiştirilmesidir. overloading aynı isme sahip fonksiyonların farklı signature a sahip olması sağlanarak o fonksiyonun gerekli olan çeşitli versiyonlarının yaratılmasıdır [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? hangi metodun hangi versiyonunun kullanılacağının belirlenmesidir. i̇ki tipi bardır: statik ve dinamik hangi tür metotlarda [CODE]static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? overload edilen metotlarda statik, override edilenlerde dinamik binding kullanılır dinamik bağlamada jvm'nin görevi nedir? runtime esnasında metodun hangi versiyonunun kullanılacağına karar vermek java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? başlangıçta metotları yükleme aşaması olmaz ve bir statik metoda ihtiyaç duyulduğu zaman kullanılamazdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? ? java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. edilemez çünkü kalıtımda üstteki [CODE]class’ın hakları kadar alt class’lara kadar aktarılabilir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meow dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? parent p = new child() kısmında parent olduğunu söylüyoruz javaya p’nin ama parent’da olmayan bir metot çağrılıyor mnce child’a cast edilmeli dinamik binding child display child special java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇mplementasyon aşamasında eksik olan sınıftır abstract metotlar tanımlayabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? edilemez abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. temel sağlanması gereken bir şablon sunar, bu da bize abstract metotları, implemente edilmeye zorunlu bırakılan [CODE]class ve metotlar abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class’lar concrete metotlar içerebilir marker interface ve functional interface kavramları nedir, nasıl kullanılır? bir şeyin bir şey yapıp yapamayacağını belirten interfsce’ler vardır runnable gibi bir de belirli görevlerin nasıl gerçekleştirileceğinin ayarlanması gereken interface’ler olur bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden çok interface’i implemente edebilir. bir interface diğer interface’leri extend eder. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? a içindeki sound metodu implemente edilmemiş versiyonudur onun yerine dog nesnesi oluşturulup dog referanxı tutan bir variable’a verilmelidir output: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? i̇nterface içinde concrete metot oluşturulmuş swimmiable abstract class yapılıp flyable implemente edilmelidir output: swimming java'da inner class nedir, avantajları nelerdir? sınıf içindeki sınıflardır. bazı sistem tasarım mimarilerinde kullanılır. statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik olanlar ana class olmadan da yaşayabilirler diğerlerinin yaşamı dışarıdaki class’a bağlıdır anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? bir sınıf üzerinden yeni bir class yartmadan doğrudan kullanacağımız şekilde hangi class üzerinden yaratacaksak köşeli parantezler açılarak tanımlanır. concrete [CODE]class inner classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? erişebiliyor, bu sayede o ana nesneyi oluşturan builder tipi inner [CODE]class’lar yaratılıp constructor tasarım aşamasındaki karmaşanın önüne geçilebilir statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? tanımlanabilir, nesnenin yaratılmasına ihtiyaç duymaz statik tanımlamalar anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olabilir bu sayede anlık constructor override esilecekse yeni bir metot yazmadan anında anonim classlar ile kullanılabilir hangi tür inner classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? static inner class’lar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? outer.inner diye bir erişim olmaz doğrudan inner diye çağırması gerekir value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? derlenir, count: 5 text file ile binary file arasındaki fark nedir? text olarak yazılınca karakter karakter yazılıyor. binary olunca doğrudan veri byte byte yazılıyor bu sayede nesneler vb. yapılarda dosyalara yazılabiliyor. bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? düzenli veri akışının olduğu bir durumda okunması gereken önemli bir veri olduğu zaman veriyi doğru bir şekilde alınması için flush alınması gerekir. binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? evet markerdır. binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? type olarak ayrı ayrı yazılamaz, karakter karakter yazılır. bizim ayırmamız gerekir. buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? karakter karakter okunarak null değerin gelinceye kadar okunur binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? length’ine bakılır. [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] randomaccessfile raf = new randomaccessfile(""numbers.bin"", ""rw""); raf.write[CODE]int(10);[/CODE] raf.write[CODE]int(20);[/CODE] raf.seek(0); int a = raf.read[CODE]int();[/CODE] raf.seek(7); byte b = raf.readbyte(); system.out.pr[CODE]intln(a + "" "" + b);[/CODE] raf.close(); } } output? 10 10 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] [CODE]try{[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); pr[CODE]intwriter pw = new printwriter(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]catch(exception e){[/CODE] system.err(""oopps!""); } } } bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir, açıklayınız. new log entry yazar. sonra exception fırlatılır ve mesaage’ı oops! olan hata açılır what grade (a, b, c, d, or f) do you expect to earn by the end of this course? aa java'da generic kavramı nedir, bu kavramın temel amacı nedir? bir sınıf başka sınıflara göre değişmesi gerekiyorsa diye var olan bir özellik bir wildcard'ı ne zaman sınırlamaya ihtiyaç duyarsınız, sınırlandığı ve sınırlanmadığı durumlar için birer örnek veriniz. boundları hangi keywordlerle ifade edersiniz? sayılarla işlem yapılacaksa string gibi class’ların eklenmemesi gibi durumlarda kullanılır. extends ve super ile kısıtlama yapılır jenerik olmayan bir class jenerik bir metot içerebilir mi? açıklayınız. i̇çerebilir ancak metodun generic olduğunu belirtmek gerekebilir mygenericclass<integer> ve mygenericclass<number> classları arasında kalıtım(child-parent) ilişkisi nasıldır, açıklayınız. number integer’ın üst class’ı olduğundan dolayı integer’lar number generic’e yazılabilir. [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. generic sınıfınfan nesne üretilemez. [CODE]public _____________ {[/CODE] double sum = 0.0; [CODE]for (t item : list) {[/CODE] sum += item.doublevalue(); } return sum / list.size(); } [CODE]public static void main(string[] args) {[/CODE] list<integer> integers = arrays.aslist(1, 2, 3, 4); list<double> doubles = arrays.aslist(1.5, 2.5, 3.5); main m = [CODE]new main();[/CODE] system.out.pr[CODE]intln(average(integers));[/CODE] system.out.pr[CODE]intln(average(doubles));[/CODE] } yukarıda boşluk bırakılan yeri doldurun. not: metodun jenerik olduğuna, çağırılma biçimine ve jenerik tipine dikkat edin! boşluğu doldurduktan sonra programın çıktısı ne olur? static <t> int average(t[] list) aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve hepsini 1 defa sağa kaydıran metodu nasıl yazardınız, stratejiniz ne olurdu? peki ya n defa sağa kaydırma işlemini nasıl yapardınız? n defa kaydırma çözümünüz sizce optimal olan çözüm mü, neden? örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> a -> b ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node rotate(node head){[/CODE]...} her seferinde o nesnenin sağına kendisini sağının sağına kendisini derken recursive bir algortima yazardım. ve n zaman en iyi zamandır bu node yapısı için. arraylist ve linkedlist veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. arraylist’e index ile doğrudan erişilebilir. linkedlist elemanlarına sırasıyla erişilebiliyor. collections interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? ekleme çıkarma gibi temel list işlemlerini. kendi yazdığınız bir classta veri yapilarını istenilen şekilde (mesela hashset'te duplicate objelerin olmamasi) kullanabilmek için object classının hangi metotlarını override etmek gerekir, neden? hashcode override edilmeli ki iki nesneyi neye göre kıyaslayacağını kod bilebilsin bir dijital kütüphane uygulaması geliştiriyorsunuz. bu uygulamada, öğrenciler araştırma projeleri için kaynak ekliyor ve sistem, en son eklenen kaynağı ilk olarak görüntülemek üzere tasarlanıyor. öğrenciler, ekledikleri kaynakların boyut sırasına göre tekrar gözden geçebilmek istiyorlar. bu durumda, hangi veri yapısını tercih edersiniz? neden? stack kullanırım f[CODE]ifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue first in first out, lifo fifo fifo fifo public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] stack<[CODE]integer> stack = new stack<>();[/CODE] stack.push(10); stack.push(20); stack.push(30); system.out.println(stack.pop()); system.out.println(stack.peek()); system.out.println(stack.pop()); } } output? 30 20 20 [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 85); scores.put(""charlie"", 90); scores.put(""alice"", 100); system.out.println(scores.get(""alice"")); system.out.println(scores.size()); } } output? 95 4 ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 60 4. sütun option1 java gui uygulamalarında olayları yönetmek için bir programcının yapması gereken iki temel görev nedir? i̇mplementasyon, giriş-çıkışlar neden gui uygulamalarında system.exit(0) sıklıkla gerekli olurken, konsol uygulamalarında bu durum geçerli değildir? çünkü gui için çıkışta uygulamaların düzgünce kapatılması gerekir. return yeterli değildir gui tasarımında düzen yöneticilerinin (layout managers) amacı nedir ve bu yöneticiler geliştiricilere nasıl yardımcı olur? layoutları daha etkin ve kolay yönetmeye yardımcı olurlar. bu sayede daha hızlı ve doğru bir şekilde gliştirilebilir. jframe'de setdefaultcloseoperation metodunun işlevini açıklayın. uygulama kapanırken yapılacakları belirtir flowlayout ve gridlayout, bileşenleri düzenlemede nasıl farklılık gösterirler? birisi daha statik bir şekilde tanımlanırken diğeri daha esnektir aşağıdaki kodun çalışmasını izleyin ve jframe'de neyin görüntüleneceğini belirleyin: jframe frame = [CODE]new jframe(""test"");[/CODE] frame.setsize(300, 200); frame.setlayout([CODE]new borderlayout());[/CODE] jbutton northbutton = [CODE]new jbutton(""north"");[/CODE] jbutton centerbutton = [CODE]new jbutton(""center"");[/CODE] frame.add(northbutton, borderlayout.north); frame.add(centerbutton, borderlayout.center); northbutton.setvisible(false); frame.setvisible(true); ortada center yazılı bir buton aşağıdaki kod parçasını göz önünde bulundurun: import javax.swing.*; import java.awt.event.*; [CODE]public class testframe extends jframe {[/CODE] [CODE]public testframe() {[/CODE] settitle(""test""); setsize(300, 200); jbutton btn = [CODE]new jbutton(""exit"");[/CODE] btn.addactionlistener([CODE]new actionlistener() {[/CODE] [CODE]public void actionperformed(actionevent e) {[/CODE] system.out.pr[CODE]intln(""button clicked"");[/CODE] system.exit(0); } }); add(btn); setdefaultcloseoperation(jframe.exit_on_close); setvisible(true); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new testframe();[/CODE] } } kullanıcı ""exit"" düğmesine tıkladığında olaylar sırası nasıldır? i̇lk önce set actionlistener çalışır daha sonraexit olurken setdefaultclose çalılır thread oluşturmanın 2 temel yöntemi nedir? thread oluştururken lambda notasyonunun kullanılabilmesi ne sağlar? thread nesnesi oluşturmak, anonim sın[CODE]ıf üzerinden lambda aracılığıyla üretmek data race problemi nedir, neden kaynaklanır? nasıl önüne geçilir? threadler’in ortak kullanması gereken bir veri olduğu durumda ilk hangisnin çalışcağı durumdur dead lock problemi nedir, neden kaynaklanır;[/CODE] bunun önüne geçebilmek için ne yapılabilir? birbirini bekleyen 2 thread’in birisi diğerinin lock’unu diğeri de diğerininkini kullandığı için asla wait durumundan çıkamadıkları durum bir threadi başlatmak için neden run metodu çağırılmamalı, açıklayınız. peki hangi metot çağrılmalıdır? awake kullanılmalı. run sistemi doğrudan çalıştırır awake ise gerektiği zaman uyandırır bir thread başka bir thread tarafından nasıl doğru bir şekilde sonlandırılabilir? kill java'da kaç çeşit thread vardır, farkları açıklayınız. 2, top thread ve sub threads [CODE]public class bankaccount {[/CODE] private double balance; [CODE]public void deposit(double amount) {[/CODE] balance = balance + amount; ; } [CODE]public void withdraw(double amount) balance = balance - amount ;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] bankaccount account = [CODE]new bankaccount();[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 3; i++) { account.deposit(100); } }); thread t2 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 2; i++) { account.withdraw(100); } }); t1.start(); t2.start(); } } bu kodda bir problem var mı? varsa bu problemi nasıl çözersiniz? (varsa) problemi çözdükten sonra program çalıştığında balance'nin son değeri ne olur? data race’e sebep olur. daha sonra balance 100 olur [CODE]class threadvisibility {[/CODE] private [CODE]static boolean flag = false;[/CODE] private [CODE]static int value = 0;[/CODE] [CODE]public static void main(string[] args) throws interruptedexception {[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] string name = thread.currentthread().getname(); system.out.pr[CODE]intln(""started"");[/CODE] [CODE]while (!flag) {[/CODE] [CODE]try {[/CODE] thread.sleep(100); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } system.out.pr[CODE]intln(name + value);[/CODE] }); t1.setname(""t2""); t1.start(); thread.sleep(1000); // give t1 time to start value = 11; synchronized (threadvisibility.[CODE]class) {[/CODE] flag = true; } } } output? hata bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.arraylist; [CODE]public class bil211q1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] p1.hunt(); habitat.pr[CODE]inthabitat();[/CODE] } } [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(){[/CODE] this(""willy"", ""emperor"", 1, 5.0); } [CODE]public penguin(string name, string species, int age, double weight){[/CODE] this.name = [CODE]new string(name);[/CODE] this.species = [CODE]new string(species);[/CODE] this.age = age; this.weight = weight; } [CODE]public string getname(){[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = [CODE]new string(name);[/CODE] } [CODE]public string getspecies(){[/CODE] [CODE]return new string(species);[/CODE] } [CODE]public void setspecies(string species){[/CODE] this.species = [CODE]new string(species);[/CODE] } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public void setage(int age){[/CODE] this.age = age; } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void setweight(double weight){[/CODE] this.weight = weight; } [CODE]public void hunt(){[/CODE] setweight(getweight() + 1); } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name: "" + getname() + ""\n"" + ""penguin species: "" + getspecies() + ""\n"" + ""penguin age: "" + getage() + ""\n""+ ""penguin weight: "" + getweight() + ""\n"" + ""----------------------"");[/CODE] } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature){[/CODE] this.location = [CODE]new string(location);[/CODE] this.temperature = temperature; penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return new string(location);[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = [CODE]new string(location);[/CODE] } [CODE]public double gettemperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void settemperature(double temperature){[/CODE] this.temperature = temperature; } [CODE]public arraylist<penguin> getpenguins(){[/CODE] [CODE]return penguins;[/CODE] } [CODE]public void setpenguins(arraylist<penguin> list){[/CODE] penguins = list; } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.add(penguin); } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""habitat location: "" + getlocation() + ""\n"" + ""average temperature: "" + gettemperature() + "" c\n"" +""penguins living here:"");[/CODE] [CODE]for(int i = 0;[/CODE] i < penguins.size(); i++){ penguins.get(i).pr[CODE]intpenguin();[/CODE] } } } import java.util.arraylist; [CODE]public class bil211q1q1 {[/CODE] [CODE]static arraylist<string> arr = new arraylist<string>();[/CODE] [CODE]public static void main(string[] args) {[/CODE] parantezbas(3); parantezbas(2); } [CODE]public static void parantezbas(int n){[/CODE] parantezbas(n, """"); } [CODE]public static void parantezbas(int n, string output){[/CODE] [CODE]if(n <= 0){[/CODE] boolean flag = false; [CODE]for(int i = 0;[/CODE] i < arr.size(); i++){ if(output.equals(arr.get(i))){ flag = true; } } [CODE]if(flag){[/CODE] [CODE]return;[/CODE] } system.out.pr[CODE]intln(output);[/CODE] arr.add(output); [CODE]return;[/CODE] } parantezbas(n-1,""("" + output + "")""); parantezbas(n-1,""("" + "")"" + output); parantezbas(n-1, output + ""("" + "")""); } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee{[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int price = 50;[/CODE] [CODE]string message = ""sipariş: latte"";[/CODE] [CODE]for(coffeeaddon addon : addons){[/CODE] price += addon.getcost(); message += "" + "" + addon.getname(); } system.out.pr[CODE]intln(message);[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string gettype() {[/CODE] [CODE]return ""latte"";[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); anothermachine.displaysumofcoffenumber();// burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]public class espresso extends basecoffee{[/CODE] private boolean isheated = false; [CODE]public espresso(){[/CODE] } @override [CODE]public double calculateprice() {[/CODE] [CODE]int price = 40;[/CODE] [CODE]string message = ""sipariş: espresso"";[/CODE] [CODE]if(isheated) message += "" (sıcak fincan)"";[/CODE] [CODE]for(coffeeaddon addon : addons){[/CODE] price += addon.getcost(); message += "" + "" + addon.getname(); } system.out.pr[CODE]intln(message);[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } [CODE]public void heatcup(){[/CODE] isheated = true; } @override [CODE]public string gettype() {[/CODE] [CODE]return ""espresso"";[/CODE] } } [CODE]public class vanillasyrup implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""vanilla syrup"";[/CODE] } } [CODE]public interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] protected arraylist<coffeeaddon> addons; [CODE]public basecoffee(){[/CODE] addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon){[/CODE] addons.add(addon); } [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string gettype();[/CODE] } [CODE]public class americano extends basecoffee{[/CODE] @override [CODE]public double calculateprice() {[/CODE] [CODE]int price = 45;[/CODE] [CODE]string message = ""sipariş: americano"";[/CODE] [CODE]for(coffeeaddon addon : addons){[/CODE] price += addon.getcost(); message += "" + "" + addon.getname(); } system.out.pr[CODE]intln(message);[/CODE] system.out.pr[CODE]intln(""toplam fiyat: "" + price + ""tl"");[/CODE] system.out.pr[CODE]intln();[/CODE] [CODE]return price;[/CODE] } @override [CODE]public string gettype() {[/CODE] [CODE]return ""americano"";[/CODE] } } [CODE]public class coffeemachine {[/CODE] [CODE]static int sumofcoffenumber = 0;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon){[/CODE] [CODE]if(coffee instanceof espresso && (adddon instanceof doubleshot || adddon instanceof chocolate)){[/CODE] coffee.addaddon(adddon); } [CODE]else if(coffee instanceof latte && (adddon instanceof milk || adddon instanceof vanillasyrup || adddon instanceof chocolate)){[/CODE] coffee.addaddon(adddon); } [CODE]else if(coffee instanceof americano && (adddon instanceof milk || adddon instanceof vanillasyrup)){[/CODE] coffee.addaddon(adddon); } [CODE]else{[/CODE] system.out.println(""[uyari] "" + coffee.gettype() + "" tipi kahveye "" + adddon.getname() + "" eklenemez""); } } [CODE]public void makecoffee(basecoffee coffee){[/CODE] coffee.calculateprice(); sumofcoffenumber++; } [CODE]public void heatespressocup(basecoffee coffee){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] ((espresso)coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public void displaysumofcoffenumber(){[/CODE] system.out.pr[CODE]intln(""tum kahve makineleri tarafindan toplam "" + sumofcoffenumber + "" kahve uretildi"");[/CODE] } } [CODE]public class milk implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } kek üretim boru hattı bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileio ve exceptions kullanarak basit bir kek üretim boru hattı uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, bir kekin üretiminde yer alacak aşamaların (pastaban, krema, süsleme) seçilmesini, belirlenen sıraya göre uygulanmasını ve bu üretim geçmişinin bir dosyaya kayıt edilip sonradan geri yüklenebilmesini sağlayacaktır. ayrıca, üretime eklenen özelliklerin desteklenmemesi, aşamaların beklenen sırada uygulanmaması veya dosya yükleme sırasında oluşabilecek sorunlu durumlarda özel hatalar atmalıdır. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile kek üretim boru hattının denetlenmesini sağlamalıdır. arayüz özellikleri aşağıdaki gibidir. - terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – üretim başlat: kek üretiminde kullanılacak aşamaların (pastaban, krema, süsleme) seçilmesi sürecini başlatır. – üretim geçmişi: üretim geçmişinin ekranda listelenmesi. – kaydet: üretim geçmişinin dosyaya kaydedilmesi. – yükle: dosyadan üretim geçmişinin geri yüklenmesi. – çıkış: program sonlandırılır. - üretim süreci: kek üretimi başlatıldığında (ilk seçenek) kullanıcıya döngü içerisinde yeni bir aşama ekleme, üretimi tamamlama ya da üretimden vazgeçme seçenekleri sunulmalıdır (yani üretim tamam- lanana ya da üretimden vazgeçilene kadar ana menüye dönmeden sürekli yeni aşama eklenmelidir). yeni aşama eklenirken kullanıcıdan bu aşama ile ilgili ek bilgi alınmalı ve kaydedilmelidir (örn., sade pastaban, kakaolu krema, çilek süsleme). seçilen aşamalar iki adet pasta üretim kuralına uymalıdır: 1) ""krema"" eklenmeden önce mutlaka en az bir katman ""pastaban"" eklenmiş olmalıdır; 2) ""süsleme"" eklendikten sonra ""süsleme"" dışında herhangi bir aşama seçilemez. eğer kullanıcı üretimi tamam- ladığında bu kurallardan birisi ihlal ediliyorsa bununla ilgili bir hata atılmalı ve üretim iptal edilerek ana menüye dönülmelidir (atılacak hata ile ilgili ilerleyen bölümleri inceleyin). - dosya i̇şlemleri: üretilen keklerin üretim geçmişi, programın çalıştığı dizinde sabit isimli kek_uretim dosyasında saklanabilmeli ve bu dosyadan geri yüklenebilmelidir. 3 uretimasamasi sınıfı değişkenler: - tip (private string) uretim asamasinin tipi (yalnizca pastaban, krema ya da susleme olabilir). - ozellik (private string) uretim asamasinin ozelligi (örn., krema, çilek). metotlar: - public uretimasamasi(string tip, string ozellik) constructor. - private değişkenler için getter ve setter tanımlayabilirsiniz. 1 4 uretimkaydi sınıfı değişkenler: - asamalar (private arraylist<uretimasamaasi>) keki üretmek için gerekli aşamalar (aşamalar dizi sırasında gerçekleşir). metotlar: - public uretimkaydi() constructor. - public void parcaekle(uretimasamaasi asama) asamalar dizisine kek üretimi için yeni bir aşama ekler. - private değişkenler için getter ve setter tanımlayabilirsiniz. 5 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader, scanner, printwriter) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: kek_uretim dosyası bulunamadı."" - dosya boşsa: ""hata: kek_uretim dosyası boş."" 6 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 6.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: - dosyabulunamadiexception (extends inputexception): dosya eksikse atılacak hata. - hata mesajı: ""hata: kek_uretim dosyası bulunamadı."" - bosdosyaexception (extends inputexception): dosya boşsa atılacak hata. - hata mesajı: ""hata: kek_uretim dosyası boş."" 6.2 üretim süreci hataları ürüne eklenen aşamaların desteklenmemesi veya üretim aşamalarının hatalı sırayla uygulanması durum- larında aşağıdaki hata türleri kullanılacaktır: - ozellikdesteksizexception (extends exception): eklenmek istenen aşama, kek üretiminde destek- lenmiyorsa atılacak hata. - hata mesajı: ""hata: [aşama adı] kek üretiminde desteklenmiyor."" - sirauyumsuzluguexception (extends exception): üretim aşamalarının beklenen sırada uygu- lanmaması durumunda atılacak hata. - hata mesajı: ""hata: üretim sırası uyumsuz. [ihlal edilen pasta üretim kuralı]."" 7 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 [CODE]package bil211quiz3;[/CODE] [CODE]public class uretimasamasi {[/CODE] private [CODE]string tip;[/CODE] private [CODE]string ozellik;[/CODE] [CODE]public uretimasamasi(string tip, string ozellik){[/CODE] this.tip = tip; this.ozellik = ozellik; } [CODE]public string gettip(){[/CODE] [CODE]return tip;[/CODE] } [CODE]public string getozellik(){[/CODE] [CODE]return ozellik;[/CODE] } [CODE]public void settip(string tip){[/CODE] if(tip.equalsignorecase(""pastaban"") || tip.equalsignorecase(""krema"") || tip.equalsignorecase(""susleme"")) this.tip = tip; } [CODE]public void setozellik(string ozellik){[/CODE] this.ozellik = ozellik; } } [CODE]package bil211quiz3;[/CODE] import java.io.file; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.ioexception; import java.io.objectinputstream; import java.io.objectoutputstream; import java.util.arraylist; import java.util.scanner; [CODE]public class mainprogram {[/CODE] [CODE]static arraylist<uretimkaydi> kayitlar = new arraylist<>();[/CODE] [CODE]public static void main(string[] args) {[/CODE] string filename2 = ""kek_uretim.bin""; uretimkaydi uretimkaydi; [CODE]try{[/CODE] uretimkaydi = [CODE]new uretimkaydi();[/CODE] scanner scanner = new scanner(system.in); [CODE]int state = 0;[/CODE] [CODE]int state2;[/CODE] system.out.pr[CODE]intln(""0: yeni kayıt"");[/CODE] system.out.pr[CODE]intln(""1: kayıt yukle"");[/CODE] system.out.pr[CODE]intln(""2: kayıt yaz"");[/CODE] system.out.pr[CODE]intln(""3: kayıt göster"");[/CODE] system.out.pr[CODE]intln(""4: çıkış"");[/CODE] state2 = scanner.next[CODE]int();[/CODE] [CODE]while(state2 == 0 || state2 == 1 || state2 == 2 ||state == 3){[/CODE] [CODE]if(state2 == 0){[/CODE] system.out.pr[CODE]intln(""0: katman ekle"");[/CODE] system.out.pr[CODE]intln(""1: uretimi tamamla"");[/CODE] system.out.pr[CODE]intln(""2: vazgeç"");[/CODE] uretimasamasi asama = [CODE]new uretimasamasi("""", """");[/CODE] while((state = scanner.next[CODE]int()) == 0){[/CODE] system.out.pr[CODE]intln(""0: pastaban"");[/CODE] system.out.pr[CODE]intln(""1: krema"");[/CODE] system.out.pr[CODE]intln(""2: susleme"");[/CODE] int tiptype = scanner.next[CODE]int();[/CODE] [CODE]string ozellik;[/CODE] scanner.nextline(); [CODE]if(tiptype == 0){[/CODE] [CODE]if(suslemecontroller(uretimkaydi)){[/CODE] throw [CODE]new sirauyumsuzluguexception(""2: susleme aşamasından sonra susleme dışında başka bir aşama eklenemez"");[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(""çeşidi belirtiniz"");[/CODE] ozellik = scanner.nextline(); asama = [CODE]new uretimasamasi(""pastaban"", ozellik);[/CODE] } } [CODE]else if(tiptype == 1){[/CODE] [CODE]if(suslemecontroller(uretimkaydi)){[/CODE] throw [CODE]new sirauyumsuzluguexception(""2: susleme aşamasından sonra susleme dışında başka bir aşama eklenemez"");[/CODE] } [CODE]else if(kremapastabancontroller(uretimkaydi)){[/CODE] system.out.pr[CODE]intln(""çeşidi belirtiniz"");[/CODE] ozellik = scanner.nextline(); asama = [CODE]new uretimasamasi(""krema"", ozellik);[/CODE] } [CODE]else{[/CODE] throw [CODE]new sirauyumsuzluguexception(""1: krema eklenmeden önce mutlaka en az bir katman pastaban eklenmelidir"");[/CODE] } } [CODE]else if(tiptype == 2){[/CODE] system.out.pr[CODE]intln(""çeşidi belirtiniz"");[/CODE] ozellik = scanner.nextline(); asama = [CODE]new uretimasamasi(""susleme"", ozellik);[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(""oyle bir seçenek yok"");[/CODE] continue; } uretimkaydi.parcaekle(asama); } [CODE]if(state != 0 && state != 1 && state != 2 && state != 3 && state != 4) throw new ozellikdesteksizexception("""" + state);[/CODE] if(state == 1) kayitlar.add(uretimkaydi); [CODE]if(state == 2) uretimkaydi = new uretimkaydi();[/CODE] } [CODE]else if(state2 == 1){[/CODE] kayitlar = kayitoku(filename2); } [CODE]else if(state2 == 2){[/CODE] kayityaz(kayitlar, filename2); } [CODE]else{[/CODE] kayitgoster(kayitlar); } state2 = scanner.next[CODE]int();[/CODE] } scanner.close(); } [CODE]catch(exception e){[/CODE] system.err.println(e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public static boolean kremapastabancontroller(uretimkaydi kayit){[/CODE] boolean flag = false; [CODE]for(int i = 0;[/CODE] i < kayit.getasamalar().size(); i++){ if(kayit.getasamalar().get(i).gettip().equalsignorecase(""pastaban"")){ flag = true; break; } } [CODE]return flag;[/CODE] } [CODE]public static boolean suslemecontroller(uretimkaydi kayit){[/CODE] [CODE]for(int i = 0;[/CODE] i < kayit.getasamalar().size(); i++){ if(kayit.getasamalar().get(i).gettip().equalsignorecase(""susleme"")){ [CODE]return true;[/CODE] } } [CODE]return false;[/CODE] } @suppresswarnings(""unchecked"") [CODE]public static arraylist<uretimkaydi> kayitoku(string filename) throws dosyabulunamadıexception, ioexception, classnotfoundexception, bosdosyaexception {[/CODE] arraylist<uretimkaydi> list; file file = [CODE]new file(filename);[/CODE] if(!file.exists()) throw [CODE]new dosyabulunamadıexception();[/CODE] if(file.length() <= 0) throw [CODE]new bosdosyaexception();[/CODE] [CODE]try(objectinputstream binaryin = new objectinputstream(new fileinputstream(filename))){[/CODE] list = (arraylist<uretimkaydi>) binaryin.readobject(); [CODE]return list;[/CODE] } [CODE]catch(filenotfoundexception e){[/CODE] throw [CODE]new dosyabulunamadıexception();[/CODE] } } [CODE]public static void kayityaz(arraylist<uretimkaydi> list, string filename) throws dosyabulunamadıexception, ioexception{[/CODE] file file = [CODE]new file(filename);[/CODE] if(!file.exists()) throw [CODE]new dosyabulunamadıexception();[/CODE] [CODE]try(objectoutputstream binaryout = new objectoutputstream(new fileoutputstream(filename))){[/CODE] binaryout.writeobject(list); } } [CODE]public static void kayitgoster(arraylist<uretimkaydi> list){[/CODE] [CODE]for(int i = 0;[/CODE] i < list.size(); i++){ [CODE]for(int j = 0;[/CODE] j < list.get(i).getasamalar().size(); j++){ system.out.println(list.get(i).getasamalar().get(j).gettip() + "" - "" + list.get(i).getasamalar().get(j).getozellik()); } } } } [CODE]package bil211quiz3;[/CODE] [CODE]public class dosyabulunamadıexception extends inputexception{[/CODE] [CODE]public dosyabulunamadıexception(){[/CODE] super(""hata: kek_uretim dosyası bulunamadı.""); } } [CODE]package bil211quiz3;[/CODE] [CODE]public class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(){[/CODE] super(""hata: keke-uretim dosyası boş.""); } } [CODE]package bil211quiz3;[/CODE] import java.io.serializable; import java.util.arraylist; [CODE]public class uretimkaydi implements serializable{[/CODE] private arraylist<uretimasamasi> asamalar; [CODE]public uretimkaydi(){[/CODE] asamalar = [CODE]new arraylist<>();[/CODE] } [CODE]public void parcaekle(uretimasamasi asama){[/CODE] asamalar.add(asama); } [CODE]public arraylist<uretimasamasi> getasamalar(){[/CODE] [CODE]return asamalar;[/CODE] } [CODE]public void setasamalar(arraylist<uretimasamasi> asamalar){[/CODE] this.asamalar = asamalar; } } [CODE]package bil211quiz3;[/CODE] [CODE]public class ozellikdesteksizexception extends exception{[/CODE] [CODE]public ozellikdesteksizexception(uretimasamasi asama){[/CODE] super(""hata: "" + asama.gettip() + ""kek üretiminde desteklenmiyor.""); } [CODE]public ozellikdesteksizexception(string asama){[/CODE] super(""hata: "" + asama + ""kek üretiminde desteklenmiyor.""); } } [CODE]package bil211quiz3;[/CODE] [CODE]public class sirauyumsuzluguexception extends exception{[/CODE] [CODE]public sirauyumsuzluguexception(string hataliasama){[/CODE] super(""hata: üretim sırası uyumsuz. "" + hataliasama+"".""); } } [CODE]package bil211quiz3;[/CODE] [CODE]public class inputexception extends exception{[/CODE] [CODE]public inputexception(string message){[/CODE] super(message); } } bil211 quiz 4 section 1 quizleri uzak sistemine yükleyeceksiniz. q1: yalnızca tek sayıları saklayan liste oddnumberlist adında bir sınıf oluşturun. bu sınıf: ● add(t item) → yalnızca tek sayılar eklenebilir. çift sayı eklenmeye çalışılırsa hata mesajı basılır. ● addall(collection<t> collection) → sadece içindeki tek sayıları ekler. ● getoddnumbers() → i̇çerideki tüm tek sayıları liste olarak döndürür. ● sumofodds() → tüm tek sayıların toplamını döndürür. örnek kullanım: oddnumberlist list = [CODE]new oddnumberlist();[/CODE] list.add(5); list.add(3); list.add(8); // eklenmemeli system.out.pr[CODE]intln(list);[/CODE] // çıktı: [5, 3] q2: koleksiyondan tekrar edenleri kaldırma ● bir collection<t> içindeki tüm tekrar eden öğeleri kaldıran bir generic metod yazın. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> removeduplicates(collection<t> collection) {[/CODE] // metodu tamamlayın } örnek kullanım: list<string> words = arrays.aslist(""apple"", ""banana"", ""apple"", ""orange"", ""banana"", ""grape""); system.out.pr[CODE]intln(removeduplicates(words));[/CODE] q3:aşağıdaki generic metodu tamamlayın. ● verilen list<t> içindeki tüm öğeleri büyük harfe çeviren (veya sayıysa olduğu gibi bırakan) bir metod yazın. ● eğer t bir string ise büyük harfe çevirmeli, değilse değiştirmemelidir. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> converttouppercaseifstring(list<t> list) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> items = arrays.aslist(""hello"", 123, ""world"", 456); system.out.pr[CODE]intln(converttouppercaseifstring(items));[/CODE] [CODE]package bil211q4;[/CODE] import java.util.arraylist; import java.util.collection; import java.util.hashset; import java.util.list; [CODE]public class oddnumberlist<t>{[/CODE] [CODE]public static void main(string[] args){[/CODE] oddnumberlist<[CODE]integer> numberlist = new oddnumberlist<>();[/CODE] oddnumberlist<object> numberlist2 = [CODE]new oddnumberlist<>();[/CODE] [CODE]try{[/CODE] numberlist.add(5); numberlist.add(3); numberlist.add(7); numberlist.add(9); numberlist.add(11); numberlist.add(5); numberlist.add(3); numberlist.add(7); numberlist.showlist(); arraylist<[CODE]integer> templist = new arraylist<>();[/CODE] templist.add(101); templist.add(103); templist.add(105); templist.add(104); templist.add(101); templist.add(103); templist.add(105); templist.add(104); numberlist.addall(templist); numberlist.showlist(); numberlist2.add(5); numberlist2.add(7); numberlist2.add(""hata""); arraylist<object> templist2 = numberlist2.getoddnumbers(); [CODE]for(object o:templist2){[/CODE] system.out.pr[CODE]intln(o);[/CODE] } system.out.println(numberlist2.sumofodds()); list<integer> templist3 = oddnumberlist.removeduplicates(templist); [CODE]for(integer i:templist3){[/CODE] system.out.pr[CODE]intln(i);[/CODE] } arraylist<[CODE]string> stringlist = new arraylist<>();[/CODE] stringlist.add(""jkfdsl 2 dsajd dsajhd jsa hdjsa djsaak""); stringlist.add(""dfhsyfgwq 26317 f dgsa 621wdgfa""); stringlist.add(""dsajk udıdqoıw nsamdsgh gyuq asbdhja""); list<string> newstringlist = oddnumberlist.converttouppercase[CODE]ifstring(stringlist);[/CODE] [CODE]for(string s:newstringlist){[/CODE] system.out.pr[CODE]intln(s);[/CODE] } arraylist<[CODE]integer> integerlist = new arraylist<>();[/CODE] integerlist.add(3); integerlist.add(2); integerlist.add(15); list<integer> newintegerlist = oddnumberlist.converttouppercase[CODE]ifstring(integerlist);[/CODE] [CODE]for(integer i:newintegerlist){[/CODE] system.out.pr[CODE]intln(i);[/CODE] } } [CODE]catch(exception e){[/CODE] system.err.println(e.getmessage()); } } arraylist<t> list; [CODE]int size;[/CODE] [CODE]public oddnumberlist(){[/CODE] list = [CODE]new arraylist<>();[/CODE] size = 0; } [CODE]public boolean add(t e) throws exception {[/CODE] [CODE]if(e instanceof number){[/CODE] if(((number)e).[CODE]intvalue()%2 == 0){[/CODE] throw [CODE]new exception(""wrong value "" + e);[/CODE] } [CODE]else{[/CODE] list.add(e); } } [CODE]else{[/CODE] list.add(e); } [CODE]return true;[/CODE] } [CODE]public boolean addall(collection<t> collection) throws exception{[/CODE] [CODE]for(t e:collection){[/CODE] [CODE]if(e instanceof number){[/CODE] if(((number)e).[CODE]intvalue()%2 == 1){[/CODE] list.add(e); } } } [CODE]return true;[/CODE] } [CODE]public arraylist<t> getoddnumbers(){[/CODE] arraylist<t> [CODE]newlist = new arraylist<>();[/CODE] [CODE]for(t e:list){[/CODE] [CODE]if(e instanceof number){[/CODE] if(((number)e).[CODE]intvalue()%2 == 1){[/CODE] newlist.add(e); } } } [CODE]return newlist;[/CODE] } [CODE]public int sumofodds(){[/CODE] [CODE]int sum = 0;[/CODE] [CODE]for(t e:list){[/CODE] [CODE]if(e instanceof number){[/CODE] if(((number)e).[CODE]intvalue()%2 == 1){[/CODE] sum += ((number)e).[CODE]intvalue();[/CODE] } } } [CODE]return sum;[/CODE] } [CODE]public void showlist(){[/CODE] [CODE]for(t e:list){[/CODE] system.out.pr[CODE]intln(e);[/CODE] } } [CODE]public static <t> list<t> removeduplicates(collection<t> collection) {[/CODE] hashset<t> set = [CODE]new hashset<>();[/CODE] [CODE]for(t e:collection){[/CODE] set.add(e); } arraylist<t> [CODE]newlist = new arraylist<>();[/CODE] [CODE]for(t e:set){[/CODE] newlist.add(e); } [CODE]return newlist;[/CODE] } @suppresswarnings(""unchecked"") [CODE]public static <t> list<t> converttouppercaseifstring(list<t> list) {[/CODE] arraylist<t> [CODE]newlist = new arraylist<>();[/CODE] if(list.size() > 0 && list.get(0) instanceof [CODE]string){[/CODE] [CODE]for(t e:list){[/CODE] newlist.add(((t)((string)e).touppercase())); } } [CODE]else{[/CODE] [CODE]for(t e:list){[/CODE] newlist.add(e); } } [CODE]return newlist;[/CODE] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 package bil211game2.game.main; import java.net.url; import java.util.concurrent.blockingqueue; import java.util.concurrent.linkedblockingqueue; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; import javax.sound.sampled.floatcontrol; import javax.sound.sampled.lineevent; [CODE]public class sound implements runnable {[/CODE] // sound thread ve durumu private thread soundthread; private boolean running = false; // komut kuyrukları private blockingqueue<soundcommand> commandqueue = [CODE]new linkedblockingqueue<>();[/CODE] // ses url'leri private url[] soundurl = [CODE]new url[30];[/CODE] // müzik için clip private clip musicclip; // ses ayarları private float volume = 0.5f; // ses sabitleri [CODE]public static final int title_screen_music = 0;[/CODE] [CODE]public static final int phase1_music = 1;[/CODE] [CODE]public static final int phase3_music = 2;[/CODE] [CODE]public static final int phase5_music = 3;[/CODE] [CODE]public static final int phase7_music = 4;[/CODE] [CODE]public static final int phase10_music = 5;[/CODE] // ses efektleri [CODE]public static final int acid_zombie_acid_sound = 13;[/CODE] [CODE]public static final int pistol_sound = 14;[/CODE] [CODE]public static final int rifle_sound = 15;[/CODE] [CODE]public static final int shotgun_sound = 16;[/CODE] [CODE]public static final int sniper_sound = 17;[/CODE] [CODE]public static final int rocket_sound = 18;[/CODE] [CODE]public static final int rocket_bang_sound = 19;[/CODE] [CODE]public static final int zombie_hurt = 20;[/CODE] [CODE]public static final int player_hurt = 21;[/CODE] [CODE]public static final int fanfare_sound = 22;[/CODE] [CODE]public sound() {[/CODE] // ses dosyalarını yükle loadsounds(); // sound thread'i başlat startsoundthread(); } private [CODE]void loadsounds() {[/CODE] soundurl[title_screen_music] = getclass().getresource(""/bil211game2/resources/sound/music/halls of the undead - kevin macleod.wav""); soundurl[phase1_music] = getclass().getresource(""/bil211game2/resources/sound/music/thewasteland.wav""); soundurl[phase3_music] = getclass().getresource(""/bil211game2/resources/sound/music/thewasteland.wav""); soundurl[phase5_music] = getclass().getresource(""/bil211game2/resources/sound/music/thewasteland.wav""); soundurl[phase7_music] = getclass().getresource(""/bil211game2/resources/sound/music/thewasteland.wav""); soundurl[phase10_music] = getclass().getresource(""/bil211game2/resources/sound/music/thewasteland.wav""); soundurl[acid_zombie_acid_sound] = getclass().getresource(""/bil211game2/resources/sound/se/315846__gneube__zombie-roar.wav""); soundurl[pistol_sound] = getclass().getresource(""/bil211game2/resources/sound/se/627087clutvhsilenced-pistol-shot.wav""); soundurl[rifle_sound] = getclass().getresource(""/bil211game2/resources/sound/se/404561__superphat__assaultrifle2.wav""); soundurl[shotgun_sound] = getclass().getresource(""/bil211game2/resources/sound/se/564480__lumikon__shotgun-shot-sfx.wav""); soundurl[sniper_sound] = getclass().getresource(""/bil211game2/resources/sound/se/182051qubodupsniper-rifle-shot-sound-effect.wav""); soundurl[rocket_sound] = getclass().getresource(""/bil211game2/resources/sound/se/517169__mrthenoronha__rocket-launcher-1-8-bit.wav""); soundurl[rocket_bang_sound] = getclass().getresource(""/bil211game2/resources/sound/se/268557cydonexplosion001.wav""); soundurl[zombie_hurt] = getclass().getresource(""/bil211game2/resources/sound/se/396797__scorpion67890__mutant-scream.wav""); soundurl[player_hurt] = getclass().getresource(""/bil211game2/resources/sound/se/262279__dirtjm__grunts-male.wav""); soundurl[fanfare_sound] = getclass().getresource(""/bil211game2/resources/sound/se/401144fullmetaljedipiece-of-shred.wav""); } // thread'i başlat private [CODE]void startsoundthread() {[/CODE] if (soundthread == null || !soundthread.isalive()) { running = true; soundthread = [CODE]new thread(this);[/CODE] soundthread.setdaemon(true); soundthread.start(); } } // sound thread'inin çalışacağı metot @override [CODE]public void run() {[/CODE] [CODE]try {[/CODE] [CODE]while (running) {[/CODE] [CODE]try {[/CODE] // kuyruktan bir komut al ve işle soundcommand command = commandqueue.take(); processcommand(command); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // komut işleme private [CODE]void processcommand(soundcommand command) {[/CODE] [CODE]try {[/CODE] switch (command.type) { case load_music: loadmusic(command.soundindex); break; case play_effect: playeffect(command.soundindex); break; case play_music: playmusic(); break; case loop_music: loopmusic(); break; case stop_music: stopmusic(); break; case set_volume: setvolumeinternal(command.volumelevel); break; case cleanup: cleanupresources(); running = false; // thread'i durdur break; } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // müzik yükleme private [CODE]void loadmusic(int soundindex) {[/CODE] [CODE]try {[/CODE] [CODE]if (musicclip != null) {[/CODE] musicclip.stop(); musicclip.close(); musicclip = null; } audioinputstream ain = audiosystem.getaudioinputstream(soundurl[soundindex]); musicclip = audiosystem.getclip(); musicclip.open(ain); // ses seviyesini ayarla applyvolumetoclip(musicclip); // stream'i kapat ain.close(); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // efekt çalma private [CODE]void playeffect(int soundindex) {[/CODE] [CODE]try {[/CODE] clip effectclip = audiosystem.getclip(); audioinputstream ain = audiosystem.getaudioinputstream(soundurl[soundindex]); effectclip.open(ain); // ses seviyesini ayarla applyvolumetoclip(effectclip); // tamamlandığında kaynakları serbest bırak effectclip.addlinelistener(event -> { if (event.gettype() == lineevent.type.stop) { effectclip.close(); } }); // efekti çal effectclip.start(); // stream'i kapat ain.close(); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // ses seviyesini clip'e uygula private [CODE]void applyvolumetoclip(clip clip) {[/CODE] [CODE]try {[/CODE] if (clip.iscontrolsupported(floatcontrol.type.master_gain)) { floatcontrol gaincontrol = (floatcontrol) clip.getcontrol(floatcontrol.type.master_gain); float db = (float) (math.log(volume) / math.log(10.0) * 20.0); gaincontrol.setvalue(db); } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // müziği çal private [CODE]void playmusic() {[/CODE] [CODE]if (musicclip != null) {[/CODE] musicclip.setframeposition(0); musicclip.start(); } } // müziği döngüye al private [CODE]void loopmusic() {[/CODE] [CODE]if (musicclip != null) {[/CODE] musicclip.loop(clip.loop_continuously); } } // müziği durdur private [CODE]void stopmusic() {[/CODE] [CODE]if (musicclip != null) {[/CODE] musicclip.stop(); } } // ses seviyesini ayarla private [CODE]void setvolumeinternal(float level) {[/CODE] volume = level; [CODE]if (musicclip != null) {[/CODE] applyvolumetoclip(musicclip); } } // kaynakları temizle private [CODE]void cleanupresources() {[/CODE] [CODE]if (musicclip != null) {[/CODE] musicclip.stop(); musicclip.close(); musicclip = null; } } // -- [CODE]public api methods -- // müzik yükle (gamepanel'ın çağıracağı public metot) public void setfile(int i) {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.load_music, i)); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // ses efekti çal [CODE]public void playse(int i) {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.play_effect, i)); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // müziği çal [CODE]public void play() {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.play_music)); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // müziği döngüye al [CODE]public void loop() {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.loop_music)); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // müziği durdur [CODE]public void stop() {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.stop_music)); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // ses seviyesini ayarla [CODE]public void setvolume(float volume) {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.set_volume, volume)); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // tüm kaynakları temizle ve thread'i durdur [CODE]public void cleanup() {[/CODE] [CODE]try {[/CODE] commandqueue.put(new soundcommand(commandtype.cleanup)); // thread'in kapanmasını bekle [CODE]if (soundthread != null) {[/CODE] soundthread.join(1000); // en fazla 1 saniye bekle } } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } // -- helper [CODE]classes -- // komut tipleri private enum commandtype {[/CODE] load_music, play_effect, play_music, loop_music, stop_music, set_volume, cleanup } // komut sın[CODE]ıfı private class soundcommand {[/CODE] commandtype type; [CODE]int soundindex;[/CODE] float volumelevel; // standart komut constructor soundcommand(commandtype type) { this.type = type; } // ses indeksi ile komut constructor soundcommand(commandtype type, [CODE]int soundindex) {[/CODE] this.type = type; this.soundindex = soundindex; } // ses seviyesi ile komut constructor soundcommand(commandtype type, float volumelevel) { this.type = type; this.volumelevel = volumelevel; } } } package bil211game2.game.main; import java.awt.graphics2d; import java.awt.image.bufferedimage; [CODE]public class utilitytool {[/CODE] [CODE]public static bufferedimage scaleimage(bufferedimage original, int width, int height){[/CODE] bufferedimage scaledimage = new bufferedimage(width, height, original.gettype()); graphics2d g2 = scaledimage.creategraphics(); g2.drawimage(original, 0, 0, width, height, null); g2.dispose(); [CODE]return scaledimage;[/CODE] } [CODE]public static double distancecalculator(int p1x, int p1y, int p2x, int p2y){[/CODE] return math.sqrt((p2x - p1x)*(p2x - p1x)+(p2y - p1y)*(p2y - p1y)); } } package bil211game2.game.main; import java.awt.canvas; import java.awt.color; import java.awt.dimension; import java.awt.graphics2d; import java.awt.graphicsconfiguration; import java.awt.graphicsenvironment; import java.awt.renderingh[CODE]ints;[/CODE] import java.awt.toolkit; import java.awt.transparency; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.bufferstrategy; import java.awt.image.bufferedimage; import java.io.fileinputstream; import java.io.fileoutputstream; import java.io.ioexception; import java.io.objectinputstream; import java.io.objectoutputstream; import java.util.arraylist; import java.util.collections; import java.util.comparator; import java.util.random; import bil211game2.game.entity.acidzombie; import bil211game2.game.entity.entity; import bil211game2.game.entity.monster; import bil211game2.game.entity.normalzombie; import bil211game2.game.main.tile.tilemanager; import bil211game2.game.objects.ammos.ammo; import bil211game2.game.objects.ammos.pistolammo; import bil211game2.game.objects.ammos.r[CODE]ifleammo;[/CODE] import bil211game2.game.objects.ammos.rocketammo; import bil211game2.game.objects.ammos.shotgunammo; import bil211game2.game.objects.ammos.sniperammo; import bil211game2.game.objects.animations.animationmanager; import bil211game2.game.entity.player; import bil211game2.game.entity.reptilezombie; import bil211game2.game.entity.tankzombie; [CODE]public class gamepanel extends canvas implements runnable{[/CODE] final [CODE]int originaltilesize = 16;[/CODE] final [CODE]int scale = 3;[/CODE] [CODE]public final int tilesize = originaltilesize * scale;[/CODE] [CODE]public final int maxscreencol = 16;[/CODE] [CODE]public final int maxscreenrow = 12;[/CODE] [CODE]public final int screenwidth = tilesize*maxscreencol;[/CODE] [CODE]public final int screenheight = tilesize*maxscreenrow;[/CODE] [CODE]public final int maxworldcol = 116;[/CODE] [CODE]public final int maxworldrow = 112;[/CODE] [CODE]int fps = 60;[/CODE] // double buffer variables private bufferstrategy bufferstrategy; private graphicsconfiguration graphicsconfig; private bufferedimage offscreenbuffer; // system [CODE]public thread gamethread;[/CODE] [CODE]public keyhandler keyh = new keyhandler(this);[/CODE] [CODE]public mousehandler mouseh = new mousehandler(this);[/CODE] [CODE]public collisionchecker cchecker = new collisionchecker(this);[/CODE] [CODE]public ui ui = new ui(this);[/CODE] [CODE]public assetsetter asetter = new assetsetter(this);[/CODE] [CODE]public eventhandler ehandler = new eventhandler(this);[/CODE] [CODE]public sound music = new sound();[/CODE] [CODE]public sound se = new sound();[/CODE] [CODE]public sound seammo = new sound();[/CODE] [CODE]public sound semonster = new sound();[/CODE] tilemanager tilem = [CODE]new tilemanager(this);[/CODE] private [CODE]int framecount = 0;[/CODE] private long fpstimer = 0; [CODE]public int fps = 0;[/CODE] [CODE]public boolean drawfps = false;[/CODE] [CODE]public animationmanager animationmanager;[/CODE] // entity [CODE]public player player = new player(this, keyh, mouseh);[/CODE] arraylist<entity> entitylist = [CODE]new arraylist<>();[/CODE] [CODE]public arraylist<monster> monsters = new arraylist<>();[/CODE] [CODE]public arraylist<ammo> ammos = new arraylist<>();[/CODE] // game state [CODE]public int gamestate;[/CODE] [CODE]public final int titlestate = 0;[/CODE] [CODE]public final int playstate = 1;[/CODE] [CODE]public final int pausestate = 2;[/CODE] [CODE]public final int dialogstate = 3;[/CODE] [CODE]public final int finishstate = 4;[/CODE] [CODE]public boolean phasefinished = false;[/CODE] [CODE]public boolean phasefinishdraw = false;[/CODE] private [CODE]int phasetransitioncounter = 0;[/CODE] private final [CODE]int phase_transition_duration = 90;[/CODE] // phases [CODE]public final int phase1 = 0;[/CODE] [CODE]public final int phase2 = 1;[/CODE] [CODE]public final int phase3 = 2;[/CODE] [CODE]public final int phase4 = 3;[/CODE] [CODE]public final int phase5 = 4;[/CODE] [CODE]public final int phase6 = 5;[/CODE] [CODE]public final int phase7 = 6;[/CODE] [CODE]public final int phase8 = 7;[/CODE] [CODE]public final int phase9 = 8;[/CODE] [CODE]public final int phase10 = 9;[/CODE] [CODE]public int currentphase;[/CODE] // gamepanel sın[CODE]ıfına eklenecek yeni değişkenler private boolean screenshakeactive = false;[/CODE] private [CODE]int screenshakeintensity = 0;[/CODE] private [CODE]int screenshakeduration = 0;[/CODE] private [CODE]int screenshaketimer = 0;[/CODE] private [CODE]int shakeoffsetx = 0;[/CODE] private [CODE]int shakeoffsety = 0;[/CODE] private random shakerandom = [CODE]new random();[/CODE] [CODE]public gamepanel(){[/CODE] this.setpreferredsize([CODE]new dimension(screenwidth, screenheight));[/CODE] this.setbackground(color.black); this.setignorerepa[CODE]int(true);[/CODE] this.addkeylistener(keyh); this.addmouselistener(mouseh); this.addmousemotionlistener(mouseh); this.setfocusable(true); animationmanager = [CODE]new animationmanager(this);[/CODE] graphicsenvironment env = graphicsenvironment.getlocalgraphicsenvironment(); graphicsconfig = env.getdefaultscreendevice().getdefaultconfiguration(); } [CODE]public void setupaftervisible() {[/CODE] createbufferstrategy(3); bufferstrategy = getbufferstrategy(); offscreenbuffer = graphicsconfig.createcompatibleimage( screenwidth, screenheight, transparency.opaque); } [CODE]public void setupgame(){[/CODE] gamestate = titlestate; currentphase = phase1 - 1; playmusic(sound.title_screen_music); } [CODE]public void startgamethread(){[/CODE] gamethread = [CODE]new thread(this);[/CODE] gamethread.start(); } @override [CODE]public void run() {[/CODE] double draw[CODE]internal = 1000000000/fps;[/CODE] double delta = 0; long lasttime = system.nanotime(); long currenttime; fpstimer = system.currenttimemillis(); [CODE]while(gamethread != null){[/CODE] currenttime = system.nanotime(); delta += (currenttime - lasttime)/draw[CODE]internal;[/CODE] lasttime = currenttime; [CODE]if(delta >= 1){[/CODE] update(); // çizim yap render(); delta--; framecount++; // her saniye fps'i güncelle if(system.currenttimemillis() - fpstimer >= 1000) { fps = framecount; framecount = 0; fpstimer = system.currenttimemillis(); } } } } private [CODE]void render() {[/CODE] // bufferstrategy kontrol et [CODE]if (bufferstrategy == null) {[/CODE] [CODE]return;[/CODE] } [CODE]try {[/CODE] graphics2d g2 = offscreenbuffer.creategraphics(); [CODE]try {[/CODE] configuregraphicsquality(g2); g2.setcolor(color.black); g2.fillrect(0, 0, screenwidth, screenheight); [CODE]if (gamestate == titlestate) {[/CODE] ui.draw(g2); } [CODE]else {[/CODE] // oyun öğeleri için ekran sallama uygula affinetransform originaltransform = g2.gettrans[CODE]form();[/CODE] [CODE]if (screenshakeactive) {[/CODE] g2.translate(shakeoffsetx, shakeoffsety); } // tiles tilem.draw(g2); // add to elements to arraylist entitylist.add(player); // monsters adding [CODE]for (int i = 0;[/CODE] i < monsters.size(); i++) { if (monsters.get(i) != null) { entitylist.add(monsters.get(i)); } } // sort collections.sort(entitylist, [CODE]new comparator<entity>() {[/CODE] @override [CODE]public int compare(entity e1, entity e2) {[/CODE] int result = integer.compare(e1.worldy, e2.worldy); [CODE]return result;[/CODE] } }); // draw list [CODE]for (int i = 0;[/CODE] i < entitylist.size(); i++) { if (utilitytool.distancecalculator(entitylist.get(i).worldx, entitylist.get(i).worldy, player.worldx, player.worldy) < 10 * tilesize) { entitylist.get(i).draw(g2); } } // empty list entitylist.clear(); // ammo's draw [CODE]for (ammo ammo : ammos) {[/CODE] if (utilitytool.distancecalculator(ammo.worldx, ammo.worldy, player.worldx, player.worldy) < 8 * tilesize) { ammo.draw(g2); } } // ui çizmeden önce dönüşümü sıfırla (ui sallanmasın) g2.settrans[CODE]form(originaltransform);[/CODE] animationmanager.draw(g2); // ui ui.draw(g2); } } finally { g2.dispose(); } graphics2d g = (graphics2d) bufferstrategy.getdrawgraphics(); [CODE]try {[/CODE] g.drawimage(offscreenbuffer, 0, 0, null); } finally { g.dispose(); } if (!bufferstrategy.contentslost()) { bufferstrategy.show(); } toolkit.getdefaulttoolkit().sync(); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } private [CODE]void configuregraphicsquality(graphics2d g2) {[/CODE] g2.setrenderinghint(renderinghints.key_antialiasing, renderinghints.value_antialias_on); g2.setrenderinghint(renderinghints.key_rendering, renderinghints.value_render_quality); g2.setrenderinghint(renderinghints.key_color_rendering, renderinghints.value_color_render_quality); g2.setrenderinghint(renderinghints.key_interpolation, renderinghints.value_[CODE]interpolation_bilinear);[/CODE] } [CODE]public void update(){[/CODE] [CODE]if(gamestate == playstate){[/CODE] updatescreenshake(); player.update(); // handle phase transitions [CODE]if(phasefinishdraw) {[/CODE] phasetransitioncounter++; [CODE]if(phasetransitioncounter >= phase_transition_duration) {[/CODE] phasefinishdraw = false; phasetransitioncounter = 0; } } [CODE]else if(phasechecker()){[/CODE] phasefinished = true; phasefinishdraw = true; currentphase++; asetter.setmonsterbyphase(); playse(sound.fanfare_sound); } [CODE]for(int i = 0;[/CODE] i < monsters.size(); i++){ if(monsters.get(i) != null){ monster monstertemp = monsters.get(i); if(monstertemp.alive && !monstertemp.dying){ monstertemp.update(); } else if(monstertemp.dying){ monstertemp.updatedying(); } if(!monstertemp.alive){ monsters.set(i, null); } } } [CODE]for(ammo ammo : ammos) {[/CODE] ammo.update(); } animationmanager.update(); } [CODE]if(gamestate == pausestate){[/CODE] } } [CODE]public void playmusic(int i){[/CODE] music.setfile(i); music.play(); music.loop(); } [CODE]public void stopmusic(){[/CODE] music.stop(); } [CODE]public void playse(int i){[/CODE] se.setfile(i); se.setvolume(0.5f); se.play(); } [CODE]public void cleanupresources() {[/CODE] // ses kaynaklarını temizle [CODE]if (music != null) {[/CODE] music.cleanup(); } [CODE]if (se != null) {[/CODE] se.cleanup(); } } [CODE]public boolean phasechecker(){[/CODE] boolean flag = true; [CODE]for(int i = 0;[/CODE] i < monsters.size(); i++){ if(monsters.get(i) != null){ flag = false; break; } } [CODE]return flag;[/CODE] } [CODE]public void resetgame(){[/CODE] currentphase = phase1 - 1; player = [CODE]new player(this, keyh, mouseh);[/CODE] monsters = [CODE]new arraylist<>();[/CODE] ammos = [CODE]new arraylist<>();[/CODE] asetter.resetchances(); stopmusic(); playmusic(sound.phase1_music); } [CODE]public void savegame(){[/CODE] gamesavedata data = [CODE]new gamesavedata();[/CODE] data.playerx = player.worldx; data.playery = player.worldy; data.playerlife = player.l[CODE]ife;[/CODE] data.playerscore = player.score; [CODE]for(monster monster:monsters){[/CODE] [CODE]if(monster != null){[/CODE] data.monstersx.add(monster.worldx); data.monstersy.add(monster.worldy); data.monsterslife.add(monster.l[CODE]ife);[/CODE] [CODE]if(monster instanceof normalzombie){[/CODE] data.monsterstype.add(""normal""); } [CODE]else if(monster instanceof reptilezombie){[/CODE] data.monsterstype.add(""reptile""); } [CODE]else if(monster instanceof tankzombie){[/CODE] data.monsterstype.add(""tank""); } [CODE]else{[/CODE] data.monsterstype.add(""acid""); } } } [CODE]for(ammo ammo:ammos){[/CODE] [CODE]if(ammo != null){[/CODE] data.ammosx.add(ammo.worldx); data.ammosy.add(ammo.worldy); data.ammosxspeed.add(ammo.speedx); data.ammosyspeed.add(ammo.speedy); [CODE]if(ammo instanceof pistolammo){[/CODE] data.ammostypes.add(""pistol""); } [CODE]else if(ammo instanceof rifleammo){[/CODE] data.monsterstype.add(""r[CODE]ifle"");[/CODE] } [CODE]else if(ammo instanceof shotgunammo){[/CODE] data.ammostypes.add(""shotgun""); } [CODE]else if(ammo instanceof sniperammo){[/CODE] data.ammostypes.add(""sniper""); } [CODE]else{[/CODE] data.ammostypes.add(""rocket""); } } } [CODE]for(int i = 0;[/CODE] i < 5; i++){ data.weaponsammo[i] = player.weapons[i].ammo; data.weaponsmagazineammo[i] = player.weapons[i].magazineammo; } data.gamephase = currentphase; data.normalzombiechance = asetter.normalzombiechance; data.reptilezombiechance = asetter.reptilezombiechance; data.tankzombiechance = asetter.tankzombiechance; data.acidzombiechance = asetter.acidzombiechance; try(objectoutputstream objout = new objectoutputstream(new fileoutputstream(""bil211game2/resources/save/lastgamesave.bin""))){ objout.writeobject(data); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadgame(){[/CODE] resetgame(); try(objectinputstream objout = new objectinputstream(new fileinputstream(""bil211game2/resources/save/lastgamesave.bin""))){ gamesavedata data = (gamesavedata)objout.readobject(); player = [CODE]new player(this, keyh, mouseh);[/CODE] player.worldx = data.playerx; player.worldy = data.playery; player.life = data.playerl[CODE]ife;[/CODE] player.score = data.playerscore; monsters = [CODE]new arraylist<>();[/CODE] [CODE]for(int i = 0;[/CODE] i < data.monsterstype.size(); i++){ if(data.monsterslife != null && data.monstersx != null && data.monstersy != null && data.monsterstype != null){ switch(data.monsterstype.get(i)){ case ""normal"": monsters.add([CODE]new normalzombie(this));[/CODE] break; case ""reptile"": monsters.add([CODE]new reptilezombie(this));[/CODE] break; case ""tank"": monsters.add([CODE]new tankzombie(this));[/CODE] break; case ""acid"": monsters.add([CODE]new acidzombie(this));[/CODE] break; } if(monsters.size() > i){ monsters.get(i).worldx = data.monstersx.get(i); monsters.get(i).worldy = data.monstersy.get(i); monsters.get(i).life = data.monsterslife.get(i); } } } ammos = [CODE]new arraylist<>();[/CODE] [CODE]for(int i = 0;[/CODE] i < data.ammostypes.size(); i++){ if(data.ammostypes != null && data.ammosx != null && data.ammosxspeed != null && data.ammosy != null && data.ammosyspeed != null){ switch(data.ammostypes.get(i)){ case ""pistol"": ammos.add([CODE]new pistolammo(this));[/CODE] break; case ""rifle"": ammos.add([CODE]new rifleammo(this));[/CODE] break; case ""ahotgun"": ammos.add([CODE]new shotgunammo(this));[/CODE] break; case ""sniper"": ammos.add([CODE]new sniperammo(this));[/CODE] break; case ""rocket"": ammos.add([CODE]new rocketammo(this));[/CODE] break; } ammos.get(i).worldx = data.ammosx.get(i); ammos.get(i).worldy = data.ammosy.get(i); ammos.get(i).speedx = data.ammosxspeed.get(i); ammos.get(i).speedy = data.ammosyspeed.get(i); } } [CODE]for(int i = 0;[/CODE] i < 5; i++){ player.weapons[i].ammo = data.weaponsammo[i]; player.weapons[i].magazineammo = data.weaponsmagazineammo[i]; } currentphase = data.gamephase; asetter.loadchances(data.normalzombiechance, data.reptilezombiechance, data.tankzombiechance, data.acidzombiechance); gamestate = playstate; } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]catch (classnotfoundexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } stopmusic(); playmusic(sound.phase1_music); } [CODE]public void testmode(){[/CODE] resetgame(); player.worldx = 40*tilesize; player.worldy = 40*tilesize; [CODE]for(int i = 0;[/CODE] i < 30; i++){ [CODE]for(int j = 0;[/CODE] j < 30; j++){ normalzombie zombie = [CODE]new normalzombie(this);[/CODE] monsters.add(zombie); zombie.worldx = (j+9)*tilesize; zombie.worldy = (i+7)*tilesize; } } currentphase = phase10 + 1; gamestate = playstate; } [CODE]public void startscreenshake(int intensity, int duration) {[/CODE] screenshakeactive = true; screenshake[CODE]intensity = intensity;[/CODE] screenshakeduration = duration; screenshaketimer = 0; } private [CODE]void updatescreenshake() {[/CODE] [CODE]if (screenshakeactive) {[/CODE] // zamanla azalan bir yoğunluk hesapla float currentintensity = screenshakeintensity * (1.0f - (float)screenshaketimer / screenshakeduration); // rastgele ofsetler oluştur shakeoffsetx = (int)(shakerandom.next[CODE]int((int)currentintensity * 2 + 1) - currentintensity);[/CODE] shakeoffsety = (int)(shakerandom.next[CODE]int((int)currentintensity * 2 + 1) - currentintensity);[/CODE] screenshaketimer++; [CODE]if (screenshaketimer >= screenshakeduration) {[/CODE] screenshakeactive = false; screenshaketimer = 0; shakeoffsetx = 0; shakeoffsety = 0; } } } } package bil211game2.game.main; import java.awt.basicstroke; import java.awt.color; import java.awt.font; import java.awt.gradientpa[CODE]int;[/CODE] import java.awt.graphics2d; import java.awt.image.bufferedimage; import bil211game2.game.entity.entity; import bil211game2.game.objects.others.obj_hearth; [CODE]public class ui {[/CODE] gamepanel gp; font arial_40, arial_80b; bufferedimage heartfull, hearthalf, heartblank; [CODE]public boolean messageon = false;[/CODE] [CODE]public string message = """";[/CODE] [CODE]int messagecounter = 0;[/CODE] [CODE]public boolean gamefinished = false;[/CODE] graphics2d g2; [CODE]public string currentdialog = """";[/CODE] [CODE]public int commandnum = 0;[/CODE] [CODE]public int pausecommandnum = 0;[/CODE] [CODE]int phasetransitioncounter = 0;[/CODE] boolean transitionflag = false; [CODE]public ui(gamepanel gp){[/CODE] this.gp = gp; arial_40 = new font(""arial"",font.plain,40); arial_80b = new font(""arial"",font.bold,80); // create hud object entity heart = [CODE]new obj_hearth(gp);[/CODE] heartfull = heart.image; hearthalf = heart.image2; heartblank = heart.image3; } [CODE]public void showmessage(string text){[/CODE] message = text; messageon = true; } [CODE]public void draw(graphics2d g2){[/CODE] this.g2 = g2; g2.setfont(arial_40); g2.setcolor(color.white); if(gp.gamestate == gp.playstate){ drawplayerl[CODE]ife();[/CODE] drawplayerammo(); drawplayerscore(); drawzombiecounter(); if(gp.phasefinishdraw){ transitionflag = true; if(gp.currentphase == gp.phase1){ drawphasetransition(""please ready [CODE]for the game"");[/CODE] } [CODE]else{[/CODE] drawphasetransition((gp.currentphase) + "". phase finished.\n please ready [CODE]for next"");[/CODE] } } if(gp.drawfps){ drawfps(); } } if(gp.gamestate == gp.pausestate){ drawplayerl[CODE]ife();[/CODE] drawplayerammo(); drawplayerscore(); drawpausescreen(); } if(gp.gamestate == gp.dialogstate){ drawdialogscreen(); } if(gp.gamestate == gp.titlestate){ drawtitlescreen(); } if(gp.gamestate == gp.finishstate){ drawfinishscreen(); } } [CODE]public void drawpausescreen(){[/CODE] // tüm ekranı kaplayan yarı-saydam siyah arka plan g2.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); // pause menü paneli int panelwidth = gp.tilesize*10; int panelheight = gp.tilesize*8; int panelx = gp.screenwidth/2 - panelwidth/2; int panely = gp.screenheight/2 - panelheight/2; // panel arka planı (mavi-mor gradyan) gradientpa[CODE]int gradient = new gradientpaint( panelx, panely, new color(50, 50, 80), panelx, panely + panelheight, new color(20, 20, 40) );[/CODE] g2.setpa[CODE]int(gradient);[/CODE] g2.fillroundrect(panelx, panely, panelwidth, panelheight, 25, 25); // panel kenarı g2.setstroke([CODE]new basicstroke(3));[/CODE] g2.setcolor([CODE]new color(100, 100, 180, 200));[/CODE] g2.drawroundrect(panelx, panely, panelwidth, panelheight, 25, 25); // ""game paused"" başlığı g2.setfont(new font(""arial"", font.bold, 36)); g2.setcolor([CODE]new color(220, 220, 255));[/CODE] [CODE]string pausedtext = ""game paused"";[/CODE] int pausedx = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(pausedtext)/2;[/CODE] g2.drawstring(pausedtext, pausedx, (int) (panely + gp.tilesize*1.5)); // alt çizgi g2.setstroke([CODE]new basicstroke(2));[/CODE] g2.drawline(panelx + gp.tilesize, panely + gp.tilesize*2, panelx + panelwidth - gp.tilesize, panely + gp.tilesize*2); // karakter resmi (daha küçük) int charactersize = gp.tilesize*3/2; int characterx = gp.screenwidth/2 - charactersize/2; int charactery = (int) (panely + gp.tilesize*2.5); g2.drawimage(gp.player.down1, characterx, charactery, charactersize, charactersize, null); // menü seçenekleri g2.setfont(new font(""arial"", font.plain, 24)); // menü arkaplanları ve metinleri drawmenuitem(""continue"", panelx, (int) (panely + gp.tilesize*4.5), panelwidth, pausecommandnum == 0); drawmenuitem(""save game"", panelx, (int) (panely + gp.tilesize*5.5), panelwidth, pausecommandnum == 1); drawmenuitem(""quit"", panelx, (int) (panely + gp.tilesize*6.5), panelwidth, pausecommandnum == 2); // oyuncu istatistikleri drawpausestats(panelx + gp.tilesize/2, (int) (panely + panelheight - gp.tilesize*0.5 - gp.tilesize/4), panelwidth - gp.tilesize); } [CODE]public void drawsubwindow(int x, int y, int width, int height){[/CODE] color c = [CODE]new color(0,0,0, 175);[/CODE] g2.setcolor(c); g2.fillroundrect(x, y, width, height, 35, 35);; c = [CODE]new color(255,255,255);[/CODE] g2.setcolor(c); // set the outlines what was created by graphics2 g2.setstroke([CODE]new basicstroke(5));[/CODE] g2.drawroundrect(x+5, y+5, width-10, height-10, 25, 25); } [CODE]public void drawdialogscreen(){[/CODE] // window int x = gp.tilesize*2; int y = gp.tilesize/2; int width = gp.screenwidth - (gp.tilesize*4); int height = gp.tilesize*4; drawsubwindow(x, y, width, height); g2.setfont(g2.getfont().derivefont(font.plain, 32f)); x += gp.tilesize/2; y += gp.tilesize; for(string line:currentdialog.split(""\n"")){ g2.draw[CODE]string(line, x, y);[/CODE] y += 40; } } [CODE]public int getxforcenteredtext(string text){[/CODE] int length = (int)g2.getfontmetrics().getstringbounds(text, g2).getwidth(); return gp.screenwidth/2 - length/2; } [CODE]public void drawtitlescreen(){[/CODE] // gradyan arka plan gradientpaint gradient = new gradientpaint(0, 0, new color(40, 40, 60), 0, gp.screenheight, [CODE]new color(80, 20, 80));[/CODE] g2.setpa[CODE]int(gradient);[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); // doku ekleme (küçük kareler şeklinde) g2.setcolor([CODE]new color(0, 0, 0, 50));[/CODE] [CODE]for(int i = 0;[/CODE] i < gp.screenwidth; i += 20) { [CODE]for(int j = 0;[/CODE] j < gp.screenheight; j += 20) { g2.fillrect(i, j, 10, 10); } } // kırmızı yarı saydam kaplama (zombi temasını vurgulamak için) g2.setcolor([CODE]new color(142, 22, 22, 70));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); // oyun başlığı [CODE]string gametitle = ""zombie apocalypse"";[/CODE] g2.setfont(new font(""impact"", font.bold, 60)); // başlığa gölge efekti ekleme g2.setcolor([CODE]new color(120, 0, 0));[/CODE] [CODE]int x = getxforcenteredtext(gametitle);[/CODE] int y = gp.tilesize*3; g2.draw[CODE]string(gametitle, x+3, y+3);[/CODE] // başlık ana rengi g2.setcolor([CODE]new color(220, 20, 20));[/CODE] g2.draw[CODE]string(gametitle, x, y);[/CODE] // karakter gösterimi int charactersize = gp.tilesize*3; int characterx = gp.screenwidth/2 - charactersize/2; int charactery = y + gp.tilesize; g2.drawimage(gp.player.down1, characterx, charactery - gp.tilesize + gp.tilesize/2, charactersize, charactersize, null); // menü paneli int menuwidth = gp.tilesize*8; int menuheight = gp.tilesize*4 + gp.tilesize/2 + gp.tilesize/8; int menux = gp.screenwidth/2 - menuwidth/2; int menuy = charactery + charactersize - gp.tilesize/6; // menü arka planı g2.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2.fillroundrect(menux, menuy, menuwidth, menuheight, 25, 25); // menü kenarı g2.setstroke([CODE]new basicstroke(3));[/CODE] g2.setcolor([CODE]new color(100, 20, 20, 200));[/CODE] g2.drawroundrect(menux, menuy, menuwidth, menuheight, 25, 25); // menü başlığı g2.setfont(new font(""arial"", font.bold, 24)); g2.setcolor([CODE]new color(220, 220, 220));[/CODE] [CODE]string menutitle = ""main menu"";[/CODE] [CODE]int menutitlex = getxforcenteredtext(menutitle);[/CODE] g2.drawstring(menutitle, menutitlex, menuy + gp.tilesize/2 + 10); // alt çizgi g2.setstroke([CODE]new basicstroke(2));[/CODE] g2.drawline(menux + gp.tilesize, menuy + gp.tilesize/2 + 20, menux + menuwidth - gp.tilesize, menuy + gp.tilesize/2 + 20); // menü seçenekleri g2.setfont(new font(""arial"", font.plain, 20)); // menü öğeleri [CODE]string[] options = {[/CODE]""[CODE]new game"", ""test mode"", ""load game"", ""quit""}[/CODE]; [CODE]for(int i = 0;[/CODE] i < options.length; i++) { drawmenuoption(options[i], menux, (int) (menuy + gp.tilesize*1.5 + (i * gp.tilesize*0.9)), menuwidth, i == commandnum); } // ekranın alt kısmında kontrol bilgileri g2.setfont(new font(""arial"", font.plain, 12)); g2.setcolor([CODE]new color(180, 180, 180));[/CODE] [CODE]string controlstext = ""controls: w,a,s,d to move | mouse to aim and shoot | r to reload | p to pause"";[/CODE] int controlsx = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(controlstext)/2;[/CODE] g2.drawstring(controlstext, controlsx, gp.screenheight - gp.tilesize/8); } [CODE]public void menuselect(){[/CODE] [CODE]if(commandnum == 0){[/CODE] gp.gamestate = gp.playstate; gp.asetter.setmonsterbyphase(); gp.stopmusic(); gp.playmusic(sound.phase1_music); } [CODE]else if(commandnum == 1){[/CODE] gp.testmode(); gp.stopmusic(); gp.playmusic(sound.phase1_music); } [CODE]else if(commandnum == 2){[/CODE] gp.loadgame(); } [CODE]else{[/CODE] system.exit(0); } } [CODE]public void drawplayerlife(){[/CODE] int x = gp.screenwidth - gp.tilesize*4; int y = gp.tilesize/2; [CODE]int i = 0;[/CODE] // draw max life while(i < gp.player.maxl[CODE]ife / 2){[/CODE] g2.drawimage(heartblank, x, y, null); i++; x += gp.tilesize + gp.tilesize/6; } // reset x = gp.screenwidth - gp.tilesize*4; y = gp.tilesize/2; i = 0; // draw current life while(i < gp.player.l[CODE]ife){[/CODE] g2.drawimage(hearthalf, x, y, null); i++; if(i < gp.player.l[CODE]ife){[/CODE] g2.drawimage(heartfull, x, y, null); } i++; x += gp.tilesize + gp.tilesize/6; } } [CODE]public void drawplayerammo(){[/CODE] int x = gp.tilesize/2; int y = gp.tilesize/2; int width = gp.tilesize*4; int height = gp.tilesize; // arka plan paneli g2.setcolor([CODE]new color(40, 40, 40, 200));[/CODE] g2.fillroundrect(x, y, width, height, 15, 15); // silah adı [CODE]string weaponname = """";[/CODE] switch(gp.player.currentweaponindex) { case 0: weaponname = ""pistol""; break; case 1: weaponname = ""r[CODE]ifle"";[/CODE] break; case 2: weaponname = ""shotgun""; break; case 3: weaponname = ""sniper""; break; case 4: weaponname = ""rocket""; break; } g2.setfont(new font(""arial"", font.bold, 16)); g2.setcolor(color.white); g2.draw[CODE]string(weaponname, x + 10, y + 20);[/CODE] // mevcut mermi / toplam mermi string ammotext = gp.player.weapons[gp.player.currentweaponindex].magazineammo + "" / "" + gp.player.weapons[gp.player.currentweaponindex].ammo; g2.draw[CODE]string(ammotext, x + 10, y + height - 4);[/CODE] // sarjor doluluk seviyesi int magazinesize = gp.player.weapons[gp.player.currentweaponindex].magazinesize; int currentammo = gp.player.weapons[gp.player.currentweaponindex].magazineammo; [CODE]int barwidth = width - 20;[/CODE] [CODE]int barheight = 5;[/CODE] [CODE]int barx = x + 10;[/CODE] [CODE]int bary = y + height - 25;[/CODE] // boş şarjör g2.setcolor([CODE]new color(100, 100, 100));[/CODE] g2.fillrect(barx, bary, barwidth, barheight); // dolu şarjör float ammoratio = (float)currentammo / magazinesize; [CODE]int filledwidth = (int)(barwidth * ammoratio);[/CODE] g2.setcolor([CODE]new color(230, 230, 30));[/CODE] g2.fillrect(barx, bary, filledwidth, barheight); } [CODE]public void drawphasetransition(string text){[/CODE] // yarı saydam siyah arka plan g2.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); // dalgalı animasyon efekti float alpha = 0.7f + 0.3f * (float)math.sin(system.currenttimemillis() / 200.0); g2.setcolor([CODE]new color(255, 165, 0, (int)(alpha * 255)));[/CODE] // ana metin g2.setfont(new font(""arial"", font.bold, 40)); int y = gp.screenheight/2 - 50; for(string line : text.split(""\n"")){ [CODE]int x = getxforcenteredtext(line);[/CODE] g2.draw[CODE]string(line, x, y);[/CODE] y += 50; } // alt bilgi metni g2.setfont(new font(""arial"", font.plain, 20)); g2.setcolor([CODE]new color(255, 255, 255, 200));[/CODE] string readytext = ""zombie amount: "" + ((gp.currentphase + 1)*3); [CODE]int readyx = getxforcenteredtext(readytext);[/CODE] g2.drawstring(readytext, readyx, gp.screenheight/2 + 100); } [CODE]public void drawplayerscore(){[/CODE] // skor paneli konumu ve boyutu int x = gp.screenwidth - gp.tilesize*4 - gp.tilesize/2; int y = gp.tilesize/2 + gp.tilesize + 10; int width = gp.tilesize*4; int height = gp.tilesize; // arka plan paneli g2.setcolor([CODE]new color(40, 40, 40, 200));[/CODE] g2.fillroundrect(x, y, width, height, 15, 15); // panel kenarı g2.setcolor([CODE]new color(150, 150, 150, 150));[/CODE] g2.setstroke([CODE]new basicstroke(2));[/CODE] g2.drawroundrect(x, y, width, height, 15, 15); // skor etiketi g2.setfont(new font(""arial"", font.bold, 18)); g2.setcolor([CODE]new color(220, 220, 220));[/CODE] g2.draw[CODE]string(""score:"", x + 10, y + height/2 + 6);[/CODE] // skor değeri g2.setfont(new font(""arial"", font.bold, 22)); g2.setcolor([CODE]new color(255, 215, 0));[/CODE] // altın sarısı string scorevalue = string.valueof(gp.player.score); int valuex = x + width - g2.getfontmetrics().[CODE]stringwidth(scorevalue) - 10;[/CODE] g2.draw[CODE]string(scorevalue, valuex, y + height/2 + 6);[/CODE] } [CODE]public void drawfinishscreen(){[/CODE] // tüm ekranı kaplayan yarı-saydam siyah arka plan g2.setcolor([CODE]new color(0, 0, 0, 180));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); // oyun sonu paneli int panelwidth = gp.tilesize*10; int panelheight = gp.tilesize*8; int panelx = gp.screenwidth/2 - panelwidth/2; int panely = gp.screenheight/2 - panelheight/2; // panel arka planı gradientpa[CODE]int gradient = new gradientpaint( panelx, panely, new color(80, 0, 0), panelx, panely + panelheight, new color(30, 0, 0) );[/CODE] g2.setpa[CODE]int(gradient);[/CODE] g2.fillroundrect(panelx, panely, panelwidth, panelheight, 30, 30); // panel kenarı g2.setstroke([CODE]new basicstroke(4));[/CODE] g2.setcolor([CODE]new color(150, 0, 0));[/CODE] g2.drawroundrect(panelx, panely, panelwidth, panelheight, 30, 30); // ""game over"" başlığı g2.setfont(new font(""arial"", font.bold, 48)); g2.setcolor([CODE]new color(200, 0, 0));[/CODE] [CODE]string gameovertext = ""game over"";[/CODE] int gameoverx = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(gameovertext)/2;[/CODE] g2.drawstring(gameovertext, gameoverx, panely + gp.tilesize*2); // alt gölge efekti g2.setcolor([CODE]new color(50, 0, 0));[/CODE] g2.drawstring(gameovertext, gameoverx + 3, panely + gp.tilesize*2 + 3); // skor g2.setfont(new font(""arial"", font.bold, 36)); g2.setcolor([CODE]new color(255, 215, 0));[/CODE] // altın rengi string scoretext = ""score: "" + gp.player.score; int scorex = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(scoretext)/2;[/CODE] g2.drawstring(scoretext, scorex, panely + gp.tilesize*4); // faz bilgisi g2.setfont(new font(""arial"", font.plain, 22)); g2.setcolor([CODE]new color(220, 220, 220));[/CODE] string phasetext = ""phase reached: "" + (gp.currentphase + 1); int phasex = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(phasetext)/2;[/CODE] g2.drawstring(phasetext, phasex, panely + gp.tilesize*5); // yeniden başlatma talimatı g2.setfont(new font(""arial"", font.bold, 20)); g2.setcolor([CODE]new color(200, 200, 200));[/CODE] [CODE]string restarttext = ""press enter to return to main menu"";[/CODE] int restartx = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(restarttext)/2;[/CODE] // yanıp sönen metin için basit efekt if(system.currenttimemillis() / 500 % 2 == 0) { g2.drawstring(restarttext, restartx, panely + gp.tilesize*7); } } [CODE]public void drawfps() {[/CODE] // fps göstergesi için konum ve boyut int x = gp.tilesize/2; int y = gp.screenheight - gp.tilesize; int width = gp.tilesize*2; int height = gp.tilesize/2; // arka plan paneli g2.setcolor([CODE]new color(0, 0, 0, 180));[/CODE] g2.fillroundrect(x, y, width, height, 10, 10); // panel kenarı g2.setcolor([CODE]new color(150, 150, 150, 120));[/CODE] g2.setstroke([CODE]new basicstroke(1));[/CODE] g2.drawroundrect(x, y, width, height, 10, 10); // fps değeri g2.setfont(new font(""consolas"", font.bold, 14)); // fps durumuna göre renk değişimi if (gp.fps >= 55) { g2.setcolor([CODE]new color(30, 180, 30));[/CODE] // yeşil - iyi } else if (gp.fps >= 30) { g2.setcolor([CODE]new color(180, 180, 30));[/CODE] // sarı - orta } [CODE]else {[/CODE] g2.setcolor([CODE]new color(180, 30, 30));[/CODE] // kırmızı - düşük } string fpstext = ""fps: "" + gp.fps; [CODE]int textx = x + 10;[/CODE] int texty = y + height - gp.tilesize/8 - 1; g2.draw[CODE]string(fpstext, textx, texty);[/CODE] } private [CODE]void drawmenuitem(string text, int x, int y, int width, boolean selected) {[/CODE] int itemheight = gp.tilesize/2 + 10; int textx = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(text)/2;[/CODE] // seçili öğe için arka plan [CODE]if(selected) {[/CODE] g2.setcolor([CODE]new color(100, 100, 180, 180));[/CODE] g2.fillroundrect(x + gp.tilesize, y - itemheight/2, width - gp.tilesize*2, itemheight, 15, 15); g2.setcolor([CODE]new color(220, 220, 255));[/CODE] // seçim işaretçisi g2.fillpolygon( [CODE]new int[]{[/CODE]x + gp.tilesize - 10, x + gp.tilesize - 20, x + gp.tilesize - 10}, [CODE]new int[]{[/CODE]y - 8, y, y + 8}, 3 ); } [CODE]else {[/CODE] g2.setcolor([CODE]new color(180, 180, 180));[/CODE] } // menü metni g2.draw[CODE]string(text, textx, y + 10);[/CODE] } private [CODE]void drawpausestats(int x, int y, int width) {[/CODE] g2.setfont(new font(""arial"", font.plain, 16)); g2.setcolor([CODE]new color(180, 180, 180));[/CODE] // skor string scoretext = ""score: "" + gp.player.score; g2.draw[CODE]string(scoretext, x, y);[/CODE] // can string healthtext = ""health: "" + gp.player.life + ""/"" + gp.player.maxl[CODE]ife;[/CODE] int healthx = x + width - g2.getfontmetrics().[CODE]stringwidth(healthtext);[/CODE] g2.draw[CODE]string(healthtext, healthx, y);[/CODE] // silah [CODE]string weapontext = ""weapon: "";[/CODE] switch(gp.player.currentweaponindex) { case 0: weapontext += ""pistol""; break; case 1: weapontext += ""r[CODE]ifle"";[/CODE] break; case 2: weapontext += ""shotgun""; break; case 3: weapontext += ""sniper""; break; case 4: weapontext += ""rocket""; break; } g2.draw[CODE]string(weapontext, x, y + 25);[/CODE] // mevcut faz string phasetext = ""phase: "" + (gp.currentphase + 1); int phasex = x + width - g2.getfontmetrics().[CODE]stringwidth(phasetext);[/CODE] g2.draw[CODE]string(phasetext, phasex, y + 25);[/CODE] } private [CODE]void drawmenuoption(string text, int x, int y, int width, boolean selected) {[/CODE] int itemheight = gp.tilesize/2; int textx = gp.screenwidth/2 - g2.getfontmetrics().[CODE]stringwidth(text)/2;[/CODE] // seçili öğe için arka plan [CODE]if(selected) {[/CODE] // kırmızı gradyan arka plan gradientpaint optiongradient = new gradientpaint( x + gp.tilesize, y - itemheight/2, new color(120, 20, 20, 200), x + gp.tilesize, y + itemheight/2, [CODE]new color(180, 30, 30, 200) );[/CODE] g2.setpa[CODE]int(optiongradient);[/CODE] g2.fillroundrect(x + gp.tilesize/2, y - itemheight/2, width - gp.tilesize, itemheight, 15, 15); // seçim işaretçisi (üçgen) g2.setcolor([CODE]new color(255, 255, 255));[/CODE] g2.fillpolygon( [CODE]new int[]{[/CODE]x + gp.tilesize/2 - 5, x + gp.tilesize/2 - 15, x + gp.tilesize/2 - 5}, [CODE]new int[]{[/CODE]y - 8, y, y + 8}, 3 ); g2.setcolor([CODE]new color(255, 255, 255));[/CODE] } [CODE]else {[/CODE] g2.setcolor([CODE]new color(200, 200, 200));[/CODE] } // menü metni g2.drawstring(text, textx, y + gp.tilesize/6 - 1); } [CODE]public void drawzombiecounter() {[/CODE] // zombi sayacı için konum ve boyut int x = gp.tilesize/2; int y = gp.tilesize*2 - gp.tilesize/4; int width = gp.tilesize*4; int height = (int)(gp.tilesize*0.8); // arka plan paneli g2.setcolor([CODE]new color(40, 0, 0, 180));[/CODE] g2.fillroundrect(x, y, width, height, 15, 15); // panel kenarı g2.setcolor([CODE]new color(120, 20, 20, 150));[/CODE] g2.setstroke([CODE]new basicstroke(2));[/CODE] g2.drawroundrect(x, y, width, height, 15, 15); // zombi ikonu (basit bir zombi kafa silüeti) g2.setcolor([CODE]new color(50, 150, 50));[/CODE] // zombi yeşili int iconsize = (int)(height * 0.6); [CODE]int iconx = x + 10;[/CODE] // hayatta kalan zombi sayısı [CODE]int remainingzombies = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < gp.monsters.size(); i++) { if(gp.monsters.get(i) != null) { remainingzombies++; } } // zombi sayısı metni g2.setfont(new font(""arial"", font.bold, 18)); g2.setcolor(color.white); [CODE]string zombietext = ""zombies: "" + remainingzombies;[/CODE] g2.draw[CODE]string(zombietext, iconx + iconsize + 15, y + height/2 + 6);[/CODE] // eğer faz bitmiş ve yeni zombiler gelecekse uyarı işareti ekle if(gp.phasefinished && !gp.phasefinishdraw) { g2.setfont(new font(""arial"", font.bold, 14)); g2.setcolor([CODE]new color(255, 200, 0));[/CODE] [CODE]string warningtext = ""next wave coming!"";[/CODE] g2.draw[CODE]string(warningtext, x + 10, y + height + 20);[/CODE] } } } package bil211game2.game.main; import java.awt.rectangle; [CODE]public class eventrect extends rectangle{[/CODE] [CODE]int eventrectdefaultx, eventrectdefaulty;[/CODE] boolean eventdone = false; } package bil211game2.game.main; import java.io.serializable; import java.util.arraylist; [CODE]public class gamesavedata implements serializable{[/CODE] [CODE]public int playerx;[/CODE] [CODE]public int playery;[/CODE] [CODE]public int playerlife;[/CODE] [CODE]public int playerscore;[/CODE] [CODE]public arraylist<integer> monstersx = new arraylist<>();[/CODE] [CODE]public arraylist<integer> monstersy = new arraylist<>();[/CODE] [CODE]public arraylist<integer> monsterslife = new arraylist<>();[/CODE] [CODE]public arraylist<string> monsterstype = new arraylist<>();[/CODE] [CODE]public arraylist<integer> ammosx = new arraylist<>();[/CODE] [CODE]public arraylist<integer> ammosy = new arraylist<>();[/CODE] [CODE]public arraylist<integer> ammosxspeed = new arraylist<>();[/CODE] [CODE]public arraylist<integer> ammosyspeed = new arraylist<>();[/CODE] [CODE]public arraylist<string> ammostypes = new arraylist<>();[/CODE] [CODE]public int[] weaponsammo = new int[5];[/CODE] [CODE]public int[] weaponsmagazineammo = new int[5];[/CODE] [CODE]public int gamephase;[/CODE] [CODE]public int normalzombiechance, reptilezombiechance, tankzombiechance, acidzombiechance;[/CODE] } package bil211game2.game.main; import java.util.random; import bil211game2.game.entity.acidzombie; import bil211game2.game.entity.monster; import bil211game2.game.entity.normalzombie; import bil211game2.game.entity.reptilezombie; import bil211game2.game.entity.tankzombie; [CODE]public class assetsetter{[/CODE] gamepanel gp; [CODE]int normalzombiechance = 100;[/CODE] [CODE]int reptilezombiechance = 0;[/CODE] [CODE]int tankzombiechance = 0;[/CODE] [CODE]int acidzombiechance = 0;[/CODE] [CODE]public assetsetter(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public void setmonster(){[/CODE] gp.monsters.add(0, [CODE]new normalzombie(gp));[/CODE] gp.monsters.get(0).worldx = gp.tilesize*23; gp.monsters.get(0).worldy = gp.tilesize*36; gp.monsters.add(1, [CODE]new normalzombie(gp));[/CODE] gp.monsters.get(1).worldx = gp.tilesize*27; gp.monsters.get(1).worldy = gp.tilesize*20; gp.monsters.add(2, [CODE]new normalzombie(gp));[/CODE] gp.monsters.get(2).worldx = gp.tilesize*29; gp.monsters.get(2).worldy = gp.tilesize*20; gp.monsters.add(3, [CODE]new normalzombie(gp));[/CODE] gp.monsters.get(3).worldx = gp.tilesize*25; gp.monsters.get(3).worldy = gp.tilesize*20; gp.monsters.add(4, [CODE]new reptilezombie(gp));[/CODE] gp.monsters.get(4).worldx = gp.tilesize*27; gp.monsters.get(4).worldy = gp.tilesize*23; gp.monsters.add(5, [CODE]new reptilezombie(gp));[/CODE] gp.monsters.get(5).worldx = gp.tilesize*27; gp.monsters.get(5).worldy = gp.tilesize*26; gp.monsters.add(6, [CODE]new tankzombie(gp));[/CODE] gp.monsters.get(6).worldx = gp.tilesize*27; gp.monsters.get(6).worldy = gp.tilesize*17; gp.monsters.add(7, [CODE]new tankzombie(gp));[/CODE] gp.monsters.get(7).worldx = gp.tilesize*15; gp.monsters.get(7).worldy = gp.tilesize*14; gp.monsters.add(8, [CODE]new tankzombie(gp));[/CODE] gp.monsters.get(8).worldx = gp.tilesize*18; gp.monsters.get(8).worldy = gp.tilesize*18; gp.monsters.add(9, [CODE]new tankzombie(gp));[/CODE] gp.monsters.get(9).worldx = gp.tilesize*30; gp.monsters.get(9).worldy = gp.tilesize*30; gp.monsters.add(10, [CODE]new acidzombie(gp));[/CODE] gp.monsters.get(10).worldx = gp.tilesize*31; gp.monsters.get(10).worldy = gp.tilesize*31; gp.monsters.add(11, [CODE]new acidzombie(gp));[/CODE] gp.monsters.get(11).worldx = gp.tilesize*40; gp.monsters.get(11).worldy = gp.tilesize*40; } [CODE]public void setmonsterbyphase(){[/CODE] if(gp.gamestate == gp.playstate){ random random = [CODE]new random();[/CODE] if(gp.currentphase == gp.phase1 || gp.currentphase == gp.phase2){ normalzombiechance -= 10; reptilezombiechance += 10; } else if(gp.currentphase == gp.phase3 || gp.currentphase == gp.phase4){ normalzombiechance -= 10; tankzombiechance += 10; } else if(gp.currentphase == gp.phase5 || gp.currentphase == gp.phase6){ normalzombiechance -= 5; acidzombiechance += 5; } else if(gp.currentphase == gp.phase7 || gp.currentphase == gp.phase8){ normalzombiechance -= 10; reptilezombiechance += 3; tankzombiechance += 3; acidzombiechance += 4; } [CODE]for(int i = 0;[/CODE] i < (gp.currentphase+1)*3; i++){ int chance = random.next[CODE]int(101);[/CODE] [CODE]if(chance < normalzombiechance){[/CODE] normalzombie normalzombie = [CODE]new normalzombie(gp);[/CODE] monstercreator(normalzombie); } [CODE]else if(chance < normalzombiechance + reptilezombiechance){[/CODE] reptilezombie reptilezombie = [CODE]new reptilezombie(gp);[/CODE] monstercreator(reptilezombie); } [CODE]else if(chance < normalzombiechance + reptilezombiechance + tankzombiechance){[/CODE] tankzombie tankzombie = [CODE]new tankzombie(gp);[/CODE] monstercreator(tankzombie); } [CODE]else{[/CODE] acidzombie acidzombie = [CODE]new acidzombie(gp);[/CODE] monstercreator(acidzombie); } } gp.phasefinished = false; } } [CODE]public void monstercreator(monster monster){[/CODE] if(gp.gamestate == gp.playstate){ [CODE]int x = 0;[/CODE] [CODE]int y = 0;[/CODE] random random = [CODE]new random();[/CODE] boolean validposition = false; [CODE]while(!validposition){[/CODE] x = random.nextint(gp.maxworldcol); y = random.nextint(gp.maxworldrow); // harita sınırları içinde mi kontrolü // çarpışma olmayan bir karo mu? if(!gp.tilem.tiles[gp.tilem.maptilenum[x][y]].collision){ double distance = utilitytool.distancecalculator(x*gp.tilesize, y*gp.tilesize, gp.player.worldx, gp.player.worldy); if(distance > 3*gp.tilesize){ // oyuncudan en az 3 karo uzakta olsun boolean positionfree = true; // mevcut monster listesi üzerinde güvenli yineleme [CODE]for(int i = 0;[/CODE] i < gp.monsters.size(); i++){ monster monstertemp = gp.monsters.get(i); if(monstertemp != null && monstertemp.worldx/gp.tilesize == x && monstertemp.worldy/gp.tilesize == y){ positionfree = false; break; } } [CODE]if(positionfree){[/CODE] validposition = true; } } } } monster.worldx = x*gp.tilesize; monster.worldy = y*gp.tilesize; gp.monsters.add(monster); } } [CODE]public void resetchances(){[/CODE] normalzombiechance = 100; reptilezombiechance = 0; tankzombiechance = 0; acidzombiechance = 0; } [CODE]public void loadchances(int normalzombiechance, int reptilezombiechance, int tankzombiechance, int acidzombiechance){[/CODE] this.normalzombiechance = normalzombiechance; this.reptilezombiechance = reptilezombiechance; this.tankzombiechance = tankzombiechance; this.acidzombiechance = acidzombiechance; } } package bil211game2.game.main; import java.awt.event.keyevent; import java.awt.event.keylistener; [CODE]public class keyhandler implements keylistener{[/CODE] [CODE]public boolean uppressed, downpressed, leftpressed, rightpressed, rpressed, escpressed, hpressed;[/CODE] gamepanel gp; [CODE]public keyhandler(gamepanel gp){[/CODE] this.gp = gp; } @override [CODE]public void keytyped(keyevent e) {[/CODE] } @override [CODE]public void keypressed(keyevent e){[/CODE] int code = e.getkeycode(); if(gp.gamestate == gp.playstate){ if(code == keyevent.vk_w){ uppressed = true; } if(code == keyevent.vk_s){ downpressed = true; } if(code == keyevent.vk_a){ leftpressed = true; } if(code == keyevent.vk_d){ rightpressed = true; } if(code == keyevent.vk_p){ gp.gamestate = gp.pausestate; } if(code == keyevent.vk_r){ rpressed = true; } if(code == keyevent.vk_escape){ escpressed = true; } if(code == keyevent.vk_1){ gp.player.changeweapon(0); } if(code == keyevent.vk_2){ gp.player.changeweapon(1); } if(code == keyevent.vk_3){ gp.player.changeweapon(2); } if(code == keyevent.vk_4){ gp.player.changeweapon(3); } if(code == keyevent.vk_5){ gp.player.changeweapon(4); } if(code == keyevent.vk_r){ gp.player.weapons[gp.player.currentweaponindex].reload(); } if(code == keyevent.vk_t){ gp.drawfps = !gp.drawfps; } if(code == keyevent.vk_h){ hpressed = true; } if(code == keyevent.vk_l){ gp.tilem.loadmap(""/bil211game2/resources/maps/apocalypseworld_1.txt""); } } else if(gp.gamestate == gp.pausestate){ if(code == keyevent.vk_p){ gp.gamestate = gp.playstate; } if(code == keyevent.vk_w){ gp.ui.pausecommandnum--; if(gp.ui.pausecommandnum < 0){ gp.ui.pausecommandnum = 2; } } if(code == keyevent.vk_s){ gp.ui.pausecommandnum++; if(gp.ui.pausecommandnum > 2){ gp.ui.pausecommandnum = 0; } } if(code == keyevent.vk_enter){ if(gp.ui.pausecommandnum == 0){ gp.gamestate = gp.playstate; } else if(gp.ui.pausecommandnum == 1){ gp.savegame(); } [CODE]else{[/CODE] gp.resetgame(); gp.gamestate = gp.titlestate; gp.stopmusic(); gp.playmusic(sound.title_screen_music); } } } else if(gp.gamestate == gp.titlestate){ if(code == keyevent.vk_w){ gp.ui.commandnum--; if(gp.ui.commandnum < 0){ gp.ui.commandnum = 3; } } if(code == keyevent.vk_s){ gp.ui.commandnum++; if(gp.ui.commandnum > 3){ gp.ui.commandnum = 0; } } if(code == keyevent.vk_enter){ gp.ui.menuselect(); } } else if(gp.gamestate == gp.finishstate){ if(code == keyevent.vk_enter){ gp.resetgame(); gp.gamestate = gp.titlestate; gp.stopmusic(); gp.playmusic(sound.title_screen_music); } } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] int code = e.getkeycode(); if(code == keyevent.vk_w){ uppressed = false; } if(code == keyevent.vk_s){ downpressed = false; } if(code == keyevent.vk_a){ leftpressed = false; } if(code == keyevent.vk_d){ rightpressed = false; } if(code == keyevent.vk_p){} if(code == keyevent.vk_r){ rpressed = false; } if(code == keyevent.vk_escape){ escpressed = false; } if(code == keyevent.vk_h){ hpressed = false; } } } package bil211game2.game.main; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import javax.swing.jframe; [CODE]public class game {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe window = [CODE]new jframe();[/CODE] window.setdefaultcloseoperation(jframe.exit_on_close); window.setresizable(false); window.settitle(""zombie apocalypse""); [CODE]try {[/CODE] bufferedimage icon = imageio.read( game.class.getresourceasstream (""/bil211game2/resources/images/other/zombie poster/zombie-tileset---_0296_capa-297.png"")); window.seticonimage(icon); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } gamepanel gamepanel = [CODE]new gamepanel();[/CODE] window.add(gamepanel); window.pack(); window.setlocationrelativeto(null); window.setvisible(true); window.addwindowlistener(new java.awt.event.windowadapter() { @override public void windowclosing(java.awt.event.windowevent windowevent) { gamepanel.cleanupresources(); } }); gamepanel.setupaftervisible(); gamepanel.setupgame(); gamepanel.startgamethread(); } } /* * 4500 satir kod */ package bil211game2.game.main; import java.util.arraylist; import bil211game2.game.entity.entity; import bil211game2.game.objects.ammos.ammo; [CODE]public class collisionchecker {[/CODE] gamepanel gp; [CODE]public collisionchecker(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public void checktile(entity entity){[/CODE] int entityleftworldx = entity.worldx + entity.solidarea.x; int entityrightworldx = entity.worldx + entity.solidarea.x + entity.solidarea.width; int entitytopworldy = entity.worldy + entity.solidarea.y; int entitybottomworldy = entity.worldy + entity.solidarea.y + entity.solidarea.height; int entityleftcol = entityleftworldx/gp.tilesize; int entityrightcol = entityrightworldx/gp.tilesize; int entitytoprow = entitytopworldy/gp.tilesize; int entitybottomrow = entitybottomworldy/gp.tilesize; [CODE]int tilenum1, tilenum2, tilenum3, tilenum4;[/CODE] switch(entity.direction){ case ""up"": entitytoprow = (entitytopworldy - entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityleftcol][entitytoprow]; tilenum2 = gp.tilem.maptilenum[entityrightcol][entitytoprow]; tilenum3 = gp.tilem.maptilesecondstage[entityleftcol][entitytoprow]; tilenum4 = gp.tilem.maptilesecondstage[entityrightcol][entitytoprow]; if(gp.tilem.tiles[tilenum1].collision||gp.tilem.tiles[tilenum2].collision ||gp.tilem.tiles[tilenum3 != 0 ? tilenum3 : 0].collision ||gp.tilem.tiles[tilenum4 != 0 ? tilenum3 : 0].collision){ entity.collisionon = true; } break; case ""down"": entitybottomrow = (entitybottomworldy + entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityleftcol][entitybottomrow]; tilenum2 = gp.tilem.maptilenum[entityrightcol][entitybottomrow]; tilenum3 = gp.tilem.maptilesecondstage[entityleftcol][entitybottomrow]; tilenum4 = gp.tilem.maptilesecondstage[entityrightcol][entitybottomrow]; if(gp.tilem.tiles[tilenum1].collision||gp.tilem.tiles[tilenum2].collision ||gp.tilem.tiles[tilenum3 != 0 ? tilenum3 : 0].collision ||gp.tilem.tiles[tilenum4 != 0 ? tilenum3 : 0].collision){ entity.collisionon = true; } break; case ""left"": entityleftcol = (entityleftworldx - entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityleftcol][entitytoprow]; tilenum2 = gp.tilem.maptilenum[entityleftcol][entitybottomrow]; tilenum3 = gp.tilem.maptilesecondstage[entityleftcol][entitytoprow]; tilenum4 = gp.tilem.maptilesecondstage[entityleftcol][entitybottomrow]; if(gp.tilem.tiles[tilenum1].collision||gp.tilem.tiles[tilenum2].collision ||gp.tilem.tiles[tilenum3 != 0 ? tilenum3 : 0].collision ||gp.tilem.tiles[tilenum4 != 0 ? tilenum3 : 0].collision){ entity.collisionon = true; } break; case ""right"": entityrightcol = (entityrightworldx + entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityrightcol][entitytoprow]; tilenum2 = gp.tilem.maptilenum[entityrightcol][entitybottomrow]; tilenum3 = gp.tilem.maptilesecondstage[entityrightcol][entitytoprow]; tilenum4 = gp.tilem.maptilesecondstage[entityrightcol][entitybottomrow]; if(gp.tilem.tiles[tilenum1].collision||gp.tilem.tiles[tilenum2].collision ||gp.tilem.tiles[tilenum3 != 0 ? tilenum3 : 0].collision ||gp.tilem.tiles[tilenum4 != 0 ? tilenum3 : 0].collision){ entity.collisionon = true; } break; } } [CODE]public int checkentity(entity entity, arraylist<? extends entity> target){[/CODE] [CODE]int index = 999;[/CODE] [CODE]for(int i = 0;[/CODE] i < target.size(); i++){ if(target.get(i) != null){ entity trgt = target.get(i); // get entity's solid area position entity.solidarea.x = entity.worldx + entity.solidarea.x; entity.solidarea.y = entity.worldy + entity.solidarea.y; // get the object's solid area position trgt.solidarea.x = trgt.worldx + trgt.solidarea.x; trgt.solidarea.y = trgt.worldy + trgt.solidarea.y; switch(entity.direction){ case ""up"": entity.solidarea.y -= entity.speed; break; case ""down"": entity.solidarea.y += entity.speed; break; case ""left"": entity.solidarea.x -= entity.speed; break; case ""right"": entity.solidarea.x += entity.speed; break; } if(entity.solidarea.intersects(trgt.solidarea)){ [CODE]if(trgt != entity){[/CODE] entity.collisionon = true; index = i; } } entity.solidarea.x = entity.solidareadefaultx; entity.solidarea.y = entity.solidareadefaulty; trgt.solidarea.x = trgt.solidareadefaultx; trgt.solidarea.y = trgt.solidareadefaulty; } } [CODE]return index;[/CODE] } [CODE]public boolean checkplayer(entity entity){[/CODE] boolean contactplayer = false; if(gp.player != null){ // get entity's solid area position entity.solidarea.x = entity.worldx + entity.solidarea.x; entity.solidarea.y = entity.worldy + entity.solidarea.y; // get the object's solid area position gp.player.solidarea.x = gp.player.worldx + gp.player.solidarea.x; gp.player.solidarea.y = gp.player.worldy + gp.player.solidarea.y; switch(entity.direction){ case ""up"": entity.solidarea.y -= entity.speed; break; case ""down"": entity.solidarea.y += entity.speed; break; case ""left"": entity.solidarea.x -= entity.speed; break; case ""right"": entity.solidarea.x += entity.speed; break; } if(entity.solidarea.intersects(gp.player.solidarea)){ entity.collisionon = true; contactplayer = true; } entity.solidarea.x = entity.solidareadefaultx; entity.solidarea.y = entity.solidareadefaulty; gp.player.solidarea.x = gp.player.solidareadefaultx; gp.player.solidarea.y = gp.player.solidareadefaulty; } [CODE]return contactplayer;[/CODE] } [CODE]public boolean checkammo(ammo ammo, entity entity){[/CODE] boolean collision = false; if(ammo == null || entity == null || entity.dying || !entity.alive || ammo.contact){ [CODE]return false;[/CODE] } if(solidareacheck(ammo.worldx, ammo.worldy, ammo.solidareadefaultx, ammo.solidareadefaulty, entity.worldx+ entity.solidareadefaultx, entity.worldy + entity.solidareadefaulty, entity.solidarea.width, entity.solidarea.height, entity.direction, entity.speed)){ collision = true; } [CODE]return collision;[/CODE] } [CODE]public boolean solidareacheck(int o1x,int o1y,int o1width,int o1height,int o2x, int o2y,int o2width,int o2height, string direction, int speed){[/CODE] boolean inside = false; [CODE]int xincr = 0;[/CODE] [CODE]int yincr = 0;[/CODE] switch(direction){ case ""up"": yincr = -speed; break; case ""down"": yincr = +speed; break; case ""left"": xincr = -speed; break; case ""right"": xincr = +speed; break; } [CODE]int centerx = o1x + o1width/2;[/CODE] [CODE]int centery = o1y + o1height/2;[/CODE] [CODE]if(centerx > o2x + xincr && centerx < o2x + o2width + xincr && centery > o2y + yincr && centery < o2y + o2height + yincr){[/CODE] inside = true; } [CODE]return inside;[/CODE] } } package bil211game2.game.main; [CODE]public class eventhandler {[/CODE] gamepanel gp; eventrect[][] eventrects; [CODE]int previouseventx, previouseventy;[/CODE] boolean cantouchevent = true; [CODE]public eventhandler(gamepanel gp){[/CODE] this.gp = gp; eventrects = new eventrect[gp.maxworldcol][gp.maxworldrow]; [CODE]int col = 0;[/CODE] [CODE]int row = 0;[/CODE] while(col < gp.maxworldcol && row < gp.maxworldrow){ eventrects[col][row] = [CODE]new eventrect();[/CODE] eventrects[col][row].x = 27; eventrects[col][row].y = 22; eventrects[col][row].width = 2; eventrects[col][row].height = 2; eventrects[col][row].eventrectdefaultx = eventrects[col][row].x; eventrects[col][row].eventrectdefaulty = eventrects[col][row].y; col++; if(col == gp.maxworldcol){ row++; col = 0; } } } [CODE]public void checkevent(){[/CODE] int xdistance = math.abs(gp.player.worldx - previouseventx); int ydistance = math.abs(gp.player.worldy - previouseventy); int distance = (int)math.sqrt(ydistance*ydistance + xdistance*xdistance); if(distance > gp.tilesize){ cantouchevent = true; } [CODE]if(cantouchevent){[/CODE] [CODE]if(hit(28, 22,""any"")){[/CODE] damagepit(28,22); } [CODE]else if(hit(26, 20,""any"")){[/CODE] teleport(9,7); } } } [CODE]public boolean hit(int col, int row, string reqdirection){[/CODE] boolean hit = false; gp.player.solidarea.x = gp.player.worldx + gp.player.solidarea.x; gp.player.solidarea.y = gp.player.worldy + gp.player.solidarea.y; eventrects[col][row].x = col*gp.tilesize + eventrects[col][row].x; eventrects[col][row].y = row*gp.tilesize + eventrects[col][row].y; if(gp.player.solidarea.intersects(eventrects[col][row]) && !eventrects[col][row].eventdone){ if(gp.player.direction.contentequals(reqdirection) || reqdirection.contentequals(""any"")){ hit = true; previouseventx = gp.player.worldx; previouseventy = gp.player.worldy; } } gp.player.solidarea.x = gp.player.solidareadefaultx; gp.player.solidarea.y = gp.player.solidareadefaulty; eventrects[col][row].x = eventrects[col][row].eventrectdefaultx; eventrects[col][row].y = eventrects[col][row].eventrectdefaulty; [CODE]return hit;[/CODE] } [CODE]public void damagepit(int col, int row){[/CODE] gp.player.l[CODE]ife--;[/CODE] //eventrects[col][row].eventdone = true; cantouchevent = false; } [CODE]public void teleport(int col, int row){[/CODE] gp.player.worldx = col*gp.tilesize; gp.player.worldy = row*gp.tilesize; cantouchevent = false; } } package bil211game2.game.main; import java.awt.cursor; import java.awt.po[CODE]int;[/CODE] import java.awt.toolkit; import java.awt.event.mouseevent; import java.awt.event.mouselistener; import java.awt.event.mousemotionlistener; import java.awt.image.bufferedimage; import javax.imageio.imageio; [CODE]public class mousehandler implements mouselistener, mousemotionlistener{[/CODE] gamepanel gp; [CODE]public mouseevent event;[/CODE] [CODE]public boolean mouseleftpressed;[/CODE] [CODE]public int mousex, mousey;[/CODE] private cursor customnormalcursor; private cursor customtargetcursor; [CODE]public mousehandler(gamepanel gp){[/CODE] this.gp = gp; [CODE]try{[/CODE] bufferedimage cursortargetimg = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/ui/mouse/target.png"")); bufferedimage cursornormalimg = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/ui/mouse/normal.png"")); point hotspottarget = new point(cursortargetimg.getwidth() / 2, cursortargetimg.getheight() / 2); point hotspotnormal = new point(cursornormalimg.getwidth() / 2, cursornormalimg.getheight() / 2); customtargetcursor = toolkit.getdefaulttoolkit().createcustomcursor( cursortargetimg, hotspottarget, ""target cursor""); customnormalcursor = toolkit.getdefaulttoolkit().createcustomcursor( cursornormalimg, hotspotnormal, ""game cursor""); } [CODE]catch(exception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } @override [CODE]public void mouseclicked(mouseevent e) {[/CODE] } @override [CODE]public void mousepressed(mouseevent e) {[/CODE] int code = e.getbutton(); if(code == mouseevent.button1){ mouseleftpressed = true; event = e; } } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] mouseleftpressed = false; } @override [CODE]public void mouseentered(mouseevent e) {[/CODE] [CODE]if(customnormalcursor == null || customtargetcursor == null){[/CODE] gp.setcursor(new cursor(cursor.crosshair_cursor)); } else if(gp.gamestate == gp.playstate){ gp.setcursor(customtargetcursor); } [CODE]else{[/CODE] gp.setcursor(customnormalcursor); } } @override [CODE]public void mouseexited(mouseevent e) {[/CODE] gp.setcursor(new cursor(cursor.default_cursor)); // varsayılana dön } @override [CODE]public void mousedragged(mouseevent e) {[/CODE] // update current mouse position [CODE]while dragging if(mouseleftpressed) {[/CODE] mousex = e.getx(); mousey = e.gety(); event = e; // also update the event object } } @override [CODE]public void mousemoved(mouseevent e) {[/CODE] // update current mouse position while moving mousex = e.getx(); mousey = e.gety(); } } package bil211game2.game.main.tile; import java.awt.image.bufferedimage; [CODE]public class tile {[/CODE] [CODE]public bufferedimage image;[/CODE] [CODE]public boolean collision = false;[/CODE] } package bil211game2.game.main.tile; import java.awt.graphics2d; import java.io.bufferedreader; import java.io.ioexception; import java.io.inputstream; import java.io.inputstreamreader; import java.util.random; import javax.imageio.imageio; import bil211game2.game.main.gamepanel; import bil211game2.game.main.utilitytool; [CODE]public class tilemanager {[/CODE] gamepanel gp; [CODE]public tile[] tiles;[/CODE] [CODE]public int[][] maptilenum;[/CODE] [CODE]public int[][] maptilesecondstage;[/CODE] [CODE]public tilemanager(gamepanel gp){[/CODE] this.gp = gp; tiles = [CODE]new tile[160];[/CODE] maptilenum = new int[gp.maxworldcol][gp.maxworldrow]; maptilesecondstage = new int[gp.maxworldcol][gp.maxworldrow]; gettileimage(); //loadmap(""/bil211game2/resources/maps/grassland1.txt""); loadmap(""/bil211game2/resources/maps/apocalypseworld_1.txt""); } [CODE]public void loadmap(string filepath){[/CODE] try(inputstream in = getclass().getresourceasstream(filepath); bufferedreader br = [CODE]new bufferedreader(new inputstreamreader(in))){[/CODE] random random = [CODE]new random();[/CODE] [CODE]int col = 0;[/CODE] [CODE]int row = 0;[/CODE] while(col < gp.maxscreencol && row < gp.maxworldrow){ string line = br.readline(); while(col < gp.maxworldcol){ string[] numbers = line.split("" ""); [CODE]int num = 0;[/CODE] if(integer.parse[CODE]int(numbers[col]) == 0){[/CODE] boolean flag = random.nextboolean(); [CODE]if(flag){[/CODE] int type = random.next[CODE]int(3);[/CODE] num = type + 1; } [CODE]else{[/CODE] num = integer.parse[CODE]int(numbers[col]);[/CODE] } maptilesecondstage[col][row] = 0; } else if(integer.parse[CODE]int(numbers[col]) == 148){[/CODE] int type = random.next[CODE]int(3);[/CODE] num = type + 148; maptilesecondstage[col][row] = 0; } [CODE]else{[/CODE] boolean flag = random.nextboolean(); [CODE]if(flag){[/CODE] int type = random.next[CODE]int(3);[/CODE] num = type + 1; } [CODE]else{[/CODE] num = integer.parse[CODE]int(numbers[col]);[/CODE] } maptilesecondstage[col][row] = integer.parse[CODE]int(numbers[col]);[/CODE] } maptilenum[col][row] = num; col++; } if(col == gp.maxworldcol){ col =0; row++; } } } [CODE]catch(exception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void gettileimage(){[/CODE] // terrains setup[CODE]new(0, ""terrain variations/zombie-tileset---_0077_capa-78"", false);[/CODE] setup[CODE]new(1, ""terrain variations/zombie-tileset---_0078_capa-79"", false);[/CODE] setup[CODE]new(2, ""terrain variations/zombie-tileset---_0079_capa-80"", false);[/CODE] setup[CODE]new(3, ""terrain variations/zombie-tileset---_0080_capa-81"", false);[/CODE] // terrain roads [CODE]for(int i = 0;[/CODE] i < 12; i++){ setup[CODE]new(i+4, ""modular terrain path/zombie-tileset---_00""+(i+65)+""_capa-""+(i+66), false);[/CODE] } // terrain wall - vertical setup[CODE]new(16, ""terrain wall/zombie-tileset---_0064_capa-65"", true);[/CODE] // modular road [CODE]for(int i = 0;[/CODE] i < 26; i++){ setup[CODE]new(i+17, ""modular road/zombie-tileset---_00""+(i+29)+""_capa-""+(i+30), false);[/CODE] } // small building [CODE]for(int i = 0;[/CODE] i < 8; i++){ setup[CODE]new(i+43, ""modular small building/zombie-tileset---_00""+(i+91)+""_capa-""+(i+92), true);[/CODE] } setup[CODE]new(52, ""modular small building/zombie-tileset---_0099_capa-100"", true);[/CODE] [CODE]for(int i = 0;[/CODE] i < 6; i++){ setup[CODE]new(i+53, ""modular small building/zombie-tileset---_0""+(i+100)+""_capa-""+(i+101), true);[/CODE] } // modular fences [CODE]for(int i = 0;[/CODE] i < 8; i++){ setup[CODE]new(i+59, ""modular fences/zombie-tileset---_0""+(i+126)+""_capa-""+(i+127), true);[/CODE] } [CODE]for(int i = 0;[/CODE] i < 23; i++){ setup[CODE]new(i+67, ""modular fences/zombie-tileset---_0""+(i+194)+""_capa-""+(i+195), true);[/CODE] } // modular barns [CODE]for(int i = 0;[/CODE] i < 58; i++){ setup[CODE]new(i+90, ""modular barns/zombie-tileset---_0""+(i+226)+""_capa-""+(i+227), true);[/CODE] } // water animation frames setup[CODE]new(148, ""water animation frames/zombie-tileset---_0061_capa-62"", true);[/CODE] setup[CODE]new(149, ""water animation frames/zombie-tileset---_0062_capa-63"", true);[/CODE] setup[CODE]new(150, ""water animation frames/zombie-tileset---_0063_capa-64"", true);[/CODE] // tractor setup[CODE]new(151, ""tractor/zombie-tileset---_0172_capa-173"", true);[/CODE] setup[CODE]new(152, ""tractor/zombie-tileset---_0173_capa-174"", true);[/CODE] setup[CODE]new(153, ""tractor/zombie-tileset---_0174_capa-175"", true);[/CODE] setup[CODE]new(154, ""tractor/zombie-tileset---_0175_capa-176"", true);[/CODE] } [CODE]public void setup(int index, string imagename, boolean collision){[/CODE] [CODE]try{[/CODE] tiles[index] = [CODE]new tile();[/CODE] tiles[index].image = imageio.read(getclass().getresourceasstream(""/bil211game/resources/tiles/""+ imagename +"".png"")); tiles[index].image = utilitytool.scaleimage(tiles[index].image, gp.tilesize, gp.tilesize); tiles[index].collision = collision; } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void setupnew(int index, string imagename, boolean collision){[/CODE] [CODE]try{[/CODE] tiles[index] = [CODE]new tile();[/CODE] tiles[index].image = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/tiles/""+ imagename +"".png"")); tiles[index].image = utilitytool.scaleimage(tiles[index].image, gp.tilesize, gp.tilesize); tiles[index].collision = collision; } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void draw(graphics2d g2){[/CODE] [CODE]int worldcol = 0;[/CODE] [CODE]int worldrow = 0;[/CODE] while(worldcol < gp.maxworldcol && worldrow < gp.maxworldrow){ [CODE]int tilenum = maptilenum[worldcol][worldrow];[/CODE] int worldx = worldcol * gp.tilesize; int worldy = worldrow * gp.tilesize; int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; if(worldx + gp.tilesize > gp.player.worldx - gp.player.screenx && worldx - gp.tilesize < gp.player.worldx + gp.player.screenx && worldy + gp.tilesize > gp.player.worldy - gp.player.screeny && worldy - gp.tilesize < gp.player.worldy + gp.player.screeny){ g2.drawimage(tiles[tilenum].image, screenx, screeny, null); } worldcol++; if(worldcol == gp.maxworldcol){ worldcol = 0; worldrow++; } } worldcol = 0; worldrow = 0; while(worldcol < gp.maxworldcol && worldrow < gp.maxworldrow){ [CODE]int tilenum = maptilesecondstage[worldcol][worldrow];[/CODE] int worldx = worldcol * gp.tilesize; int worldy = worldrow * gp.tilesize; int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; if(tilenum != 0 && worldx + gp.tilesize > gp.player.worldx - gp.player.screenx && worldx - gp.tilesize < gp.player.worldx + gp.player.screenx && worldy + gp.tilesize > gp.player.worldy - gp.player.screeny && worldy - gp.tilesize < gp.player.worldy + gp.player.screeny){ g2.drawimage(tiles[0].image, screenx, screeny, null); g2.drawimage(tiles[tilenum].image, screenx, screeny, null); } worldcol++; if(worldcol == gp.maxworldcol){ worldcol = 0; worldrow++; } } } } package bil211game2.game.objects.others; import bil211game2.game.entity.entity; import bil211game2.game.main.gamepanel; [CODE]public class obj_hearth extends entity{[/CODE] [CODE]public obj_hearth(gamepanel gp){[/CODE] super(gp); name = ""heart""; image = setupnew(""other/hearts/heart_full"", gp.tilesize, gp.tilesize); image2 = setupnew(""other/hearts/heart_half"", gp.tilesize, gp.tilesize); image3 = setupnew(""other/hearts/heart_blank"", gp.tilesize, gp.tilesize); } } package bil211game2.game.objects.weapons; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.objects.ammos.sniperammo; [CODE]public class sniper extends weapon{[/CODE] [CODE]public sniper(gamepanel gp) {[/CODE] super(gp); attack = 5; magazinesize = 5; magazineammo = magazinesize; firerate = 30; ammo = 2*magazinesize; } @override [CODE]public void fire(int x, int y) {[/CODE] [CODE]if(magazineammo <= 0) return;[/CODE] sniperammo pistolammo = [CODE]new sniperammo(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(gp.player.direction) { case ""up"": ammox = playerx + gp.tilesize/2; ammoy = playery - gp.tilesize/2; break; case ""down"": ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize + gp.tilesize/2; break; case ""left"": ammox = playerx - gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; case ""right"": ammox = playerx + gp.tilesize; ammoy = playery + gp.tilesize/2; break; default: ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; } pistolammo.worldx = ammox; pistolammo.worldy = ammoy; // hasarı ayarla pistolammo.attack = attack; // oyuncuya doğru açıyı hesapla pistolammo.rad = math.atan2(y - ammoy, x - ammox); // açıya göre hızı hesapla pistolammo.speedy = (int)(sniperammo.defaultspeed*math.sin(pistolammo.rad)); pistolammo.speedx = (int)(sniperammo.defaultspeed*math.cos(pistolammo.rad)); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan pistolammo.setupsolidarea(gp.tilesize/2, gp.tilesize/2); pistolammo.speedhandler(); // shoot gp.ammos.add(pistolammo); magazineammo--; gp.playse(sound.sniper_sound); } @override [CODE]public void reload() {[/CODE] [CODE]if(ammo >= magazinesize - magazineammo){[/CODE] ammo -= magazinesize - magazineammo; magazineammo = magazinesize; } [CODE]else{[/CODE] magazineammo += ammo; ammo = 0; } } } package bil211game2.game.objects.weapons; import java.io.serializable; import bil211game2.game.main.gamepanel; [CODE]public abstract class weapon implements serializable{[/CODE] [CODE]public int ammo = 0;[/CODE] [CODE]int attack = 0;[/CODE] [CODE]public int magazinesize = 0;[/CODE] [CODE]public int magazineammo = 0;[/CODE] [CODE]public int firerate = 0;[/CODE] gamepanel gp; [CODE]public weapon(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public abstract void fire(int x, int y);[/CODE] [CODE]public abstract void reload();[/CODE] } package bil211game2.game.objects.weapons; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.objects.ammos.shotgunammo; [CODE]public class shotgun extends weapon{[/CODE] [CODE]public shotgun(gamepanel gp) {[/CODE] super(gp); attack = 2; magazinesize = 5; magazineammo = magazinesize; firerate = 60; ammo = 2*magazinesize; } @override [CODE]public void fire(int x, int y) {[/CODE] [CODE]if(magazineammo <= 0) return;[/CODE] [CODE]for(int i = 0;[/CODE] i <= 4; i++){ shotgunammo pistolammo = [CODE]new shotgunammo(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(gp.player.direction) { case ""up"": ammox = playerx + gp.tilesize/2; ammoy = playery - gp.tilesize/2; break; case ""down"": ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize + gp.tilesize/2; break; case ""left"": ammox = playerx - gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; case ""right"": ammox = playerx + gp.tilesize; ammoy = playery + gp.tilesize/2; break; default: ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; } pistolammo.worldx = ammox; pistolammo.worldy = ammoy; // hasarı ayarla pistolammo.attack = attack; // oyuncuya doğru açıyı hesapla pistolammo.rad = math.atan2(y - ammoy, x - ammox); // açıya göre hızı hesapla pistolammo.speedy = (int)(shotgunammo.defaultspeed*math.sin(pistolammo.rad - math.toradians(5*i))); pistolammo.speedx = (int)(shotgunammo.defaultspeed*math.cos(pistolammo.rad - math.toradians(5*i))); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan pistolammo.setupsolidarea(gp.tilesize/2, gp.tilesize/2); pistolammo.speedhandler(); // shoot gp.ammos.add(pistolammo); } [CODE]for(int i = 1;[/CODE] i <= 4; i++){ shotgunammo pistolammo = [CODE]new shotgunammo(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(gp.player.direction) { case ""up"": ammox = playerx + gp.tilesize/2; ammoy = playery - gp.tilesize/2; break; case ""down"": ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize + gp.tilesize/2; break; case ""left"": ammox = playerx - gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; case ""right"": ammox = playerx + gp.tilesize; ammoy = playery + gp.tilesize/2; break; default: ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; } pistolammo.worldx = ammox; pistolammo.worldy = ammoy; // hasarı ayarla pistolammo.attack = attack; // oyuncuya doğru açıyı hesapla pistolammo.rad = math.atan2(y - ammoy, x - ammox); // açıya göre hızı hesapla pistolammo.speedy = (int)(shotgunammo.defaultspeed*math.sin(pistolammo.rad + math.toradians(5*i))); pistolammo.speedx = (int)(shotgunammo.defaultspeed*math.cos(pistolammo.rad + math.toradians(5*i))); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan pistolammo.setupsolidarea(gp.tilesize/2, gp.tilesize/2); pistolammo.speedhandler(); // shoot gp.ammos.add(pistolammo); } magazineammo--; gp.playse(sound.shotgun_sound); } @override [CODE]public void reload() {[/CODE] [CODE]if(ammo >= magazinesize - magazineammo){[/CODE] ammo -= magazinesize - magazineammo; magazineammo = magazinesize; } [CODE]else{[/CODE] magazineammo += ammo; ammo = 0; } } } package bil211game2.game.objects.weapons; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.objects.ammos.pistolammo; [CODE]public class pistol extends weapon{[/CODE] [CODE]public pistol(gamepanel gp) {[/CODE] super(gp); attack = 1; magazinesize = 12; magazineammo = magazinesize; firerate = 120; } @override [CODE]public void fire(int x, int y) {[/CODE] [CODE]if(magazineammo <= 0) return;[/CODE] pistolammo pistolammo = [CODE]new pistolammo(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(gp.player.direction) { case ""up"": ammox = playerx + gp.tilesize/2; ammoy = playery - gp.tilesize/2; break; case ""down"": ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize + gp.tilesize/2; break; case ""left"": ammox = playerx - gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; case ""right"": ammox = playerx + gp.tilesize; ammoy = playery + gp.tilesize/2; break; default: ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; } pistolammo.worldx = ammox; pistolammo.worldy = ammoy; // hasarı ayarla pistolammo.attack = attack; // oyuncuya doğru açıyı hesapla pistolammo.rad = math.atan2(y - ammoy, x - ammox); // açıya göre hızı hesapla pistolammo.speedy = (int)(pistolammo.defaultspeed*math.sin(pistolammo.rad)); pistolammo.speedx = (int)(pistolammo.defaultspeed*math.cos(pistolammo.rad)); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan pistolammo.setupsolidarea(gp.tilesize/2, gp.tilesize/2); pistolammo.speedhandler(); // shoot gp.ammos.add(pistolammo); magazineammo--; gp.playse(sound.pistol_sound); } @override [CODE]public void reload() {[/CODE] magazineammo = magazinesize; } } package bil211game2.game.objects.weapons; import java.util.random; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.objects.ammos.r[CODE]ifleammo;[/CODE] [CODE]public class rifle extends weapon{[/CODE] random random; [CODE]public rifle(gamepanel gp) {[/CODE] super(gp); attack = 2; random = [CODE]new random();[/CODE] magazinesize = 30; magazineammo = magazinesize; firerate = 600; ammo = 2*magazinesize; } @override [CODE]public void fire(int x, int y) {[/CODE] [CODE]if(magazineammo <= 0) return;[/CODE] r[CODE]ifleammo pistolammo = new rifleammo(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; int sapma = random.next[CODE]int(15);[/CODE] boolean flag = random.nextboolean(); [CODE]if(flag){[/CODE] sapma = (-1)*sapma; } // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(gp.player.direction) { case ""up"": ammox = playerx + gp.tilesize/2; ammoy = playery - gp.tilesize/2; break; case ""down"": ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize + gp.tilesize/2; break; case ""left"": ammox = playerx - gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; case ""right"": ammox = playerx + gp.tilesize; ammoy = playery + gp.tilesize/2; break; default: ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; } pistolammo.worldx = ammox; pistolammo.worldy = ammoy; // hasarı ayarla pistolammo.attack = attack; // oyuncuya doğru açıyı hesapla pistolammo.rad = math.atan2(y - ammoy, x - ammox); // açıya göre hızı hesapla pistolammo.speedy = (int)(rifleammo.defaultspeed*math.sin(pistolammo.rad + math.toradians(sapma))); pistolammo.speedx = (int)(rifleammo.defaultspeed*math.cos(pistolammo.rad + math.toradians(sapma))); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan pistolammo.setupsolidarea(gp.tilesize/2, gp.tilesize/2); pistolammo.speedhandler(); // shoot gp.ammos.add(pistolammo); magazineammo--; gp.playse(sound.r[CODE]ifle_sound);[/CODE] } @override [CODE]public void reload() {[/CODE] [CODE]if(ammo >= magazinesize - magazineammo){[/CODE] ammo -= magazinesize - magazineammo; magazineammo = magazinesize; } [CODE]else{[/CODE] magazineammo += ammo; ammo = 0; } } } package bil211game2.game.objects.weapons; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.objects.ammos.rocketammo; [CODE]public class rocketlauncher extends weapon{[/CODE] [CODE]public rocketlauncher(gamepanel gp) {[/CODE] super(gp); attack = 10; magazinesize = 1; magazineammo = magazinesize; firerate = 10; ammo = 2*magazinesize; } @override [CODE]public void fire(int x, int y) {[/CODE] [CODE]if(magazineammo <= 0) return;[/CODE] rocketammo pistolammo = [CODE]new rocketammo(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(gp.player.direction) { case ""up"": ammox = playerx + gp.tilesize/2; ammoy = playery - gp.tilesize/2; break; case ""down"": ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize + gp.tilesize/2; break; case ""left"": ammox = playerx - gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; case ""right"": ammox = playerx + gp.tilesize; ammoy = playery + gp.tilesize/2; break; default: ammox = playerx + gp.tilesize/2; ammoy = playery + gp.tilesize/2; break; } pistolammo.worldx = ammox; pistolammo.worldy = ammoy; // hasarı ayarla pistolammo.attack = attack; // oyuncuya doğru açıyı hesapla pistolammo.rad = math.atan2(y - ammoy, x - ammox); // açıya göre hızı hesapla pistolammo.speedy = (int)(rocketammo.defaultspeed*math.sin(pistolammo.rad)); pistolammo.speedx = (int)(rocketammo.defaultspeed*math.cos(pistolammo.rad)); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan pistolammo.setupsolidarea(gp.tilesize/2, gp.tilesize/2); pistolammo.speedhandler(); // shoot gp.ammos.add(pistolammo); magazineammo--; gp.playse(sound.rocket_sound); } @override [CODE]public void reload() {[/CODE] [CODE]if(ammo >= magazinesize - magazineammo){[/CODE] ammo -= magazinesize - magazineammo; magazineammo = magazinesize; } [CODE]else{[/CODE] magazineammo += ammo; ammo = 0; } } } package bil211game2.game.objects.animations; import java.awt.alphacomposite; import java.awt.color; import java.awt.graphics2d; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import bil211game2.game.main.gamepanel; import bil211game2.game.main.utilitytool; [CODE]public class bloodsplashanimation extends animation {[/CODE] [CODE]public bloodsplashanimation(gamepanel gp, int worldx, int worldy) {[/CODE] super(gp, worldx, worldy, gp.tilesize); // kan sıçraması boyutu l[CODE]ifespan = 5;[/CODE] // 5 karelik animasyon delay = 3; // her 3 update döngüsünde bir kare değişecek frames = [CODE]new bufferedimage[lifespan];[/CODE] // kan sıçrama karelerini yükle loadanimationframes(); } private [CODE]void loadanimationframes() {[/CODE] // mevcut explosion animasyonunu kan efekti için kullanabiliriz // daha sonra özel kan görselleri eklenebilir frames[0] = setupimage(""zombie-tileset---_0379_capa-380""); frames[1] = setupimage(""zombie-tileset---_0380_capa-381""); frames[2] = setupimage(""zombie-tileset---_0381_capa-382""); frames[3] = setupimage(""zombie-tileset---_0382_capa-383""); frames[4] = setupimage(""zombie-tileset---_0383_capa-384""); } @override [CODE]public void draw(graphics2d g2) {[/CODE] // kan efekti için kırmızı renk tonu ayarla if (!finished && currentframe < frames.length) { float alpha = 0.8f; // son frame'lerde soluklaştır [CODE]if (currentframe >= lifespan - 2) {[/CODE] alpha = (float) (lifespan - currentframe) / 2 * 0.8f; } // orijinal alpha değerini kaydet alphacomposite originalcomposite = (alphacomposite) g2.getcomposite(); // kırmızı renk tonu eklemek için g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, alpha)); // kırmızı overlay color originalcolor = g2.getcolor(); g2.setcolor([CODE]new color(180, 0, 0, 100));[/CODE] // önce orijinal frame'i çiz int screenx = worldx - gp.player.worldx + gp.player.screenx - size/2 + gp.tilesize/2; int screeny = worldy - gp.player.worldy + gp.player.screeny - size/2 + gp.tilesize/2; g2.drawimage(frames[currentframe], screenx, screeny, size, size, null); // kırmızı overlay ekle g2.filloval(screenx, screeny, size, size); // renk ve alpha değerlerini sıfırla g2.setcolor(originalcolor); g2.setcomposite(originalcomposite); } } protected bufferedimage setupimage([CODE]string imagepath) {[/CODE] bufferedimage image = null; [CODE]try {[/CODE] image = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/items/blood animation frames/"" + imagepath + "".png"")); image = utilitytool.scaleimage(image, size, size); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } } // asit sıçrama animasyonu package bil211game2.game.objects.animations; import java.awt.alphacomposite; import java.awt.graphics2d; import java.awt.image.bufferedimage; import bil211game2.game.main.gamepanel; [CODE]public class acidsplashanimation extends animation {[/CODE] [CODE]public acidsplashanimation(gamepanel gp, int worldx, int worldy) {[/CODE] super(gp, worldx, worldy, gp.tilesize * 5); // asit sıçraması daha geniş alana etki eder l[CODE]ifespan = 8;[/CODE] // 8 karelik animasyon delay = 2; // her 2 update döngüsünde bir kare değişecek frames = [CODE]new bufferedimage[lifespan];[/CODE] // asit sıçrama karelerini yükle loadanimationframes(); } private [CODE]void loadanimationframes() {[/CODE] frames[0] = setupimage(""zombie-tileset---_0358_capa-359""); frames[1] = setupimage(""zombie-tileset---_0359_capa-360""); frames[2] = setupimage(""zombie-tileset---_0360_capa-361""); frames[3] = setupimage(""zombie-tileset---_0361_capa-362""); frames[4] = setupimage(""zombie-tileset---_0362_capa-363""); frames[5] = setupimage(""zombie-tileset---_0363_capa-364""); } @override [CODE]public void draw(graphics2d g2) {[/CODE] // asit sıçrama efekti için renk ve alpha değerini ayarla if (!finished && currentframe < frames.length) { float alpha = 0.8f; // son üç karede saydamlaştır [CODE]if (currentframe >= lifespan - 3) {[/CODE] alpha = (float) (lifespan - currentframe) / 3 * 0.8f; } // yeşil renk tonu eklemek için g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, alpha)); // orijinal görüntüyü çiz super.draw(g2); // alpha değerini sıfırla g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, 1.0f)); } } } package bil211game2.game.objects.animations; import java.awt.alphacomposite; import java.awt.graphics2d; import java.awt.image.bufferedimage; import bil211game2.game.main.gamepanel; [CODE]public class explosionanimation extends animation {[/CODE] [CODE]public explosionanimation(gamepanel gp, int worldx, int worldy) {[/CODE] super(gp, worldx, worldy, gp.tilesize * 3); // patlama boyutu normal tile'ın 3 katı l[CODE]ifespan = 6;[/CODE] // 6 karelik animasyon delay = 3; // her 3 update döngüsünde bir kare değişecek frames = [CODE]new bufferedimage[lifespan];[/CODE] // patlama karelerini yükle loadanimationframes(); } private [CODE]void loadanimationframes() {[/CODE] frames[0] = setupimage(""zombie-tileset---_0358_capa-359""); frames[1] = setupimage(""zombie-tileset---_0359_capa-360""); frames[2] = setupimage(""zombie-tileset---_0360_capa-361""); frames[3] = setupimage(""zombie-tileset---_0361_capa-362""); frames[4] = setupimage(""zombie-tileset---_0362_capa-363""); frames[5] = setupimage(""zombie-tileset---_0363_capa-364""); } @override [CODE]public void draw(graphics2d g2) {[/CODE] // patlama efekti için alpha değerini ayarla (sona doğru saydamlaşsın) if (!finished && currentframe < frames.length) { float alpha = 1.0f; // son iki karede saydamlaştır [CODE]if (currentframe >= lifespan - 2) {[/CODE] alpha = (float) (l[CODE]ifespan - currentframe) / 2;[/CODE] } g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, alpha)); super.draw(g2); g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, 1.0f)); } } } package bil211game2.game.objects.animations; import java.awt.graphics2d; import java.util.arraylist; import java.util.iterator; import java.util.list; import bil211game2.game.main.gamepanel; [CODE]public class animationmanager {[/CODE] private gamepanel gp; private list<animation> animations; [CODE]public animationmanager(gamepanel gp) {[/CODE] this.gp = gp; animations = [CODE]new arraylist<>();[/CODE] } [CODE]public void addexplosion(int worldx, int worldy) {[/CODE] animations.add([CODE]new explosionanimation(gp, worldx, worldy));[/CODE] } [CODE]public void addacidsplash(int worldx, int worldy) {[/CODE] animations.add([CODE]new acidsplashanimation(gp, worldx, worldy));[/CODE] } [CODE]public void addbloodsplash(int worldx, int worldy) {[/CODE] animations.add([CODE]new bloodsplashanimation(gp, worldx, worldy));[/CODE] } [CODE]public void update() {[/CODE] iterator<animation> iterator = animations.iterator(); while (iterator.hasnext()) { animation animation = iterator.next(); animation.update(); if (animation.isfinished()) { iterator.remove(); } } } [CODE]public void draw(graphics2d g2) {[/CODE] [CODE]for (animation animation : animations) {[/CODE] animation.draw(g2); } } } package bil211game2.game.objects.animations; import java.awt.graphics2d; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import bil211game2.game.main.gamepanel; import bil211game2.game.main.utilitytool; [CODE]public class animation {[/CODE] protected gamepanel gp; protected [CODE]int worldx, worldy;[/CODE] protected [CODE]int lifespan;[/CODE] // animasyonun toplam kareleri protected [CODE]int currentframe;[/CODE] protected boolean finished; protected bufferedimage[] frames; protected [CODE]int delay;[/CODE] // her kare arasındaki gecikme (kaç update döngüsü) protected [CODE]int delaycounter;[/CODE] protected [CODE]int size;[/CODE] // animasyon boyutu [CODE]public animation(gamepanel gp, int worldx, int worldy, int size) {[/CODE] this.gp = gp; this.worldx = worldx; this.worldy = worldy; this.size = size; currentframe = 0; delaycounter = 0; finished = false; } [CODE]public void update() {[/CODE] delaycounter++; [CODE]if (delaycounter >= delay) {[/CODE] currentframe++; delaycounter = 0; [CODE]if (currentframe >= lifespan) {[/CODE] finished = true; } } } [CODE]public void draw(graphics2d g2) {[/CODE] if (!finished && currentframe < frames.length) { int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; // eğer ekranda görünüyorsa çiz if (worldx + size > gp.player.worldx - gp.player.screenx && worldx - size < gp.player.worldx + gp.player.screenx && worldy + size > gp.player.worldy - gp.player.screeny && worldy - size < gp.player.worldy + gp.player.screeny) { // animasyonun ortada olması için pozisyonu ayarla screenx -= size / 2; screeny -= size / 2; g2.drawimage(frames[currentframe], screenx, screeny, size, size, null); } } } [CODE]public boolean isfinished() {[/CODE] [CODE]return finished;[/CODE] } // yardımcı metot: görüntüleri ayarlamak için protected bufferedimage setupimage([CODE]string imagepath) {[/CODE] bufferedimage image = null; [CODE]try {[/CODE] image = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/items/explosion animation frames/"" + imagepath + "".png"")); image = utilitytool.scaleimage(image, size, size); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } } package bil211game2.game.objects.ammos; import bil211game2.game.main.gamepanel; [CODE]public class acid extends ammo{[/CODE] [CODE]public static int defaultspeed = 10;[/CODE] [CODE]public acid(gamepanel gp) {[/CODE] super(gp); solidarea.x = speedx > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.y = speedy > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.width = gp.tilesize/2; solidarea.height = gp.tilesize/2; // set default values explicitly solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; getimages(); setupsolidarea(solidarea.width, solidarea.height); } [CODE]public void getimages(){[/CODE] image = setupnew(""turret zombie vomit shooting animation frames/zombie-tileset---_0470_capa-471"", gp.tilesize/2, gp.tilesize/2); } } package bil211game2.game.objects.ammos; import bil211game2.game.main.gamepanel; [CODE]public class sniperammo extends ammo{[/CODE] [CODE]public static int defaultspeed = 20;[/CODE] [CODE]public sniperammo(gamepanel gp) {[/CODE] super(gp); solidarea.x = speedx > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.y = speedy > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.width = gp.tilesize/2; solidarea.height = gp.tilesize/2; // set default values explicitly solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; // set a longer l[CODE]ifespan for the acid projectile lifespan = 180;[/CODE] getimages(); setupsolidarea(solidarea.width, solidarea.height); } [CODE]public void getimages(){[/CODE] image = setupnew(""sniper"", gp.tilesize/4, gp.tilesize/2); } } package bil211game2.game.objects.ammos; import bil211game2.game.entity.entity; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.main.utilitytool; [CODE]public class rocketammo extends ammo{[/CODE] [CODE]public static int defaultspeed = 10;[/CODE] [CODE]public rocketammo(gamepanel gp) {[/CODE] super(gp); solidarea.x = speedx > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.y = speedy > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.width = gp.tilesize/2; solidarea.height = gp.tilesize/2; // set default values explicitly solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; // set a longer l[CODE]ifespan for the acid projectile lifespan = 180;[/CODE] getimages(); setupsolidarea(solidarea.width, solidarea.height); } [CODE]public void getimages(){[/CODE] image = setupnew(""rocket"", gp.tilesize, gp.tilesize); } @override [CODE]public void additionalfeature(entity entity) {[/CODE] gp.animationmanager.addexplosion(worldx, worldy); [CODE]for(int i = 0;[/CODE] i < gp.monsters.size(); i++){ if(gp.monsters.get(i) != null && utilitytool.distancecalculator(gp.monsters.get(i).worldx, gp.monsters.get(i).worldy, worldx, worldy) < 3 * gp.tilesize){ gp.monsters.get(i).shooted(attack); } } gp.startscreenshake(25, 30); gp.playse(sound.rocket_bang_sound); } } package bil211game2.game.objects.ammos; import bil211game2.game.main.gamepanel; [CODE]public class rifleammo extends ammo{[/CODE] [CODE]public static int defaultspeed = 20;[/CODE] [CODE]public rifleammo(gamepanel gp) {[/CODE] super(gp); solidarea.x = speedx > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.y = speedy > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.width = gp.tilesize/2; solidarea.height = gp.tilesize/2; // set default values explicitly solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; // set a longer l[CODE]ifespan for the acid projectile lifespan = 180;[/CODE] getimages(); setupsolidarea(solidarea.width, solidarea.height); } [CODE]public void getimages(){[/CODE] image = setupnew(""rifle"", gp.tilesize/3, gp.tilesize/3); } } package bil211game2.game.objects.ammos; import bil211game2.game.main.gamepanel; [CODE]public class shotgunammo extends ammo{[/CODE] [CODE]public static int defaultspeed = 12;[/CODE] [CODE]public shotgunammo(gamepanel gp) {[/CODE] super(gp); solidarea.x = speedx > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.y = speedy > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.width = gp.tilesize/2; solidarea.height = gp.tilesize/2; // set default values explicitly solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; // set a longer l[CODE]ifespan for the acid projectile lifespan = 100;[/CODE] getimages(); setupsolidarea(solidarea.width, solidarea.height); } [CODE]public void getimages(){[/CODE] image = setupnew(""shotgun"", gp.tilesize/3, gp.tilesize/3); } } package bil211game2.game.objects.ammos; import bil211game2.game.main.gamepanel; [CODE]public class pistolammo extends ammo{[/CODE] [CODE]public static int defaultspeed = 15;[/CODE] [CODE]public pistolammo(gamepanel gp) {[/CODE] super(gp); solidarea.x = speedx > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.y = speedy > 0 ? -gp.tilesize/4 : gp.tilesize/4; solidarea.width = gp.tilesize/2; solidarea.height = gp.tilesize/2; // set default values explicitly solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; // set a longer l[CODE]ifespan for the acid projectile lifespan = 180;[/CODE] getimages(); setupsolidarea(solidarea.width, solidarea.height); } [CODE]public void getimages(){[/CODE] image = setupnew(""pistol"", gp.tilesize/3, gp.tilesize/3); } } package bil211game2.game.objects.ammos; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.bufferedimage; import java.io.ioexception; import java.io.serializable; import javax.imageio.imageio; import bil211game2.game.entity.entity; import bil211game2.game.main.gamepanel; import bil211game2.game.main.utilitytool; [CODE]public abstract class ammo implements serializable{[/CODE] [CODE]public int speedx = 1;[/CODE] [CODE]public int speedy = 1;[/CODE] [CODE]public int worldx;[/CODE] [CODE]public int worldy;[/CODE] [CODE]public bufferedimage image;[/CODE] [CODE]public int attack = 0;[/CODE] [CODE]public double rad = 0;[/CODE] [CODE]public boolean collisionon = true;[/CODE] [CODE]public boolean contact = false;[/CODE] [CODE]public int lifespan = 120;[/CODE] [CODE]public int lifetime = 0;[/CODE] [CODE]public rectangle solidarea = new rectangle(0, 0, 48, 48);[/CODE] [CODE]public int solidareadefaultx, solidareadefaulty;[/CODE] gamepanel gp; [CODE]public ammo(gamepanel gp){[/CODE] this.gp = gp; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; } [CODE]public bufferedimage setup(string imagepath, int width, int height){[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream(""/bil211game/resources/"" + imagepath + "".png"")); image = utilitytool.scaleimage(image, width, height); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } [CODE]public bufferedimage setupnew(string imagepath, int width, int height){[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/items/ammos/"" + imagepath + "".png"")); image = utilitytool.scaleimage(image, width, height); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } // mermiyi çizmek için genel metot [CODE]public void draw(graphics2d g2) {[/CODE] [CODE]if(image != null) {[/CODE] // ekran konumunu hesapla int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; // ekranda görünüyor mu kontrol et if(worldx + gp.tilesize/2 > gp.player.worldx - gp.player.screenx && worldx - gp.tilesize/2 < gp.player.worldx + gp.player.screenx && worldy + gp.tilesize/2 > gp.player.worldy - gp.player.screeny && worldy - gp.tilesize/2 < gp.player.worldy + gp.player.screeny) { // görüntüyü döndürmek için affinetrans[CODE]form kullan affinetransform at = new affinetransform();[/CODE] // çizim merkezini hesapla int imagewidth = image.getwidth(); int imageheight = image.getheight(); screenx -= imagewidth / 2; screeny -= imageheight / 2; // dönüş için bileşenleri ayarla at.translate(screenx + imagewidth/2, screeny + imageheight/2); at.rotate(rad); at.translate(-imagewidth/2, -imageheight/2); // döndürülmüş görüntüyü çiz g2.drawimage(image, at, null); // debug mod - çarpışma alanını görselleştirme (isteğe bağlı) //g2.setcolor(color.red); //g2.drawrect(screenx + solidarea.x, screeny + solidarea.y, solidarea.width, solidarea.height); } } } [CODE]public void update() {[/CODE] // mermiyi hızına göre hareket ettir worldx += speedx; worldy += speedy; // ömür sayacını artır l[CODE]ifetime++;[/CODE] // ömür süresini kontrol et [CODE]if(lifetime >= lifespan) {[/CODE] contact = true; } } // çarpışma alanını hareket yönüne göre ayarla [CODE]public void setupsolidarea(int width, int height) {[/CODE] // çarpışma alanı boyutlarını ayarla solidarea.width = width; solidarea.height = height; // varsayılan değerleri kaydet solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; } [CODE]public void speedhandler(){[/CODE] solidarea.x = (image.getwidth() - solidarea.width) / 2; solidarea.y = (image.getheight() - solidarea.height) / 2; // güncellenen değerleri solidareadefault değişkenlerine ata! solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; } [CODE]public void additionalfeature(entity entity){[/CODE] } } package bil211game2.game.entity; import bil211game2.game.main.gamepanel; [CODE]public abstract class zombie extends monster{[/CODE] [CODE]public zombie(gamepanel gp) {[/CODE] super(gp); } } package bil211game2.game.entity; import java.awt.alphacomposite; import java.awt.color; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.ioexception; import java.io.serializable; import javax.imageio.imageio; import bil211game2.game.main.utilitytool; import bil211game2.game.objects.ammos.acid; import bil211game2.game.objects.ammos.sniperammo; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; [CODE]public abstract class entity implements serializable{[/CODE] gamepanel gp; [CODE]public int worldx, worldy;[/CODE] [CODE]public int speed;[/CODE] [CODE]public int attackentity = 1;[/CODE] [CODE]public bufferedimage up1, up2, down1, down2, left1, left2, right1, right2, attackup1, attackup2, attackdown1, attackdown2, attackleft1, attackleft2, attackright1, attackright2;[/CODE] [CODE]public string direction = ""down"";[/CODE] [CODE]public int spritecounter = 0;[/CODE] [CODE]public int spritenum = 1;[/CODE] [CODE]public rectangle solidarea = new rectangle(0,0,48,48);[/CODE] [CODE]public rectangle attackarea = new rectangle(0,0,0,0);[/CODE] [CODE]public int solidareadefaultx, solidareadefaulty;[/CODE] [CODE]public boolean collisionon = false;[/CODE] [CODE]public int actionlockcounter = 0;[/CODE] [CODE]public int inviciblecounter = 0;[/CODE] [CODE]public boolean invicible = false;[/CODE] [CODE]public int type;[/CODE] [CODE]public boolean attacking = false;[/CODE] [CODE]public boolean alive = true;[/CODE] [CODE]public boolean dying = false;[/CODE] [CODE]int dyingcounter = 0;[/CODE] [CODE]public boolean hpbaron = false;[/CODE] [CODE]int hpbarcounter = 0;[/CODE] [CODE]public bufferedimage image, image2, image3;[/CODE] [CODE]public string name;[/CODE] [CODE]public boolean collision = false;[/CODE] // character status [CODE]public int maxlife;[/CODE] [CODE]public int life;[/CODE] public entity(bil211game2.game.main.gamepanel gp2){ this.gp = gp2; } [CODE]public void draw(graphics2d g2){[/CODE] int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; if(worldx + gp.tilesize > gp.player.worldx - gp.player.screenx && worldx - gp.tilesize < gp.player.worldx + gp.player.screenx && worldy + gp.tilesize > gp.player.worldy - gp.player.screeny && worldy - gp.tilesize < gp.player.worldy + gp.player.screeny){ bufferedimage image = null; switch(direction){ case ""up"": [CODE]if(spritenum == 1){[/CODE] image = up1; } [CODE]if(spritenum == 2){[/CODE] image = up2; } break; case ""down"": [CODE]if(spritenum == 1){[/CODE] image = down1; } [CODE]if(spritenum == 2){[/CODE] image = down2; } break; case ""left"": [CODE]if(spritenum == 1){[/CODE] image = left1; } [CODE]if(spritenum == 2){[/CODE] image = left2; } break; case ""right"": [CODE]if(spritenum == 1){[/CODE] image = right1; } [CODE]if(spritenum == 2){[/CODE] image = right2; } break; } [CODE]if(type == 2 && hpbaron){[/CODE] hpbarcounter++; [CODE]if(hpbarcounter < 120){[/CODE] g2.setcolor([CODE]new color(35,35,35));[/CODE] g2.fillrect(screenx - 1, screeny-17, gp.tilesize + 2, 13); g2.setcolor([CODE]new color(255,0,30));[/CODE] g2.fillrect(screenx, screeny - 15, (int)(gp.tilesize *((double)l[CODE]ife/maxlife)), 10);[/CODE] } [CODE]else{[/CODE] hpbaron = false; hpbarcounter = 0; } } [CODE]if(invicible){[/CODE] hpbaron = true; changealphe(g2, 0.5f); } [CODE]if(dying){[/CODE] dyinganimation(g2); } g2.drawimage(image, screenx, screeny, gp.tilesize, gp.tilesize, null); changealphe(g2, 1f); } } [CODE]public void setaction(){[/CODE]}; [CODE]public void dyinganimation(graphics2d g2){[/CODE] [CODE]int i = 5;[/CODE] [CODE]if(dyingcounter <= i){[/CODE] changealphe(g2, 0f); } [CODE]else if(dyingcounter <= i*2){[/CODE] changealphe(g2, 1f); } [CODE]else if(dyingcounter <= i*3){[/CODE] changealphe(g2, 0f); } [CODE]else if(dyingcounter <= i*4){[/CODE] changealphe(g2, 1f); } [CODE]else if(dyingcounter <= i*5){[/CODE] changealphe(g2, 0f); } [CODE]else if(dyingcounter <= i*6){[/CODE] changealphe(g2, 1f); } [CODE]else if(dyingcounter <= i*7){[/CODE] changealphe(g2, 0f); } [CODE]else if(dyingcounter <= i*8){[/CODE] changealphe(g2, 1f); } } [CODE]public void changealphe(graphics2d g2, float alphavalue){[/CODE] g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, alphavalue)); } [CODE]public void update(){[/CODE] setaction(); collisionon = false; gp.cchecker.checktile(this); boolean contactplayer = gp.cchecker.checkplayer(this); gp.cchecker.checkentity(this, gp.monsters); [CODE]for(int i = 0;[/CODE] i < gp.ammos.size(); i++){ if(!(gp.ammos.get(i) instanceof acid) && gp.cchecker.checkammo(gp.ammos.get(i), this)){ gp.ammos.get(i).additionalfeature(this); shooted(gp.ammos.get(i).attack); if(!(gp.ammos.get(i) instanceof sniperammo)){ gp.ammos.set(i, null); gp.ammos.remove(i); } gp.playse(sound.zombie_hurt); } } if(this.type == 2 && contactplayer){ if(!gp.player.invicible){ gp.player.l[CODE]ife -= attackentity;[/CODE] gp.player.invicible = true; gp.startscreenshake(8, 15); gp.playse(sound.player_hurt); } } [CODE]if(!collisionon){[/CODE] switch(direction){ case ""up"": worldy -= speed; break; case ""down"": worldy += speed; break; case ""left"": worldx -= speed; break; case ""right"": worldx += speed; break; } } spritecounter++; [CODE]if(spritecounter > 12){[/CODE] [CODE]if(spritenum == 1){[/CODE] spritenum = 2; } [CODE]else if(spritenum == 2){[/CODE] spritenum = 1; } spritecounter = 0; } [CODE]if(invicible){[/CODE] inviciblecounter++; [CODE]if(inviciblecounter > 40){[/CODE] invicible = false; inviciblecounter = 0; } } } [CODE]public bufferedimage setup(string imagepath, int width, int height){[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream(""/bil211game/resources/"" + imagepath + "".png"")); image = utilitytool.scaleimage(image, width, height); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } [CODE]public bufferedimage setupnew(string imagepath, int width, int height){[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream(""/bil211game2/resources/images/"" + imagepath + "".png"")); image = utilitytool.scaleimage(image, width, height); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } [CODE]public void damagereaction(){[/CODE]} [CODE]public void shooted(int damage){[/CODE] invicible = true; l[CODE]ife -= damage;[/CODE] damagereaction(); } [CODE]public void updatedying() {[/CODE] dyingcounter++; [CODE]int i = 5;[/CODE] [CODE]if(dyingcounter > i*8) {[/CODE] dying = false; alive = false; } } } package bil211game2.game.entity; import bil211game2.game.main.gamepanel; import bil211game2.game.main.sound; import bil211game2.game.objects.ammos.acid; [CODE]public class acidzombie extends zombie implements acidity{[/CODE] boolean canshoot = true; [CODE]int shootcounter = 0;[/CODE] [CODE]int defaultspeed;[/CODE] [CODE]int shootcooldown = 120;[/CODE] [CODE]public acidzombie(gamepanel gp) {[/CODE] super(gp); type = 2; name = ""acid zombie""; speed = 2; maxl[CODE]ife = 2;[/CODE] l[CODE]ife = maxlife;[/CODE] basescore = 7; attack = 1; solidarea.x = 3; solidarea.y = 10; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; defaultspeed = speed; lootchance = 60; r[CODE]ifleammochance = 40;[/CODE] shotgunammochance = 40; sniperammochance = 10; rocketammochance = 10; getimage(); } [CODE]public void getimage(){[/CODE] up1 = setupnew(""zombies/turret zombie animation frames/up2"", gp.tilesize, gp.tilesize); up2 = setupnew(""zombies/turret zombie animation frames/up3"", gp.tilesize, gp.tilesize); down1 = setupnew(""zombies/turret zombie animation frames/down2"", gp.tilesize, gp.tilesize); down2 = setupnew(""zombies/turret zombie animation frames/down3"", gp.tilesize, gp.tilesize); left1 = setupnew(""zombies/turret zombie animation frames/left2"", gp.tilesize, gp.tilesize); left2 = setupnew(""zombies/turret zombie animation frames/left3"", gp.tilesize, gp.tilesize); right1 = setupnew(""zombies/turret zombie animation frames/right2"", gp.tilesize, gp.tilesize); right2 = setupnew(""zombies/turret zombie animation frames/right3"", gp.tilesize, gp.tilesize); } [CODE]public void setaction(){[/CODE] actionlockcounter++; [CODE]if(actionlockcounter > 60){[/CODE] boolean flag = false; // true : horizontal, false : vertical if(math.abs(gp.player.worldx - worldx) > math.abs(gp.player.worldy - worldy)){ flag = true; } [CODE]if(flag){[/CODE] if(gp.player.worldx - worldx > 0){ direction = ""right""; } [CODE]else{[/CODE] direction = ""left""; } } [CODE]else{[/CODE] if(gp.player.worldy - worldy > 0){ direction = ""down""; } [CODE]else{[/CODE] direction = ""up""; } } actionlockcounter = 0; } [CODE]if(!canshoot) {[/CODE] shootcounter++; [CODE]if(shootcounter >= shootcooldown) {[/CODE] canshoot = true; shootcounter = 0; } } [CODE]else{[/CODE] int xdistance = math.abs(gp.player.worldx - worldx); int ydistance = math.abs(gp.player.worldy - worldy); int totaldistance = (int) math.sqrt(xdistance * xdistance + ydistance * ydistance); // 8 tile menzil içindeyse ateş et if(totaldistance < 8 * gp.tilesize) { rangeattack(); canshoot = false; shootcounter = 0; } } } [CODE]public void rangeattack(){[/CODE] acid acid = shootammo(); [CODE]if(acid != null) {[/CODE] gp.ammos.add(acid); } } @override [CODE]public void damagereaction() {[/CODE] actionlockcounter = 0; direction = gp.player.direction; } [CODE]public acid shootammo(){[/CODE] acid acid = [CODE]new acid(gp);[/CODE] int playerx = gp.player.worldx; int playery = gp.player.worldy; // mermi başlangıç pozisyonunu hesapla [CODE]int ammox, ammoy;[/CODE] // yöne bağlı olarak mermi çıkış noktasını ayarla switch(direction) { case ""up"": ammox = worldx + gp.tilesize/2; ammoy = worldy - gp.tilesize/2; break; case ""down"": ammox = worldx + gp.tilesize/2; ammoy = worldy + gp.tilesize; break; case ""left"": ammox = worldx - gp.tilesize/2; ammoy = worldy + gp.tilesize/2; break; case ""right"": ammox = worldx + gp.tilesize; ammoy = worldy + gp.tilesize/2; break; default: ammox = worldx + gp.tilesize/2; ammoy = worldy + gp.tilesize/2; break; } acid.worldx = ammox; acid.worldy = ammoy; // hasarı ayarla acid.attack = attack; // oyuncuya doğru açıyı hesapla acid.rad = math.atan2(playery - ammoy, playerx - ammox); // açıya göre hızı hesapla acid.speedy = (int)(acid.defaultspeed*math.sin(acid.rad)); acid.speedx = (int)(acid.defaultspeed*math.cos(acid.rad)); // çarpışma alanını hareket yönüne göre ayarla - genel metodu kullan acid.setupsolidarea(gp.tilesize/2, gp.tilesize/2); acid.speedhandler(); gp.playse(sound.acid_zombie_acid_sound); [CODE]return acid;[/CODE] } @override [CODE]public void splash() {[/CODE] gp.animationmanager.addacidsplash(worldx, worldy); [CODE]for(int i = 0;[/CODE] i < gp.monsters.size(); i++){ if(gp.monsters.get(i) != null && !gp.monsters.get(i).invicible){ monster monster = gp.monsters.get(i); int monsterx = monster.worldx; int monstery = monster.worldy; double distances = math.sqrt((monsterx - worldx) * (monsterx - worldx) + (monstery - worldy) * (monstery - worldy)); if(distances < 3 * gp.tilesize){ monster.damagereaction(); monster.invicible = true; monster.l[CODE]ife -= attack;[/CODE] } } } if(gp.player != null && !gp.player.invicible){ int playerx = gp.player.worldx; int playery = gp.player.worldy; double distances = math.sqrt((playerx - worldx) * (playerx - worldx) + (playery - worldy) * (playery - worldy)); if(distances < 3 * gp.tilesize){ gp.player.invicible = true; gp.player.l[CODE]ife -= attack;[/CODE] } } } @override [CODE]public void kill() {[/CODE] gp.player.score += (gp.currentphase+1)*basescore; splash(); gp.animationmanager.addbloodsplash(worldx, worldy); gp.startscreenshake(20, 20); looting(); } } package bil211game2.game.entity; [CODE]public interface acidity {[/CODE] [CODE]public void splash();[/CODE] } package bil211game2.game.entity; import java.util.random; import bil211game2.game.main.gamepanel; [CODE]public class reptilezombie extends zombie implements jumpable{[/CODE] boolean canjump = true; [CODE]int jumpcounter = 0;[/CODE] [CODE]int defaultspeed;[/CODE] boolean isjumping = false; boolean jumpflag = false; // sın[CODE]ıf üyesi olarak tanımlandı random random = new random();[/CODE] [CODE]public reptilezombie(gamepanel gp) {[/CODE] super(gp); type = 2; name = ""reptile zombie""; speed = 4; maxl[CODE]ife = 2;[/CODE] l[CODE]ife = maxlife;[/CODE] basescore = 3; attack = 1; solidarea.x = 3; solidarea.y = 10; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; defaultspeed = speed; lootchance = 40; r[CODE]ifleammochance = 80;[/CODE] shotgunammochance = 20; getimage(); } [CODE]public void getimage(){[/CODE] up1 = setupnew(""zombies/kid zombie animation frames/up2"", gp.tilesize, gp.tilesize); up2 = setupnew(""zombies/kid zombie animation frames/up3"", gp.tilesize, gp.tilesize); down1 = setupnew(""zombies/kid zombie animation frames/down2"", gp.tilesize, gp.tilesize); down2 = setupnew(""zombies/kid zombie animation frames/down3"", gp.tilesize, gp.tilesize); left1 = setupnew(""zombies/kid zombie animation frames/left2"", gp.tilesize, gp.tilesize); left2 = setupnew(""zombies/kid zombie animation frames/left3"", gp.tilesize, gp.tilesize); right1 = setupnew(""zombies/kid zombie animation frames/right2"", gp.tilesize, gp.tilesize); right2 = setupnew(""zombies/kid zombie animation frames/right3"", gp.tilesize, gp.tilesize); } [CODE]public void setaction(){[/CODE] actionlockcounter++; [CODE]if(actionlockcounter > 60){[/CODE] jumpflag = random.nextboolean(); boolean flag = false; // true : horizontal, false : vertical if(math.abs(gp.player.worldx - worldx) > math.abs(gp.player.worldy - worldy)){ flag = true; } [CODE]if(flag){[/CODE] if(gp.player.worldx - worldx > 0){ direction = ""right""; } [CODE]else{[/CODE] direction = ""left""; } } [CODE]else{[/CODE] if(gp.player.worldy - worldy > 0){ direction = ""down""; } [CODE]else{[/CODE] direction = ""up""; } } actionlockcounter = 0; } int xdistance = math.abs(gp.player.worldx - worldx); int ydistance = math.abs(gp.player.worldy - worldy); int totaldistance = (int) math.sqrt(xdistance * xdistance + ydistance * ydistance); [CODE]if(isjumping) {[/CODE] jumpcounter++; [CODE]if(jumpcounter > 5) {[/CODE] speed = defaultspeed; isjumping = false; } } [CODE]else {[/CODE] [CODE]if(!canjump) {[/CODE] jumpcounter++; [CODE]if(jumpcounter > 300) {[/CODE] canjump = true; jumpcounter = 0; } } else if(totaldistance < gp.tilesize * 5 && canjump && jumpflag) { speed = defaultspeed * 5; isjumping = true; canjump = false; jumpcounter = 0; jumpflag = false; } } } @override [CODE]public void damagereaction() {[/CODE] actionlockcounter = 0; direction = gp.player.direction; } @override [CODE]public void jump() {[/CODE] // jumpable arayüzünden gelen metot, gerekirse içeriği doldurulabilir } @override [CODE]public void kill() {[/CODE] gp.player.score += (gp.currentphase+1)*basescore; gp.animationmanager.addbloodsplash(worldx, worldy); looting(); } } package bil211game2.game.entity; import bil211game2.game.main.gamepanel; [CODE]public class normalzombie extends zombie{[/CODE] [CODE]public normalzombie(gamepanel gp) {[/CODE] super(gp); type = 2; name = ""normal zombie""; speed = 2; maxl[CODE]ife = 4;[/CODE] l[CODE]ife = maxlife;[/CODE] basescore = 1; attack = 1; solidarea.x = 3; solidarea.y = 10; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; lootchance = 20; r[CODE]ifleammochance = 100;[/CODE] getimage(); } [CODE]public void getimage(){[/CODE] up1 = setupnew(""zombies/skinny walking zombie animation/up2"", gp.tilesize, gp.tilesize); up2 = setupnew(""zombies/skinny walking zombie animation/up3"", gp.tilesize, gp.tilesize); down1 = setupnew(""zombies/skinny walking zombie animation/down2"", gp.tilesize, gp.tilesize); down2 = setupnew(""zombies/skinny walking zombie animation/down3"", gp.tilesize, gp.tilesize); left1 = setupnew(""zombies/skinny walking zombie animation/left2"", gp.tilesize, gp.tilesize); left2 = setupnew(""zombies/skinny walking zombie animation/left3"", gp.tilesize, gp.tilesize); right1 = setupnew(""zombies/skinny walking zombie animation/right2"", gp.tilesize, gp.tilesize); right2 = setupnew(""zombies/skinny walking zombie animation/right3"", gp.tilesize, gp.tilesize); } [CODE]public void setaction(){[/CODE] actionlockcounter++; [CODE]if(actionlockcounter > 60){[/CODE] boolean flag = false; // true : horizontal, false : vertical if(math.abs(gp.player.worldx - worldx) > math.abs(gp.player.worldy - worldy)){ flag = true; } [CODE]if(flag){[/CODE] if(gp.player.worldx - worldx > 0){ direction = ""right""; } [CODE]else{[/CODE] direction = ""left""; } } [CODE]else{[/CODE] if(gp.player.worldy - worldy > 0){ direction = ""down""; } [CODE]else{[/CODE] direction = ""up""; } } actionlockcounter = 0; } } @override [CODE]public void damagereaction() {[/CODE] actionlockcounter = 0; direction = gp.player.direction; } @override [CODE]public void kill() {[/CODE] gp.player.score += (gp.currentphase+1)*basescore; gp.animationmanager.addbloodsplash(worldx, worldy); looting(); } } package bil211game2.game.entity; import java.util.random; import bil211game2.game.main.gamepanel; [CODE]public abstract class monster extends entity{[/CODE] [CODE]public int basescore = 1;[/CODE] [CODE]public int attack = 0;[/CODE] [CODE]public int lootchance = 0;[/CODE] [CODE]public int rifleammochance = 0;[/CODE] [CODE]public int shotgunammochance = 0;[/CODE] [CODE]public int sniperammochance = 0;[/CODE] [CODE]public int rocketammochance = 0;[/CODE] [CODE]public monster(gamepanel gp2) {[/CODE] super(gp2); } [CODE]public abstract void kill();[/CODE] @override [CODE]public void update() {[/CODE] [CODE]if(life <= 0){[/CODE] kill(); dying = true; [CODE]return;[/CODE] } super.update(); } [CODE]public string lootammotype(){[/CODE] random random = [CODE]new random();[/CODE] int lootfalled = random.next[CODE]int(101);[/CODE] boolean falled = false; [CODE]if(100 - lootfalled > lootchance){[/CODE] falled = true; } [CODE]if(falled){[/CODE] int ammotype = random.next[CODE]int(101);[/CODE] [CODE]if(ammotype < rifleammochance){[/CODE] [CODE]return ""rifle"";[/CODE] } [CODE]else if(ammotype < rifleammochance + shotgunammochance){[/CODE] [CODE]return ""shotgun"";[/CODE] } [CODE]else if(ammotype < rifleammochance + shotgunammochance + sniperammochance){[/CODE] [CODE]return ""sniper"";[/CODE] } [CODE]else{[/CODE] [CODE]return ""rocket"";[/CODE] } } [CODE]return ""null"";[/CODE] } [CODE]public void looting(){[/CODE] [CODE]string loot = lootammotype();[/CODE] switch(loot){ case ""rifle"": gp.player.weapons[1].ammo += 5; break; case ""shotgun"": gp.player.weapons[2].ammo += 5; break; case ""sniper"": gp.player.weapons[3].ammo += 5; break; case ""rocket"": gp.player.weapons[4].ammo += 5; break; default: break; } } } package bil211game2.game.entity; import bil211game2.game.main.gamepanel; [CODE]public class tankzombie extends zombie{[/CODE] [CODE]public tankzombie(gamepanel gp) {[/CODE] super(gp); type = 2; name = ""tank zombie""; speed = 1; maxl[CODE]ife = 4;[/CODE] l[CODE]ife = maxlife;[/CODE] basescore = 5; attack = 2; attackentity = 2; solidarea.x = 3; solidarea.y = 10; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; lootchance = 50; r[CODE]ifleammochance = 60;[/CODE] shotgunammochance = 30; sniperammochance = 10; getimage(); } [CODE]public void getimage(){[/CODE] up1 = setupnew(""zombies/big zombie walking animation frames/up2"", gp.tilesize, gp.tilesize); up2 = setupnew(""zombies/big zombie walking animation frames/up3"", gp.tilesize, gp.tilesize); down1 = setupnew(""zombies/big zombie walking animation frames/down2"", gp.tilesize, gp.tilesize); down2 = setupnew(""zombies/big zombie walking animation frames/down3"", gp.tilesize, gp.tilesize); left1 = setupnew(""zombies/big zombie walking animation frames/left2"", gp.tilesize, gp.tilesize); left2 = setupnew(""zombies/big zombie walking animation frames/left3"", gp.tilesize, gp.tilesize); right1 = setupnew(""zombies/big zombie walking animation frames/right2"", gp.tilesize, gp.tilesize); right2 = setupnew(""zombies/big zombie walking animation frames/right3"", gp.tilesize, gp.tilesize); } [CODE]public void setaction(){[/CODE] actionlockcounter++; [CODE]if(actionlockcounter > 60){[/CODE] boolean flag = false; // true : horizontal, false : vertical if(math.abs(gp.player.worldx - worldx) > math.abs(gp.player.worldy - worldy)){ flag = true; } [CODE]if(flag){[/CODE] if(gp.player.worldx - worldx > 0){ direction = ""right""; } [CODE]else{[/CODE] direction = ""left""; } } [CODE]else{[/CODE] if(gp.player.worldy - worldy > 0){ direction = ""down""; } [CODE]else{[/CODE] direction = ""up""; } } actionlockcounter = 0; } } @override [CODE]public void damagereaction() {[/CODE] actionlockcounter = 0; direction = gp.player.direction; } @override [CODE]public void kill() {[/CODE] gp.player.score += (gp.currentphase+1)*basescore; gp.animationmanager.addbloodsplash(worldx, worldy); looting(); } } package bil211game2.game.entity; import java.awt.alphacomposite; import java.awt.basicstroke; import java.awt.color; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import bil211game2.game.main.keyhandler; import bil211game2.game.main.gamepanel; import bil211game2.game.main.mousehandler; import bil211game2.game.main.sound; import bil211game2.game.main.utilitytool; import bil211game2.game.objects.ammos.acid; import bil211game2.game.objects.ammos.sniperammo; import bil211game2.game.objects.weapons.pistol; import bil211game2.game.objects.weapons.r[CODE]ifle;[/CODE] import bil211game2.game.objects.weapons.rocketlauncher; import bil211game2.game.objects.weapons.shotgun; import bil211game2.game.objects.weapons.sniper; import bil211game2.game.objects.weapons.weapon; [CODE]public class player extends entity{[/CODE] keyhandler keyh; mousehandler mouseh; [CODE]int standcounter = 0;[/CODE] [CODE]public boolean standing = false;[/CODE] [CODE]int attackcounter = 0;[/CODE] boolean canattact = false; [CODE]public int score = 0;[/CODE] [CODE]public final int screenx, screeny;[/CODE] [CODE]public int currentweaponindex;[/CODE] [CODE]public weapon[] weapons = new weapon[5];[/CODE] private monster closestzombie = null; private [CODE]int zombiedetectiontimer = 0;[/CODE] private final [CODE]int zombie_detection_duration = 180;[/CODE] private boolean zombiedetectionactive = false; [CODE]public player(gamepanel gp, keyhandler keyh, mousehandler mouseh) {[/CODE] super(gp); this.keyh = keyh; this.mouseh = mouseh; screenx = gp.screenwidth/2 - (gp.tilesize/2); screeny = gp.screenheight/2 - (gp.tilesize/2); // override solid area solidarea = [CODE]new rectangle();[/CODE] solidarea.x = 8; solidarea.y = 16; solidarea.width = 32; solidarea.height = 32; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; attackarea.width = 36; attackarea.height = 36; currentweaponindex = 0; weapons[0] = [CODE]new pistol(gp);[/CODE] weapons[1] = [CODE]new rifle(gp);[/CODE] weapons[2] = [CODE]new shotgun(gp);[/CODE] weapons[3] = [CODE]new sniper(gp);[/CODE] weapons[4] = [CODE]new rocketlauncher(gp);[/CODE] setdefaultvalues(); getplayerimage(); //getplayerattackimage(); } [CODE]public void setdefaultvalues(){[/CODE] worldx = gp.tilesize * 23; worldy = gp.tilesize * 21; speed = 4; direction = ""down""; // player status maxl[CODE]ife = 6;[/CODE] l[CODE]ife = maxlife;[/CODE] } [CODE]public void getplayerimage(){[/CODE] up1 = setupnew(""player/player character walking animation frames/up2"", gp.tilesize, gp.tilesize); up2 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); down1 = setupnew(""player/player character walking animation frames/down2"", gp.tilesize, gp.tilesize); down2 = setupnew(""player/player character walking animation frames/down3"", gp.tilesize, gp.tilesize); left1 = setupnew(""player/player character walking animation frames/left2"", gp.tilesize, gp.tilesize); left2 = setupnew(""player/player character walking animation frames/left3"", gp.tilesize, gp.tilesize); right1 = setupnew(""player/player character walking animation frames/right2"", gp.tilesize, gp.tilesize); right2 = setupnew(""player/player character walking animation frames/right3"", gp.tilesize, gp.tilesize); } [CODE]public void getplayerattackimage(){[/CODE] attackup1 = setupnew(""player/player character walking animation frames/up2"", gp.tilesize, gp.tilesize); attackup2 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); attackdown1 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); attackdown2 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); attackleft1 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); attackleft2 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); attackright1 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); attackright2 = setupnew(""player/player character walking animation frames/up3"", gp.tilesize, gp.tilesize); } @override [CODE]public void update(){[/CODE] [CODE]if(life <= 0){[/CODE] gp.gamestate = gp.finishstate; [CODE]return;[/CODE] } if(keyh.hpressed && !zombiedetectionactive) { findclosestzombie(); zombiedetectiontimer = 0; zombiedetectionactive = true; } [CODE]if(zombiedetectionactive) {[/CODE] zombiedetectiontimer++; [CODE]if(zombiedetectiontimer > zombie_detection_duration) {[/CODE] zombiedetectionactive = false; closestzombie = null; } } attackcounter++; if(mouseh.mouseleftpressed){ if(attackcounter > 60/((double)weapons[currentweaponindex].firerate/60)){ canattact = true; attackcounter = 0; } [CODE]else{[/CODE] canattact = false; } } [CODE]else{[/CODE] canattact = false; } [CODE]if(canattact){[/CODE] attacking(mouseh.event.getx(), mouseh.event.gety()); } if(keyh.uppressed||keyh.downpressed||keyh.leftpressed||keyh.rightpressed){ if(keyh.uppressed){ direction = ""up""; } else if(keyh.downpressed){ direction = ""down""; } else if(keyh.rightpressed){ direction = ""right""; } else if(keyh.leftpressed){ direction = ""left""; } standing = true; collisionon = false; gp.cchecker.checktile(this); int monsterindex = gp.cchecker.checkentity(this, gp.monsters); contactmonster(monsterindex); gp.ehandler.checkevent(); [CODE]for(int i = 0;[/CODE] i < gp.ammos.size(); i++){ if(gp.ammos.get(i) instanceof acid && gp.cchecker.checkammo(gp.ammos.get(i), this)){ life -= gp.ammos.get(i).attack; invicible = true; gp.ammos.set(i, null); gp.ammos.remove(i); gp.startscreenshake(12, 15); gp.playse(sound.player_hurt); } } [CODE]if(!collisionon){[/CODE] switch(direction){ case ""up"": worldy -= speed; break; case ""down"": worldy += speed; break; case ""left"": worldx -= speed; break; case ""right"": worldx += speed; break; } } spritecounter++; [CODE]if(spritecounter > 12){[/CODE] [CODE]if(spritenum == 1){[/CODE] spritenum = 2; } [CODE]else if(spritenum == 2){[/CODE] spritenum = 1; } spritecounter = 0; } } [CODE]else{[/CODE] [CODE]for(int i = 0;[/CODE] i < gp.ammos.size(); i++){ if(gp.ammos.get(i) instanceof acid && gp.cchecker.checkammo(gp.ammos.get(i), this)){ life -= gp.ammos.get(i).attack; invicible = true; if(!(gp.ammos.get(i) instanceof sniperammo)){ gp.ammos.set(i, null); gp.ammos.remove(i); } gp.playse(sound.player_hurt); } } standing = false; standcounter++; [CODE]if(standcounter == 20){[/CODE] spritenum = 1; standcounter = 0; } } [CODE]if(invicible){[/CODE] inviciblecounter++; [CODE]if(inviciblecounter > 60){[/CODE] invicible = false; inviciblecounter = 0; } } } [CODE]public void draw(graphics2d g2){[/CODE] bufferedimage image = null; [CODE]int tempscreenx = screenx;[/CODE] [CODE]int tempscreeny = screeny;[/CODE] switch(direction){ case ""up"": [CODE]if(attacking){[/CODE] tempscreeny = tempscreeny - gp.tilesize; [CODE]if(spritenum == 1){[/CODE] image = attackup1; } [CODE]if(spritenum == 2){[/CODE] image = attackup2; } } [CODE]else{[/CODE] [CODE]if(spritenum == 1){[/CODE] image = up1; } [CODE]if(spritenum == 2){[/CODE] image = up2; } } break; case ""down"": [CODE]if(attacking){[/CODE] [CODE]if(spritenum == 1){[/CODE] image = attackdown1; } [CODE]if(spritenum == 2){[/CODE] image = attackdown2; } } [CODE]else{[/CODE] [CODE]if(spritenum == 1){[/CODE] image = down1; } [CODE]if(spritenum == 2){[/CODE] image = down2; } } break; case ""left"": [CODE]if(attacking){[/CODE] tempscreenx = tempscreenx - gp.tilesize; [CODE]if(spritenum == 1){[/CODE] image = attackleft1; } [CODE]if(spritenum == 2){[/CODE] image = attackleft2; } } [CODE]else{[/CODE] [CODE]if(spritenum == 1){[/CODE] image = left1; } [CODE]if(spritenum == 2){[/CODE] image = left2; } } break; case ""right"": [CODE]if(attacking){[/CODE] [CODE]if(spritenum == 1){[/CODE] image = attackright1; } [CODE]if(spritenum == 2){[/CODE] image = attackright2; } } [CODE]else{[/CODE] [CODE]if(spritenum == 1){[/CODE] image = right1; } [CODE]if(spritenum == 2){[/CODE] image = right2; } } break; } [CODE]if(invicible){[/CODE] g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, 0.5f)); } g2.drawimage(image, tempscreenx, tempscreeny, null); g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, 1f)); [CODE]if(zombiedetectionactive && closestzombie != null) {[/CODE] drawdirectionarrow(g2); } } [CODE]public void contactmonster(int index){[/CODE] [CODE]if(index != 999){[/CODE] [CODE]if(!invicible){[/CODE] l[CODE]ife--;[/CODE] invicible = true; gp.startscreenshake(8, 15); } } } [CODE]public void attacking(int x, int y){[/CODE] weapons[currentweaponindex].fire(worldx + x - gp.screenwidth/2, worldy + y - gp.screenheight/2); } [CODE]public void changeweapon(int i){[/CODE] if(gp.gamestate == gp.playstate){ [CODE]if(i == 0){[/CODE] currentweaponindex = 0; } else if(i == 1 && gp.currentphase > gp.phase1){ currentweaponindex = 1; } else if(i == 2 && gp.currentphase > gp.phase4){ currentweaponindex = 2; } else if(i == 3 && gp.currentphase > gp.phase6){ currentweaponindex = 3; } else if(i == 4 && gp.currentphase > gp.phase10){ currentweaponindex = 4; } } } [CODE]public void damage(int i){[/CODE] [CODE]if(i != 999){[/CODE] if(!gp.monsters.get(i).invicible){ gp.monsters.get(i).l[CODE]ife--;[/CODE] gp.monsters.get(i).invicible = true; gp.monsters.get(i).damagereaction(); if(gp.monsters.get(i).l[CODE]ife <= 0){[/CODE] gp.monsters.get(i).kill(); gp.monsters.get(i).dying = true; } } } } private [CODE]void findclosestzombie() {[/CODE] double closestdistance = double.max_value; closestzombie = null; [CODE]for(int i = 0;[/CODE] i < gp.monsters.size(); i++) { monster monster = gp.monsters.get(i); if(monster != null && monster.alive && !monster.dying) { double distance = utilitytool.distancecalculator( worldx, worldy, monster.worldx, monster.worldy); [CODE]if(distance < closestdistance) {[/CODE] closestdistance = distance; closestzombie = monster; } } } } [CODE]public monster getclosestzombie() {[/CODE] [CODE]return zombiedetectionactive ? closestzombie : null;[/CODE] } private [CODE]void drawdirectionarrow(graphics2d g2) {[/CODE] [CODE]if(closestzombie == null) return;[/CODE] // zombi ile oyuncu arasındaki açıyı hesapla int zombiex = closestzombie.worldx - gp.player.worldx; int zombiey = closestzombie.worldy - gp.player.worldy; double angle = math.atan2(zombiey, zombiex); // ok için parametreler int arrowlength = gp.tilesize; int arrowheadsize = gp.tilesize / 3; // okun başlangıç noktasını hesapla (oyuncunun merkezi) int startx = screenx + gp.tilesize / 2; int starty = screeny + gp.tilesize / 2; // okun bitiş noktasını hesapla int endx = startx + (int)(math.cos(angle) * arrowlength); int endy = starty + (int)(math.sin(angle) * arrowlength); // ok çiz g2.setcolor([CODE]new color(255, 0, 0, 180));[/CODE] // ok başı çiz [CODE]int[] xpoints = new int[3];[/CODE] [CODE]int[] ypoints = new int[3];[/CODE] xpo[CODE]ints[0] = endx;[/CODE] ypo[CODE]ints[0] = endy;[/CODE] xpoints[1] = endx - (int)(math.cos(angle + math.pi/6) * arrowheadsize); ypoints[1] = endy - (int)(math.sin(angle + math.pi/6) * arrowheadsize); xpoints[2] = endx - (int)(math.cos(angle - math.pi/6) * arrowheadsize); ypoints[2] = endy - (int)(math.sin(angle - math.pi/6) * arrowheadsize); g2.fillpolygon(xpo[CODE]ints, ypoints, 3);[/CODE] // etrafında parlayan bir halka çiz (radar efekti) float pulsesize = 1.0f + 0.2f * (float)math.sin(system.currenttimemillis() * 0.005); int ringsize = (int)((gp.tilesize + gp.tilesize/3) * pulsesize); g2.setcolor([CODE]new color(255, 0, 0, 50));[/CODE] // çok hafif kırmızı g2.setstroke([CODE]new basicstroke(2));[/CODE] g2.drawoval(startx - ringsize/2, starty - ringsize/2, ringsize, ringsize); } } package bil211game2.game.entity; [CODE]public interface jumpable {[/CODE] [CODE]public void jump();[/CODE] }"
8190737,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. import java.util.*; [CODE]public class lab21q1 {[/CODE] [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1) return 0;[/CODE] [CODE]if(i % 2 == 0) return 1 + collatz(i / 2);[/CODE] [CODE]return 1 + collatz(3 * i + 1);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); int i = sc.next[CODE]int();[/CODE] system.out.pr[CODE]intln(collatz(i));[/CODE] sc.close(); } } import java.util.*; [CODE]public class lab21q2 {[/CODE] [CODE]static boolean issorted(int[] arr){[/CODE] int n = arr.length; [CODE]for(int i = 1;[/CODE]i < n;i++){ [CODE]if(arr[i-1] > arr[i]) return false;[/CODE] } [CODE]return true;[/CODE] } [CODE]static int[] coctailsort(int[] arr, boolean bubblebiggest){[/CODE] [CODE]if(issorted(arr)) return arr;[/CODE] int n = arr.length; [CODE]for(int i = 1;[/CODE]i < n;i++){ [CODE]if(bubblebiggest){[/CODE] [CODE]if(arr[i-1] > arr[i]){[/CODE] [CODE]int a1 = arr[i-1];[/CODE] [CODE]int a2 = arr[i];[/CODE] arr[i-1] = a2; arr[i] = a1; } } [CODE]else{[/CODE] [CODE]if(arr[i-1] < arr[i]){[/CODE] [CODE]int a1 = arr[i-1];[/CODE] [CODE]int a2 = arr[i];[/CODE] arr[i-1] = a2; arr[i] = a1; } } } [CODE]int[] rev = new int[n];[/CODE] [CODE]for(int i = 0;[/CODE]i < n;i++) rev[i] = arr[(n-1) - i]; [CODE]return coctailsort(rev, !bubblebiggest);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); int n = sc.next[CODE]int();[/CODE] [CODE]int[] arr = new int[n];[/CODE] [CODE]for(int i = 0;[/CODE]i < n;i++) arr[i] = sc.next[CODE]int();[/CODE] arr = coctailsort(arr, true); [CODE]for(int i = 0;[/CODE]i < n;i++) system.out.pr[CODE]int("""" + arr[i] + "" "");[/CODE] system.out.pr[CODE]int(""\n"");[/CODE] sc.close(); } } import java.util.*; [CODE]class sayac{[/CODE] [CODE]string str;[/CODE] sayac([CODE]string str){[/CODE] this.str = str; } [CODE]public int say(int idx){[/CODE] if(idx == str.length()) [CODE]return 0;[/CODE] if(str.charat(idx) == '1') [CODE]return 1 + say(idx + 1);[/CODE] [CODE]else return say(idx + 1);[/CODE] } [CODE]public int say(){[/CODE] [CODE]return say(0);[/CODE] } } [CODE]public class lab21q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); string str1 = sc.next(); sayac say1 = [CODE]new sayac(str1);[/CODE] system.out.println(say1.say()); string str2 = sc.next(); sayac say2 = [CODE]new sayac(str2);[/CODE] system.out.println(say2.say()); sc.close(); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; [CODE]public class musicplayer{[/CODE] playingstrategy strategy; [CODE]void setstrategy(playingstrategy strategy){[/CODE] this.strategy = strategy; } [CODE]void play(list<song> playlist){[/CODE] strategy.play(playlist); } } import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); song s1 = [CODE]new metal(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] song s2 = [CODE]new metal(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] song s3 = [CODE]new rock(""small mountain"", ""midlake"");[/CODE] song s4 = [CODE]new rock(""ankara"", ""vega"");[/CODE] song s5 = [CODE]new classic(""una mattina"", ""ludovico einaudi"");[/CODE] // songlari iceren calma listesi list<song> playlist = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi musicplayer musicplayer = [CODE]new musicplayer();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] musicplayer.setstrategy([CODE]new ordered());[/CODE] musicplayer.play(playlist); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] musicplayer.setstrategy([CODE]new shuffled());[/CODE] musicplayer.play(playlist); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] musicplayer.setstrategy([CODE]new rockspecial());[/CODE] musicplayer.play(playlist); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (song song:playlist){[/CODE] [CODE]if(song instanceof metal){[/CODE] metal metal = (metal)song; system.out.println(metal.singer + "" - "" + metal.name + "" [ozellik: "" + metal.metalproperties + ""]""); } } sc.close(); } } abstract [CODE]class song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] abstract [CODE]void play();[/CODE] } [CODE]class metal extends song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] [CODE]string metalproperties;[/CODE] metal([CODE]string name, string singer, string metalproperties){[/CODE] this.name = name; this.singer = singer; this.metalproperties = metalproperties; } [CODE]void play(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + singer + "" - "" + name + "" ("" + metalproperties + "")"");[/CODE] } [CODE]void showmetalproperties(){[/CODE] system.out.pr[CODE]intln(metalproperties);[/CODE] } } [CODE]class rock extends song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] rock([CODE]string name, string singer){[/CODE] this.name = name; this.singer = singer; } [CODE]void play(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + singer + "" - "" + name + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class classic extends song{[/CODE] [CODE]string name;[/CODE] [CODE]string singer;[/CODE] [CODE]classic(string name, string singer){[/CODE] this.name = name; this.singer = singer; } [CODE]void play(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + singer + "" - "" + name + "" (hafif ve sakin)"");[/CODE] } } import java.util.*; [CODE]interface playingstrategy{[/CODE] [CODE]public void play(list<song> playlist);[/CODE] } [CODE]class ordered implements playingstrategy{[/CODE] [CODE]public void play(list<song> playlist){[/CODE] [CODE]for(song song:playlist){[/CODE] song.play(); } system.out.pr[CODE]intln(""\n"");[/CODE] } } [CODE]class shuffled implements playingstrategy{[/CODE] [CODE]public void play(list<song> playlist){[/CODE] int length = playlist.size(); [CODE]for(int i = length-1;[/CODE]i >= 0;i--){ int idx = (int)math.round(math.random() * i); song tempsong1 = playlist.get(idx); song tempsong2 = playlist.get(i); playlist.set(idx, tempsong2); playlist.set(i , tempsong1); } [CODE]for(song song:playlist){[/CODE] song.play(); } system.out.pr[CODE]intln(""\n"");[/CODE] } } [CODE]class rockspecial implements playingstrategy{[/CODE] [CODE]public void play(list<song> playlist){[/CODE] boolean playingrock = false; [CODE]for(song song:playlist){[/CODE] [CODE]if(song instanceof rock && !playingrock){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] playingrock = true; } [CODE]else if(!(song instanceof rock) && playingrock){[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] playingrock = false; } song.play(); } system.out.pr[CODE]intln(""\n"");[/CODE] } } metin karşılaştırıcı bil 211 - lab 3 20 şubat 2025 1 giriş bulaboratuvarda fileio ve exceptions kullanarakbir metinkarşılaştırıcı geliştireceğiz. metinkarşılaştırıcı , verilen iki metin dosyasını karşılaştırarak ikinci metnin yalnızca yeni satırlar eklenerek oluşturulup oluştu- rulmadığını kontrol edecek ve gerektiğinde hangi satırdan sonra hangi eklemelerin yapıldığını belirleyecektir. 2 genel program program, çalıştırılırken komut satırından iki dosya adı alacaktır: - orijinal metin dosyası (ilk argüman) - değiştirilmiş metin dosyası (ikinci argüman) program şu şekilde çalıştırmalıdır (burada köşeli parantezler yerine dosyaların asıl adı gelmeli): java metinkarsilastirici [orijinal.txt] [degistirilmis.txt] program, ilk argümanda verilen dosyayı orijinal metin, ikinci argümandaki dosyayı değiştirilmiş metin olarak kabul edecek ve yalnızca yeni satırlar eklenerek oluşturulup oluşturulmadığını kontrol edecektir. eğer mümkünse, hangi satırdan sonra hangi eklemelerin yapıldığını tespit ederek bir çıktı dosyasına yazacaktır: -farklar.txt – yeni satırların hangi satırdan sonra eklendiğini gösteren çıktı dosyası. eğer dosya adları eksikse veya hatalı formatta verilmişse, program özel bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosyaokumaveyazmaişlemleriiçinjava’nın java.io paketindekisınıflarıkullanacaktır(örn., buf- ferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. program, aşağıdaki olası dosya hatalarını atmalı ve stderr’e belirlenen hata mesajlarını yazmalıdır: - dosya bulunamıyorsa: ""hata: [dosya adı] bulunamadı."" - dosya boşsa: ""hata: [dosya adı] boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: 1 - yanlisargumanexception (extends inputexception): argümanlar eksik ya da fazlaysa atılacak hata. burada[argümanlar] yerine programın çalıştırıldığı argüman listesi yazılmalıdır. - hata mesajı: ""hata: hatalı argüman kullanımı: [argümanlar]. program argüman olarak 2 dosya ismi almalı."" - dosyabulunamadiexception (extends inputexception): dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" - bosdosyaexception (extends inputexception): dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 geçersiz değişiklik hatası (gecersizdegisiklikexception class) eğerdegistirilmis.txt dosyası,orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulamıy- orsa, program gecersizdegisiklikexception hatasını atmalıdır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: hata: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. 5 dosya formatları 5.1 girdi dosyaları 5.1.1orijinal.txt vedegistirilmis.txt formatı bu dosyalar, her satırın ayrı bir metin satırı olduğu düz metin formatında olmalıdır. örnek i̇çerik ( orijinal.txt ): merhaba dünya. bu bir test dosyasıdır. son satır budur. örnek i̇çerik ( degistirilmis.txt ): merhaba dünya. bu bir test dosyasıdır. eklenen yeni bir satır. son satır budur. yeni bir satır daha eklendi. 5.2 çıktı dosyası 5.2.1farklar.txt formatı farklar.txt dosyası, hangi satırdan sonra hangi yeni satırın eklendiğini gösterecek şekilde yapılandırıl- malıdır: örnek çıktı ( farklar.txt ): 2 -> eklenen yeni bir satır. 4 -> yeni bir satır daha eklendi. burada ‘2 ->‘ ifadesi, ""2. satırdan sonra eklenmiştir"" anlamına gelir. eğer aynı yere birden fazla satır eklenmişse aynı sayıyı tekrar ederek eklenme sırasında yazılmalı. 5.3 özel hata durumları ve çıktıları eğerdegistirilmis.txt ,orijinal.txt üzerine sadece yeni satırlar eklenerek oluşturulmamışsa stderr’e şu mesaj yazılmalıdır: hata: degistirilmis.txt dosyası, orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. eğer dosya adları eksikse veya hatalıysa, stderr’e şu mesaj yazılmalıdır: hata: geçersiz dosya adı. 2 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterleri temsil eden bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regexp) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 3 import java.util.*; import java.io.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) throws inputexception{[/CODE] if(args.length != 2){ [CODE]string error = ""hata: hatali arguman kullanimi: ["";[/CODE] [CODE]for(int i = 0;[/CODE]i < args.length;i++){ error = error + args[i]; if(i != args.length - 1) error = error + "", ""; } error = error + ""]. program arguman olarak 2 dosya ismi almali""; throw [CODE]new wrongargumentexception(error);[/CODE] } scanner sc1 = null; scanner sc2 = null; [CODE]try{[/CODE] sc1 = [CODE]new scanner(new file(args[0]));[/CODE] sc2 = [CODE]new scanner(new file(args[1]));[/CODE] } [CODE]catch(ioexception e){[/CODE] throw new filenotfoundexception(e.tostring().split("" "")[1]); } if(!sc1.hasnextline()){ sc1.close(); sc2.close(); throw [CODE]new fileempytexception(args[0]);[/CODE] } if(!sc2.hasnextline()){ sc1.close(); sc2.close(); throw [CODE]new fileempytexception(args[1]);[/CODE] } [CODE]string line1 = null, line2 = null;[/CODE] [CODE]int lineidx = 0;[/CODE] filewriter writer = null; [CODE]try{[/CODE] writer = new filewriter(new file(""farklar.txt"")); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] [CODE]try{[/CODE] sc1.close(); sc2.close(); } [CODE]catch(exception ex){[/CODE] ex.pr[CODE]intstacktrace();[/CODE] [CODE]return;[/CODE] } [CODE]return;[/CODE] } while(sc1.hasnextline() && sc2.hasnextline()){ line1 = sc1.nextline(); line2 = sc2.nextline(); while(!line1.equals(line2) && sc2.hasnextline()){ [CODE]try{[/CODE] writer.write(lineidx + "" -> "" + line2 + ""\n""); } [CODE]catch(exception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } line2 = sc2.nextline(); } lineidx++; if(!line1.equals(line2)){ [CODE]try{[/CODE] sc1.close(); sc2.close(); writer.close(); } [CODE]catch(exception ex){[/CODE] ex.pr[CODE]intstacktrace();[/CODE] } throw [CODE]new invalidchangeexception(args);[/CODE] } } if(sc1.hasnextline()){ [CODE]try{[/CODE] sc1.close(); sc2.close(); writer.close(); } [CODE]catch(exception ex){[/CODE] ex.pr[CODE]intstacktrace();[/CODE] } throw [CODE]new invalidchangeexception(args);[/CODE] } while(sc2.hasnextline()){ [CODE]try{[/CODE] writer.write(lineidx + "" -> "" + sc2.nextline() + ""\n""); } [CODE]catch(exception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]try{[/CODE] sc1.close(); sc2.close(); writer.close(); } [CODE]catch(exception ex){[/CODE] ex.pr[CODE]intstacktrace();[/CODE] [CODE]return;[/CODE] } } } [CODE]public class inputexception extends exception{[/CODE] inputexception([CODE]string str){[/CODE] super(str); } } [CODE]class filenotfoundexception extends inputexception{[/CODE] filenotfoundexception([CODE]string str){[/CODE] super(""hata: "" + str + "" bulunamadi.""); pr[CODE]intstacktrace();[/CODE] } } [CODE]class fileempytexception extends inputexception{[/CODE] fileempytexception([CODE]string str){[/CODE] super(""hata: "" + str + "" bos.""); pr[CODE]intstacktrace();[/CODE] } } [CODE]class invalidchangeexception extends inputexception{[/CODE] invalidchangeexception([CODE]string[] args){[/CODE] super(""hata: "" + args[1] + "" dosyasi, "" + args[0] + ""dosyasina yalnizca yeni satirlar eklenerek olusturulmamis.""); pr[CODE]intstacktrace();[/CODE] } } [CODE]public class wrongargumentexception extends inputexception{[/CODE] wrongargumentexception([CODE]string error){[/CODE] super(error); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.*; [CODE]interface item{[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]class weapon implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int damage;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.name = name; this.value = value; this.damage = damage; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } } [CODE]class armor implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense){[/CODE] this.name = name; this.value = value; this.defense = defense; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } } [CODE]class potion implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]string effect;[/CODE] [CODE]public potion(string name, int value, string effect){[/CODE] this.name = name; this.value = value; this.effect = effect; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } } [CODE]class inventory<t extends item>{[/CODE] arraylist<t> list; [CODE]public inventory(){[/CODE] list = [CODE]new arraylist<>();[/CODE] } [CODE]void additem(t item){[/CODE] list.add(item); } [CODE]void removeitem(t item){[/CODE] list.remove(item); } [CODE]void printinventory(){[/CODE] [CODE]for(t item:list){[/CODE] system.out.println(item.getname()); } } t mostvaluableitem(){ if(list.size() == 0) [CODE]return null;[/CODE] t ret = list.get(0); [CODE]for(int i = 1;[/CODE]i < list.size();i++){ if(list.get(i).getvalue() > ret.getvalue()) ret = list.get(i); } [CODE]return ret;[/CODE] } t finditembyname([CODE]string name){[/CODE] [CODE]for(t item:list){[/CODE] if(item.getname().equals(name)) [CODE]return item;[/CODE] } [CODE]return null;[/CODE] } arraylist<t> finditemsbyvalue([CODE]int value){[/CODE] arraylist<t> retlist = [CODE]new arraylist<t>();[/CODE] [CODE]for(t item:list){[/CODE] if(item.getvalue() > value) retlist.add(item); } [CODE]return retlist;[/CODE] } [CODE]int gettotalvalue(){[/CODE] [CODE]int total = 0;[/CODE] for(t item:list) total += item.getvalue(); [CODE]return total;[/CODE] } arraylist<t> filterbytype([CODE]class<?> type){[/CODE] arraylist<t> retlist = [CODE]new arraylist<>();[/CODE] [CODE]for(t item:list){[/CODE] class<?> currentclass = item.get[CODE]class();[/CODE] if(type.getname().equals(currentclass.getname())) retlist.add(item); } [CODE]return retlist;[/CODE] } [CODE]int gettotalweapondamage(){[/CODE] [CODE]int total = 0;[/CODE] [CODE]for(t item:list){[/CODE] class<?> currentclass = item.get[CODE]class();[/CODE] if(currentclass.getname().equals(""weapon"")) total += ((weapon)item).damage; } [CODE]return total;[/CODE] } [CODE]void sortbyvalue(){[/CODE] [CODE]for(int i = 0;[/CODE]i < list.size();i++){ [CODE]for(int j = 1;[/CODE]j < list.size();j++){ t item1 = list.get(j-1); t item2 = list.get(j); if(item1.getvalue() < item2.getvalue()){ list.set(j-1, item2); list.set(j, item1); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory){[/CODE] system.out.println(inventory.mostvaluableitem().getname()); } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source){[/CODE] for(armor armor:source.list){ destination.additem(armor); } } } [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] inventory<item> inventory = [CODE]new inventory<>();[/CODE] armor ar = [CODE]new armor(""armor10"", 10, 20);[/CODE] inventory.additem(ar); inventory.additem([CODE]new weapon(""weapon11"", 11, 25));[/CODE] inventory.additem([CODE]new potion(""potion12"", 12, ""potipoti""));[/CODE] inventory.additem([CODE]new weapon(""weapon23"", 23, 51));[/CODE] inventory.sortbyvalue(); inventory.pr[CODE]intinventory();[/CODE] inventory.pr[CODE]intmostvaluableitem(inventory);[/CODE] system.out.println(inventory.gettotalweapondamage()); system.out.println(inventory.gettotalvalue()); system.out.pr[CODE]intln(""-------------------------"");[/CODE] class<?> cls = potion.[CODE]class;[/CODE] arraylist<item> list = inventory.filterbytype(cls); [CODE]for(item item:list){[/CODE] system.out.println(item.getname()); } system.out.pr[CODE]intln(""-------------------------"");[/CODE] inventory.removeitem(ar); inventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""-------------------------"");[/CODE] inventory<armor> armors = [CODE]new inventory<>();[/CODE] armors.additem([CODE]new armor(""a1"", 1, 1));[/CODE] armors.additem([CODE]new armor(""a2"", 2, 2));[/CODE] armors.additem([CODE]new armor(""a3"", 3, 3));[/CODE] armors.additem([CODE]new armor(""a4"", 4, 4));[/CODE] inventory.transferarmor(inventory, armors); inventory.pr[CODE]intinventory();[/CODE] item tt = inventory.finditembyname(""a4""); system.out.println(tt.getname() + "" "" + tt.getvalue()); system.out.pr[CODE]intln(""-------------------------"");[/CODE] list = inventory.finditemsbyvalue(3); [CODE]for(item item:list){[/CODE] system.out.println(item.getname()); } system.out.pr[CODE]intln(""-------------------------"");[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. özyinelemedir. bir fonksiyon kendisini çağırıyorsa recursive olur recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. recursion'un bitirildiği case'dir. base case'e girince fonksiyon bir kez daha kendisini çağırmaz bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? sondaki harf + f(str.substring(0, uzunluk-1)). base case, stringing 0 uzunluğunda olduğu case olur recursive bir metotta base case olmazsa ne olur? sonsuza kadar kendini çağırmaya devam eder, stackoverflow olur recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. her bir çağırma, stack'e bir katman daha ekler. recursion bittiğinde ise katmanlar birer birer işlenir fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. n'inci fibonacci sayısı için 2^n kez fonksiyon çağırılır tail recursion nedir, kısaca açıklayınız. fonksiyonun en sonunda return ifadesi ile beraber recursionun çağırılmasıdır abstraction kavramını açıklayınız. bir nesnenin özelliklerini çıkartarak değişkenlerden ve metotlardan oluşan bir class/blueprint yaratmaktır ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? inheritance ilişkisi olduğunda ""is a"" olur. ""class a extends b"" ifadesiyle belirtilir bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya b java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? o class initialize edilmeden önce tüm ata class değişkenlerinin ve metotlarının setlenmesi gerekmektedir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayır metot overriding ve overloading kavramlarını açıklayınız. override, ata classta tanımlı bir metot ile aynı signature'e sahip bir metodu child classta tanımlamaktır. overload ise aynı isme sahip ama farklı signature'u bulunan metotlar tanımlamaktır [CODE]class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? dog \n bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? circle \n 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? kullanılacak metodun hangi tanıma göre kullanılacağını belirlemektir. statik ve dinamik olabilir hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? overriding olmayan veya override edilemeyen metodlarda static, overriding olan metodlarda dinamik binding yapılır. [CODE]static binding için final keywordu kullanılır dinamik bağlamada jvm'nin görevi nedir? metodun tanımını runtime'da bulmaktır java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? kod daha yavaş çalışırdı java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? compiler error alırız java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. bir canlı yemek yiyebiliyorsa bir köpek de yemek yiyebilmelidir. protected bir metod [CODE]public olarak override edilebilir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() komutu çalışmayacaktır ve compiler error alınacaktır. bu satır silindikten sonra output ""child special"" olacaktır. dinamik binding bulunuyor java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇çinde abstract metodların bulunduğu classlara abstract class denir. ikisinin de constructurları olamaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? evet. abstarct keywordu kullanılarak. fonksiyonun tanımı yapılmaz abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metodları tanımı yapılmaz. concrete hale getirilmek istendiğinde yapılır. abstract classlar, atası olduğu classlara ""şunu şunu implement etmek zorundasın"" der. abstract [CODE]classları polymorphism için kullanabiliriz abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar bir classtır, extend edilirler. interfaceler class değildir. implement edilirler. evet type olarak kullanılabilir marker interface ve functional interface kavramları nedir, nasıl kullanılır? ( ´_ゝ`) marker interface bi blueprint görevi görür. i̇çindeki metodlar tanımsızdır. functional interface'in içinde tanımı olan metodlar bulunur bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? edebilir. edebilir abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? new animal() yerine new dog() yazarız. output: animal: buddy woof [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? etmez. birden fazla move() tanımı var. i̇kisinden birini silmemiz lazım. sonrasında hangisini sildiysek diğerini outputlar. java'da inner class nedir, avantajları nelerdir? class içindeki class'tır. class içinde tekrar tekrar kullanılan yapıları bir çatı altında toplamaya yarar statik ve statik olmayan (member) inner class arasındaki temel fark nedir? statik inner class objesini, class dışında, class objecti oluşturmadan oluşturabiliyoruz. statik değil ise inner class objesi oluşturmak için outet class objesi oluşturmamız gerekiyor anonymous class nedir, nasıl tanımlanır, nelerden (hangi kod yapılarından) anonim sınıf yapılabilir? ismi olmayan ve tek bir obje özelinde oluşturulan classlardır. her türlü classtan ve interface'den oluşturulabilir. yeter ki gerekli metodlar tanımlansın inner [CODE]classlar tanımlandıkları classın private değişkenlerine erişebilir mi;[/CODE] peki değiştirebilir mi? evet/hayır ise bu neyi sağlar? evet. evet. daha fazla fonksiyonalite sağlar statik olmayan inner classlarda 'static' keywordü ile bir şey tanımlanabilir mi? neden? hayır. çünkü inner class static değil ise inner classın outer classından bir obje oluşturulmadığı sürece inner classın içindeki herhangi bir şey var olmayacağından dolayı static keywordunun bir anlamı kalmıyor anonymus classların constructorları olabilir mi? inner classlardan farkı nedir? olamaz çünkü tek seferliktirler. inner class, outer class içinde başka bir classtır. anonymous class ise bir classın veya interface'in kullanılarsk tek bir seferlik bir obje üretilmesidir. hangi tür inner [CODE]classlar outer classları dışında instantiate (nesne yaratılabilir) edilebilirler? private olmayanlar class outer {[/CODE] private [CODE]int value = 10;[/CODE] [CODE]class inner {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""value: "" + value);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer.inner inner = outer.[CODE]new inner();[/CODE] inner.display(); } } kodda hata gözlemliyor musunuz? eğer gözlemliyorsanız hata nedir, nasıl düzeltilir? (varsa hatayı düzelttikten sonra) output? (new outer()).new inner() olması gerekiyor. output: value: 10 [CODE]class outer {[/CODE] private [CODE]static int count = 5;[/CODE] [CODE]static class staticinner {[/CODE] [CODE]void showcount() {[/CODE] system.out.pr[CODE]intln(""count: "" + count);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] outer outer = [CODE]new outer();[/CODE] outer.staticinner inner = outer.[CODE]new staticinner();[/CODE] inner.showcount(); } } kod bu halde compile edilir mi? kodda bir yanlışlık var mıdır, varsa nedir? (varsa hatayı düzelttikten sonra) output? hata yok gibi. output: count: 5 text file ile binary file arasındaki fark nedir? txt dosyası veriyi txt olarak okur binary dosya binary olarak bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? cache'e fazla yüklenmiş oluruz binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? serializable, metodu yok, marker interface binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? evet. binary değerleri yazılır buffered reader ve scanner sın[CODE]ıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? read etmeye çalışmamıza rağmen null döndürüyosa sonundayızdır binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? read etmeye çalışmamıza rağmen null döndürüyosa sonundayızdır public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] randomaccessfile raf = new randomaccessfile(""numbers.bin"", ""rw""); raf.write[CODE]int(10);[/CODE] raf.write[CODE]int(20);[/CODE] raf.seek(0); int a = raf.read[CODE]int();[/CODE] raf.seek(7); byte b = raf.readbyte(); system.out.pr[CODE]intln(a + "" "" + b);[/CODE] raf.close(); } } output? 10 + 20 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] [CODE]try{[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); pr[CODE]intwriter pw = new printwriter(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]catch(exception e){[/CODE] system.err(""oopps!""); } } } bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir, açıklayınız. ""new log entry"" yazar what grade (a, b, c, d, or f) do you expect to earn by the end of this course? bb java'da generic kavramı nedir, bu kavramın temel amacı nedir? genel tipli classlar yazmaya yarayan bir araç. spesifik bir tip yerine initialization sürecinde belirlenecek bir tip ile class oluşturulmasına yarar bir wildcard'ı ne zaman sınırlamaya ihtiyaç duyarsınız, sınırlandığı ve sınırlanmadığı durumlar için birer örnek veriniz. boundları hangi keywordlerle ifade edersiniz? eğer belli bir classın altına veya üstüne ihtiyaç duyuyorsam sınırlandırırım <? extends class> ve <? super class> ile sınırlandırılabilir jenerik olmayan bir class jenerik bir metot içerebilir mi? açıklayınız. i̇çerebilir örneğin void foo<t>() mygenericclass<integer> ve mygenericclass<number> classları arasında kalıtım(child-parent) ilişkisi nasıldır, açıklayınız. number olan [CODE]integer olanın parentıdır class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. ? [CODE]public _____________ {[/CODE] double sum = 0.0; [CODE]for (t item : list) {[/CODE] sum += item.doublevalue(); } return sum / list.size(); } [CODE]public static void main(string[] args) {[/CODE] list<integer> integers = arrays.aslist(1, 2, 3, 4); list<double> doubles = arrays.aslist(1.5, 2.5, 3.5); main m = [CODE]new main();[/CODE] system.out.pr[CODE]intln(average(integers));[/CODE] system.out.pr[CODE]intln(average(doubles));[/CODE] } yukarıda boşluk bırakılan yeri doldurun. not: metodun jenerik olduğuna, çağırılma biçimine ve jenerik tipine dikkat edin! boşluğu doldurduktan sonra programın çıktısı ne olur? average(list<? extends numbers> list) 2.5 2.5 aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve hepsini 1 defa sağa kaydıran metodu nasıl yazardınız, stratejiniz ne olurdu? peki ya n defa sağa kaydırma işlemini nasıl yapardınız? n defa kaydırma çözümünüz sizce optimal olan çözüm mü, neden? örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> a -> b ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node rotate(node head){[/CODE]...} node n1 = head, n2 = head.next (burads null olur mu diye ifle kontrol ederdim) .sonrasında n2.next null olana kadar {n1=n2, n2=n2.next}. sonra n1.next =null ve n2.next = head. return n2 arraylist ve linkedlist veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. arraylist arraydir. veriler memoryde ardışıktır. linkedlistte veriler ardışık değildir. pointerla sonraki veriye geçilir collections interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? ekleme çıkarma var mı diye kontrol etme boyut verme vb kendi yazdığınız bir classta veri yapilarını istenilen şekilde (mesela hashset'te duplicate objelerin olmamasi) kullanabilmek için object classının hangi metotlarını override etmek gerekir, neden? add, remove check bir dijital kütüphane uygulaması geliştiriyorsunuz. bu uygulamada, öğrenciler araştırma projeleri için kaynak ekliyor ve sistem, en son eklenen kaynağı ilk olarak görüntülemek üzere tasarlanıyor. öğrenciler, ekledikleri kaynakların boyut sırasına göre tekrar gözden geçebilmek istiyorlar. bu durumda, hangi veri yapısını tercih edersiniz? neden? stack f[CODE]ifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue first in first out lifo, fifo, ikisi de değil, ikisi de değil public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] stack<[CODE]integer> stack = new stack<>();[/CODE] stack.push(10); stack.push(20); stack.push(30); system.out.println(stack.pop()); system.out.println(stack.peek()); system.out.println(stack.pop()); } } output? 30 20 20 [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 85); scores.put(""charlie"", 90); scores.put(""alice"", 100); system.out.println(scores.get(""alice"")); system.out.println(scores.size()); } } output? 100 3 bil21 1 quiz 1 section 1 quizleri uzak sistemine yükleyeceksiniz. q1 : bir program yazın ki, verilen n değeri için n çift parantezden oluşan tüm geçerli parantez dizilimlerini üretsin ve ekrana bassın . kurallar: ● her açma parantezi '(' kapama parantezi ')' ile kapanmalıdır .. ● herhangi bir noktada, kapama parantez ‘ ) ’ sayısı açma parantez ‘ ( ‘sayısından fazla olamaz. ● n çift parantez için tüm olası geçerli dizilimleri bulun. örnek: n = 3: ((())), (()()), (())(), ()(()) ,()()() n = 2: (()) ()() imzası: public void parantezbas(int n) q2 : bu soruda penguin ve habitat adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. penguin: değişkenler: private string name private string species private int age private double weight metotlar: private değişkenler için get ve set metotları. public void hunt(): penguenin ağırlığını 1 arttır. constructorlar: bir tane parametresiz ve parametreli constructor . parametresiz olan name= “willy”, species = “emperor”, age= 1 ve weight = 5.0 yapmalıdır . public void printpenguin(): pengueni ekrana basmalıdır . örnek: penguin name: willy species: emperor age: 1 years weight: 5.0 kg habitat: değişkenler: private string location private double temperature private arraylist<penguin> penguins metotlar: public habitat(string location, double temperature) private değişkenler için get ve set metotları. public void addpenguin(penguin penguin) public void printhabitat(): ekrana basar . örnek main(): penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] // default olarak ""willy"" ismiyle gelir habitat habitat = new habitat(“antarctica ”,-15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] çıktı: habitat location: antarctica average temperature: -15.0°c penguins living here: penguin name: pingu species: emperor age: 5 years weight: 12.5 kg penguin name: skipper species: adelie age: 3 years weight: 9.8 kg penguin name: willy species: emperor age: 1 years weight: 5.0 kg import java.util.*; [CODE]public class lab2q1 {[/CODE] [CODE]public static boolean check(string str){[/CODE] [CODE]int cnt = 0;[/CODE] [CODE]for(int i = 0;[/CODE]i < str.length();i++){ if(str.charat(i) == ')'){ [CODE]if(cnt == 0) return false;[/CODE] cnt--; } [CODE]else{[/CODE] cnt++; } } [CODE]if(cnt == 0) return true;[/CODE] [CODE]return false;[/CODE] } [CODE]public static void parantezbasiterative(int n){[/CODE] int val = (int)math.pow(2, 2*n); [CODE]for(int i = 0;[/CODE]i < val;i++){ [CODE]string str = """";[/CODE] [CODE]for(int j = 0;[/CODE]j < 2*n;j++){ if(((int)math.pow(2, j) & i) == 0) str = str + '('; [CODE]else str = str + ')';[/CODE] } if(check(str)) system.out.pr[CODE]intln(str);[/CODE] } } [CODE]public static void parantezbasrecursive(int n, string str){[/CODE] if(str.length() == 2*n){ if(check(str)) system.out.pr[CODE]intln(str);[/CODE] [CODE]return;[/CODE] } parantezbasrecursive(n, str + '('); parantezbasrecursive(n, str + ')'); } [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); int n = sc.next[CODE]int();[/CODE] parantezbasrecursive(n, """"); sc.close(); } } import java.util.*; [CODE]class penguin{[/CODE] private [CODE]string name;[/CODE] private [CODE]string species;[/CODE] private [CODE]int age;[/CODE] private double weight; [CODE]public penguin(){[/CODE] this(""willy"", ""emperor"", 1, 5.0); } [CODE]public penguin(string name, string species, int age, double weight){[/CODE] setname(name); setspecies(species); setage(age); setweight(weight); } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void setspecies(string species){[/CODE] this.species = species; } [CODE]public void setage(int age){[/CODE] this.age = age; } [CODE]public void setweight(double weight){[/CODE] this.weight = weight; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getspecies(){[/CODE] [CODE]return species;[/CODE] } [CODE]public int getage(){[/CODE] [CODE]return age;[/CODE] } [CODE]public double getweight(){[/CODE] [CODE]return weight;[/CODE] } [CODE]public void hunt(){[/CODE] age++; } [CODE]public void printpenguin(){[/CODE] system.out.pr[CODE]intln(""penguin name: "" + name + ""\tspecies:"" + species + ""\tage:"" + age + ""years "" + ""\t weight:"" + weight + "" kg"");[/CODE] } } [CODE]class habitat{[/CODE] private [CODE]string location;[/CODE] private double temperature; private arraylist<penguin> penguins; [CODE]public habitat(string location, double temperature){[/CODE] setlocation(location); settemperature(temperature); penguins = [CODE]new arraylist<penguin>();[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public void settemperature(double temperature){[/CODE] this.temperature = temperature; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public double gettemperature(){[/CODE] [CODE]return temperature;[/CODE] } [CODE]public void addpenguin(penguin penguin){[/CODE] penguins.add(penguin); } [CODE]public void printhabitat(){[/CODE] system.out.pr[CODE]intln(""habitat location: "" + location);[/CODE] system.out.pr[CODE]intln(""average temperature: "" + temperature + ""°c"");[/CODE] system.out.pr[CODE]intln(""penguins living in here:"");[/CODE] [CODE]for(penguin penguin:penguins){[/CODE] penguin.pr[CODE]intpenguin();[/CODE] } } } [CODE]public class lab2q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); penguin p1 = new penguin(""pingu"", ""emperor"", 5, 12.5); penguin p2 = new penguin(""skipper"", ""adelie"", 3, 9.8); penguin p3 = [CODE]new penguin();[/CODE] habitat habitat = new habitat(""antarctica"", -15.0); habitat.addpenguin(p1); habitat.addpenguin(p2); habitat.addpenguin(p3); habitat.pr[CODE]inthabitat();[/CODE] sc.close(); } } kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner sc = new scanner(system.in); coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); machine.pr[CODE]intcoffeecounter();[/CODE] sc.close(); } } [CODE]public interface coffeeaddon{[/CODE] double getcost(); [CODE]string getname();[/CODE] } [CODE]class milk implements coffeeaddon{[/CODE] final double cost = 5; final [CODE]string name = ""milk"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } [CODE]class chocolate implements coffeeaddon{[/CODE] final double cost = 7; final [CODE]string name = ""chocolate"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } [CODE]class vanillasyrup implements coffeeaddon{[/CODE] final double cost = 6; final [CODE]string name = ""vanillasyrup"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } [CODE]class doubleshot implements coffeeaddon{[/CODE] final double cost = 10; final [CODE]string name = ""doubleshot"";[/CODE] [CODE]public double getcost(){[/CODE] [CODE]return cost;[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } } import java.util.*; [CODE]public abstract class basecoffee{[/CODE] protected arraylist<coffeeaddon> addons; basecoffee(){ addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon addon){[/CODE] addons.add(addon); }; [CODE]public abstract double calculateprice();[/CODE] [CODE]public abstract string gettype();[/CODE] } [CODE]class espresso extends basecoffee{[/CODE] private [CODE]string type = ""espresso"";[/CODE] private boolean isheated = false; [CODE]public string gettype(){[/CODE] [CODE]if(isheated) return type + "" (sicak fincan)"";[/CODE] [CODE]else return type;[/CODE] } [CODE]public void heatcup(){[/CODE] isheated = true; } [CODE]public double calculateprice(){[/CODE] double price = 40; [CODE]for(coffeeaddon addon:addons){[/CODE] price += addon.getcost(); } [CODE]return price;[/CODE] } } [CODE]class latte extends basecoffee{[/CODE] private [CODE]string type = ""latte"";[/CODE] [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public double calculateprice(){[/CODE] double price = 50; [CODE]for(coffeeaddon addon:addons){[/CODE] price += addon.getcost(); } [CODE]return price;[/CODE] } } [CODE]class americano extends basecoffee{[/CODE] private [CODE]string type = ""americano"";[/CODE] [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public double calculateprice(){[/CODE] double price = 45; [CODE]for(coffeeaddon addon:addons){[/CODE] price += addon.getcost(); } [CODE]return price;[/CODE] } } [CODE]public class coffeemachine{[/CODE] [CODE]static int counter = 0;[/CODE] private boolean isaddoncompatible(basecoffee coffee, coffeeaddon addon){ [CODE]if(coffee instanceof espresso){[/CODE] return addon.getname().equals(""doubleshot"") || addon.getname().equals(""chocolate""); } [CODE]if(coffee instanceof latte){[/CODE] return addon.getname().equals(""milk"") || addon.getname().equals(""vanillasyrup"") || addon.getname().equals(""chocolate""); } [CODE]if(coffee instanceof americano){[/CODE] return addon.getname().equals(""milk"") || addon.getname().equals(""vanillasyrup""); } [CODE]return false;[/CODE] } [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon){[/CODE] [CODE]if(!isaddoncompatible(coffee, addon)){[/CODE] system.out.println(""[uyari]"" + coffee.gettype() + "" tipi kahveye "" + addon.getname() + "" eklenemez\n""); [CODE]return;[/CODE] } coffee.addaddon(addon); } [CODE]public void makecoffee(basecoffee coffee){[/CODE] counter = counter + 1; system.out.print(""siparis: "" + coffee.gettype()); for(coffeeaddon addon:coffee.addons){ system.out.print("" + "" + addon.getname()); } system.out.println(""\ntoplam fiyat: "" + coffee.calculateprice() + ""\n""); } [CODE]public void heatespressocup(basecoffee coffee){[/CODE] [CODE]if(coffee instanceof espresso){[/CODE] ((espresso)coffee).heatcup(); system.out.pr[CODE]intln(""espresso kahve fincani isitildi \n"");[/CODE] [CODE]return;[/CODE] } system.out.pr[CODE]intln(""[uyari] yalnizca espresso kahve fincanlari isitilabilir"");[/CODE] } [CODE]public void printcoffeecounter(){[/CODE] system.out.pr[CODE]intln(""tum kahve makineleri tarafindan toplam "" + counter + "" kahve uretildi"");[/CODE] } } bil211 quiz 4 section 1 quizleri uzak sistemine yükleyeceksiniz. q1: yalnızca tek sayıları saklayan liste oddnumberlist adında bir sınıf oluşturun. bu sınıf: ● add(t item) → yalnızca tek sayılar eklenebilir. çift sayı eklenmeye çalışılırsa hata mesajı basılır. ● addall(collection<t> collection) → sadece içindeki tek sayıları ekler. ● getoddnumbers() → i̇çerideki tüm tek sayıları liste olarak döndürür. ● sumofodds() → tüm tek sayıların toplamını döndürür. örnek kullanım: oddnumberlist list = [CODE]new oddnumberlist();[/CODE] list.add(5); list.add(3); list.add(8); // eklenmemeli system.out.pr[CODE]intln(list);[/CODE] // çıktı: [5, 3] q2: koleksiyondan tekrar edenleri kaldırma ● bir collection<t> içindeki tüm tekrar eden öğeleri kaldıran bir generic metod yazın. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> removeduplicates(collection<t> collection) {[/CODE] // metodu tamamlayın } örnek kullanım: list<string> words = arrays.aslist(""apple"", ""banana"", ""apple"", ""orange"", ""banana"", ""grape""); system.out.pr[CODE]intln(removeduplicates(words));[/CODE] q3:aşağıdaki generic metodu tamamlayın. ● verilen list<t> içindeki tüm öğeleri büyük harfe çeviren (veya sayıysa olduğu gibi bırakan) bir metod yazın. ● eğer t bir string ise büyük harfe çevirmeli, değilse değiştirmemelidir. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> converttouppercaseifstring(list<t> list) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> items = arrays.aslist(""hello"", 123, ""world"", 456); system.out.pr[CODE]intln(converttouppercaseifstring(items));[/CODE] import java.util.*; [CODE]public class q2 {[/CODE] [CODE]public static <t> list<t> removeduplicates(collection<t> collection){[/CODE] arraylist<t> list = [CODE]new arraylist<>();[/CODE] [CODE]for(t item:collection){[/CODE] if(list.contains(item)) continue; list.add(item); } [CODE]return (list<t>)list;[/CODE] } [CODE]public static void main(string[] args){[/CODE] list<string> words = arrays.aslist(""apple"", ""banana"", ""apple"", ""orange"", ""banana"",""grape""); system.out.pr[CODE]intln(removeduplicates(words));[/CODE] } } import java.util.*; [CODE]class oddnumberlist<t extends integer>{[/CODE] arraylist<t> list; [CODE]public oddnumberlist(){[/CODE] list = [CODE]new arraylist<>();[/CODE] } [CODE]public void add(t item){[/CODE] if(item.[CODE]intvalue() % 2 == 0){[/CODE] system.err.pr[CODE]intln(""sadece tek sayilar eklenebilir"");[/CODE] [CODE]return;[/CODE] } list.add(item); } [CODE]public void addall(collection<t> collection){[/CODE] [CODE]for(t item:collection) add(item);[/CODE] } [CODE]public list<t> getoddnumbers(){[/CODE] [CODE]return (list<t>)list;[/CODE] } [CODE]public int sumofodds(){[/CODE] [CODE]int sum = 0;[/CODE] for(t item:list) sum += item.[CODE]intvalue();[/CODE] [CODE]return sum;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]string ret = ""["";[/CODE] [CODE]for(int i = 0;[/CODE]i < list.size();i++){ ret = ret + list.get(i); if(i != list.size() - 1) ret = ret + "", ""; } ret = ret + ""]""; [CODE]return ret;[/CODE] } } [CODE]public class q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] oddnumberlist<[CODE]integer> list = new oddnumberlist<>();[/CODE] list.add(5); list.add(3); list.add(8); system.out.pr[CODE]intln(list);[/CODE] } } import java.util.*; [CODE]public class q3 {[/CODE] @suppresswarnings(""unchecked"") [CODE]public static <t> list<t> converttouppercaseifstring(list<t> list) {[/CODE] arraylist<t> ret = [CODE]new arraylist<>();[/CODE] [CODE]for(t item:list){[/CODE] [CODE]if(item instanceof string){[/CODE] [CODE]string string = new string((string) item);[/CODE] ret.add((t)string.touppercase()); } else ret.add(item); } [CODE]return (list<t>)ret;[/CODE] } [CODE]public static void main(string[] args){[/CODE] list<object> items = arrays.aslist(""hello"", 123, ""world"", 456); system.out.pr[CODE]intln(converttouppercaseifstring(items));[/CODE] } } //instanceof kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 //import javax.swing.*; import java.awt.*; //import java.awt.event.*; import java.util.arraylist; //import java.util.list; import java.time.localtime; [CODE]class zombie extends circle{[/CODE] double health, speed, damage, po[CODE]int;[/CODE] [CODE]public zombie(double x, double y, double radius, color color, double health, double speed, double damage) {[/CODE] super(x, y, radius, color); this.health = health; this.speed = speed; this.damage = damage; } } [CODE]class normalzombie extends zombie{[/CODE] [CODE]public normalzombie(double x, double y){[/CODE] super(x, y, 20, new color(0x076208), 100, 2, 0.5); po[CODE]int = 10;[/CODE] } } [CODE]class crawlerzombie extends zombie{[/CODE] boolean isjumping = false; double jumptargetx, jumptargety; [CODE]int lastjump = 0;[/CODE] [CODE]public crawlerzombie(double x, double y){[/CODE] super(x, y, 17, new color(0x6b9c10), 30, 1.5, 0.5); po[CODE]int = 15;[/CODE] } [CODE]public void jump(player player){[/CODE] if(localtime.now().tosecondofday() - lastjump < 10) [CODE]return;[/CODE] isjumping = true; jumptargetx = player.x; jumptargety = player.y; color = color.black; lastjump = localtime.now().tosecondofday(); } } [CODE]class tankzombie extends zombie{[/CODE] [CODE]public tankzombie(double x, double y){[/CODE] super(x, y, 30, [CODE]new color(0x172300), 500, 1, 3);[/CODE] po[CODE]int = 30;[/CODE] } } [CODE]class spitterzombie extends zombie{[/CODE] double spittingdistance = 50; [CODE]int lastspit = 0;[/CODE] [CODE]public spitterzombie(double x, double y){[/CODE] super(x, y, 17, color.blue, 30, 1, 0.5); po[CODE]int = 25;[/CODE] } //[CODE]public acidspit(double x, double y, double radius, color color, double damage, double speedx, double speedy, double maxdistance, int duration) {[/CODE] [CODE]public void spit(arraylist<acidspit> spits, player player){[/CODE] if(localtime.now().tosecondofday() - lastspit < 5) [CODE]return;[/CODE] double vx = player.x - this.x; double vy = player.y - this.y; double distance = math.sqrt(vx * vx + vy * vy); double spitspeed = 1; vx *= spitspeed / distance; vy *= spitspeed / distance; acidspit spit = new acidspit(this.x, this.y, 5, new color(0x37f313), 0.2, vx, vy, distance, 10); spits.add(spit); lastspit = localtime.now().tosecondofday(); } } //import javax.swing.*; import java.awt.*; //import java.lang.reflect.array; //import java.awt.event.*; //import java.util.arraylist; //import java.util.list; import java.util.arraylist; import java.time.localtime; [CODE]public abstract class gun extends line{[/CODE] double damage, firerate, spreadangle, length; [CODE]int magazinecap, totalbulletcount, bulletsinmag;[/CODE] long lastfired = 0; [CODE]string name;[/CODE] [CODE]public gun(double damage, double firerate, double spreadangle, int magazinecap, int totalbulletcount){[/CODE] super(0, 0, 0, 0, 0, color.black); this.damage = damage; this.firerate = firerate; this.spreadangle = spreadangle; this.magazinecap = magazinecap; this.totalbulletcount = totalbulletcount; this.bulletsinmag = magazinecap; } [CODE]public void rotate(double degree){[/CODE] double radian = degree * math.pi / 180; double dx = length * math.cos(radian); double dy = length * math.sin(radian); x2 = x1 + dx; y2 = y1 + dy; } [CODE]public void rotate(double mousex, double mousey){[/CODE] double dx = mousex - x1; double dy = mousey - y1; double dist = math.sqrt(dx * dx + dy * dy); dx *= length / dist; dy *= length / dist; x2 = x1 + dx; y2 = y1 + dy; } [CODE]public void reload(){[/CODE] [CODE]int required = magazinecap - bulletsinmag;[/CODE] int available = math.min(required, totalbulletcount); bulletsinmag += available; totalbulletcount -= available; } [CODE]public abstract void fire(arraylist<bullet> bullets);[/CODE] } [CODE]class pistol extends gun{[/CODE] [CODE]public pistol(double playerx, double playery){[/CODE] super(30, 2, 0, 12, -1); x1 = playerx; y1 = playery; thickness = 5; length = 25; x2 = x1 + length; y2 = y1; color = color.black; name = ""pistol""; } [CODE]public void reload(){[/CODE] bulletsinmag = magazinecap; } [CODE]public void fire(arraylist<bullet> bullets){[/CODE] [CODE]if(bulletsinmag == 0) return;[/CODE] if(localtime.now().tonanoofday() - lastfired < 1e9/firerate) [CODE]return;[/CODE] double vx = x2 - x1; double vy = y2 - y1; double bulletspeed = 5; vx *= bulletspeed / length; vy *= bulletspeed / length; bullet bullet = new bullet(x1, y1, 2, color.black, damage, vx, vy, false, false); bullets.add(bullet); lastfired = localtime.now().tonanoofday(); bulletsinmag--; } } [CODE]class rifle extends gun{[/CODE] [CODE]public rifle(double playerx, double playery){[/CODE] super(45, 10, 30, 30, 60); x1 = playerx; y1 = playery; thickness = 6; length = 30; x2 = x1 + length; y2 = y1; name = ""r[CODE]ifle"";[/CODE] } [CODE]public void fire(arraylist<bullet> bullets){[/CODE] [CODE]if(bulletsinmag == 0) return;[/CODE] if(localtime.now().tonanoofday() - lastfired < 1e9/firerate) [CODE]return;[/CODE] double dx = x2 - x1; double dy = y2 - y1; double radius = math.atan2(dy, dx); radius += (math.random() - 0.5) * math.toradians(spreadangle); double bulletspeed = 10; double speedx = bulletspeed * math.cos(radius); double speedy = bulletspeed * math.sin(radius); bullet bullet = new bullet(x1, y1, 2.2, color.black, damage, speedx, speedy, false, false); bullets.add(bullet); lastfired = localtime.now().tonanoofday(); bulletsinmag--; } } [CODE]class shotgun extends gun{[/CODE] [CODE]public shotgun(double playerx, double playery){[/CODE] super(35, 1, 45, 5, 15); x1 = playerx; y1 = playery; thickness = 8; length = 28; x2 = x1 + length; y2 = y1; name = ""shotgun""; } [CODE]public void fire(arraylist<bullet> bullets){[/CODE] [CODE]if(bulletsinmag == 0) return;[/CODE] if(localtime.now().tonanoofday() - lastfired < 1e9/firerate) [CODE]return;[/CODE] double dx = x2 - x1; double dy = y2 - y1; double baseangle = math.atan2(dy, dx); [CODE]int numberofpellets = 9;[/CODE] double totalspreadangledegrees = 45; double anglestepdegrees = totalspreadangledegrees / (numberofpellets - 1); double bulletspeed = 7; [CODE]for (int i = 0;[/CODE] i < numberofpellets; i++) { double pelletangle = baseangle - math.toradians(totalspreadangledegrees / 2) + math.toradians(i * anglestepdegrees); double speedx = bulletspeed * math.cos(pelletangle); double speedy = bulletspeed * math.sin(pelletangle); bullet bullet = new bullet(x1, y1, 2.5, color.black, damage, speedx, speedy, false, false); bullets.add(bullet); } lastfired = localtime.now().tonanoofday(); bulletsinmag--; } } [CODE]class sniper extends gun{[/CODE] [CODE]public sniper(double playerx, double playery){[/CODE] super(80, 0.5, 0, 5, 10); x1 = playerx; y1 = playery; thickness = 6; length = 35; x2 = x1 + length; y2 = y1; name = ""sniper""; } [CODE]public void fire(arraylist<bullet> bullets){[/CODE] [CODE]if(bulletsinmag == 0) return;[/CODE] if(localtime.now().tonanoofday() - lastfired < 1e9/firerate) [CODE]return;[/CODE] double dx = x2 - x1; double dy = y2 - y1; double radius = math.atan2(dy, (dx + 1e-9)); radius += (math.random() - 0.5) * spreadangle; double bulletspeed = 12; double speedx = bulletspeed * math.cos(radius); double speedy = bulletspeed * math.sin(radius); bullet bullet = new sniperbullet(x1, y1, 2.3, color.black, damage, speedx, speedy, false, true); bullets.add(bullet); lastfired = localtime.now().tonanoofday(); bulletsinmag--; } } [CODE]class rocketlauncher extends gun{[/CODE] [CODE]public rocketlauncher(double playerx, double playery){[/CODE] super(120, 1.0/6, 0, 1, 3); x1 = playerx; y1 = playery; thickness = 10; length = 30; x2 = x1 + length; y2 = y1; name = ""rocket launcher""; } [CODE]public void fire(arraylist<bullet> bullets){[/CODE] [CODE]if(bulletsinmag == 0) return;[/CODE] if(localtime.now().tonanoofday() - lastfired < 1e9/firerate) [CODE]return;[/CODE] double dx = x2 - x1; double dy = y2 - y1; double radius = math.atan2(dy, dx); radius += (math.random() - 0.5) * spreadangle; double bulletspeed = 4; double speedx = bulletspeed * math.cos(radius); double speedy = bulletspeed * math.sin(radius); bullet bullet = new bullet(x1, y1, 4, color.red, damage, speedx, speedy, true, false); bullets.add(bullet); lastfired = localtime.now().tonanoofday(); bulletsinmag--; } } //import javax.swing.*; import java.awt.*; //import java.awt.event.*; //import java.util.arraylist; //import java.util.list; //import java.lang.reflect.array; import java.util.arraylist; [CODE]public class bullet extends circle{[/CODE] double damage, speedx, speedy; boolean ishit = false, isexplosive, canpenetrate; [CODE]public bullet(double x, double y, double radius, color color, double damage, double speedx, double speedy, boolean isexplosive, boolean canpenetrate) {[/CODE] super(x, y, radius, color); this.damage = damage; this.speedx = speedx; this.speedy = speedy; this.isexplosive = isexplosive; this.canpenetrate = canpenetrate; } } [CODE]class acidspit extends bullet{[/CODE] double maxdistance; boolean hashitground = false; long timeofimpact = -1, duration; [CODE]public acidspit(double x, double y, double radius, color color, double damage, double speedx, double speedy, double maxdistance, long duration) {[/CODE] super(x, y, radius, color, damage, speedx, speedy, false, false); this.damage = damage; this.speedx = speedx; this.speedy = speedy; this.duration = duration; this.maxdistance = maxdistance; } } [CODE]class sniperbullet extends bullet{[/CODE] arraylist<zombie> hits; [CODE]public sniperbullet(double x, double y, double radius, color color, double damage, double speedx, double speedy, boolean isexplosive, boolean canpenetrate) {[/CODE] super(x, y, radius, color, damage, speedx, speedy, isexplosive, canpenetrate); hits = [CODE]new arraylist<>();[/CODE] } } //import javax.swing.*; import java.awt.*; //import java.awt.event.*; //import java.util.arraylist; //import java.util.list; [CODE]public class circle{[/CODE] double x, y, vx, vy, radius; color color; [CODE]public circle(double x, double y){[/CODE] this(x, y, 1e-8, color.black); } [CODE]public circle(double x, double y, double radius, color color) {[/CODE] this.x = x; this.y = y; this.radius = radius; this.color = color; } [CODE]public void draw(graphics2d g2d){[/CODE] g2d.setcolor(color); g2d.filloval((int)math.round(x-radius), (int)math.round(y-radius), ([CODE]int)(radius*2), (int)(radius*2));[/CODE] } [CODE]public double distance(circle othercircle){[/CODE] double dx = this.x - othercircle.x; double dy = this.y - othercircle.y; return math.sqrt(dx * dx + dy * dy); } boolean [CODE]intersects(circle othercircle){[/CODE] double dx = this.x - othercircle.x; double dy = this.y - othercircle.y; double distance = math.sqrt(dx*dx + dy*dy); return distance < this.radius + othercircle.radius; } [CODE]void handlecollision(circle othercircle){[/CODE] double vx = this.x - othercircle.x; double vy = this.y - othercircle.y; double distance = math.sqrt(vx*vx + vy*vy); double collisionamount = (this.radius + othercircle.radius) - distance; vx *= collisionamount / distance; vy *= collisionamount / distance; [CODE]if(this instanceof player){[/CODE] othercircle.x -= 2 * vx; othercircle.y -= 2 * vy; } [CODE]else if(othercircle instanceof player){[/CODE] this.x += 2 * vx; this.y += 2 * vy; } [CODE]else{[/CODE] this.x += vx; this.y += vy; othercircle.x -= vx; othercircle.y -= vy; } } } import javax.swing.*; import java.awt.*; //import java.awt.renderinghints.key; import java.awt.event.*; import java.util.arraylist; import java.time.localtime; import java.awt.geom.roundrectangle2d; //import java.util.list; import java.io.bufferedreader; import java.io.filereader; import java.io.filewriter; import java.io.ioexception; import java.io.pr[CODE]intwriter;[/CODE] [CODE]public class game extends jpanel implements mouselistener, keylistener, mousemotionlistener{[/CODE] final [CODE]static private int width = 1200;[/CODE] final [CODE]static private int height = 1000;[/CODE] private [CODE]int wave = -1;[/CODE] private [CODE]int[][] waves = {[/CODE] {10, 0, 0, 0}, {20, 0, 0, 0}, {15, 10, 0, 0}, {15, 15, 0, 0}, {20, 20, 5, 0}, {20, 15, 10, 0}, {20, 20, 15, 0}, {20, 15, 15, 5}, {20, 20, 10, 10}, {25, 20, 15, 10}, {25, 25, 15, 15}, {30, 25, 20, 20}, {35, 30, 25, 20}, {40, 30, 30, 25} }; private [CODE]int point = 0;[/CODE] private boolean ispaused = false; private boolean iswon = false; private boolean isloading = false; private timer timer; private arraylist<zombie> zombies = [CODE]new arraylist<>();[/CODE] private arraylist<bullet> bullets = [CODE]new arraylist<>();[/CODE] private arraylist<acidspit> spits = [CODE]new arraylist<>();[/CODE] private arraylist<gun> guns = [CODE]new arraylist<>();[/CODE] private gun currentgun; private player player = new player(width/2, height/2, 20, color.black, 100, 3); [CODE]public game(){[/CODE] super(); //public gun(double damage, double firerate, double spreadangle, int magazinecap, int totalbulletcount, int bulletsinmag) //guns.add([CODE]new gun());[/CODE] setbackground(color.white); this.setfocusable(true); this.addkeylistener(this); this.addmouselistener(this); this.addmousemotionlistener(this); guns.add(new pistol(player.x, player.y)); currentgun = guns.get(0); timer = [CODE]new timer(10, _ -> {[/CODE] [CODE]if(!ispaused && !iswon && !isloading){[/CODE] if(zombies.size() == 0){ wave++; if(wave == 1) guns.add(new rifle(player.x, player.y)); if(wave == 3) guns.add(new shotgun(player.x, player.y)); if(wave == 5) guns.add(new sniper(player.x, player.y)); if(wave == 10) guns.add(new rocketlauncher(player.x, player.y)); if(wave == waves.length) iswon = true; [CODE]else createzombiewave(waves[wave]);[/CODE] } updateplayermovement(); updatespits(); updatebullets(); updatezombies(); centerplayer(); } repa[CODE]int();[/CODE] }); timer.start(); } // --- mouselistener methods --- @override [CODE]public void mouseclicked(mouseevent e) {[/CODE] } @override [CODE]public void mousepressed(mouseevent e) {[/CODE] currentgun.fire(bullets); } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] } @override [CODE]public void mouseentered(mouseevent e) {[/CODE] } @override [CODE]public void mouseexited(mouseevent e) {[/CODE] } // --- mousemotionlistener methods --- @override [CODE]public void mousemoved(mouseevent e) {[/CODE] [CODE]for(gun gun:guns){[/CODE] gun.rotate(e.getx(), e.gety()); } } @override [CODE]public void mousedragged(mouseevent e) {[/CODE] } // --- keylistener methods --- @override [CODE]public void keypressed(keyevent e){[/CODE] if(e.getkeycode() == keyevent.vk_w) player.moveup = true; if(e.getkeycode() == keyevent.vk_s) player.movedown = true; if(e.getkeycode() == keyevent.vk_a) player.moveleft = true; if(e.getkeycode() == keyevent.vk_d) player.moveright = true; switch (e.getkeycode()){ case keyevent.vk_r: currentgun.reload(); break; case keyevent.vk_1: if(guns.size() >= 1) currentgun = guns.get(0); break; case keyevent.vk_2: if(guns.size() >= 2) currentgun = guns.get(1); break; case keyevent.vk_3: if(guns.size() >= 3) currentgun = guns.get(2); break; case keyevent.vk_4: if(guns.size() >= 4) currentgun = guns.get(3); break; case keyevent.vk_5: if(guns.size() >= 5) currentgun = guns.get(4); break; } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] if(e.getkeycode() == keyevent.vk_w) player.moveup = false; if(e.getkeycode() == keyevent.vk_s) player.movedown = false; if(e.getkeycode() == keyevent.vk_a) player.moveleft = false; if(e.getkeycode() == keyevent.vk_d) player.moveright = false; if(e.getkeycode() == keyevent.vk_escape){ [CODE]if(ispaused) ispaused = false;[/CODE] [CODE]else ispaused = true;[/CODE] } if(e.getkeycode() == keyevent.vk_s && ispaused) savegame(); if(e.getkeycode() == keyevent.vk_l && ispaused) loadgame(); } @override [CODE]public void keytyped(keyevent e) {[/CODE] } @override protected [CODE]void paintcomponent(graphics g) {[/CODE] super.pa[CODE]intcomponent(g);[/CODE] graphics2d g2d = (graphics2d) g; [CODE]if(iswon){[/CODE] g2d.setcolor(color.green); g2d.fillrect(0, 0, width, height); g2d.setcolor(color.white); g2d.draw[CODE]string(""you won"", width / 2, height / 2);[/CODE] g2d.draw[CODE]string(""point: "" + point, width / 2, height / 2 + 20);[/CODE] [CODE]return;[/CODE] } if(player.health <= 0){ g2d.setcolor(color.black); g2d.fillrect(0, 0, width, height); g2d.setcolor(color.white); g2d.draw[CODE]string(""you died"", width / 2, height / 2);[/CODE] g2d.draw[CODE]string(""points: "" + point, width / 2, height / 2 + 20);[/CODE] [CODE]return;[/CODE] } [CODE]if(ispaused){[/CODE] g2d.setcolor(color.black); g2d.fillrect(0, 0, width, height); g2d.setcolor(color.white); g2d.draw[CODE]string(""paused"", width / 2, height / 2);[/CODE] g2d.draw[CODE]string(""save (s)"", width / 2, height / 2 + 20);[/CODE] g2d.draw[CODE]string(""load (l)"", width / 2, height / 2 + 40);[/CODE] [CODE]return;[/CODE] } for(acidspit spit:spits) spit.draw(g2d); for(bullet bullet:bullets) bullet.draw(g2d); for(zombie zombie:zombies) zombie.draw(g2d); player.draw(g2d); currentgun.draw(g2d); drawbeveledrectangle(g2d, -10, -10, 290, 90, 20, 20, color.white, color.black, 3); drawbeveledrectangle(g2d, 10, 10, (int)math.round(260 * (player.health / 100)), 20, 5, 5, [CODE]new color(0x0fba2f), new color(0x0fba2f), 3);[/CODE] g2d.setcolor(color.black); g2d.drawstring("""" + currentgun.name, 10, 50); if(currentgun instanceof pistol) g2d.drawstring("""" + currentgun.bulletsinmag + ""/inf"", 10, 70); else g2d.drawstring("""" + currentgun.bulletsinmag + ""/"" + currentgun.totalbulletcount, 10, 70); g2d.draw[CODE]string(""wave"", 145, 50);[/CODE] g2d.draw[CODE]string("""" + (wave + 1), 145, 70);[/CODE] g2d.draw[CODE]string(""points"", 220, 50);[/CODE] g2d.draw[CODE]string("""" + point, 220, 70);[/CODE] } [CODE]void createzombiewave(int[] zombiecount){[/CODE] double zombiex, zombiey; zombie zombie; zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new normalzombie(zombiex, zombiey);[/CODE] [CODE]while(zombiecount[0] > 0){[/CODE] if(zombie.distance(player) > 500){ zombies.add(zombie); zombiecount[0]--; } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new normalzombie(zombiex, zombiey);[/CODE] } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new crawlerzombie(zombiex, zombiey);[/CODE] [CODE]while(zombiecount[1] > 0){[/CODE] if(zombie.distance(player) > 500){ zombies.add(zombie); zombiecount[1]--; } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new crawlerzombie(zombiex, zombiey);[/CODE] } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new tankzombie(zombiex, zombiey);[/CODE] [CODE]while(zombiecount[2] > 0){[/CODE] if(zombie.distance(player) > 500){ zombies.add(zombie); zombiecount[2]--; } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new tankzombie(zombiex, zombiey);[/CODE] } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new spitterzombie(zombiex, zombiey);[/CODE] [CODE]while(zombiecount[3] > 0){[/CODE] if(zombie.distance(player) > 500){ zombies.add(zombie); zombiecount[3]--; } zombiex = (math.random() - 0.5) * (2 * width); zombiey = (math.random() - 0.5) * (2 * height); zombie = [CODE]new spitterzombie(zombiex, zombiey);[/CODE] } } [CODE]void updateplayermovement(){[/CODE] [CODE]for(zombie zombie:zombies){[/CODE] if(player.moveup) zombie.y += player.speed; if(player.movedown) zombie.y -= player.speed; if(player.moveleft) zombie.x += player.speed; if(player.moveright) zombie.x -= player.speed; [CODE]if(zombie instanceof crawlerzombie){[/CODE] crawlerzombie crawler = (crawlerzombie) zombie; if(player.moveup) crawler.jumptargety += player.speed; if(player.movedown) crawler.jumptargety -= player.speed; if(player.moveleft) crawler.jumptargetx += player.speed; if(player.moveright) crawler.jumptargetx -= player.speed; } } [CODE]for(bullet bullet:bullets){[/CODE] if(player.moveup) bullet.y += player.speed; if(player.movedown) bullet.y -= player.speed; if(player.moveleft) bullet.x += player.speed; if(player.moveright) bullet.x -= player.speed; } [CODE]for(acidspit spit:spits){[/CODE] if(player.moveup) spit.y += player.speed; if(player.movedown) spit.y -= player.speed; if(player.moveleft) spit.x += player.speed; if(player.moveright) spit.x -= player.speed; } } [CODE]void updatezombies(){[/CODE] // removing dead zombies [CODE]for(int i = 0;[/CODE]i < zombies.size();i++){ if(zombies.get(i).health <= 0){ point += zombies.get(i).po[CODE]int;[/CODE] zombies.remove(i); i--; // randomly acquiring bullets from dead zombies if(guns.size() > 1 && math.random() < 0.2){ int guncount = guns.size() - 1; int gunindex = (int)math.floor(math.max(math.random() - 1e-9, 0) * guncount) + 1; gun gun = guns.get(gunindex); gun.totalbulletcount += 2 * gun.magazinecap; } } } [CODE]for(zombie zombie:zombies) {[/CODE] if(zombie instanceof crawlerzombie && ((crawlerzombie)zombie).isjumping){ // handling jumping crawlers crawlerzombie crawler = (crawlerzombie) zombie; double vx = crawler.jumptargetx - crawler.x; double vy = crawler.jumptargety - crawler.y; double distance = math.sqrt(vx*vx + vy*vy); if(distance < 2 * crawler.speed){ crawler.x = crawler.jumptargetx; crawler.y = crawler.jumptargety; crawler.isjumping = false; crawler.color = [CODE]new color(0x6b9c10);[/CODE] continue; } vx *= 2 * crawler.speed / distance; vy *= 2 * crawler.speed / distance; crawler.x += vx; crawler.y += vy; } else if(zombie instanceof spitterzombie && player.distance(zombie) < 200){ // handling spitters that are close to player ((spitterzombie)zombie).spit(spits, player); } [CODE]else{[/CODE] // moving zombies towards the character double vx = player.x - zombie.x; double vy = player.y - zombie.y; double distance = math.sqrt(vx*vx + vy*vy); vx /= distance; vy /= distance; zombie.x += vx * zombie.speed; zombie.y += vy * zombie.speed; if(zombie instanceof crawlerzombie && player.distance(zombie) < 200){ ((crawlerzombie)zombie).jump(player); } } } // handling collisions [CODE]for(zombie zombie1:zombies){[/CODE] for(zombie zombie2:zombies) if(zombie1 != zombie2 && zombie1.[CODE]intersects(zombie2)){[/CODE] zombie1.handlecollision(zombie2); } } // damage dealt to player [CODE]for(zombie zombie:zombies){[/CODE] if(player.[CODE]intersects(zombie)){[/CODE] player.health -= zombie.damage; zombie.handlecollision(player); } if(zombie instanceof crawlerzombie && player.distance(zombie) < 20){ ((crawlerzombie)zombie).jump(player); } } } [CODE]void updatebullets(){[/CODE] // updating bullet coordinates [CODE]for(bullet bullet:bullets){[/CODE] bullet.x += bullet.speedx; bullet.y += bullet.speedy; } // removing bullets that are too far away from player [CODE]for(int i = 0;[/CODE]i < bullets.size();i++){ bullet bullet = bullets.get(i); double dx = player.x - bullet.x; double dy = player.y - bullet.y; double dist = math.sqrt(dx*dx + dy*dy); if(dist > 5000) bullets.remove(bullet); } // [CODE]for each bullet, checking whether that bullet hits a zombie for(bullet bullet:bullets){[/CODE] for(zombie zombie:zombies) if(bullet.ishit == false && bullet.intersects(zombie) && zombie.health > 0){ if(bullet instanceof sniperbullet && ((sniperbullet)bullet).hits.contains(zombie)) break; if(bullet.isexplosive){ circle blast = new circle(bullet.x, bullet.y, 70, color.red); blast.draw((graphics2d)this.getgraphics()); [CODE]for(zombie zombie2:zombies){[/CODE] if(blast.intersects(zombie2) && zombie2.health > 0){ zombie2.health -= bullet.damage; } } } [CODE]else{[/CODE] zombie.health -= bullet.damage; } if(!bullet.canpenetrate){ bullet.ishit = true; } [CODE]if(bullet instanceof sniperbullet){[/CODE] ((sniperbullet)bullet).hits.add(zombie); } break; } } // removing bullet that hit a zombie [CODE]for(int i = 0;[/CODE]i < bullets.size();i++){ if(bullets.get(i).ishit){ bullets.remove(i); i--; } } } [CODE]void updatespits(){[/CODE] // removing expired spits [CODE]for(int i = 0;[/CODE]i < spits.size();i++) if(spits.get(i).hashitground){ acidspit spit = spits.get(i); if(localtime.now().tosecondofday() - spit.timeofimpact >= spit.duration){ spits.remove(i); } } // updating bullet coordinates for(acidspit spit:spits) if(!spit.hashitground) { spit.x += spit.speedx; spit.y += spit.speedy; spit.maxdistance -= math.sqrt(spit.speedx * spit.speedx + spit.speedy * spit.speedy); if(spit.maxdistance < 0){ spit.radius = 30; spit.hashitground = true; spit.timeofimpact = localtime.now().tosecondofday(); } } // spits on the ground for(acidspit spit:spits) if(spit.hashitground) { if(player.[CODE]intersects(spit)){[/CODE] spit.hashitground = true; player.health -= spit.damage; } } // spits hitting player for(acidspit spit:spits) if(!spit.hashitground) { if(player.[CODE]intersects(spit)){[/CODE] spit.hashitground = true; player.health -= spit.damage; spit.timeofimpact = localtime.now().tosecondofday(); spit.radius = 30; } } } [CODE]public void centerplayer(){[/CODE] double dx = (width / 2) - player.x; double dy = (height/ 2) - player.y; player.x += dx; player.y += dy; for(zombie zombie:zombies) zombie.x += dx; for(zombie zombie:zombies) zombie.y += dy; for(bullet bullet:bullets) bullet.y += dy; for(bullet bullet:bullets) bullet.x += dx; for(acidspit spit:spits) spit.y += dy; for(acidspit spit:spits) spit.x += dx; } [CODE]public static void drawbeveledrectangle(graphics2d g2d, int x, int y, int width, int height, int arcwidth, int archeight, color fillcolor, color outlinecolor, int outlinethickness) {[/CODE] roundrectangle2d.double roundedrectangle = new roundrectangle2d.double(x, y, width, height, arcwidth, archeight); g2d.setcolor(fillcolor); g2d.fill(roundedrectangle); g2d.setcolor(outlinecolor); g2d.setstroke([CODE]new basicstroke(outlinethickness));[/CODE] g2d.draw(roundedrectangle); } [CODE]public void savegame() {[/CODE] try (printwriter writer = new printwriter(new filewriter(""savegame.txt""))) { writer.pr[CODE]intln(""wave: "" + wave);[/CODE] writer.pr[CODE]intln(""point: "" + point);[/CODE] writer.pr[CODE]intln(""ispaused: "" + ispaused);[/CODE] writer.pr[CODE]intln(""iswon: "" + iswon);[/CODE] writer.println(""playerhealth: "" + player.health); writer.println(""currentgunindex: "" + guns.indexof(currentgun)); writer.println(""playerx: "" + player.x); writer.println(""playery: "" + player.y); writer.println(""guncount: "" + guns.size()); [CODE]for (gun gun : guns) {[/CODE] writer.pr[CODE]intln(""guntype: "" + getguntypename(gun));[/CODE] writer.println(""magazinecap: "" + gun.magazinecap); writer.println(""totalbulletcount: "" + gun.totalbulletcount); writer.println(""bulletsinmag: "" + gun.bulletsinmag); writer.println(""gunx1: "" + gun.x1); writer.println(""guny1: "" + gun.y1); writer.println(""gunx2: "" + gun.x2); writer.println(""guny2: "" + gun.y2); writer.println(""gunthickness: "" + gun.thickness); writer.println(""guncolorrgb: "" + gun.color.getrgb()); writer.println(""gundamage: "" + gun.damage); writer.println(""gunfirerate: "" + gun.firerate); writer.println(""gunspreadangle: "" + gun.spreadangle); writer.println(""gunlength: "" + gun.length); writer.println(""gunlastfired: "" + gun.lastfired); writer.println(""gunname: "" + gun.name); } writer.println(""zombiecount: "" + zombies.size()); [CODE]for (zombie zombie : zombies) {[/CODE] writer.pr[CODE]intln(""zombietype: "" + getzombietypename(zombie));[/CODE] writer.println(""zombiex: "" + zombie.x); writer.println(""zombiey: "" + zombie.y); writer.println(""zombiehealth: "" + zombie.health); writer.println(""zombieradius: "" + zombie.radius); writer.println(""zombiecolorrgb: "" + zombie.color.getrgb()); writer.println(""zombiespeed: "" + zombie.speed); writer.println(""zombiedamage: "" + zombie.damage); writer.println(""zombiepoint: "" + zombie.po[CODE]int);[/CODE] [CODE]if (zombie instanceof crawlerzombie) {[/CODE] crawlerzombie crawler = (crawlerzombie) zombie; writer.println(""crawlerisjumping: "" + crawler.isjumping); writer.println(""crawlerjumptargetx: "" + crawler.jumptargetx); writer.println(""crawlerjumptargety: "" + crawler.jumptargety); writer.println(""crawlerlastjump: "" + crawler.lastjump); } [CODE]else if (zombie instanceof spitterzombie) {[/CODE] spitterzombie spitter = (spitterzombie) zombie; writer.println(""spitterspittingdistance: "" + spitter.spittingdistance); writer.println(""spitterlastspit: "" + spitter.lastspit); } } writer.println(""bulletcount: "" + bullets.size()); [CODE]for (bullet bullet : bullets) {[/CODE] writer.pr[CODE]intln(""bullettype: "" + getbullettypename(bullet));[/CODE] writer.println(""bulletx: "" + bullet.x); writer.println(""bullety: "" + bullet.y); writer.println(""bulletradius: "" + bullet.radius); writer.println(""bulletcolorrgb: "" + bullet.color.getrgb()); writer.println(""bulletspeedx: "" + bullet.speedx); writer.println(""bulletspeedy: "" + bullet.speedy); writer.println(""bulletdamage: "" + bullet.damage); writer.println(""bulletishit: "" + bullet.ishit); writer.println(""bulletisexplosive: "" + bullet.isexplosive); writer.println(""bulletcanpenetrate: "" + bullet.canpenetrate); [CODE]if (bullet instanceof acidspit) {[/CODE] acidspit spit = (acidspit) bullet; writer.println(""spitmaxdistance: "" + spit.maxdistance); writer.println(""spithashitground: "" + spit.hashitground); writer.println(""spittimeofimpact: "" + spit.timeofimpact); writer.println(""spitduration: "" + spit.duration); } [CODE]else if (bullet instanceof sniperbullet) {[/CODE] } } writer.println(""spitcount: "" + spits.size()); [CODE]for (acidspit spit : spits) {[/CODE] writer.println(""spitx: "" + spit.x); writer.println(""spity: "" + spit.y); writer.println(""spitradius: "" + spit.radius); writer.println(""spitcolorrgb: "" + spit.color.getrgb()); writer.println(""spitspeedx: "" + spit.speedx); writer.println(""spitspeedy: "" + spit.speedy); writer.println(""spitdamage: "" + spit.damage); writer.println(""spitduration: "" + spit.duration); writer.println(""spittimeofimpact: "" + spit.timeofimpact); writer.println(""spithashitground: "" + spit.hashitground); writer.println(""spitmaxdistance: "" + spit.maxdistance); } system.out.pr[CODE]intln(""game saved successfully!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.err.println(""error saving game: "" + e.getmessage()); } } [CODE]public void loadgame() {[/CODE] isloading = true; try (bufferedreader reader = new bufferedreader(new filereader(""savegame.txt""))) { [CODE]string line;[/CODE] guns.clear(); zombies.clear(); bullets.clear(); spits.clear(); [CODE]int loadedcurrentgunindex = -1;[/CODE] while ((line = reader.readline()) != null) { string[] parts = line.split(""\\s+""); if (parts.length < 2) continue; [CODE]string label = parts[0];[/CODE] [CODE]string valuestr = parts[1];[/CODE] if (label.equals(""wave:"")) { wave = integer.parse[CODE]int(valuestr);[/CODE] } else if (label.equals(""po[CODE]int:"")) {[/CODE] point = integer.parse[CODE]int(valuestr);[/CODE] } else if (label.equals(""ispaused:"")) { ispaused = boolean.parseboolean(valuestr); } else if (label.equals(""iswon:"")) { iswon = boolean.parseboolean(valuestr); } else if (label.equals(""playerhealth:"")) { player.health = double.parsedouble(valuestr); } else if (label.equals(""currentgunindex:"")) { loadedcurrentgunindex = integer.parse[CODE]int(valuestr);[/CODE] } else if (label.equals(""playerx:"")) { player.x = double.parsedouble(valuestr); } else if (label.equals(""playery:"")) { player.y = double.parsedouble(valuestr); } else if (label.equals(""guncount:"")) { int guncount = integer.parse[CODE]int(valuestr);[/CODE] [CODE]for (int i = 0;[/CODE] i < guncount; i++) { gun gun = null; string guntype = reader.readline().split(""\\s+"")[1]; int magazinecap = integer.parseint(reader.readline().split(""\\s+"")[1]); int totalbulletcount = integer.parseint(reader.readline().split(""\\s+"")[1]); int bulletsinmag = integer.parseint(reader.readline().split(""\\s+"")[1]); double gunx1 = double.parsedouble(reader.readline().split(""\\s+"")[1]); double guny1 = double.parsedouble(reader.readline().split(""\\s+"")[1]); double gunx2 = double.parsedouble(reader.readline().split(""\\s+"")[1]); double guny2 = double.parsedouble(reader.readline().split(""\\s+"")[1]); int gunthickness = integer.parseint(reader.readline().split(""\\s+"")[1]); color guncolor = new color(integer.parseint(reader.readline().split(""\\s+"")[1])); double gundamage = double.parsedouble(reader.readline().split(""\\s+"")[1]); double gunfirerate = double.parsedouble(reader.readline().split(""\\s+"")[1]); double gunspreadangle = double.parsedouble(reader.readline().split(""\\s+"")[1]); double gunlength = double.parsedouble(reader.readline().split(""\\s+"")[1]); long gunlastfired = long.parselong(reader.readline().split(""\\s+"")[1]); string gunname = reader.readline().split(""\\s+"")[1]; if (guntype.equals(""pistol"")) { gun = new pistol(player.x, player.y); } else if (guntype.equals(""r[CODE]ifle"")) {[/CODE] gun = new rifle(player.x, player.y); } else if (guntype.equals(""shotgun"")) { gun = new shotgun(player.x, player.y); } else if (guntype.equals(""sniper"")) { gun = new sniper(player.x, player.y); } else if (guntype.equals(""rocketlauncher"")) { gun = new rocketlauncher(player.x, player.y); } [CODE]if (gun != null) {[/CODE] gun.magazinecap = magazinecap; gun.totalbulletcount = totalbulletcount; gun.bulletsinmag = bulletsinmag; gun.x1 = gunx1; gun.y1 = guny1; gun.x2 = gunx2; gun.y2 = guny2; gun.thickness = gunthickness; gun.color = guncolor; gun.damage = gundamage; gun.firerate = gunfirerate; gun.spreadangle = gunspreadangle; gun.length = gunlength; gun.lastfired = gunlastfired; gun.name = gunname; guns.add(gun); } } if (loadedcurrentgunindex >= 0 && loadedcurrentgunindex < guns.size()) { currentgun = guns.get(loadedcurrentgunindex); } else if (!guns.isempty()) { currentgun = guns.get(0); } [CODE]else {[/CODE] currentgun = null; } } else if (label.equals(""zombiecount:"")) { int zombiecount = integer.parse[CODE]int(valuestr);[/CODE] [CODE]for (int i = 0;[/CODE] i < zombiecount; i++) { zombie zombie = null; string zombietype = reader.readline().split(""\\s+"")[1]; double zombiex = double.parsedouble(reader.readline().split(""\\s+"")[1]); double zombiey = double.parsedouble(reader.readline().split(""\\s+"")[1]); double zombiehealth = double.parsedouble(reader.readline().split(""\\s+"")[1]); double zombieradius = double.parsedouble(reader.readline().split(""\\s+"")[1]); color zombiecolor = new color(integer.parseint(reader.readline().split(""\\s+"")[1])); double zombiespeed = double.parsedouble(reader.readline().split(""\\s+"")[1]); double zombiedamage = double.parsedouble(reader.readline().split(""\\s+"")[1]); double zombiepoint = double.parsedouble(reader.readline().split(""\\s+"")[1]); if (zombietype.equals(""normalzombie"")) { zombie = [CODE]new normalzombie(0, 0);[/CODE] } else if (zombietype.equals(""crawlerzombie"")) { zombie = [CODE]new crawlerzombie(0, 0);[/CODE] } else if (zombietype.equals(""tankzombie"")) { zombie = [CODE]new tankzombie(0, 0);[/CODE] } else if (zombietype.equals(""spitterzombie"")) { zombie = [CODE]new spitterzombie(0, 0);[/CODE] } [CODE]if (zombie != null) {[/CODE] zombie.x = zombiex; zombie.y = zombiey; zombie.health = zombiehealth; zombie.radius = zombieradius; zombie.color = zombiecolor; zombie.speed = zombiespeed; zombie.damage = zombiedamage; zombie.po[CODE]int = zombiepoint;[/CODE] [CODE]if (zombie instanceof crawlerzombie) {[/CODE] crawlerzombie crawler = (crawlerzombie) zombie; crawler.isjumping = boolean.parseboolean(reader.readline().split(""\\s+"")[1]); crawler.jumptargetx = double.parsedouble(reader.readline().split(""\\s+"")[1]); crawler.jumptargety = double.parsedouble(reader.readline().split(""\\s+"")[1]); crawler.lastjump = integer.parseint(reader.readline().split(""\\s+"")[1]); } [CODE]else if (zombie instanceof spitterzombie) {[/CODE] spitterzombie spitter = (spitterzombie) zombie; spitter.spittingdistance = double.parsedouble(reader.readline().split(""\\s+"")[1]); spitter.lastspit = integer.parseint(reader.readline().split(""\\s+"")[1]); } zombies.add(zombie); } } } else if (label.startswith(""bulletcount:"")) { int bulletcount = integer.parse[CODE]int(valuestr);[/CODE] [CODE]for (int i = 0;[/CODE] i < bulletcount; i++) { bullet bullet = null; string bullettype = reader.readline().split(""\\s+"")[1]; double bulletx = double.parsedouble(reader.readline().split(""\\s+"")[1]); double bullety = double.parsedouble(reader.readline().split(""\\s+"")[1]); double bulletradius = double.parsedouble(reader.readline().split(""\\s+"")[1]); color bulletcolor = new color(integer.parseint(reader.readline().split(""\\s+"")[1])); double bulletspeedx = double.parsedouble(reader.readline().split(""\\s+"")[1]); double bulletspeedy = double.parsedouble(reader.readline().split(""\\s+"")[1]); double bulletdamage = double.parsedouble(reader.readline().split(""\\s+"")[1]); boolean bulletishit = boolean.parseboolean(reader.readline().split(""\\s+"")[1]); boolean bulletisexplosive = boolean.parseboolean(reader.readline().split(""\\s+"")[1]); boolean bulletcanpenetrate = boolean.parseboolean(reader.readline().split(""\\s+"")[1]); if (bullettype.equals(""bullet"")) { bullet = new bullet(0, 0, 0, color.black, 0, 0, 0, false, false); } else if (bullettype.equals(""acidspit"")) { bullet = new acidspit(0, 0, 0, color.black, 0, 0, 0, 0, 0); } else if (bullettype.equals(""sniperbullet"")) { bullet = new sniperbullet(0, 0, 0, color.black, 0, 0, 0, false, true); } [CODE]if (bullet != null) {[/CODE] bullet.x = bulletx; bullet.y = bullety; bullet.radius = bulletradius; bullet.color = bulletcolor; bullet.speedx = bulletspeedx; bullet.speedy = bulletspeedy; bullet.damage = bulletdamage; bullet.ishit = bulletishit; bullet.isexplosive = bulletisexplosive; bullet.canpenetrate = bulletcanpenetrate; [CODE]if (bullet instanceof acidspit) {[/CODE] acidspit spit = (acidspit) bullet; spit.maxdistance = double.parsedouble(reader.readline().split(""\\s+"")[1]); spit.hashitground = boolean.parseboolean(reader.readline().split(""\\s+"")[1]); spit.timeofimpact = long.parselong(reader.readline().split(""\\s+"")[1]); spit.duration = integer.parseint(reader.readline().split(""\\s+"")[1]); } [CODE]else if (bullet instanceof sniperbullet) {[/CODE] } bullets.add(bullet); } } } else if (label.startswith(""spitcount:"")) { int spitcount = integer.parse[CODE]int(valuestr);[/CODE] [CODE]for (int i = 0;[/CODE] i < spitcount; i++) { double spitx = double.parsedouble(reader.readline().split(""\\s+"")[1]); double spity = double.parsedouble(reader.readline().split(""\\s+"")[1]); double spitradius = double.parsedouble(reader.readline().split(""\\s+"")[1]); color spitcolor = new color(integer.parseint(reader.readline().split(""\\s+"")[1])); double spitdamage = double.parsedouble(reader.readline().split(""\\s+"")[1]); double spitspeedx = double.parsedouble(reader.readline().split(""\\s+"")[1]); double spitspeedy = double.parsedouble(reader.readline().split(""\\s+"")[1]); long spitduration = long.parselong(reader.readline().split(""\\s+"")[1]); long spittimeofimpact = long.parselong(reader.readline().split(""\\s+"")[1]); boolean spithashitground = boolean.parseboolean(reader.readline().split(""\\s+"")[1]); double spitmaxdistance = double.parsedouble(reader.readline().split(""\\s+"")[1]); acidspit spit = [CODE]new acidspit(spitx, spity, spitradius, spitcolor, spitdamage, spitspeedx, spitspeedy, spitmaxdistance, (int)spitduration);[/CODE] // dummy acidspit to overwrite values spit.timeofimpact = spittimeofimpact; spit.hashitground = spithashitground; spits.add(spit); } } } centerplayer(); requestfocusinwindow(); isloading = false; system.out.pr[CODE]intln(""game loaded successfully!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.err.println(""error loading game: "" + e.getmessage()); } } private [CODE]string getguntypename(gun gun) {[/CODE] [CODE]if (gun instanceof pistol) return ""pistol"";[/CODE] [CODE]if (gun instanceof rifle) return ""rifle"";[/CODE] [CODE]if (gun instanceof shotgun) return ""shotgun"";[/CODE] [CODE]if (gun instanceof sniper) return ""sniper"";[/CODE] [CODE]if (gun instanceof rocketlauncher) return ""rocketlauncher"";[/CODE] [CODE]return ""unknowngun"";[/CODE] } private [CODE]string getzombietypename(zombie zombie) {[/CODE] [CODE]if (zombie instanceof normalzombie) return ""normalzombie"";[/CODE] [CODE]if (zombie instanceof crawlerzombie) return ""crawlerzombie"";[/CODE] [CODE]if (zombie instanceof tankzombie) return ""tankzombie"";[/CODE] [CODE]if (zombie instanceof spitterzombie) return ""spitterzombie"";[/CODE] [CODE]return ""unknownzombie"";[/CODE] } private [CODE]string getbullettypename(bullet bullet) {[/CODE] [CODE]if (bullet instanceof acidspit) return ""acidspit"";[/CODE] [CODE]if (bullet instanceof sniperbullet) return ""sniperbullet"";[/CODE] [CODE]return ""bullet"";[/CODE] } [CODE]public static void main(string[] args) {[/CODE] jframe frame = [CODE]new jframe(""zombie game"");[/CODE] game game = [CODE]new game();[/CODE] frame.add(game); frame.setsize(width, height); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlocationrelativeto(null); frame.setvisible(true); frame.setresizable(false); } } //import javax.swing.*; import java.awt.*; //import java.awt.event.*; //import java.util.arraylist; //import java.util.list; [CODE]public class line{[/CODE] double x1, y1, x2, y2; [CODE]int thickness;[/CODE] color color; [CODE]public line(double x1, double y1, double x2, double y2, int thickness, color color){[/CODE] this.x1 = x1; this.y1 = y1; this.x2 = x2; this.y2 = y2; this.thickness = thickness; this.color = color; } [CODE]public void draw(graphics2d g2d){[/CODE] g2d.setcolor(color); g2d.setstroke([CODE]new basicstroke(thickness));[/CODE] g2d.drawline((int)math.round(x1), (int)math.round(y1), (int)math.round(x2), (int)math.round(y2)); } } //import javax.swing.*; import java.awt.*; //import java.awt.event.*; //import java.util.arraylist; //import java.util.list; [CODE]public class player extends circle{[/CODE] double health, speed; double movex, movey; boolean moveup = false, movedown = false, moveleft = false, moveright = false; gun gun; [CODE]public player(double x, double y, double radius, color color, double health, double speed) {[/CODE] super(x, y, radius, color); this.health = health; this.speed = speed; } }"
8964453,"müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.*; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji =s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki){[/CODE] metalsarki metal = (metalsarki) sarki; metal.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim,string sanatci ) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim,string sanatci ) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" +sanatci + "" - "" + isim + "" (huzurlu ve nostaljik"");[/CODE] } } import java.util.*; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> sarkilistcpy = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(sarkilistcpy); [CODE]for(sarki x : sarkilistcpy) {[/CODE] x.oynat(); } } } import java.util.*; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(sarki x : sarkilistesi) {[/CODE] x.oynat(); } } } [CODE]public abstract class sarki{[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]void oynat(){[/CODE]} } import java.util.*; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] private boolean sesseviyesi = false; //false:normal true:yuksek [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(sarki x : sarkilistesi) {[/CODE] [CODE]if(x instanceof rocksarki) {[/CODE] [CODE]if(sesseviyesi == false) {[/CODE] sesseviyesi = true; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } } [CODE]else {[/CODE] [CODE]if(sesseviyesi == true) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesseviyesi =false; } } x.oynat(); } } } import java.util.*; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } metin karşılaştırıcı bil 211 - lab 3 20 şubat 2025 1 giriş bulaboratuvarda fileio ve exceptions kullanarakbir metinkarşılaştırıcı geliştireceğiz. metinkarşılaştırıcı , verilen iki metin dosyasını karşılaştırarak ikinci metnin yalnızca yeni satırlar eklenerek oluşturulup oluştu- rulmadığını kontrol edecek ve gerektiğinde hangi satırdan sonra hangi eklemelerin yapıldığını belirleyecektir. 2 genel program program, çalıştırılırken komut satırından iki dosya adı alacaktır: - orijinal metin dosyası (ilk argüman) - değiştirilmiş metin dosyası (ikinci argüman) program şu şekilde çalıştırmalıdır (burada köşeli parantezler yerine dosyaların asıl adı gelmeli): java metinkarsilastirici [orijinal.txt] [degistirilmis.txt] program, ilk argümanda verilen dosyayı orijinal metin, ikinci argümandaki dosyayı değiştirilmiş metin olarak kabul edecek ve yalnızca yeni satırlar eklenerek oluşturulup oluşturulmadığını kontrol edecektir. eğer mümkünse, hangi satırdan sonra hangi eklemelerin yapıldığını tespit ederek bir çıktı dosyasına yazacaktır: -farklar.txt – yeni satırların hangi satırdan sonra eklendiğini gösteren çıktı dosyası. eğer dosya adları eksikse veya hatalı formatta verilmişse, program özel bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosyaokumaveyazmaişlemleriiçinjava’nın java.io paketindekisınıflarıkullanacaktır(örn., buf- ferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. program, aşağıdaki olası dosya hatalarını atmalı ve stderr’e belirlenen hata mesajlarını yazmalıdır: - dosya bulunamıyorsa: ""hata: [dosya adı] bulunamadı."" - dosya boşsa: ""hata: [dosya adı] boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: 1 - yanlisargumanexception (extends inputexception): argümanlar eksik ya da fazlaysa atılacak hata. burada[argümanlar] yerine programın çalıştırıldığı argüman listesi yazılmalıdır. - hata mesajı: ""hata: hatalı argüman kullanımı: [argümanlar]. program argüman olarak 2 dosya ismi almalı."" - dosyabulunamadiexception (extends inputexception): dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" - bosdosyaexception (extends inputexception): dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 geçersiz değişiklik hatası (gecersizdegisiklikexception class) eğerdegistirilmis.txt dosyası,orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulamıy- orsa, program gecersizdegisiklikexception hatasını atmalıdır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: hata: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. 5 dosya formatları 5.1 girdi dosyaları 5.1.1orijinal.txt vedegistirilmis.txt formatı bu dosyalar, her satırın ayrı bir metin satırı olduğu düz metin formatında olmalıdır. örnek i̇çerik ( orijinal.txt ): merhaba dünya. bu bir test dosyasıdır. son satır budur. örnek i̇çerik ( degistirilmis.txt ): merhaba dünya. bu bir test dosyasıdır. eklenen yeni bir satır. son satır budur. yeni bir satır daha eklendi. 5.2 çıktı dosyası 5.2.1farklar.txt formatı farklar.txt dosyası, hangi satırdan sonra hangi yeni satırın eklendiğini gösterecek şekilde yapılandırıl- malıdır: örnek çıktı ( farklar.txt ): 2 -> eklenen yeni bir satır. 4 -> yeni bir satır daha eklendi. burada ‘2 ->‘ ifadesi, ""2. satırdan sonra eklenmiştir"" anlamına gelir. eğer aynı yere birden fazla satır eklenmişse aynı sayıyı tekrar ederek eklenme sırasında yazılmalı. 5.3 özel hata durumları ve çıktıları eğerdegistirilmis.txt ,orijinal.txt üzerine sadece yeni satırlar eklenerek oluşturulmamışsa stderr’e şu mesaj yazılmalıdır: hata: degistirilmis.txt dosyası, orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. eğer dosya adları eksikse veya hatalıysa, stderr’e şu mesaj yazılmalıdır: hata: geçersiz dosya adı. 2 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterleri temsil eden bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regexp) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java [CODE]string sınıfı metotları 3 public class gecersizdegisiklikexception extends exception {[/CODE] [CODE]public gecersizdegisiklikexception(string dosya1, string dosya2) {[/CODE] super(""[hata] "" +dosya2+ "" dosyasi "" + dosya1 + ""dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış""); } } import java.io.*; import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]try {[/CODE] compare(""orijinal.txt"", ""degistirilmis.txt""); system.out.pr[CODE]intln(""*****[basarili]*****"");[/CODE] }[CODE]catch (dosyabulunamadiexception | bosdosyaexception e) {[/CODE] e.getmessage(); e.pr[CODE]intstacktrace();[/CODE] system.err.println(e.getmessage()); } } [CODE]public static void compare(string orj, string chan) throws dosyabulunamadiexception,bosdosyaexception {[/CODE] file orijinal = [CODE]new file(orj);[/CODE] file changed = [CODE]new file(chan);[/CODE] if (!orijinal.exists()) { throw [CODE]new dosyabulunamadiexception(""orijinal"");[/CODE] } if (!changed.exists()) { throw [CODE]new dosyabulunamadiexception(""degistirilmis"");[/CODE] } if (orijinal.length() == 0) { throw [CODE]new bosdosyaexception(""orijinal"");[/CODE] } if (changed.length() == 0) { throw [CODE]new bosdosyaexception(""degistirilmis"");[/CODE] } scanner cha_scan; scanner orj_scan; [CODE]try {[/CODE] cha_scan = [CODE]new scanner(changed);[/CODE] orj_scan = [CODE]new scanner(orijinal);[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new dosyabulunamadiexception(""orijinal"");[/CODE] } [CODE]string orj_line;[/CODE] [CODE]string chan_line;[/CODE] [CODE]int index = 0;[/CODE] pr[CODE]intwriter write;[/CODE] [CODE]try{[/CODE] write = new printwriter(""farklar.txt""); }[CODE]catch (filenotfoundexception e){[/CODE] throw new dosyabulunamadiexception(""farklar.txt""); } list<[CODE]string> orj_list = new arraylist<>();[/CODE] list<[CODE]string> cha_list = new arraylist<>();[/CODE] while (cha_scan.hasnextline()) { chan_line = cha_scan.nextline(); cha_list.add(chan_line); } while (orj_scan.hasnextline()) { orj_line = orj_scan.nextline(); orj_list.add(orj_line); } [CODE]int j =0;[/CODE] [CODE]for(int i =0;[/CODE]i<cha_list.size();i++) { if(j< orj_list.size()) { if(!cha_list.get(i).equals(orj_list.get(j))) { write.println(i + "" --> ""+ cha_list.get(i)); } [CODE]else {[/CODE] j++; } } [CODE]if(j<i) {[/CODE] write.println(i + "" --> ""+ cha_list.get(i)); } } write.close(); orj_scan.close(); cha_scan.close(); } } [CODE]public class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception(string dosya_adi) {[/CODE] super(""[hata] "" + dosya_adi + "" bos!""); } } [CODE]public class yanlisargumanexception extends inputexception{[/CODE] [CODE]public yanlisargumanexception(string arg1, string arg2){[/CODE] super(""[hata] hatali arguman kullanimi: ["" + arg1 + "" "" + arg2 +""]""); } } [CODE]public class inputexception extends exception{[/CODE] [CODE]public inputexception(string msg){[/CODE] super(msg); } } [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]public dosyabulunamadiexception(string dosya_adi) {[/CODE] super(""[hata] "" + dosya_adi + "" bulunamadi!""); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.*; [CODE]public class inventory<t extends item> {[/CODE] private arraylist<t> items = [CODE]new arraylist<>();[/CODE] [CODE]public void additem(t item) {[/CODE] items.add(item); } [CODE]public void removeitem(t item) {[/CODE] items.remove(item); } [CODE]public void printinventory() {[/CODE] [CODE]for (t item : items) {[/CODE] system.out.println(item.getname() + "" - value: "" + item.getvalue()); } } [CODE]public t mostvaluableitem() {[/CODE] t mostvaluableitem = null; [CODE]int mostvaluableitemindex = 0;[/CODE] [CODE]for (t item : items) {[/CODE] if (item.getvalue() > mostvaluableitem.getvalue()) { mostvaluableitem = item; } } [CODE]return (t) mostvaluableitem;[/CODE] } [CODE]public t finditembyname(string name) {[/CODE] [CODE]for (t item : items) {[/CODE] if (item.getname().equals(name)) { [CODE]return item;[/CODE] } } [CODE]return null;[/CODE] } [CODE]public list<t> finditemsbyvalue(int value) {[/CODE] list<t> [CODE]newlist = new arraylist<t>();[/CODE] [CODE]for (t item : items) {[/CODE] if (item.getvalue() == value) { newlist.add(item); } } [CODE]return newlist;[/CODE] } [CODE]public int gettotalvalue() {[/CODE] [CODE]int totalvalue = 0;[/CODE] [CODE]for (t item : items) {[/CODE] totalvalue += item.getvalue(); } [CODE]return totalvalue;[/CODE] } [CODE]public list<t> filterbytype(class<?> type) {[/CODE] list<t> [CODE]newlist = new arraylist<>();[/CODE] [CODE]for(t item : items) {[/CODE] if(item.getclass().equals(type)) { newlist.add(item); } } [CODE]return newlist;[/CODE] } [CODE]public int gettotalweapondamage() {[/CODE] [CODE]int totaldamage = 0;[/CODE] [CODE]for (t item : items) {[/CODE] [CODE]if(item instanceof weapon) {[/CODE] weapon x = (weapon) item; totaldamage += x.getvalue(); } } [CODE]return totaldamage;[/CODE] } [CODE]public void sortbyvalue() {[/CODE] t temp = null; [CODE]for (int i =0;[/CODE] i<items.size(); i++) { [CODE]for(int j=i+1;[/CODE] j<items.size(); j++) { if(items.get(i).getvalue() < items.get(j).getvalue()) { temp = items.get(j); items.set(j, items.get(i)); items.set(i, temp); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> list) {[/CODE] if(list.mostvaluableitem() != null) { system.out.println(list.mostvaluableitem()); } } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source) {[/CODE] for(item item : source.items) { [CODE]if(item instanceof armor) {[/CODE] destination.additem((armor) item); } } } } [CODE]public class weapon implements item{[/CODE] [CODE]int damage;[/CODE] [CODE]int value;[/CODE] [CODE]string name;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.damage = damage; this.value = value; this.name = name; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string tostring() {[/CODE] [CODE]return name + "" "" + value + "" "" + damage;[/CODE] } } [CODE]public interface item {[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] [CODE]string tostring();[/CODE] } [CODE]public class armor implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense) {[/CODE] this.name = name; this.value = value; this.defense = defense; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string tostring() {[/CODE] [CODE]return name + "" "" + value + "" "" + defense;[/CODE] } } [CODE]public class potion implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]string effect;[/CODE] [CODE]public potion(string name, int value, string effect) {[/CODE] this.name = name; this.value = value; this.effect = effect; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return name + "" "" + value + "" "" + effect;[/CODE] } } [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] //weapon envanteri inventory<weapon> weaponinventory = [CODE]new inventory<>();[/CODE] weapon alpi = [CODE]new weapon(""alpi"", 1000, 30000);[/CODE] weapon keles = [CODE]new weapon(""keles"", 450, 1000);[/CODE] weaponinventory.additem(alpi); weaponinventory.additem(keles); system.out.pr[CODE]intln(""=== weapon inventory ==="");[/CODE] weaponinventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""\naranan silah: alpi"");[/CODE] weapon foundweapon = weaponinventory.finditembyname(""alpi""); [CODE]if (foundweapon != null) {[/CODE] system.out.println(""bulundu! "" + foundweapon.getname() + "" damage: "" + foundweapon.getdamage()); } [CODE]else {[/CODE] system.out.println(""aranan silah envanterde bulunamadı.""); } system.out.pr[CODE]intln(""\n=== sınıf bilgileri ==="");[/CODE] system.out.println(""weapon sınıfı: "" + foundweapon.get[CODE]class());[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. yineleyen methodlardir. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case dongunun duracagi yeri anladigi yerdir. sonsuz donguyu engeller bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? string uzunlugunun 0 veya 1 olmasi recursive bir metotta base case olmazsa ne olur? sonsuz dongu recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. her bir cagri stack frame olusturur, bunlar ust uste yazilmaya devam eder her iterasyonda fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. her bir iterasyonda alt sayilar tekrar tekrar hesaplanir anlamsizdir tail recursion nedir, kısaca açıklayınız. ciktinin tekrar girise girdigi base case e kadar ne olusuyorsa devam eden iterasyon method turudur abstraction kavramını açıklayınız. nesnenin istedigimiz ozelliklerini alip gerekmeyenleri veya gizlenmek istenenleri kullaniciya gostermemek ""is a"" ilişkisi nedir, java'da nasıl kontrol edilir? i̇ki class arasında ""is a"" ilişkisi olması için ne gereklidir, nelere dikkat edersiniz? fox is a animal ifadesi dogrudur burdan fox classinin aninal classinin child classi oldugunu soyleyebiliriz bir metoda subclasslardan erişilebilmesi ama dışarıdan (package dışından) erişilememesi için hangi access modifier kullanılmalı? protected ""a extends b"" ve ""c extends a"" olmak üzere, dönüş tipi a olan bir metot override edileceği zaman olası dönüş tipleri nelerdir? a veya c java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? her classin parent classi object classidir, duzgun calisabilmesi icin object classinin constructoru da cagirilmalidir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün mü? hayir interface birden fazla extend edilebilir metot overriding ve overloading kavramlarını açıklayınız. override icin methodun signature i aynidir, ust [CODE]classdan alt classa override edilebilir, overload ise ayni isimde bir methodu farkli parametrelerle yani farkli signature ile yeniden yazmak class animal {[/CODE] [CODE]public string type = ""animal"";[/CODE] [CODE]public void makesound() {[/CODE] system.out.println(""generic animal sound.""); }} [CODE]class dog extends animal {[/CODE] [CODE]public dog() {[/CODE] super(); type = ""dog""; } [CODE]public void makesound() {[/CODE] system.out.pr[CODE]intln(""bark!"");[/CODE] }} // test sın[CODE]ıfı, main metodu içinde animal a = new dog();[/CODE] system.out.println(a.type); a.makesound(); output? animal bark! [CODE]class shape {[/CODE] [CODE]public string name;[/CODE] final [CODE]static int pi = 2;[/CODE] [CODE]public shape() {[/CODE] name = ""generic""; pr[CODE]intname();[/CODE] } [CODE]public void printname() {[/CODE] system.out.pr[CODE]intln(name);[/CODE] } } [CODE]class circle extends shape {[/CODE] private double radius; [CODE]public circle(double r) {[/CODE] radius = r; name = ""circle""; } [CODE]public double getarea() {[/CODE] [CODE]return pi * radius * radius;[/CODE] } } // test sınıfı, main metodu içinde circle c = new circle(2.0); c.pr[CODE]intname();[/CODE] system.out.println(c.getarea()); output? generic circle 8.0 java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? kodun ne zaman derlenecegini anlatir, early binding ile static binding cesitleridir hangi tür metotlarda static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? private metodlar, static methodlar, final methodlar early binding classa bagli nesne olusturulmadan calisirlar kalani static calisirlar dinamik bağlamada jvm'nin görevi nedir? polimorfizm kullanilan methodlarda overridelari takip edip istenilen methoda gitmesi. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? per[CODE]formans kaybi ve guven acikligi olusturur ongorulebilirligi azaltir java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? tip kontrolu yapmak icindir, implicit yaparsak class cast exception hatalari cikabilir java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. override edecegemiz methodu daha az gorunur yapamayiz fakat ust sin[CODE]ifa giderken access modifieri genisletilebilinir class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark meov dynamic binding gorulmektedir [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? p.special() da hata vardir parent classda bu method yoktur, dynamic binding gorulmektedir yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 3 tip hata vardir, 1) syntax soz dizimi hatasi 2) logic hatasi mantiksal yaptigimiz hata 3) run time error program compile ettikden sonra cesitli sebeplerle 1/0 gibi sebeplerle ortaya cikar exception handlingin amacı nedir? programin calisma sirasinda cikabilecek hatalari ongorerek crashi engellemek ve olusabilecek hatalari onceden ayarlayarak cozmek. exception handlingde finally bloğunun amacı nedir? exception yakalandiktan sonra try catch icinde ne yapildigindan bagimsiz her turlu calisacak bir methoddur. yani her kosulda calismasini istedigimiz seyleri buraya yazariz. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked exceptions compile time sirasinda ortaya cikar ve crash yememek icin direk ele alinmalidir. unchecked exceptions run time sirasinda dizilerde vs ortaya cikar yani girilen inputlara gore cikabilir veya cikmayabilir. bunu da onceden ongorup halledilmelidir. java'da kendi exceptionunuzu nasıl tanımlarsınız? kendi exceptionumuzu sinifini yaratarak ve exception classindan miras alarak exceptionumuzu olustururuz. main metodu icinde veya farkli bir yerde try catch ile yakalariz ve cozeriz. java'da error ve exception arasındaki fark nedir, açıklayınız error jvm ile alakalidir, exception kodun icinde yaptigimiz seylerle alakalidir. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? hata bilgisini alt katmanlarda kaydetmek ve ust katmanlara iletmek, kullanici dostlugunu arttirmak. 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? alt siniftan daha genis bir exception firlatilamaz. [CODE]static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? kod derlenmez, ozel exception once genel exception sonra kodda yer almalidir. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 text file ile binary file arasındaki fark nedir? text file insanlar tarafindan okunmasi icin, binary file makina diline daha yakindir, ve 01 lerden olusur. bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? streamler akis tabanli veri akis setleridir denebilir, duzenli flush yaparak buffer temizlenir ve gereksiz veri akis veya hatalarinin onune gecmis olur. binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? javada bir nesneyi binary dosyaya yazmak icin serializable interfacenini implement etmek zorundadir. bir marker interface dir. herhangi bir method icermez constructoru vardir. binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? evet dataoutputstream javada primitive typelari binarye cevirip yazmak icin kullanilir. buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? readline() != null kontrolu yapilabilir binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? read() metodu -1 verir veya available() metodu denebilir. [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] randomaccessfile raf = new randomaccessfile(""numbers.bin"", ""rw""); raf.write[CODE]int(10);[/CODE] raf.write[CODE]int(20);[/CODE] raf.seek(0); int a = raf.read[CODE]int();[/CODE] raf.seek(7); byte b = raf.readbyte(); system.out.pr[CODE]intln(a + "" "" + b);[/CODE] raf.close(); } } output? 10 0 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] [CODE]try{[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); pr[CODE]intwriter pw = new printwriter(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]catch(exception e){[/CODE] system.err(""oopps!""); } } } bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir, açıklayınız. ilk derleme hatasi verir, eger compile edilebilecek duzeye gelirse log.txt de degisikligin meydana gelmemesi beklenir. kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public class latte extends basecoffee{[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""latte"";[/CODE] } @override [CODE]public double calculateprice() {[/CODE] double totalprice = 0; totalprice +=50; [CODE]for(coffeeaddon x : addons) {[/CODE] totalprice += x.getcost(); } [CODE]return totalprice;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); coffeemachine anothermachine = [CODE]new coffeemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.out.pr[CODE]intln(""\n"");[/CODE] coffeemachine.totalcoffeemade(); } } import java.util.arraylist; [CODE]public class espresso extends basecoffee{[/CODE] private boolean isheated = false; [CODE]public string getname() {[/CODE] [CODE]if(isheated) {[/CODE] [CODE]return ""espresso (sicak fincan)"";[/CODE] } [CODE]else {[/CODE] [CODE]return ""espresso"";[/CODE] } } @override [CODE]public double calculateprice() {[/CODE] double totalprice = 0; totalprice +=40; [CODE]for(coffeeaddon x : addons) {[/CODE] totalprice += x.getcost(); } [CODE]return totalprice;[/CODE] } [CODE]public void heatcup() {[/CODE] isheated = true; } } [CODE]public class vanillasyrup implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 6;[/CODE] } [CODE]public string getname() {[/CODE][CODE]return ""vanilla syrup"";[/CODE]} } [CODE]public abstract interface coffeeaddon {[/CODE] double getcost(); [CODE]string getname();[/CODE] } import java.util.arraylist; [CODE]public abstract class basecoffee {[/CODE] [CODE]public abstract string getname();[/CODE] protected arraylist<coffeeaddon> addons; basecoffee() { addons = [CODE]new arraylist<coffeeaddon>();[/CODE] } [CODE]public void addaddon(coffeeaddon x){[/CODE] addons.add(x); } [CODE]public abstract double calculateprice();[/CODE] } [CODE]public class americano extends basecoffee{[/CODE] [CODE]public string getname() {[/CODE] [CODE]return ""americano"";[/CODE] } [CODE]public double calculateprice() {[/CODE] double totalprice = 0; totalprice +=45; [CODE]for(coffeeaddon x : addons) {[/CODE] totalprice += x.getcost(); } [CODE]return totalprice;[/CODE] } } [CODE]public class coffeemachine {[/CODE] [CODE]static int toplamkahveuretimi;[/CODE] [CODE]public void addaddontocoffee(basecoffee coffee, coffeeaddon addon) {[/CODE] [CODE]if(coffee instanceof espresso) {[/CODE] [CODE]if(addon instanceof doubleshot || addon instanceof chocolate) {[/CODE] coffee.addaddon(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenmez""); } } [CODE]else if(coffee instanceof latte) {[/CODE] [CODE]if(addon instanceof milk || addon instanceof chocolate || addon instanceof vanillasyrup) {[/CODE] coffee.addaddon(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenmez""); } } [CODE]else if(coffee instanceof americano) {[/CODE] [CODE]if(addon instanceof milk || addon instanceof vanillasyrup) {[/CODE] coffee.addaddon(addon); } [CODE]else {[/CODE] system.out.println(""[uyari] "" + coffee.getname() + "" tipi kahveye "" + addon.getname() + "" eklenmez""); } } } [CODE]public void makecoffee(basecoffee coffee) {[/CODE] toplamkahveuretimi +=1; system.out.print(""siprais: "" + coffee.getname()); for(coffeeaddon x : coffee.addons) { system.out.pr[CODE]int("" + "");[/CODE] system.out.print(x.getname()); } system.out.pr[CODE]intln();[/CODE] system.out.println(""toplam fiyat:"" + (int) coffee.calculateprice() + ""tl""); system.out.pr[CODE]intln();[/CODE] } [CODE]public void heatespressocup(basecoffee coffee) {[/CODE] [CODE]if(coffee instanceof espresso) {[/CODE] system.out.pr[CODE]intln(""espresso kahve fincanı ısıtıldı"");[/CODE] ((espresso) coffee).heatcup(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"");[/CODE] } } [CODE]public static void totalcoffeemade() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar kahve makineleri toplam ""+ toplamkahveuretimi + "" kahve uretildi"");[/CODE] } } [CODE]public class milk implements coffeeaddon {[/CODE] [CODE]public double getcost() {[/CODE] [CODE]return 5;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""milk"";[/CODE] } } [CODE]public class doubleshot implements coffeeaddon{[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 10;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""double shot"";[/CODE] } } [CODE]public class chocolate implements coffeeaddon {[/CODE] @override [CODE]public double getcost() {[/CODE] [CODE]return 7;[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return ""chocolate"";[/CODE] } } bil211 quiz 4 section 1 quizleri uzak sistemine yükleyeceksiniz. q1: yalnızca tek sayıları saklayan liste oddnumberlist adında bir sınıf oluşturun. bu sınıf: ● add(t item) → yalnızca tek sayılar eklenebilir. çift sayı eklenmeye çalışılırsa hata mesajı basılır. ● addall(collection<t> collection) → sadece içindeki tek sayıları ekler. ● getoddnumbers() → i̇çerideki tüm tek sayıları liste olarak döndürür. ● sumofodds() → tüm tek sayıların toplamını döndürür. örnek kullanım: oddnumberlist list = [CODE]new oddnumberlist();[/CODE] list.add(5); list.add(3); list.add(8); // eklenmemeli system.out.pr[CODE]intln(list);[/CODE] // çıktı: [5, 3] q2: koleksiyondan tekrar edenleri kaldırma ● bir collection<t> içindeki tüm tekrar eden öğeleri kaldıran bir generic metod yazın. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> removeduplicates(collection<t> collection) {[/CODE] // metodu tamamlayın } örnek kullanım: list<string> words = arrays.aslist(""apple"", ""banana"", ""apple"", ""orange"", ""banana"", ""grape""); system.out.pr[CODE]intln(removeduplicates(words));[/CODE] q3:aşağıdaki generic metodu tamamlayın. ● verilen list<t> içindeki tüm öğeleri büyük harfe çeviren (veya sayıysa olduğu gibi bırakan) bir metod yazın. ● eğer t bir string ise büyük harfe çevirmeli, değilse değiştirmemelidir. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> converttouppercaseifstring(list<t> list) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> items = arrays.aslist(""hello"", 123, ""world"", 456); system.out.pr[CODE]intln(converttouppercaseifstring(items));[/CODE] import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] oddnumberlist list = [CODE]new oddnumberlist();[/CODE] list.add(5); list.add(8); list.add(3); system.out.pr[CODE]intln(""cift sayi girdin kanka"");[/CODE] system.out.pr[CODE]intln(list);[/CODE] list<string> words = arrays.aslist(""apple"", ""banana"", ""apple"", ""orange"", ""banana"", ""grape""); system.out.pr[CODE]intln(removeduplicates(words));[/CODE] list<object> items = arrays.aslist(""hello"", 123, ""world"", 456); system.out.pr[CODE]intln(converttouppercaseifstring(items));[/CODE] } [CODE]public static <t> list<t> removeduplicates(collection<t> collection) {[/CODE] list<t> list; list = [CODE]new arraylist<t>();[/CODE] [CODE]for (t t : collection) {[/CODE] if (!list.contains(t)) { list.add(t); } } [CODE]return list;[/CODE] } [CODE]public static <t> list<t> converttouppercaseifstring(list<t> list) {[/CODE] list<t> liste = [CODE]new arraylist<t>();[/CODE] [CODE]for(t t : list) {[/CODE] [CODE]if(t instanceof string) {[/CODE] liste.add((t) (((string) t).touppercase())); } } [CODE]return liste;[/CODE] } } import java.util.arraylist; import java.util.collection; import java.util.list; [CODE]public class oddnumberlist<t extends number> {[/CODE] private list<t> numbers; [CODE]public oddnumberlist() {[/CODE] numbers = [CODE]new arraylist<>();[/CODE] } [CODE]public void add(t number){[/CODE] if(number.intvalue() % 2 != 0) numbers.add(number); else system.out.pr[CODE]intln(number + ""is even"");[/CODE] } [CODE]public void addall(collection<t> collection) {[/CODE] [CODE]for( t number : collection) {[/CODE] if(number.[CODE]intvalue() %2 !=0) {[/CODE] numbers.add(number); } } } [CODE]public list<t> getoddnumbers() {[/CODE] [CODE]return numbers;[/CODE] } [CODE]public int sumofodds() {[/CODE] [CODE]int sum =0;[/CODE] [CODE]for(t number : numbers) {[/CODE] sum += number.[CODE]intvalue();[/CODE] } [CODE]return sum;[/CODE] } [CODE]public string tostring() {[/CODE] return numbers.to[CODE]string();[/CODE] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 import java.awt.graphics2d; import java.awt.image; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class shellcasing {[/CODE] double x, y; double dx, dy; [CODE]int life = 80;[/CODE] bufferedimage image; [CODE]public shellcasing(int startx, int starty) {[/CODE] x = startx; y = starty; double angle = math.toradians(math.random() * 360); double speed = 1.0 + math.random() * 2.5; dx = math.cos(angle) * speed; dy = math.sin(angle) * speed; [CODE]try {[/CODE] image = imageio.read(new file(""sprites/effects/shell.png"")); image = resizeimage(image, 3, 6); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] shell image yüklenemedi.""); } } [CODE]public void update() {[/CODE] x += dx; y += dy; l[CODE]ife--;[/CODE] } [CODE]public boolean isalive() {[/CODE] [CODE]return life > 0;[/CODE] } [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.drawimage(image, (int) x - image.getwidth() / 2, (int) y - image.getheight() / 2, null); } private bufferedimage resizeimage(bufferedimage originalimage, [CODE]int targetwidth, int targetheight) {[/CODE] image scaledimage = originalimage.getscaledinstance(targetwidth, targetheight, image.scale_smooth); bufferedimage resizedimage = new bufferedimage(targetwidth, targetheight, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2 = resizedimage.creategraphics(); g2.drawimage(scaledimage, 0, 0, null); g2.dispose(); [CODE]return resizedimage;[/CODE] } } import java.awt.graphics2d; import java.awt.image; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.list; import javax.imageio.imageio; [CODE]public abstract class zombie {[/CODE] protected [CODE]int x, y;[/CODE] protected [CODE]int health;[/CODE] protected double speed; protected [CODE]int damage;[/CODE] protected boolean alive = true; protected boolean isattacking = false; protected [CODE]int attackindex = 0, attackcounter = 0, attackdelay = 6;[/CODE] protected [CODE]int walkindex = 0, walkcounter = 0, walkdelay = 10;[/CODE] protected [CODE]int attackcooldown = 0;[/CODE] protected [CODE]int defaultcooldown = 60;[/CODE] protected bufferedimage[] walkframes; protected bufferedimage[] attackframes; [CODE]public zombie(int x, int y, int health, double speed, int damage) {[/CODE] this.x = x; this.y = y; this.health = health; this.speed = speed; this.damage = damage; } [CODE]public int getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public int gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public abstract void draw(graphics2d g2d);[/CODE] [CODE]public void takedamage(int amount) {[/CODE] health -= amount; [CODE]if (health <= 0) {[/CODE] alive = false; ondeath(); } } [CODE]public void takedamage(int amount, double pushangle) {[/CODE] takedamage(amount); x += (int) (math.cos(pushangle) * 8); y += (int) (math.sin(pushangle) * 8); } [CODE]public boolean isalive() {[/CODE] [CODE]return alive;[/CODE] } [CODE]public boolean justdied() {[/CODE] [CODE]return !alive && health <= 0;[/CODE] } protected [CODE]void ondeath() {[/CODE] // override [CODE]if needed }[/CODE] [CODE]public boolean iscollidingwithplayer(player player) {[/CODE] rectangle zombierect = [CODE]new rectangle(x, y, 32, 32);[/CODE] rectangle playerrect = new rectangle(player.getx(), player.gety(), player.getsize(), player.getsize()); return zombierect.[CODE]intersects(playerrect);[/CODE] } protected bufferedimage resizeimage(bufferedimage original, [CODE]int w, int h) {[/CODE] image scaled = original.getscaledinstance(w, h, image.scale_smooth); bufferedimage resized = new bufferedimage(w, h, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2 = resized.creategraphics(); g2.drawimage(scaled, 0, 0, null); g2.dispose(); [CODE]return resized;[/CODE] } [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 32, 32);[/CODE] } [CODE]public abstract void update(player player, list<zombie> zombies, list<rectangle> obstacles);[/CODE] } [CODE]class guts {[/CODE] private [CODE]int x, y;[/CODE] private [CODE]int duration = 120;[/CODE] // 3 saniye private bufferedimage sprite; [CODE]public guts(int x, int y) {[/CODE] this.x = x; this.y = y; [CODE]try {[/CODE] sprite = imageio.read(new file(""sprites/effects/guts.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] acid sprite yüklenemedi.""); } } [CODE]public void update() {[/CODE] duration--; } [CODE]public boolean isalive() {[/CODE] [CODE]return duration > 0;[/CODE] } [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 16, 16);[/CODE] } [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.drawimage(sprite, x, y, 16, 16, null); } } import java.awt.*; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class piercingbullet extends bullet {[/CODE] private bufferedimage image; private final [CODE]int width = 6, height = 6;[/CODE] private [CODE]int lifetime = 120;[/CODE] // 2 saniye [CODE]public piercingbullet(int x, int y, double angle) {[/CODE] super(x, y, angle); [CODE]try {[/CODE] image = imageio.read(new file(""sprites/effects/bullet.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] piercingbullet görseli yok.""); } } @override [CODE]public void update() {[/CODE] x += dx; y += dy; l[CODE]ifetime--;[/CODE] } [CODE]public boolean isalive() {[/CODE] [CODE]return lifetime > 0;[/CODE] } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, width, height);[/CODE] } @override [CODE]public void draw(graphics2d g2d) {[/CODE] [CODE]if (image != null) {[/CODE] g2d.drawimage(image, x, y, width, height, null); } [CODE]else {[/CODE] g2d.setcolor(color.cyan); g2d.filloval(x, y, width, height); } } } import java.awt.*; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.random; import javax.imageio.imageio; [CODE]public class playerblood {[/CODE] private [CODE]int x, y;[/CODE] private [CODE]int duration = 60;[/CODE] // kaç frame sonra kaybolsun private bufferedimage image; private [CODE]static final int offset_range = 12;[/CODE] // +/- max offset private [CODE]static final random rand = new random();[/CODE] [CODE]public playerblood(int x, int y) {[/CODE] int offsetx = rand.next[CODE]int(offset_range * 2 + 1) - offset_range;[/CODE] int offsety = rand.next[CODE]int(offset_range * 2 + 1) - offset_range;[/CODE] this.x = x + offsetx; this.y = y + offsety; [CODE]try {[/CODE] image = imageio.read(new file(""sprites/effects/guts.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] player kan efekti yüklenemedi.""); } } [CODE]public void update() {[/CODE] duration--; } [CODE]public boolean isalive() {[/CODE] [CODE]return duration > 0;[/CODE] } [CODE]public void draw(graphics2d g2d) {[/CODE] if (image != null) g2d.drawimage(image, x, y, 8, 8, null); } } import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.list; import javax.imageio.imageio; [CODE]public class acidzombie extends zombie {[/CODE] private final double attack_range = 20; [CODE]public acidzombie(int x, int y) {[/CODE] super(x, y, 50, 1.1, 30); walkframes = [CODE]new bufferedimage[4];[/CODE] attackframes = [CODE]new bufferedimage[6];[/CODE] [CODE]try {[/CODE] [CODE]for (int i = 0;[/CODE] i < 4; i++) { string path = string.format(""sprites/zombie/acidzombie/acidzombie_walk/%02d_acidzombie_walk.png"", i); walkframes[i] = resizeimage(imageio.read([CODE]new file(path)), 32, 32);[/CODE] } [CODE]for (int i = 0;[/CODE] i < 6; i++) { string path = string.format(""sprites/zombie/acidzombie/acidzombie_attack/%02d_acidzombie_attack.png"", i); attackframes[i] = resizeimage(imageio.read([CODE]new file(path)), 32, 32);[/CODE] } } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] acidzombie sprite'ları yüklenemedi.""); } } @override protected [CODE]void ondeath() {[/CODE] // ölünce yere asit bırakma kodu gamepanel'de yazılıyor } @override [CODE]public void update(player player, list<zombie> zombies, list<rectangle> obstacles) {[/CODE] [CODE]if (!alive) return;[/CODE] double dx = player.getx() - x; double dy = player.gety() - y; double distance = math.sqrt(dx * dx + dy * dy); // === saldiri === [CODE]if (distance < attack_range) {[/CODE] [CODE]if (attackcooldown <= 0) {[/CODE] player.takedamage(damage); attackcooldown = defaultcooldown; attackindex = 0; attackcounter = 0; isattacking = true; } } // === hareket === [CODE]if (!isattacking && distance >= attack_range) {[/CODE] double nextx = x + speed * dx / distance; double nexty = y + speed * dy / distance; rectangle nextbounds = [CODE]new rectangle((int) nextx, (int) nexty, 32, 32);[/CODE] boolean blocked = false; [CODE]for (zombie other : zombies) {[/CODE] if (other != this && other.isalive() && nextbounds.intersects(other.getbounds())) { blocked = true; break; } } [CODE]for (rectangle rect : obstacles) {[/CODE] if (nextbounds.[CODE]intersects(rect)) {[/CODE] blocked = true; break; } } [CODE]if (!blocked) {[/CODE] x = ([CODE]int) nextx;[/CODE] y = ([CODE]int) nexty;[/CODE] } } // === cooldown === [CODE]if (attackcooldown > 0) attackcooldown--;[/CODE] // === ani̇masyon === [CODE]if (isattacking) {[/CODE] attackcounter++; [CODE]if (attackcounter >= attackdelay) {[/CODE] attackcounter = 0; attackindex++; if (attackindex >= attackframes.length) { attackindex = 0; isattacking = false; } } } [CODE]else {[/CODE] walkcounter++; [CODE]if (walkcounter >= walkdelay) {[/CODE] walkcounter = 0; walkindex = (walkindex + 1) % walkframes.length; } } } @override [CODE]public void draw(graphics2d g2d) {[/CODE] bufferedimage frame = isattacking ? attackframes[attackindex] : walkframes[walkindex]; g2d.drawimage(frame, x, y, null); } } import java.util.list; [CODE]public abstract class weapon {[/CODE] protected [CODE]int magsize;[/CODE] protected [CODE]int currentammo;[/CODE] protected [CODE]int reserveammo;[/CODE] protected double firerate; protected long lastshottime = 0; [CODE]public weapon(int magsize, int reserveammo, double firerate) {[/CODE] this.magsize = magsize; this.reserveammo = reserveammo; this.currentammo = magsize; this.firerate = firerate; } [CODE]public boolean canshoot() {[/CODE] long now = system.currenttimemillis(); [CODE]return currentammo > 0 && (now - lastshottime) >= (60000 / firerate);[/CODE] } [CODE]public void shoot() {[/CODE] [CODE]if (canshoot()) {[/CODE] currentammo--; lastshottime = system.currenttimemillis(); } } [CODE]public void reload() {[/CODE] [CODE]int needed = magsize - currentammo;[/CODE] int taken = math.min(needed, reserveammo); currentammo += taken; reserveammo -= taken; } [CODE]public boolean needsreload() {[/CODE] [CODE]return currentammo < magsize && reserveammo > 0;[/CODE] } [CODE]public void addreserveammo(int amount) {[/CODE] reserveammo += amount; } [CODE]public int getammo() {[/CODE] [CODE]return currentammo;[/CODE] } [CODE]public int getmagsize() {[/CODE] [CODE]return magsize;[/CODE] } [CODE]public int getreserveammo() {[/CODE] [CODE]return reserveammo;[/CODE] } [CODE]public abstract void fire(double angle, int x, int y, list<bullet> bullets, list<rocketammo> rockets, list<smokeeffect> smoke);[/CODE] [CODE]public abstract string getname();[/CODE] } // örnek handgun [CODE]class handgun extends weapon {[/CODE] [CODE]public handgun() {[/CODE] super(12, 9999, 120); } @override [CODE]public void fire(double angle, int x, int y, list<bullet> bullets, list<rocketammo> rockets, list<smokeeffect> smoke) {[/CODE] [CODE]if (!canshoot()) return;[/CODE] shoot(); bullets.add([CODE]new bullet(x, y, angle));[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""handgun"";[/CODE] } } // r[CODE]ifle class rifle extends weapon {[/CODE] [CODE]public rifle() {[/CODE] super(30, 120, 600); } @override [CODE]public void fire(double angle, int x, int y, list<bullet> bullets, list<rocketammo> rockets, list<smokeeffect> smoke) {[/CODE] [CODE]if (!canshoot()) return;[/CODE] shoot(); double spread = math.toradians(30); double offset = (math.random() - 0.5) * spread; bullets.add([CODE]new bullet(x, y, angle + offset));[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""rifle"";[/CODE] } } // shotgun [CODE]class shotgun extends weapon {[/CODE] [CODE]public shotgun() {[/CODE] super(5, 25, 60); } @override [CODE]public void fire(double angle, int x, int y, list<bullet> bullets, list<rocketammo> rockets, list<smokeeffect> smoke) {[/CODE] [CODE]if (!canshoot()) return;[/CODE] shoot(); [CODE]int pelletcount = 9;[/CODE] double totalspread = math.toradians(45); double delta = totalspread / (pelletcount - 1); [CODE]for (int i = 0;[/CODE] i < pelletcount; i++) { double offset = -totalspread / 2 + delta * i; bullets.add([CODE]new bullet(x, y, angle + offset));[/CODE] } } @override [CODE]public string getname() {[/CODE] [CODE]return ""shotgun"";[/CODE] } } // sniper => piercingbullet [CODE]class sniper extends weapon {[/CODE] [CODE]public sniper() {[/CODE] super(5, 15, 30); } @override [CODE]public void fire(double angle, int x, int y, list<bullet> bullets, list<rocketammo> rockets, list<smokeeffect> smoke) {[/CODE] [CODE]if (!canshoot()) return;[/CODE] shoot(); bullets.add([CODE]new piercingbullet(x, y, angle));[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""sniper"";[/CODE] } } // rocket => rocket ammo [CODE]class rocket extends weapon {[/CODE] [CODE]public rocket() {[/CODE] super(1, 5, 10); } @override [CODE]public void fire(double angle, int x, int y, list<bullet> bullets, list<rocketammo> rockets, list<smokeeffect> smokelist) {[/CODE] [CODE]if (!canshoot()) return;[/CODE] shoot(); rockets.add([CODE]new rocketammo(x, y, angle, smokelist));[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return ""rocket"";[/CODE] } } import java.awt.graphics2d; import java.awt.image; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]class bullet {[/CODE] [CODE]int x, y;[/CODE] double dx, dy; [CODE]int speed = 10;[/CODE] bufferedimage bulletimage; [CODE]public bullet(int startx, int starty, double angle) {[/CODE] x = startx; y = starty; dx = math.cos(angle) * speed; dy = math.sin(angle) * speed; [CODE]try {[/CODE] bulletimage = imageio.read(new file(""sprites/effects/shell.png"")); bulletimage = resizeimage(bulletimage, 2, 4); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] bullet shell yüklenemedi.""); } } [CODE]public void update() {[/CODE] x += dx; y += dy; } [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.drawimage(bulletimage, x - bulletimage.getwidth() / 2, y - bulletimage.getheight() / 2, null); } private bufferedimage resizeimage(bufferedimage originalimage, [CODE]int targetwidth, int targetheight) {[/CODE] image scaledimage = originalimage.getscaledinstance(targetwidth, targetheight, image.scale_smooth); bufferedimage resizedimage = new bufferedimage(targetwidth, targetheight, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2d = resizedimage.creategraphics(); g2d.drawimage(scaledimage, 0, 0, null); g2d.dispose(); [CODE]return resizedimage;[/CODE] } [CODE]public rectangle getbounds() {[/CODE] return new rectangle(x, y, bulletimage.getwidth(), bulletimage.getheight()); } } import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class acid {[/CODE] private [CODE]int x, y;[/CODE] private [CODE]int duration = 180;[/CODE] // 3 saniye private bufferedimage sprite; [CODE]public acid(int x, int y) {[/CODE] this.x = x; this.y = y; [CODE]try {[/CODE] sprite = imageio.read(new file(""sprites/effects/acid.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] acid sprite yüklenemedi.""); } } [CODE]public void update() {[/CODE] duration--; } [CODE]public boolean isalive() {[/CODE] [CODE]return duration > 0;[/CODE] } [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 32, 32);[/CODE] } [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.drawimage(sprite, x, y, 32, 32, null); } } import javax.swing.imageicon; import javax.swing.jframe; [CODE]public class gamewindow extends jframe {[/CODE] private gamepanel panel; [CODE]public gamewindow(boolean load) {[/CODE] settitle(""alpocalypse - in game""); panel = [CODE]new gamepanel(this);[/CODE] [CODE]if (load) {[/CODE] panel.loadgame(); } seticonimage(new imageicon(""sprites/menu/background.png"").getimage()); setdefaultcloseoperation(exit_on_close); setresizable(false); add(panel); pack(); setlocationrelativeto(null); setvisible(true); panel.startgamethread(); } [CODE]public void returntomenu() {[/CODE] // panel istemciden ""game over"" verirse burası çağrılır dispose(); [CODE]new mainmenu();[/CODE] } } import java.awt.*; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.list; import javax.imageio.imageio; [CODE]public class normalzombie extends zombie {[/CODE] [CODE]public normalzombie(int x, int y) {[/CODE] super(x, y, 100, 1.3, 20); // can, hız, hasar walkframes = [CODE]new bufferedimage[17];[/CODE] attackframes = [CODE]new bufferedimage[9];[/CODE] [CODE]try {[/CODE] [CODE]for (int i = 0;[/CODE] i < 17; i++) { walkframes[i] = resizeimage(imageio.read(new file(string.format( ""sprites/zombie/normalzombie/move/skeleton-move_%d.png"", i))), 32, 32); } [CODE]for (int i = 0;[/CODE] i < 9; i++) { attackframes[i] = resizeimage(imageio.read(new file(string.format( ""sprites/zombie/normalzombie/attack/skeleton-attack_%d.png"", i))), 32, 32); } } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] normalzombie sprite'lari yüklenemedi.""); } } @override [CODE]public void update(player player, list<zombie> zombies, list<rectangle> obstacles) {[/CODE] [CODE]if (!alive) return;[/CODE] final double attack_range = 20; double dx = player.getx() - x; double dy = player.gety() - y; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if (distance <= attack_range) {[/CODE] [CODE]if (attackcooldown <= 0) {[/CODE] player.takedamage(damage); attackcooldown = defaultcooldown; attackindex = 0; attackcounter = 0; isattacking = true; } } [CODE]else if (!isattacking) {[/CODE] double nextx = x + speed * dx / distance; double nexty = y + speed * dy / distance; rectangle nextbounds = [CODE]new rectangle((int) nextx, (int) nexty, 32, 32);[/CODE] boolean blocked = false; [CODE]for (zombie z : zombies) {[/CODE] if (z != this && z.isalive() && nextbounds.intersects(z.getbounds())) { blocked = true; break; } } [CODE]for (rectangle rect : obstacles) {[/CODE] if (nextbounds.[CODE]intersects(rect)) {[/CODE] blocked = true; break; } } [CODE]if (!blocked) {[/CODE] x = ([CODE]int) nextx;[/CODE] y = ([CODE]int) nexty;[/CODE] } } [CODE]if (attackcooldown > 0) attackcooldown--;[/CODE] [CODE]if (isattacking) {[/CODE] attackcounter++; [CODE]if (attackcounter >= attackdelay) {[/CODE] attackcounter = 0; attackindex++; if (attackindex >= attackframes.length) { attackindex = 0; isattacking = false; } } } [CODE]else {[/CODE] walkcounter++; [CODE]if (walkcounter >= walkdelay) {[/CODE] walkcounter = 0; walkindex = (walkindex + 1) % walkframes.length; } } } @override [CODE]public void draw(graphics2d g2d) {[/CODE] bufferedimage frame = isattacking ? attackframes[attackindex] : walkframes[walkindex]; g2d.drawimage(frame, x, y, null); } } import java.awt.*; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.list; import javax.imageio.imageio; [CODE]public class rocketammo {[/CODE] [CODE]public int x, y;[/CODE] [CODE]public double dx, dy;[/CODE] private final [CODE]int speed = 3;[/CODE] private boolean exploded = false; private bufferedimage image; private final [CODE]int radius = 120;[/CODE] private [CODE]int width = 20, height = 30;[/CODE] private list<smokeeffect> smokelist; [CODE]public rocketammo(int startx, int starty, double angle, list<smokeeffect> smokelist) {[/CODE] x = startx; y = starty; dx = math.cos(angle) * speed; dy = math.sin(angle) * speed; this.smokelist = smokelist; [CODE]try {[/CODE] image = imageio.read(new file(""sprites/effects/rocketammo.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] roket sprite yuklenemedi.""); } } [CODE]public void update(list<zombie> zombies) {[/CODE] [CODE]if (exploded) return;[/CODE] x += dx; y += dy; rectangle rocketrect = [CODE]new rectangle(x, y, width, height);[/CODE] [CODE]for (zombie z : zombies) {[/CODE] if (z.isalive() && rocketrect.intersects(z.getbounds())) { explode(zombies); break; } } } [CODE]public void explode(list<zombie> zombies) {[/CODE] exploded = true; // roketin merkezini bulalım [CODE]int rocketcenterx = x + width / 2;[/CODE] [CODE]int rocketcentery = y + height / 2;[/CODE] // alan hasarı [CODE]for (zombie z : zombies) {[/CODE] if (!z.isalive()) continue; int zx = z.getx() + 16; int zy = z.gety() + 16; double dist = point.distance(rocketcenterx, rocketcentery, zx, zy); [CODE]if (dist <= radius) {[/CODE] z.takedamage(50); } } // duman [CODE]if (smokelist != null) {[/CODE] smokelist.add([CODE]new smokeeffect(rocketcenterx, rocketcentery));[/CODE] } } [CODE]public boolean isexploded() {[/CODE] [CODE]return exploded;[/CODE] } [CODE]public void draw(graphics2d g2d) {[/CODE] [CODE]if (!exploded && image != null) {[/CODE] g2d.drawimage(image, x, y, width, height, null); } } } import java.awt.*; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class smokeeffect {[/CODE] private [CODE]int x, y;[/CODE] private [CODE]int duration = 120;[/CODE] // kaç frame kalacak private bufferedimage image; [CODE]public smokeeffect(int x, int y) {[/CODE] this.x = x; this.y = y; [CODE]try {[/CODE] image = imageio.read(new file(""sprites/effects/smoke.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] duman efekti yüklenemedi.""); } } [CODE]public void update() {[/CODE] duration--; } [CODE]public boolean isalive() {[/CODE] [CODE]return duration > 0;[/CODE] } [CODE]public void draw(graphics2d g2d) {[/CODE] [CODE]if (image != null) {[/CODE] g2d.drawimage(image, x - 16, y - 16, 16, 16, null); } } } import java.awt.graphics2d; import java.awt.image; import java.awt.image.bufferedimage; import java.io.file; import javax.swing.*; [CODE]public class mainmenu extends jframe {[/CODE] private jbutton [CODE]newgamebtn, loadgamebtn, scoreboardbtn, exitbtn;[/CODE] private jlabel backgroundlabel; [CODE]public mainmenu() {[/CODE] settitle(""alpocalypse main menu""); setsize(600, 400); setdefaultcloseoperation(jframe.exit_on_close); seticonimage(new imageicon(""sprites/menu/background.png"").getimage()); setlayout(null); // arka plan resmi (isteğe bağlı) imageicon bgicon = new imageicon(""sprites/menu/background.png""); image bgscaled = bgicon.getimage().getscaledinstance(600, 400, image.scale_smooth); imageicon [CODE]newbg = new imageicon(bgscaled);[/CODE] backgroundlabel = [CODE]new jlabel(newbg);[/CODE] backgroundlabel.setbounds(0, 0, 600, 400); // new game butonu imageicon newgameicon = new imageicon(""sprites/menu/newgame.jpg""); image scalednew = newgameicon.getimage().getscaledinstance(150, 40, image.scale_smooth); imageicon scaled[CODE]newicon = new imageicon(scalednew);[/CODE] [CODE]newgamebtn = new jbutton(scalednewicon);[/CODE] newgamebtn.setbounds(50, 50, 150, 40); newgamebtn.setborderpa[CODE]inted(false);[/CODE] newgamebtn.setcontentareafilled(false); newgamebtn.setfocuspa[CODE]inted(false);[/CODE] newgamebtn.addactionlistener(e -> { start[CODE]newgame();[/CODE] }); // load game butonu imageicon loadgameicon = new imageicon(""sprites/menu/loadgame.jpg""); image scaledload = loadgameicon.getimage().getscaledinstance(150, 40, image.scale_smooth); imageicon scaledloadicon = [CODE]new imageicon(scaledload);[/CODE] loadgamebtn = [CODE]new jbutton(scaledloadicon);[/CODE] loadgamebtn.setbounds(50, 110, 150, 40); loadgamebtn.setborderpa[CODE]inted(false);[/CODE] loadgamebtn.setcontentareafilled(false); loadgamebtn.setfocuspa[CODE]inted(false);[/CODE] loadgamebtn.addactionlistener(e -> { file f = new file(""savegame.txt""); if (!f.exists()) { joptionpane.showmessagedialog(this, ""no saved game found!""); [CODE]return;[/CODE] } startloadedgame(); }); // scoreboard butonu imageicon scoregameicon = new imageicon(""sprites/menu/scoreboard.jpg""); image scaledscore = scoregameicon.getimage().getscaledinstance(150, 40, image.scale_smooth); imageicon scaledscoreicon = [CODE]new imageicon(scaledscore);[/CODE] scoreboardbtn = [CODE]new jbutton(scaledscoreicon);[/CODE] scoreboardbtn.setbounds(50, 170, 150, 40); scoreboardbtn.setborderpa[CODE]inted(false);[/CODE] scoreboardbtn.setcontentareafilled(false); scoreboardbtn.setfocuspa[CODE]inted(false);[/CODE] scoreboardbtn.addactionlistener(e -> { joptionpane.showmessagedialog(this, ""max score so far = "" + game.maxscore); }); // exit butonu imageicon exitgameicon = new imageicon(""sprites/menu/exit.jpg""); image scaledexit = exitgameicon.getimage().getscaledinstance(150, 40, image.scale_smooth); imageicon scaledexiticon = [CODE]new imageicon(scaledexit);[/CODE] exitbtn = [CODE]new jbutton(scaledexiticon);[/CODE] exitbtn.setbounds(50, 230, 150, 40); exitbtn.setborderpa[CODE]inted(false);[/CODE] exitbtn.setcontentareafilled(false); exitbtn.setfocuspa[CODE]inted(false);[/CODE] exitbtn.addactionlistener(e -> system.exit(0)); // ekleme sırası add([CODE]newgamebtn);[/CODE] add(loadgamebtn); add(scoreboardbtn); add(exitbtn); add(backgroundlabel); setlocationrelativeto(null); setvisible(true); } private [CODE]void startnewgame() {[/CODE] [CODE]new gamewindow(false);[/CODE] dispose(); // menüyü kapat } private [CODE]void startloadedgame() {[/CODE] [CODE]new gamewindow(true);[/CODE] dispose(); } protected bufferedimage resizeimage(bufferedimage original, [CODE]int w, int h) {[/CODE] image scaled = original.getscaledinstance(w, h, image.scale_smooth); bufferedimage resized = new bufferedimage(w, h, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2 = resized.creategraphics(); g2.drawimage(scaled, 0, 0, null); g2.dispose(); [CODE]return resized;[/CODE] } } import java.awt.*; import java.awt.event.*; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.bufferedimage; import java.io.file; import java.io.pr[CODE]intwriter;[/CODE] import java.util.*; import java.util.list; import javax.swing.*; [CODE]public class gamepanel extends jpanel implements keylistener, runnable, mousemotionlistener, mouselistener, mousewheellistener {[/CODE] [CODE]public static final int swid = 1440;[/CODE] [CODE]public static final int shei = 980;[/CODE] private thread gamethread; private final [CODE]int fps = 60;[/CODE] private player player; private tilemanager mapper; private po[CODE]int aim = new point(swid / 2, shei / 2);[/CODE] private boolean gameovertriggered = false; private list<zombie> zombies = [CODE]new arraylist<>();[/CODE] private list<bullet> bullets = [CODE]new arraylist<>();[/CODE] private list<rocketammo> rockets = [CODE]new arraylist<>();[/CODE] private list<smokeeffect> smokelist = [CODE]new arraylist<>();[/CODE] private list<shellcasing> shells = [CODE]new arraylist<>();[/CODE] private list<muzzleflash> flashes = [CODE]new arraylist<>();[/CODE] private list<acid> acids = [CODE]new arraylist<>();[/CODE] private list<guts> guts = [CODE]new arraylist<>();[/CODE] private list<playerblood> playerbloods = [CODE]new arraylist<>();[/CODE] private list<rectangle> obstacles; private [CODE]int score = 0;[/CODE] private [CODE]int combo = 1;[/CODE] private [CODE]int combotimer = 0;[/CODE] private final [CODE]int combo_reset_time = 300;[/CODE] private double zoom = 2.5; private [CODE]int currentlevel = 1;[/CODE] private final [CODE]int[] zombiesperlevel = {[/CODE] 10, 15, 20, 25, 30 }; private final [CODE]int max_level = 5;[/CODE] private random rand = [CODE]new random();[/CODE] private boolean paused = false; private gamewindow parentwindow; // referans [CODE]public gamepanel(gamewindow parent) {[/CODE] this.parentwindow = parent; setpreferredsize([CODE]new dimension(swid, shei));[/CODE] setfocusable(true); bufferedimage blankimg = new bufferedimage(16, 16, bufferedimage.type_[CODE]int_argb);[/CODE] cursor blankcursor = toolkit.getdefaulttoolkit() .createcustomcursor(blankimg, [CODE]new point(0, 0), ""blank cursor"");[/CODE] setcursor(blankcursor); // devam... addkeylistener(this); addmouselistener(this); addmousemotionlistener(this); addmousewheellistener(this); mapper = [CODE]new tilemanager();[/CODE] player = [CODE]new player(32 * 25, 32 * 15);[/CODE] player.setbloodlist(playerbloods); obstacles = mapper.getsolidrectangles(); spawnzombies[CODE]forlevel(currentlevel);[/CODE] } private [CODE]void spawnzombiesforlevel(int level) {[/CODE] zombies.clear(); [CODE]int zombiecount = zombiesperlevel[level - 1];[/CODE] int maph = mapper.maph; int mapw = mapper.mapw; // her zombi => random tile 0..maph-1,0..mapw-1 [CODE]for (int i = 0;[/CODE] i < zombiecount; i++) { zombie z = createrandomzombie(); // tekrar dene 50 kez [CODE]for (int tries = 0;[/CODE] tries < 50; tries++) { int r = rand.next[CODE]int(maph);[/CODE] int c = rand.next[CODE]int(mapw);[/CODE] int tile = mapper.getmap()[r][c]; [CODE]if (tile == 0 || tile == 1 || tile == 2 || tile == 3) {[/CODE] // spawn z.x = c * 32; z.y = r * 32; break; } } zombies.add(z); } system.out.pr[CODE]intln(""[info] level "" + level + "" zombileri spawn: "" + zombiecount);[/CODE] } private zombie createrandomzombie() { int t = rand.next[CODE]int(4);[/CODE] switch (t) { case 0: [CODE]return new normalzombie(0, 0);[/CODE] case 1: [CODE]return new tankzombie(0, 0);[/CODE] case 2: [CODE]return new acidzombie(0, 0);[/CODE] default: [CODE]return new jumperzombie(0, 0);[/CODE] } } [CODE]public void startgamethread() {[/CODE] gamethread = [CODE]new thread(this);[/CODE] gamethread.start(); } @override [CODE]public void run() {[/CODE] double interval = 1000000000.0 / fps; double nextdrawtime = system.nanotime() + [CODE]interval;[/CODE] [CODE]while (gamethread != null) {[/CODE] [CODE]if (!paused) {[/CODE] updategame(); } repa[CODE]int();[/CODE] [CODE]try {[/CODE] double remainingtime = nextdrawtime - system.nanotime(); remainingtime = math.max(remainingtime / 1_000_000, 0); thread.sleep((long) remainingtime); nextdrawtime += [CODE]interval;[/CODE] } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } [CODE]public void updategame() {[/CODE] clampplayerposition(); player.update(aim, mapper); // karakter öldü mü? if (player.gethealth() <= 0) { [CODE]if (!gameovertriggered) {[/CODE] gameovertriggered = true; // artık 2. kez girmesin system.out.pr[CODE]intln(""[info] player dead -> game over"");[/CODE] gameover(); } [CODE]return;[/CODE] // updategame durdur } // zombie zombies.remove[CODE]if(z -> {[/CODE] z.update(player, zombies, obstacles); if (!z.isalive()) { score += 10 * combo; combo++; combotimer = combo_reset_time; [CODE]if (z instanceof acidzombie) {[/CODE] acids.add(new acid(z.getx(), z.gety())); } guts.add(new guts(z.getx(), z.gety())); [CODE]return true;[/CODE] } [CODE]return false;[/CODE] }); if (zombies.isempty()) { // dalga bitti => +50 ammo player.getallweapons().foreach(w -> w.addreserveammo(50)); currentlevel++; [CODE]if (currentlevel <= max_level) {[/CODE] spawnzombies[CODE]forlevel(currentlevel);[/CODE] } [CODE]else {[/CODE] system.out.println(""[info] tüm level bitti. oyun sonu.""); game.updatetotalscore(score); // kapat gameover(); [CODE]return;[/CODE] } } // rockets rockets.foreach(r -> r.update(zombies)); rockets.removeif(r -> r.isexploded()); // smoke list<smokeeffect> tempsmoke = [CODE]new arraylist<>();[/CODE] [CODE]for (smokeeffect s : smokelist) {[/CODE] s.update(); if (s.isalive()) tempsmoke.add(s); } smokelist = tempsmoke; // acid list<acid> tempacids = [CODE]new arraylist<>();[/CODE] [CODE]for (acid a : acids) {[/CODE] a.update(); if (a.getbounds().intersects(player.getbounds())) { player.takedamage(5); playerbloods.add(new playerblood(player.getx(), player.gety())); } if (a.isalive()) tempacids.add(a); } acids = tempacids; // guts list<guts> tempguts = [CODE]new arraylist<>();[/CODE] [CODE]for (guts g : guts) {[/CODE] g.update(); if (g.isalive()) tempguts.add(g); } guts = tempguts; // bullets bullets.[CODE]foreach(bullet::update);[/CODE] [CODE]for (int i = 0;[/CODE] i < bullets.size(); i++) { bullet b = bullets.get(i); [CODE]if (b instanceof piercingbullet) {[/CODE] piercingbullet pb = (piercingbullet) b; [CODE]for (zombie z : zombies) {[/CODE] if (z.isalive() && z.getbounds().intersects(pb.getbounds())) { double angle = math.atan2(z.gety() - b.y, z.getx() - b.x); z.takedamage(10, angle); } } if (!pb.isalive()) { bullets.remove(i); i--; } } [CODE]else {[/CODE] boolean hit = false; [CODE]for (zombie z : zombies) {[/CODE] if (z.isalive() && z.getbounds().intersects(b.getbounds())) { double angle = math.atan2(z.gety() - b.y, z.getx() - b.x); z.takedamage(10, angle); hit = true; break; } } [CODE]if (hit) {[/CODE] bullets.remove(i); i--; } } } // playerblood playerbloods.remove[CODE]if(pb -> {[/CODE] pb.update(); return !pb.isalive(); }); shells.remove[CODE]if(sh -> {[/CODE] sh.update(); return !sh.isalive(); }); flashes.remove[CODE]if(f -> {[/CODE] f.update(); return !f.isalive(); }); checkitempickup(); [CODE]if (combotimer > 0) combotimer--;[/CODE] [CODE]else combo = 1;[/CODE] } private [CODE]void gameover() {[/CODE] game.updatetotalscore(score); joptionpane.showmessagedialog( this, ""game over!\nyour score = "" + score + ""\nyou reached level "" + currentlevel); // ana menüye dön parentwindow.[CODE]returntomenu();[/CODE] } private [CODE]void clampplayerposition() {[/CODE] int mapwidth = mapper.getmapwidth(); int mapheight = mapper.getmapheight(); int psize = player.getsize(); int minpos = mapper.gettilesize(); if (player.getx() < minpos) player.setx(minpos); if (player.gety() < minpos) player.sety(minpos); if (player.getx() > mapwidth - psize - minpos) player.setx(mapwidth - psize - minpos); if (player.gety() > mapheight - psize - minpos) player.sety(mapheight - psize - minpos); } private [CODE]void checkitempickup() {[/CODE] int tilesize = mapper.gettilesize(); rectangle bounds = player.getbounds(); int starttilex = bounds.x / tilesize; int starttiley = bounds.y / tilesize; int endtilex = (bounds.x + bounds.width - 1) / tilesize; int endtiley = (bounds.y + bounds.height - 1) / tilesize; int maxcol = mapper.getmap()[0].length - 1; int maxrow = mapper.getmap().length - 1; [CODE]for (int ty = starttiley;[/CODE] ty <= endtiley; ty++) { [CODE]for (int tx = starttilex;[/CODE] tx <= endtilex; tx++) { int clampedtx = math.max(0, math.min(tx, maxcol)); int clampedty = math.max(0, math.min(ty, maxrow)); int tile = mapper.gettile(clampedtx, clampedty); [CODE]if (tile == 6) {[/CODE] player.heal(20); mapper.settile(clampedtx, clampedty, 4); } [CODE]else if (tile == 7) {[/CODE] player.getallweapons().foreach(w -> w.addreserveammo(30)); mapper.settile(clampedtx, clampedty, 4); } } } } [CODE]public void savegame() {[/CODE] try (printwriter pw = new printwriter(""savegame.txt"")) { pw.pr[CODE]intln(currentlevel);[/CODE] pw.pr[CODE]intln(score);[/CODE] pw.println(player.getx()); pw.println(player.gety()); pw.println(player.gethealth()); int[][] mapdata = mapper.getmap(); pw.println(mapdata.length + "" "" + mapdata[0].length); [CODE]for (int r = 0;[/CODE] r < mapdata.length; r++) { [CODE]for (int c = 0;[/CODE] c < mapdata[0].length; c++) { pw.pr[CODE]int(mapdata[r][c] + "" "");[/CODE] } pw.pr[CODE]intln();[/CODE] } system.out.pr[CODE]intln(""[info] game saved!"");[/CODE] } [CODE]catch (exception ex) {[/CODE] ex.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadgame() {[/CODE] file f = new file(""savegame.txt""); if (!f.exists()) { system.out.pr[CODE]intln(""[info] no savegame found!"");[/CODE] [CODE]return;[/CODE] } [CODE]try (scanner sc = new scanner(f)) {[/CODE] currentlevel = sc.next[CODE]int();[/CODE] score = sc.next[CODE]int();[/CODE] int px = sc.next[CODE]int();[/CODE] int py = sc.next[CODE]int();[/CODE] int hp = sc.next[CODE]int();[/CODE] player.setx(px); player.sety(py); int rows = sc.next[CODE]int();[/CODE] int cols = sc.next[CODE]int();[/CODE] [CODE]int[][] mapdata = new int[rows][cols];[/CODE] [CODE]for (int r = 0;[/CODE] r < rows; r++) { [CODE]for (int c = 0;[/CODE] c < cols; c++) { mapdata[r][c] = sc.next[CODE]int();[/CODE] } } mapper.setmap(mapdata); obstacles = mapper.getsolidrectangles(); spawnzombies[CODE]forlevel(currentlevel);[/CODE] system.out.println(""[info] loaded game from savegame.txt""); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } private [CODE]void handlepausemenuinput(int keycode) {[/CODE] if (keycode == keyevent.vk_escape) { paused = false; } else if (keycode == keyevent.vk_s) { savegame(); } else if (keycode == keyevent.vk_e) { system.exit(0); } } @override [CODE]public void paintcomponent(graphics g) {[/CODE] super.pa[CODE]intcomponent(g);[/CODE] [CODE]if (!paused) {[/CODE] drawgame((graphics2d) g); } [CODE]else {[/CODE] drawgame((graphics2d) g); drawpausemenu((graphics2d) g); } } private [CODE]void drawgame(graphics2d g2dmaster) {[/CODE] graphics2d g2d = (graphics2d) g2dmaster.create(); g2d.setcolor(color.dark_gray); g2d.fillrect(0, 0, getwidth(), getheight()); double camx = player.getx() + player.getsize() / 2.0 - (swid / 2.0) / zoom; double camy = player.gety() + player.getsize() / 2.0 - (shei / 2.0) / zoom; int mapwidth = mapper.getmapwidth(); int mapheight = mapper.getmapheight(); double viewwidth = swid / zoom; double viewheight = shei / zoom; int margin = mapper.gettilesize(); [CODE]if (mapwidth - 2 * margin >= viewwidth) {[/CODE] [CODE]if (camx < margin) camx = margin;[/CODE] [CODE]else if (camx > mapwidth - viewwidth - margin) camx = mapwidth - viewwidth - margin;[/CODE] } [CODE]else {[/CODE] camx = (mapwidth - viewwidth) / 2.0; } [CODE]if (mapheight - 2 * margin >= viewheight) {[/CODE] [CODE]if (camy < margin) camy = margin;[/CODE] [CODE]else if (camy > mapheight - viewheight - margin) camy = mapheight - viewheight - margin;[/CODE] } [CODE]else {[/CODE] camy = (mapheight - viewheight) / 2.0; } g2d.scale(zoom, zoom); g2d.translate(-camx, -camy); mapper.draw(g2d, camx, camy, zoom); for (guts gobj : guts) gobj.draw(g2d); acids.foreach(a -> a.draw(g2d)); rockets.foreach(r -> r.draw(g2d)); shells.foreach(s -> s.draw(g2d)); flashes.foreach(f -> f.draw(g2d)); bullets.foreach(b -> b.draw(g2d)); zombies.foreach(z -> z.draw(g2d)); player.draw(g2d); playerbloods.foreach(pb -> pb.draw(g2d)); smokelist.foreach(sm -> sm.draw(g2d)); g2d.settrans[CODE]form(new affinetransform());[/CODE] drawhud(g2d); g2d.dispose(); } private [CODE]void drawhud(graphics2d g2d) {[/CODE] g2d.setfont(new font(""arial"", font.bold, 18)); fontmetrics fm = g2d.getfontmetrics(); [CODE]int leftx = 20;[/CODE] [CODE]int lefty = 30;[/CODE] [CODE]int lineheight = 22;[/CODE] g2d.setcolor(color.white); g2d.drawstring(""weapon: "" + player.getcurrentweapon().getname(), leftx, lefty); g2d.drawstring(""ammo: "" + player.getcurrentammo() + "" / "" + player.getmaxammo(), leftx, lefty + lineheight); g2d.drawstring(""reserve: "" + player.getcurrentweapon().getreserveammo(), leftx, lefty + lineheight * 2); // hp, score, level kısımları string healthtext = ""hp: "" + player.gethealth(); [CODE]string scoretext = ""score: "" + score;[/CODE] [CODE]string leveltext = ""level: "" + currentlevel;[/CODE] [CODE]int rightmargin = 20;[/CODE] int rightx = getwidth() - fm.[CODE]stringwidth(healthtext) - rightmargin;[/CODE] [CODE]int righty = 30;[/CODE] g2d.draw[CODE]string(healthtext, rightx + 720, righty);[/CODE] rightx = getwidth() - fm.[CODE]stringwidth(scoretext) - rightmargin;[/CODE] righty += lineheight; g2d.draw[CODE]string(scoretext, rightx + 720, righty);[/CODE] rightx = getwidth() - fm.[CODE]stringwidth(leveltext) - rightmargin;[/CODE] righty += lineheight; g2d.draw[CODE]string(leveltext, rightx + 720, righty);[/CODE] // === combo display === [CODE]if (combo > 1) {[/CODE] // örneğin combo'yu sol tarafta, ammo/reserve altına yazarız g2d.setcolor(color.yellow); g2d.draw[CODE]string(""combo x"" + combo, leftx, lefty + lineheight * 4);[/CODE] g2d.setcolor(color.white); } } private [CODE]void drawpausemenu(graphics2d g2d) {[/CODE] g2d.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2d.fillrect(0, 0, getwidth(), getheight()); g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 24)); [CODE]string pausedtext = ""game paused (esc->resume, s->save, e->exit)"";[/CODE] int strw = g2d.getfontmetrics().[CODE]stringwidth(pausedtext);[/CODE] g2d.draw[CODE]string(pausedtext, (getwidth() - strw) / 2, getheight() / 2);[/CODE] } // mouse @override [CODE]public void mousewheelmoved(mousewheelevent e) {[/CODE] [CODE]if (paused) return;[/CODE] int notches = e.getwheelrotation(); [CODE]if (notches > 0) {[/CODE] player.nextweapon(); } [CODE]else if (notches < 0) {[/CODE] player.previousweapon(); } } @override [CODE]public void keypressed(keyevent e) {[/CODE] [CODE]if (!paused) {[/CODE] player.keypressed(e); if (e.getkeycode() == keyevent.vk_r) { if (player.getcurrentweapon().needsreload() && !player.isreloading()) { player.startreload(); } } else if (e.getkeycode() == keyevent.vk_escape) { paused = true; } } [CODE]else {[/CODE] handlepausemenuinput(e.getkeycode()); } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] player.keyreleased(e); } @override [CODE]public void keytyped(keyevent e) {[/CODE] } @override [CODE]public void mouseclicked(mouseevent e) {[/CODE] [CODE]if (paused) return;[/CODE] if (player.isreloading()) [CODE]return;[/CODE] point muzzle = player.getmuzzleposition(); double angle = player.getangletomouse(); weapon weapon = player.getcurrentweapon(); if (!weapon.canshoot()) [CODE]return;[/CODE] weapon.fire(angle, muzzle.x, muzzle.y, bullets, rockets, smokelist); [CODE]if (!(weapon instanceof rocket)) {[/CODE] flashes.add(new muzzleflash(muzzle.x, muzzle.y, angle)); shells.add(new shellcasing(muzzle.x, muzzle.y)); } player.setstate(player.playerstate.shoot); } @override [CODE]public void mousemoved(mouseevent e) {[/CODE] [CODE]if (!paused) {[/CODE] aim = getmouseworldposition(e.getpo[CODE]int());[/CODE] } } @override [CODE]public void mousedragged(mouseevent e) {[/CODE] mousemoved(e); } @override [CODE]public void mousepressed(mouseevent e) {[/CODE] } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] } @override [CODE]public void mouseentered(mouseevent e) {[/CODE] } @override [CODE]public void mouseexited(mouseevent e) {[/CODE] } [CODE]public point getmouseworldposition(point screenmouse) {[/CODE] double camx = player.getx() + player.getsize() / 2.0 - (swid / 2.0) / zoom; double camy = player.gety() + player.getsize() / 2.0 - (shei / 2.0) / zoom; return new point( (int) ((screenmouse.x / zoom) + camx), (int) ((screenmouse.y / zoom) + camy)); } } import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.list; import javax.imageio.imageio; [CODE]public class jumperzombie extends zombie {[/CODE] private boolean jumping = false; private [CODE]int jumpcooldown = 120;[/CODE] // 2 saniye bekleme private [CODE]int jumptimer = 0;[/CODE] private [CODE]int jumpduration = 12;[/CODE] private [CODE]int jumpframe = 0;[/CODE] private final double attack_range = 20; [CODE]public jumperzombie(int x, int y) {[/CODE] super(x, y, 70, 1.7, 30); walkframes = [CODE]new bufferedimage[9];[/CODE] attackframes = [CODE]new bufferedimage[9];[/CODE] [CODE]try {[/CODE] [CODE]for (int i = 0;[/CODE] i < 9; i++) { walkframes[i] = resizeimage(imageio.read(new file(string.format( ""sprites/zombie/jumperzombie/walk/%02d_walk.png"", i))), 32, 32); attackframes[i] = resizeimage(imageio.read(new file(string.format( ""sprites/zombie/jumperzombie/attack/%02d_attack.png"", i))), 32, 32); } } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] jumperzombie sprite'ları yüklenemedi.""); } } @override [CODE]public void update(player player, list<zombie> zombies, list<rectangle> obstacles) {[/CODE] [CODE]if (!alive) return;[/CODE] double dx = player.getx() - x; double dy = player.gety() - y; double distance = math.sqrt(dx * dx + dy * dy); // === saldırı === [CODE]if (distance < attack_range) {[/CODE] [CODE]if (attackcooldown <= 0) {[/CODE] player.takedamage(damage); attackcooldown = defaultcooldown; attackindex = 0; attackcounter = 0; isattacking = true; } } // === zıplama hareketi === [CODE]if (!isattacking && distance >= attack_range) {[/CODE] [CODE]if (!jumping && jumptimer <= 0) {[/CODE] jumping = true; jumpframe = 0; } [CODE]if (jumping) {[/CODE] double movex = speed * 3 * dx / distance; double movey = speed * 3 * dy / distance; rectangle nextbounds = [CODE]new rectangle((int) (x + movex), (int) (y + movey), 32, 32);[/CODE] boolean blocked = false; [CODE]for (zombie z : zombies) {[/CODE] if (z != this && z.isalive() && nextbounds.intersects(z.getbounds())) { blocked = true; break; } } [CODE]for (rectangle r : obstacles) {[/CODE] if (nextbounds.[CODE]intersects(r)) {[/CODE] blocked = true; break; } } [CODE]if (!blocked) {[/CODE] x += movex; y += movey; } walkcounter++; [CODE]if (walkcounter >= walkdelay) {[/CODE] walkcounter = 0; walkindex = (walkindex + 1) % walkframes.length; } jumpframe++; [CODE]if (jumpframe >= jumpduration) {[/CODE] jumping = false; jumptimer = jumpcooldown; } } [CODE]else {[/CODE] jumptimer--; } } // === cooldown yönetimi === [CODE]if (attackcooldown > 0) attackcooldown--;[/CODE] // === animasyonlar === [CODE]if (isattacking) {[/CODE] attackcounter++; [CODE]if (attackcounter >= attackdelay) {[/CODE] attackcounter = 0; attackindex++; if (attackindex >= attackframes.length) { attackindex = 0; isattacking = false; } } } } @override [CODE]public void draw(graphics2d g2d) {[/CODE] bufferedimage frame = isattacking ? attackframes[attackindex] : walkframes[walkindex]; g2d.drawimage(frame, x, y, null); } } import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.list; import javax.imageio.imageio; [CODE]public class tankzombie extends zombie {[/CODE] private final double attack_range = 20; [CODE]public tankzombie(int x, int y) {[/CODE] super(x, y, 300, 1.0, 25); walkframes = [CODE]new bufferedimage[12];[/CODE] attackframes = [CODE]new bufferedimage[9];[/CODE] [CODE]try {[/CODE] [CODE]for (int i = 0;[/CODE] i < 12; i++) { string path = string.format(""sprites/zombie/tankzombie/tankwalk/%02d_tankzombie_walk.png"", i); walkframes[i] = resizeimage(imageio.read([CODE]new file(path)), 32, 32);[/CODE] } [CODE]for (int i = 0;[/CODE] i < 9; i++) { string path = string.format(""sprites/zombie/tankzombie/tankattack/%02d_tankzombie_hit.png"", i); attackframes[i] = resizeimage(imageio.read([CODE]new file(path)), 32, 32);[/CODE] } } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] tankzombie sprite'ları yüklenemedi.""); } } @override [CODE]public void update(player player, list<zombie> zombies, list<rectangle> obstacles) {[/CODE] [CODE]if (!alive) return;[/CODE] double dx = player.getx() - x; double dy = player.gety() - y; double distance = math.sqrt(dx * dx + dy * dy); // === saldiri === [CODE]if (distance <= attack_range) {[/CODE] [CODE]if (attackcooldown <= 0) {[/CODE] player.takedamage(damage); attackcooldown = defaultcooldown; attackindex = 0; attackcounter = 0; isattacking = true; } } // === hareket === [CODE]if (!isattacking && distance > attack_range) {[/CODE] double nextx = x + speed * dx / distance; double nexty = y + speed * dy / distance; rectangle nextbounds = [CODE]new rectangle((int) nextx, (int) nexty, 32, 32);[/CODE] boolean blocked = false; [CODE]for (zombie z : zombies) {[/CODE] if (z != this && z.isalive() && nextbounds.intersects(z.getbounds())) { blocked = true; break; } } [CODE]for (rectangle rect : obstacles) {[/CODE] if (nextbounds.[CODE]intersects(rect)) {[/CODE] blocked = true; break; } } [CODE]if (!blocked) {[/CODE] x = ([CODE]int) nextx;[/CODE] y = ([CODE]int) nexty;[/CODE] } } // === saldiri cooldown === [CODE]if (attackcooldown > 0) attackcooldown--;[/CODE] // === ani̇masyon === [CODE]if (isattacking) {[/CODE] attackcounter++; [CODE]if (attackcounter >= attackdelay) {[/CODE] attackcounter = 0; attackindex++; if (attackindex >= attackframes.length) { attackindex = 0; isattacking = false; } } } [CODE]else {[/CODE] walkcounter++; [CODE]if (walkcounter >= walkdelay) {[/CODE] walkcounter = 0; walkindex = (walkindex + 1) % walkframes.length; } } } @override [CODE]public void draw(graphics2d g2d) {[/CODE] bufferedimage frame = isattacking ? attackframes[attackindex] : walkframes[walkindex]; g2d.drawimage(frame, ([CODE]int) x, (int) y, null);[/CODE] } } import java.awt.graphics2d; import java.awt.image; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class muzzleflash {[/CODE] private [CODE]int x, y;[/CODE] private [CODE]int life = 3;[/CODE] private double angle; private bufferedimage flashimage; [CODE]public muzzleflash(int x, int y, double angle) {[/CODE] this.x = x; this.y = y; this.angle = angle; [CODE]try {[/CODE] flashimage = imageio.read(new file(""sprites/effects/bullet.png"")); flashimage = resizeimage(flashimage, 16, 16); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""[hata] muzzle flash yüklenemedi.""); } } [CODE]public void update() {[/CODE] l[CODE]ife--;[/CODE] } [CODE]public boolean isalive() {[/CODE] [CODE]return life > 0;[/CODE] } [CODE]public void draw(graphics2d g) {[/CODE] affinetransform old = g.gettrans[CODE]form();[/CODE] g.rotate(angle, x, y); g.drawimage(flashimage, x - flashimage.getwidth() / 2, y - flashimage.getheight() / 2, null); g.settrans[CODE]form(old);[/CODE] } private bufferedimage resizeimage(bufferedimage originalimage, [CODE]int targetwidth, int targetheight) {[/CODE] image scaledimage = originalimage.getscaledinstance(targetwidth, targetheight, image.scale_smooth); bufferedimage resizedimage = new bufferedimage(targetwidth, targetheight, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2d = resizedimage.creategraphics(); g2d.drawimage(scaledimage, 0, 0, null); g2d.dispose(); [CODE]return resizedimage;[/CODE] } } [CODE]public class game {[/CODE] [CODE]public static int totalscore = 0;[/CODE] [CODE]public static int maxscore = 0;[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]new mainmenu();[/CODE] } [CODE]public static void updatetotalscore(int localscore) {[/CODE] totalscore += localscore; [CODE]if (localscore > maxscore) {[/CODE] maxscore = localscore; } } } import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.ioexception; import java.util.arraylist; import java.util.list; import javax.imageio.imageio; [CODE]public class tilemanager {[/CODE] [CODE]int[][] map;[/CODE] bufferedimage[] tiles; boolean[] solid; final [CODE]int tilesize = 32;[/CODE] [CODE]int mapw = 45;[/CODE] [CODE]int maph = 30;[/CODE] [CODE]public tilemanager() {[/CODE] generaterandommap(); loadtiles(); } private [CODE]void generaterandommap() {[/CODE] map = [CODE]new int[maph][mapw];[/CODE] [CODE]for (int row = 0;[/CODE] row < maph; row++) { [CODE]for (int col = 0;[/CODE] col < mapw; col++) { double random = math.random(); if (random < 0.1) { map[row][col] = 0; } else if (random < 0.15) { map[row][col] = 1; } else if (random < 0.5) { map[row][col] = 2; } else if (random < 0.97) { map[row][col] = 3; } else if (random < 0.99) { map[row][col] = 4; } else if (random < 1.00) { map[row][col] = 5; } } } [CODE]for (int i = 0;[/CODE] i < 5; i++) { int r = (int) (math.random() * maph); int c = (int) (math.random() * mapw); [CODE]if (map[r][c] != 4 && map[r][c] != 5) {[/CODE] map[r][c] = 6; // medkit } } [CODE]for (int i = 0;[/CODE] i < 5; i++) { int r = (int) (math.random() * maph); int c = (int) (math.random() * mapw); [CODE]if (map[r][c] != 4 && map[r][c] != 5) map[r][c] = 7;[/CODE] // ammo } [CODE]for (int row = 13;[/CODE] row <= 16; row++) { [CODE]for (int col = 23;[/CODE] col <= 26; col++) { map[row][col] = 0; } } system.out.pr[CODE]intln(""[success] map generated succesfully!"");[/CODE] } private [CODE]void loadtiles() {[/CODE] tiles = [CODE]new bufferedimage[8];[/CODE] solid = [CODE]new boolean[8];[/CODE] [CODE]try {[/CODE] tiles[0] = imageio.read(getclass().getresource(""/sprites/grounds/0.jpg"")); solid[0] = false; tiles[1] = imageio.read(getclass().getresource(""/sprites/grounds/1.jpg"")); solid[1] = false; tiles[2] = imageio.read(getclass().getresource(""/sprites/grounds/2.jpg"")); solid[2] = false; tiles[3] = imageio.read(getclass().getresource(""/sprites/grounds/3.jpg"")); solid[3] = false; tiles[4] = imageio.read(getclass().getresource(""/sprites/grounds/4.png"")); solid[4] = true; tiles[5] = imageio.read(getclass().getresource(""/sprites/grounds/5.png"")); solid[5] = true; tiles[6] = imageio.read(getclass().getresource(""/sprites/grounds/6.png"")); solid[6] = false; tiles[7] = imageio.read(getclass().getresource(""/sprites/grounds/7.png"")); solid[7] = false; } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""[hata] tile map yükleni̇rken file io hata oluştu!"");[/CODE] } } [CODE]public void setmap(int[][] newmap) {[/CODE] this.map = [CODE]newmap;[/CODE] } // dış alanları da bir border tile (örneğin tiles[0]) ile dolduruyoruz [CODE]public void draw(graphics2d g2d, double camx, double camy, double zoom) {[/CODE] [CODE]int startcol = (int) (camx / tilesize);[/CODE] [CODE]int startrow = (int) (camy / tilesize);[/CODE] int endcol = startcol + (int) (gamepanel.swid / tilesize / zoom) + 2; int endrow = startrow + (int) (gamepanel.shei / tilesize / zoom) + 2; [CODE]for (int row = startrow;[/CODE] row < endrow; row++) { [CODE]for (int col = startcol;[/CODE] col < endcol; col++) { [CODE]int x = col * tilesize;[/CODE] [CODE]int y = row * tilesize;[/CODE] bufferedimage tileimage; if (row >= 0 && row < map.length && col >= 0 && col < map[0].length) { [CODE]int tilenum = map[row][col];[/CODE] tileimage = tiles[tilenum]; } [CODE]else {[/CODE] // eğer map dışındaysa, border tile olarak tiles[0] kullanıyoruz. tileimage = tiles[4]; } g2d.drawimage(tileimage, x, y, null); } } } [CODE]public list<rectangle> getsolidrectangles() {[/CODE] list<rectangle> list = [CODE]new arraylist<>();[/CODE] [CODE]for (int y = 0;[/CODE] y < maph; y++) { [CODE]for (int x = 0;[/CODE] x < mapw; x++) { [CODE]int tile = map[y][x];[/CODE] [CODE]if (tile == 4 || tile == 5) {[/CODE] list.add([CODE]new rectangle(x * tilesize, y * tilesize, tilesize, tilesize));[/CODE] } } } [CODE]return list;[/CODE] } [CODE]public int[][] getmap() {[/CODE] [CODE]return map;[/CODE] } [CODE]public boolean issolid(int x, int y) {[/CODE] [CODE]int col = x / tilesize;[/CODE] [CODE]int row = y / tilesize;[/CODE] [CODE]if (row < 0 || col < 0 || row >= maph || col >= mapw) return true;[/CODE] [CODE]return solid[map[row][col]];[/CODE] } [CODE]public int gettile(int x, int y) {[/CODE] [CODE]int col = x / tilesize;[/CODE] [CODE]int row = y / tilesize;[/CODE] [CODE]if (row < 0 || col < 0 || row >= maph || col >= mapw) return -1;[/CODE] [CODE]return map[row][col];[/CODE] } [CODE]public void settile(int x, int y, int value) {[/CODE] [CODE]int col = x / tilesize;[/CODE] [CODE]int row = y / tilesize;[/CODE] [CODE]if (row >= 0 && col >= 0 && row < maph && col < mapw) {[/CODE] map[row][col] = value; } } // piksel cinsinden harita genişliği [CODE]public int getmapwidth() {[/CODE] return map[0].length * tilesize; } // piksel cinsinden harita yüksekliği [CODE]public int getmapheight() {[/CODE] return map.length * tilesize; } [CODE]public int gettilesize() {[/CODE] [CODE]return tilesize;[/CODE] } } import java.awt.*; import java.awt.event.keyevent; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.*; import java.util.list; import javax.imageio.imageio; [CODE]public class player {[/CODE] private [CODE]int x, y;[/CODE] private final [CODE]int speed = 3;[/CODE] private [CODE]int health = 100;[/CODE] private final [CODE]int size = 32;[/CODE] private boolean isdead = false; private boolean up, down, left, right; private [CODE]int frameindex = 0, framecounter = 0, framedelay = 8;[/CODE] private double anglemouse = 0; private [CODE]int centerx, centery;[/CODE] private list<weapon> allweapons = [CODE]new arraylist<>();[/CODE] private weapon currentweapon; private [CODE]int currentweaponindex = 0;[/CODE] private playerstate currentstate = playerstate.idle; private boolean isreloading = false; private [CODE]int reloadframe = 0;[/CODE] private final map<[CODE]string, map<playerstate, bufferedimage[]>> animations = new hashmap<>();[/CODE] [CODE]public enum playerstate {[/CODE] idle, move, shoot, reload } private list<playerblood> bloodlist; [CODE]public void setbloodlist(list<playerblood> bloodlist) {[/CODE] this.bloodlist = bloodlist; } [CODE]public player(int x, int y) {[/CODE] this.x = x; this.y = y; // farkli si̇lahlar allweapons.add([CODE]new shotgun());[/CODE] allweapons.add([CODE]new rifle());[/CODE] allweapons.add([CODE]new handgun());[/CODE] allweapons.add([CODE]new sniper());[/CODE] allweapons.add([CODE]new rocket());[/CODE] currentweapon = allweapons.get(2); loadallanimations(); } private [CODE]void loadallanimations() {[/CODE] [CODE]try {[/CODE] loadweaponanimations(""handgun"", 20, 3, 15); loadweaponanimations(""r[CODE]ifle"", 20, 3, 20);[/CODE] loadweaponanimations(""shotgun"", 20, 3, 20); loadweaponanimations(""rocket"", 20, 3, 20); loadweaponanimations(""sniper"", 20, 3, 20); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""[hata] görseller yüklenemedi̇!"");[/CODE] } system.out.pr[CODE]intln(""[check] player animation successfully uploaded"");[/CODE] } private [CODE]void loadweaponanimations(string weapon, int idlemove, int shoot, int reload) throws ioexception {[/CODE] map<playerstate, bufferedimage[]> map = [CODE]new hashmap<>();[/CODE] map.put(playerstate.idle, loadframes(weapon, ""idle"", idlemove)); map.put(playerstate.move, loadframes(weapon, ""move"", idlemove)); map.put(playerstate.shoot, loadframes(weapon, ""shoot"", shoot)); map.put(playerstate.reload, loadframes(weapon, ""reload"", reload)); animations.put(weapon.tolowercase(), map); } private bufferedimage[] loadframes([CODE]string weapon, string state, int count) throws ioexception {[/CODE] bufferedimage[] frames = [CODE]new bufferedimage[count];[/CODE] [CODE]for (int i = 0;[/CODE] i < count; i++) { string path = string.format(""sprites/player/%s/%s/survivor-%s_%s_%d.png"", weapon, state, state, weapon, i); file f = [CODE]new file(path);[/CODE] if (!f.exists()) break; // tolerans bufferedimage original = imageio.read(f); frames[i] = resizeimage(original, size, size); } [CODE]return frames;[/CODE] } private bufferedimage resizeimage(bufferedimage original, [CODE]int w, int h) {[/CODE] [CODE]if (original == null) return null;[/CODE] image scaled = original.getscaledinstance(w, h, image.scale_smooth); bufferedimage resized = new bufferedimage(w, h, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2d = resized.creategraphics(); g2d.drawimage(scaled, 0, 0, null); g2d.dispose(); [CODE]return resized;[/CODE] } [CODE]public void update(point mousepos, tilemanager tilemanager) {[/CODE] [CODE]int nextx = x + (right ? speed : 0) - (left ? speed : 0);[/CODE] [CODE]int nexty = y + (down ? speed : 0) - (up ? speed : 0);[/CODE] [CODE]if (!isblocked(nextx, y, tilemanager)) x = nextx;[/CODE] [CODE]if (!isblocked(x, nexty, tilemanager)) y = nexty;[/CODE] centerx = x + size / 2; centery = y + size / 2; anglemouse = math.atan2(mousepos.y - centery, mousepos.x - centerx); [CODE]if (isreloading) {[/CODE] reloadframe++; string name = currentweapon.getname().tolowercase(); map<playerstate, bufferedimage[]> map = animations.get(name); [CODE]if (map != null) {[/CODE] bufferedimage[] reloadframes = map.get(playerstate.reload); if (reloadframes != null && reloadframe >= reloadframes.length * framedelay) { isreloading = false; currentweapon.reload(); } } } framecounter++; [CODE]if (framecounter >= framedelay) {[/CODE] framecounter = 0; string animkey = currentweapon.getname().tolowercase().replace("" "", ""_""); map<playerstate, bufferedimage[]> statemap = animations.get(animkey); [CODE]if (statemap != null) {[/CODE] bufferedimage[] frames = statemap.get(currentstate); if (frames != null && frames.length > 0) { frameindex = (frameindex + 1) % frames.length; } } } [CODE]if (!isreloading) {[/CODE] [CODE]if (up || down || left || right) {[/CODE] setstate(playerstate.move); } [CODE]else {[/CODE] setstate(playerstate.idle); } } [CODE]else {[/CODE] setstate(playerstate.reload); } } private boolean isblocked([CODE]int testx, int testy, tilemanager map) {[/CODE] return map.issolid(testx, testy) || map.issolid(testx + size - 1, testy) || map.issolid(testx, testy + size - 1) || map.issolid(testx + size - 1, testy + size - 1); } [CODE]public void draw(graphics2d g2d) {[/CODE] string animkey = currentweapon.getname().tolowercase().replace("" "", ""_""); bufferedimage frame = null; map<playerstate, bufferedimage[]> statemap = animations.get(animkey); [CODE]if (statemap != null) {[/CODE] bufferedimage[] frames = statemap.get(currentstate); if (frames != null && frames.length > 0) { frame = frames[frameindex % frames.length]; } } [CODE]if (frame == null) {[/CODE] // system.out.pr[CODE]intln(""[hata] frame bulunamadı: "" + animkey + "" "" + // currentstate);[/CODE] [CODE]return;[/CODE] } affinetransform old = g2d.gettrans[CODE]form();[/CODE] g2d.rotate(anglemouse, centerx, centery); g2d.drawimage(frame, x, y, null); g2d.settrans[CODE]form(old);[/CODE] } // scroll [CODE]public void nextweapon() {[/CODE] if (!allweapons.isempty()) { currentweaponindex = (currentweaponindex + 1) % allweapons.size(); setweapon(allweapons.get(currentweaponindex)); } } [CODE]public void previousweapon() {[/CODE] if (!allweapons.isempty()) { currentweaponindex = (currentweaponindex - 1 + allweapons.size()) % allweapons.size(); setweapon(allweapons.get(currentweaponindex)); } } private [CODE]void setweapon(weapon w) {[/CODE] currentweapon = w; int idx = allweapons.indexof(w); [CODE]if (idx >= 0) currentweaponindex = idx;[/CODE] frameindex = 0; } [CODE]public void keypressed(keyevent e) {[/CODE] switch (e.getkeycode()) { case keyevent.vk_w: up = true; break; case keyevent.vk_s: down = true; break; case keyevent.vk_a: left = true; break; case keyevent.vk_d: right = true; break; } } [CODE]public void keyreleased(keyevent e) {[/CODE] switch (e.getkeycode()) { case keyevent.vk_w: up = false; break; case keyevent.vk_s: down = false; break; case keyevent.vk_a: left = false; break; case keyevent.vk_d: right = false; break; } } [CODE]public void setstate(playerstate s) {[/CODE] [CODE]if (currentstate != s) {[/CODE] currentstate = s; frameindex = 0; } } [CODE]public void startreload() {[/CODE] if (!isreloading && currentweapon.needsreload()) { isreloading = true; setstate(playerstate.reload); reloadframe = 0; } } // get/set [CODE]public weapon getcurrentweapon() {[/CODE] [CODE]return currentweapon;[/CODE] } [CODE]public list<weapon> getallweapons() {[/CODE] [CODE]return allweapons;[/CODE] } [CODE]public int getcurrentammo() {[/CODE] return currentweapon.getammo(); } [CODE]public int getmaxammo() {[/CODE] return currentweapon.getmagsize(); } [CODE]public int getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public int gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public void setx(int val) {[/CODE] x = val; } [CODE]public void sety(int val) {[/CODE] y = val; } [CODE]public int getsize() {[/CODE] [CODE]return size;[/CODE] } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public boolean isreloading() {[/CODE] [CODE]return isreloading;[/CODE] } [CODE]public double getangletomouse() {[/CODE] [CODE]return anglemouse;[/CODE] } [CODE]public void heal(int amount) {[/CODE] health = math.min(100, health + amount); } [CODE]public void takedamage(int dmg) {[/CODE] health -= dmg; [CODE]if (health <= 0) {[/CODE] isdead = true; } [CODE]if (bloodlist != null) {[/CODE] bloodlist.add([CODE]new playerblood(x, y));[/CODE] } } [CODE]public point getmuzzleposition() {[/CODE] [CODE]int offsetx = 15, offsety = 10;[/CODE] double rx = math.cos(anglemouse) * offsetx - math.sin(anglemouse) * offsety; double ry = math.sin(anglemouse) * offsetx + math.cos(anglemouse) * offsety; [CODE]return new point((int) (x + size / 2 + rx), (int) (y + size / 2 + ry));[/CODE] } [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, size, size);[/CODE] } }"
2384475,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int arr[] = {[/CODE] 5, 4, 1, 2 }; cocktailsort(arr, true); [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static void cocktailsort(int[] arr, boolean x) {[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) {[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i + 1]; arr[i + 1] = temp; } } if (arr.length < 2) [CODE]return;[/CODE] { [CODE]if (x) {[/CODE] arr = bubble1(arr); x = false; } [CODE]else {[/CODE] arr = bubble2(arr); x = true; } cocktailsort(arr, x); } } [CODE]public static int[] bubble1(int[] arr) {[/CODE] int newarr[] = new int[arr.length - 1]; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]newarr[i] = arr[i];[/CODE] } [CODE]for (int i = 0;[/CODE] i < newarr.length - 1; i++) { [CODE]if (newarr[i] > newarr[i + 1]) {[/CODE] [CODE]int temp = newarr[i];[/CODE] [CODE]newarr[i] = newarr[i + 1];[/CODE] [CODE]newarr[i + 1] = temp;[/CODE] } } [CODE]return newarr;[/CODE] } [CODE]public static int[] bubble2(int[] arr) {[/CODE] int newarr[] = new int[arr.length - 1]; [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]newarr[i] = arr[i];[/CODE] } for (int i = newarr.length - 1; i > 0; i--) { [CODE]if (newarr[i] < newarr[i - 1]) {[/CODE] [CODE]int temp = newarr[i];[/CODE] [CODE]newarr[i] = newarr[i - 1];[/CODE] [CODE]newarr[i - 1] = temp;[/CODE] } } [CODE]return newarr;[/CODE] } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(2));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i == 1) return count;[/CODE] [CODE]if (i % 2 == 0) count = 1 + collatz(i / 2);[/CODE] [CODE]else if (i % 2 == 1) count = 1 + collatz(i * 3 + 1);[/CODE] [CODE]return count;[/CODE] } } [CODE]class sayac {[/CODE] [CODE]public string x;[/CODE] [CODE]public sayac(string x) {[/CODE] this.x = x; } [CODE]public int say() {[/CODE] [CODE]int res = say2(x);[/CODE] [CODE]return res;[/CODE] } [CODE]public int say2(string x) {[/CODE] [CODE]int res = 0;[/CODE] if (x.length() < 1) [CODE]return res;[/CODE] if (x.charat(0) != '1') { res = res + say2(x.sub[CODE]string(1));[/CODE] } else if (x.charat(0) == '1') res = res + 1 + say2(x.sub[CODE]string(1));[/CODE] [CODE]return res;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); system.out.println(s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(sarki.sanatci + ""-"" + sarki.isim + "" [ozellik: "" + met.metalozellik + ""]""); } // bu kismi cikti ornegini saglayacak sekilde doldurun } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] sarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]string rocko;[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); this.rocko = ""huzurlu ve nostaljik""; } @override [CODE]void oynat() {[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasiko;[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] super(isim, sanatci); this.klasiko = ""haf[CODE]if ve sakin"";[/CODE] } @override [CODE]void oynat() {[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] // karısık calma yapamadım :( tersten caldırdım. sarkilistesi = sarkilistesi.reversed(); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki) {[/CODE] rocksarki r = (rocksarki) sarki; system.out.pr[CODE]intln(""[bilgi] ses duzeyi : yuksek"");[/CODE] system.out.println( ""[rock] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + r.rocko + "")""); system.out.pr[CODE]intln(""[bilgi] ses duzeyi : normal"");[/CODE] } [CODE]else if (sarki instanceof metalsarki) {[/CODE] metalsarki met = (metalsarki) sarki; system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + met.metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] klasiksarki k = (klasiksarki) sarki; system.out.println( ""[klasik] "" + sarki.sanatci + "" - "" + sarki.isim + ""("" + k.klasiko + "")""); } } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] this.strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji instanceof siralicalma) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else if (strateji instanceof karisikcalma) {[/CODE] strateji.cal(sarkilistesi); } [CODE]else if (strateji instanceof rockcuozelcalma) {[/CODE] strateji.cal(sarkilistesi); } } } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java [CODE]string sınıfı metotları 4 package bil211lab3;[/CODE] import java.io.file; import java.io.fileinputstream; import java.io.fileoutputstream; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class kelimesayaci {[/CODE] [CODE]public static void main(string[] args) {[/CODE] file file = new file(""bil211lab3\\kelimeler.txt""); file file2 = new file(""bil211lab3\\metin.txt""); arraylist<[CODE]string> klmlist = readkelime(file);[/CODE] arraylist<[CODE]string> mtnlist = readmetin(file2);[/CODE] writesonuc(""bil211lab3\\sonuc.txt"", klmlist, method(klmlist, mtnlist)); } [CODE]static arraylist<string> readkelime(file filename) {[/CODE] arraylist<[CODE]string> strlist = new arraylist<string>();[/CODE] scanner scan = null; [CODE]try {[/CODE] scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] if (!filename.exists()) { throw new dosyabulunamadiexception(filename.getname() + ""bulunamadı""); } while (scan.hasnext()) { string x = scan.next().tolowercase(); strlist.add(x); } [CODE]return strlist;[/CODE] } [CODE]catch (dosyabulunamadiexception e) {[/CODE] system.out.println(""hata: "" + e.getmessage()); } [CODE]catch (exception e) {[/CODE] system.out.println(""error "" + e.getmessage()); } finally { scan.close(); } [CODE]return strlist;[/CODE] } [CODE]static arraylist<string> readmetin(file filename) {[/CODE] arraylist<[CODE]string> strlist = new arraylist<string>();[/CODE] arraylist<[CODE]string> strlist2 = new arraylist<string>();[/CODE] scanner scan = null; [CODE]try {[/CODE] scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] if (!filename.exists()) { throw new dosyabulunamadiexception(filename.getname() + ""bulunamadı""); } while (scan.hasnext()) { string x = scan.next().tolowercase(); strlist.add(x); } [CODE]for (string s : strlist) {[/CODE] s = s.replaceall(""\\p{punct}"", """"); strlist2.add(s); } [CODE]return strlist2;[/CODE] } [CODE]catch (dosyabulunamadiexception e) {[/CODE] system.out.println(""hata: "" + e.getmessage()); } [CODE]catch (exception e) {[/CODE] system.out.println(""error "" + e.getmessage()); } finally { scan.close(); } [CODE]return strlist2;[/CODE] } [CODE]static void writesonuc(string filename, arraylist<string> klmlist, int[] c) {[/CODE] pr[CODE]intwriter p = null;[/CODE] [CODE]try {[/CODE] p = [CODE]new printwriter(new fileoutputstream(filename));[/CODE] [CODE]for (int i = 0;[/CODE] i < klmlist.size(); i++) { [CODE]if (c[i] == 0) {[/CODE] throw new kelimebulunamadiexception(klmlist.get(i) + "" metinde bulunamadı.""); } [CODE]else {[/CODE] p.println(klmlist.get(i) + "" "" + c[i]); } } } [CODE]catch (kelimebulunamadiexception e) {[/CODE] p.println(""hata: "" + e.getmessage()); } [CODE]catch (exception e) {[/CODE] system.out.pr[CODE]intln(""error"");[/CODE] } finally { p.close(); } } [CODE]static int[] method(arraylist<string> klmlist, arraylist<string> mtnlist) {[/CODE] int[] count = new int[klmlist.size()]; [CODE]for (int j = 0;[/CODE] j < klmlist.size(); j++) { [CODE]for (int i = 0;[/CODE] i < mtnlist.size(); i++) { if (mtnlist.get(i).equals(klmlist.get(j))) { count[j]++; } } } [CODE]return count;[/CODE] } } [CODE]class inputexception extends exception {[/CODE] [CODE]public inputexception(string message) {[/CODE] super(message); } } [CODE]class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]public dosyabulunamadiexception(string message) {[/CODE] super(message); } } [CODE]class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception(string message) {[/CODE] super(message); } } [CODE]class kelimebulunamadiexception extends exception {[/CODE] [CODE]public kelimebulunamadiexception(string message) {[/CODE] super(message); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon [CODE]package bil211lab4;[/CODE] import java.nio.file.watchevent; import java.util.arraylist; import java.util.collection; import java.util.collections; import java.util.comparator; import java.util.list; [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println("": "" + weaponclass.getname()); weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); inventory<item> envantor = [CODE]new inventory<>();[/CODE] item w = [CODE]new weapon(""a"", 100, 100);[/CODE] item a = [CODE]new armor(""b"", 200, 700);[/CODE] item p = [CODE]new potion(""c"", 150, ""effect"");[/CODE] envantor.additem(sword); envantor.additem(w); envantor.additem(a); envantor.additem(p); envantor.pr[CODE]intinventory();[/CODE] system.out.println(""most valuable: "" + envantor.mostvaluableitem().getname()); system.out.println(envantor.finditembyname(""b"").to[CODE]string());[/CODE] system.out.println(envantor.finditemsbyvalue(130)); system.out.println(envantor.gettotalvalue()); system.out.println(envantor.filterbytype(clazz)); envantor.sortbyvalue(); envantor.pr[CODE]intinventory();[/CODE] inventory.pr[CODE]intmostvaluableitem(envantor);[/CODE] } } [CODE]interface item {[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]class weapon implements item {[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int damage;[/CODE] weapon([CODE]string name, int value, int damage) {[/CODE] this.name = name; this.value = value; this.damage = damage; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } } [CODE]class armor implements item {[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int defense;[/CODE] armor([CODE]string name, int value, int defense) {[/CODE] this.name = name; this.value = value; this.defense = defense; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdefense() {[/CODE] [CODE]return defense;[/CODE] } } [CODE]class potion implements item {[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]string effect;[/CODE] potion([CODE]string name, int value, string effect) {[/CODE] this.name = name; this.value = value; this.effect = effect; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string geteffect() {[/CODE] [CODE]return effect;[/CODE] } } [CODE]class inventory<t extends item> {[/CODE] t item; list<t> liste = [CODE]new arraylist<t>();[/CODE] [CODE]void additem(t item) {[/CODE] liste.add(item); } [CODE]void removeitem(t item) {[/CODE] liste.remove(item); } [CODE]void printinventory() {[/CODE] [CODE]for (t item : liste) {[/CODE] [CODE]if (item instanceof weapon) {[/CODE] system.out.println(""name: "" + item.getname() + "" value: "" + item.getvalue() + "" damage: "" + ((weapon) item).getdamage()); } [CODE]else if (item instanceof armor) {[/CODE] system.out.println(""name: "" + item.getname() + "" value: "" + item.getvalue() + "" damage: "" + ((armor) item).getdefense()); } [CODE]else if (item instanceof potion) {[/CODE] system.out.println(""name: "" + item.getname() + "" value: "" + item.getvalue() + "" damage: "" + ((potion) item).geteffect()); } } } t mostvaluableitem() { t mostv = null; [CODE]int max = 0;[/CODE] [CODE]for (t item : liste) {[/CODE] if (item.getvalue() > max) { mostv = item; } } [CODE]return mostv;[/CODE] } t finditembyname([CODE]string name) {[/CODE] [CODE]for (t item : liste) {[/CODE] if (item.getname() == name) { [CODE]return item;[/CODE] } } [CODE]return null;[/CODE] } list<t> finditemsbyvalue([CODE]int value) {[/CODE] list<t> lst = [CODE]new arraylist<t>();[/CODE] [CODE]for (t item : liste) {[/CODE] if (item.getvalue() > value) { lst.add(item); } } [CODE]return lst;[/CODE] } [CODE]int gettotalvalue() {[/CODE] [CODE]int totalv = 0;[/CODE] [CODE]for (t item : liste) {[/CODE] totalv += item.getvalue(); } [CODE]return totalv;[/CODE] } list<t> filterbytype([CODE]class<?> type) {[/CODE] list<t> lst = [CODE]new arraylist<t>();[/CODE] [CODE]for (t item : liste) {[/CODE] if (item.get[CODE]class() == type) {[/CODE] lst.add(item); } } [CODE]return lst;[/CODE] } [CODE]int gettotalweapondamage() {[/CODE] [CODE]int totald = 0;[/CODE] [CODE]for (t item : liste) {[/CODE] [CODE]if (item instanceof weapon) {[/CODE] totald += ((weapon) item).getdamage(); } } [CODE]return totald;[/CODE] } [CODE]void sortbyvalue() {[/CODE] [CODE]for (int i = 0;[/CODE] i < liste.size(); i++) { [CODE]for (int j = 0;[/CODE] j < liste.size() - 1; j++) { if (liste.get(j).getvalue() < liste.get(j + 1).getvalue()) { t temp = liste.get(j); liste.set(j, liste.get(j + 1)); liste.set(j + 1, temp); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory) {[/CODE] item x = inventory.mostvaluableitem(); [CODE]if (x instanceof weapon) {[/CODE] system.out.println( ""name: "" + x.getname() + "" value: "" + x.getvalue() + "" damage: "" + ((weapon) x).getdamage()); } [CODE]else if (x instanceof armor) {[/CODE] system.out.println( ""name: "" + x.getname() + "" value: "" + x.getvalue() + "" damage: "" + ((armor) x).getdefense()); } [CODE]else if (x instanceof potion) {[/CODE] system.out.println( ""name: "" + x.getname() + "" value: "" + x.getvalue() + "" damage: "" + ((potion) x).geteffect()); } } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source) {[/CODE] [CODE]for (int i = 0;[/CODE] i < source.liste.size(); i++) { destination.liste.add(source.liste.get(i)); } } } abstraction kavramını açıklayınız. i̇htiyacımız olan şeylerin dışındakileri yok saymaktır. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür cünkü hourlye is a e ama tam tersi degil cunku e is not a hourlye. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? package access daha yakındır. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? üst classların instance variablelarını parametre olarak gecirmek icin. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır,mümkün değil. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? verilen objenin bizim istedigimiz türden bir obje olup olmadigini kontrol eder. b objesi a objesiyle ayni class a aittir. metot overriding ve overloading kavramlarını açıklayınız. overriding signature ı aynı olan metotlar icin kullanılır. overlode ismi aynı ama parametreleri farkli metotlar icin kullanilir. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? 10 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? signatureları farklı olan methodlarda static binding aynı olanlarda dynamic binding kullanılır. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? bu metotlar değiştirilemez ve override edilemez. bu yüzden static bindingle bağlanır. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overloadingde static binding overridingde dynamic binding gerçekleşir. dinamik bağlamada jvm'nin görevi nedir? run time sırasında karar verir. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? ana classın referans variable ı alt classın objesini refer ettiği için. downcast implicit yapılamaz. typecating ile yapılır. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? run time sırasında vakit kaybederdik. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child dinamik bağlama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? i̇çinde abstract method(implement edilmemis) bulunduran ya da bulundarmayan classlardır. abstract classlarda constructur olabilir.interfacde olamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? bir abstract classın methodu başka bir abstract classda implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. daha sonra kesin olarak implement edileceğini bildiğimiz bir methodu tanımlamamızı sağlar. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? interfaceler class değil bir tiptir. abstract classlardan obje üretilmez. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interfacelerin içi boştur. functionallarda implement edilmeyi bekleyen methodlar vardır. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? classlar birden fazla interface implement edebilir. i̇nterface başka bir interfacei extend edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract classtan obje üretilmez. shape c = [CODE]new circle();[/CODE] olmalı drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? edilemez çünkü hangisini çalıştiracagıni bilemez. super olmamalıydı. new b().show; yapabiliriz. output: b java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir. io ve runtime exception java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? trowable olmak zorundadır ve override edildiğinde kendisi ve subclassları throws edilebilir. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? her koşulda kod bloğunu çalıştırır. exception atılıp atılmaması önemli değildir. java'da kendi exceptionunuzu nasıl tanımlarsınız? i̇stediğimiz türdeki exception classını extend ederiz ve şu koşul gerçekleşirse exception fırlat deriz. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? . [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done -1 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? normalde specific olandan olmayana doğru catch ederiz ama böylede çalışır trying m1 caught2 finally text file ile binary file arasındaki fark nedir? text file primitive typelar ile olur. binary file ascii değerleri ile olur. binary file daha az yer kaplar ve daha hızlıdır. bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? flush verilerin çıktı dosyasına yazdırılmasını zorlar. flush edilmezse veri kaybı olabilir. binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? serializable ı implement eder. i̇çi boş bir interfacedir. methodu yoktur. marker interfacedir. binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? evet. out.writeint out.writechar gibi methodlarla yazılır. buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? .next methodu ile kontrol eder. binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? avaliable ile kontrol eder. [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] _______ f = new _______(""numbers.bin"", ""____""); f.write[CODE]int(10);[/CODE] f.write[CODE]int(20);[/CODE] int a = f.read[CODE]int();[/CODE] f.seek(_____________); int b = f.read[CODE]int();[/CODE] system.out.pr[CODE]intln(a + b);[/CODE] f.close(); } } boşluklara sırasıyla ne gelmelidir? output? randomaccessfile randomaccessfile rw a 10 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); ______________ pw = [CODE]new ______________(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] pw.close(); } } boşluklara sırasıyla ne gelmelidir? bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir? printwriter printwriter var olanın üstüne ""new log entry"" ekler. what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cb java'da generic kavramı nedir, bu kavramın temel amacı nedir? biter type datayı başka bir classda tutmak upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. upper ı ""? extends t"" ile lower ı ""? super t"" ile yaparız. generic bir classın constructorunda type parametresi bulunur mu, neden? bulunmayabilir. mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. ikiside tüm typelarde generic alabilir [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. t data array olmamalı. t data = [CODE]new t;[/CODE] swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? head head.next head.next.next head [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. mysortclass<? extends comparable> map ve set veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. . collections interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? . i̇ki objenin equals metodu true dönüyorsa bu iki objenin hash codeleri aynıdır, bunun nedenini açıklayınız; eğer bu sağlanmazsa hangi veri yapıları istenilen şekilde sağlanır? kendi yazdığınız classlarda bunu sağlamak için hangi metotları override etmelisiniz, neden? . bir öğrenci kulübü, yılsonu etkinliği için sınırlı kontenjana sahip bir kayıt sistemi oluşturuyor. sistem, öğrenci kayıtlarını ""ilk gelen ilk hizmet alır"" prensibiyle yönetiyor. ancak, bazı öğrenciler kaydını iptal edebiliyor ve boş kalan yerler otomatik olarak sıradaki öğrenciye veriliyor. bu senaryoda, kayıt sırasını ve iptal durumlarını etkin bir şekilde yönetebilmek için hangi veri yapısını tercih edersiniz? neden? linkedlist sıralı olarak ilerliyor ve çıkanın yerini bir sonraki alıyor. fifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue . [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 80); scores.put(""alice"", 100); set<string> keys = scores.keyset(); [CODE]int sum = 0;[/CODE] [CODE]for (string key : keys) {[/CODE] sum += scores.get(key); } system.out.println(""number of entries: "" + scores.size()); system.out.pr[CODE]intln(""sum of scores: "" + sum);[/CODE] } } output? number of entries: 2 sum of scores: 180 [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<[CODE]string> list = new arraylist<>();[/CODE] list.add(""apple""); list.add(""banana""); list.add(1, ""cherry""); list.remove(""banana""); list.add(""apple""); system.out.println(list.size()); system.out.println(list.indexof(""apple"") + "" "" + list.lastindexof(""apple"")); } } output? 0 2 ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 68 java gui'leri bağlamında olay güdümlü (event driven) programlamayı tanımlayın. bir frame açılır ve dışarıdan bizim yaptığımız etkinlikleri klavye, mouse vb. araçlarla algılar. geleneksel sıralı programlama ile olay güdümlü (event driven) programlama arasındaki temel fark nedir? event driven bizim kararlarımıza bağlıdır. borderlayout yöneticisi, bir konteynerdeki bileşenleri nasıl düzenler? 3 parçaya böler. north, south, center java gui uygulamalarında jpanel'in amacı nedir? jframe component eklemek. java'daki gui programları neden tipik olarak sonsuz bir olay döngüsü çalıştırır ve bu durum sistem veya uygulama tarafından tetiklenen yeniden çizim (repaint) olaylarıyla nasıl ilişkilidir? . bir swing uygulamasında repaint() metodunu çağırmanın etkisi nedir? paint değiştirdiğimizde uygulanır. aşağıdaki kodun çalışmasını izleyin ve düğmeye tıklandığında ne olduğunu belirleyin: [CODE]public class simplegui extends jframe implements actionlistener {[/CODE] [CODE]public simplegui() {[/CODE] setsize(200, 100); setdefaultcloseoperation(jframe.exit_on_close); jbutton button = [CODE]new jbutton(""click me"");[/CODE] button.addactionlistener(this); add(button); setvisible(true); } [CODE]public void actionperformed(actionevent e) {[/CODE] joptionpane.showmessagedialog(this, ""button was clicked!""); system.exit(0); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new simplegui();[/CODE] } } butona basıldığında frame e ""button was clicked!"" yazdırır. aşağıdaki kod parçasını inceleyin: import javax.swing.*; import java.awt.*; [CODE]public class layoutexample {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe frame = [CODE]new jframe(""layout test"");[/CODE] frame.setsize(400, 300); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlayout([CODE]new borderlayout());[/CODE] frame.add(new jlabel(""n""), borderlayout.north); frame.add(new jbutton(""s""), borderlayout.south); frame.add(new jpanel(), borderlayout.center); frame.setvisible(true); } } bu program çalıştığında bileşenlerin nasıl düzenlendiğini açıklayın. i̇smi layout test olan bir frame oluşur. northa ismi n olan label , southa üstünde s olan buton, centera bir panel ekler ve görünür yapar. bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] [CODE]int i = 0;[/CODE] factory.addrobot(r1, i++); factory.addrobot(r2, i++); factory.addrobot(r3, i++); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private robot[] robots = [CODE]new robot[100];[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public void addrobot(robot robot, int index) {[/CODE] robots[index] = robot; } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { robots[i].charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + getname1() + "" location: "" + getlocation1());[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { if (robots[i] != null) system.out.println("" robot name: "" + robots[i].getname() + "" robot type: "" + robots[i].gettype() + "" battery level: "" + robots[i].getbattery() + "" is operational: "" + robots[i].getopera()); } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.length; i++) { int x = robots[i].getbattery() - 15; system.out.pr[CODE]intln(x);[/CODE] } } [CODE]public string getname1() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation1() {[/CODE] [CODE]return location;[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational;// bataryası varsa true robot() { this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } robot([CODE]string name, string type, int batterylevel, boolean isoperational) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getopera() {[/CODE] [CODE]return isoperational;[/CODE] } } [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string x = ""a1b2"";[/CODE] [CODE]string[] ar = method(x);[/CODE] [CODE]for (int i = 0;[/CODE] i < ar.length; i++) { system.out.pr[CODE]intln(ar[i]);[/CODE] } } [CODE]public static string[] method(string x) {[/CODE] x = x.touppercase(); string[] arr = new string[2 ^ (x.length() / 2)]; [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { arr[i] = x.substring(0, i) + x.substring(i).tolowercase(); } [CODE]return arr;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package robot;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package robot;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] abstractrobot([CODE]string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] final [CODE]int temp = batterylife;[/CODE] this.batteryl[CODE]ife = temp;[/CODE] system.out.pr[CODE]intln(batterylife);[/CODE] } } [CODE]package robot;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.robotnumber(); // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } [CODE]package robot;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]package robot;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power:"" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower = cleaningpower + 10; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } } [CODE]package robot;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int number;[/CODE] robotfactory() { robots = [CODE]new arraylist<abstractrobot>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot x = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] number++; robots.add(x); } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot x = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] number++; robots.add(x); } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] r.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof cleaningrobot) {[/CODE] cleaningrobot x = (cleaningrobot) r; system.out.println(""- model: "" + x.modelname + "", battery: "" + x.batterylife + "", cleaning power: "" + x.getcleaningpower()); } [CODE]else if (r instanceof securityrobot) {[/CODE] securityrobot x = (securityrobot) r; system.out.println( ""- model: "" + x.modelname + "", battery: "" + x.batterylife + "", armed: "" + x.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof cleaningrobot) {[/CODE] cleaningrobot x = (cleaningrobot) r; x.boostcleaningpower(); system.out .println(""cleaningrobot - "" + x.modelname + "" now has cleaning power: "" + x.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot r : robots) {[/CODE] [CODE]if (r instanceof securityrobot) {[/CODE] securityrobot x = (securityrobot) r; x.togglearmedmode(); system.out.print(""securityrobot - "" + x.modelname + "" is now ""); if (x.getisarmed()) { system.out.pr[CODE]intln(""armed"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""unarmed"");[/CODE] } } } } [CODE]public static void robotnumber() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + number + "" robot uretildi"");[/CODE] } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.arrays; import java.util.collection; import java.util.list; import java.util.collections; [CODE]public class q2 {[/CODE] [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] t value = null; [CODE]if (findmax == true) {[/CODE] value = collections.max(collection); } [CODE]else if (findmax == false) {[/CODE] value = collections.min(collection); } [CODE]return value;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) system.out.pr[CODE]intln();[/CODE] list<integer> numbers2 = arrays.aslist(3, 9, 1, 6, 15, 12, 20, 0); system.out.pr[CODE]intln(findextreme(numbers2, true));[/CODE] // çıktı: 20 (maksimum) system.out.pr[CODE]intln(findextreme(numbers2, false));[/CODE] // çıktı: 0 (minimum) } } import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.list; [CODE]public class q3 {[/CODE] [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] list<t> col = (list<t>) collection; list<t> lst = [CODE]new arraylist<>();[/CODE] [CODE]for (int i = 0;[/CODE] i < col.size(); i++) { t value = col.get(i); class<t> coltype = (class<t>) value.get[CODE]class();[/CODE] [CODE]if (coltype == type) {[/CODE] lst.add(value); } } [CODE]return lst;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); list<object> mixed2 = arrays.aslist(2, ""melih"", 5.5, ""/meltla/"", 7, true, ""türker"", false); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] system.out.println(filterbytype(mixed, boolean.[CODE]class));[/CODE] system.out.println(filterbytype(mixed, double.[CODE]class));[/CODE] system.out.pr[CODE]intln();[/CODE] system.out.println(filterbytype(mixed2, string.[CODE]class));[/CODE] system.out.println(filterbytype(mixed2, integer.[CODE]class));[/CODE] system.out.println(filterbytype(mixed2, boolean.[CODE]class));[/CODE] system.out.println(filterbytype(mixed2, double.[CODE]class));[/CODE] } } import java.util.arraylist; [CODE]public class undoablelist<t> extends arraylist<t> {[/CODE] [CODE]public void undolast() {[/CODE] [CODE]if (size() == 0) {[/CODE] [CODE]return;[/CODE] } [CODE]else {[/CODE] remove(size() - 1); } } [CODE]public t getlastadded() {[/CODE] [CODE]return get(size() - 1);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] undoablelist<[CODE]string> list2 = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.add(""d""); list.add(""e""); list.add(""f""); list.add(""g""); system.out.println(list.getlastadded()); list.undolast(); // ""g"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] system.out.println(list.getlastadded()); system.out.pr[CODE]intln(list);[/CODE] list2.undolast();// hata vermemeli } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.*; import java.util.hashtable; [CODE]public class gamewindow extends jframe {[/CODE] private gamepanel gamepanel; private jmenubar menubar; private jmenu gamemenu; private jmenuitem pausemenuitem; private jmenuitem savemenuitem; private jmenuitem loadmenuitem; private jmenuitem exitmenuitem; private settingsmanager settingsmanager; [CODE]public gamewindow() {[/CODE] settitle(""deadpool vs zombies""); setdefaultcloseoperation(jframe.exit_on_close); setsize(800, 600); setlocationrelativeto(null); settingsmanager = settingsmanager.getinstance(); createmenubar(); showmainmenu(); addkeylistener([CODE]new keyadapter() {[/CODE] @override [CODE]public void keypressed(keyevent e) {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.keypressed(e); } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.keyreleased(e); } } }); addmouselistener([CODE]new mouseadapter() {[/CODE] @override [CODE]public void mousepressed(mouseevent e) {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.mousepressed(e); } } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.mousereleased(e); } } }); addmousemotionlistener([CODE]new mousemotionadapter() {[/CODE] @override [CODE]public void mousemoved(mouseevent e) {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.mousemoved(e); } } }); addwindowlistener([CODE]new windowadapter() {[/CODE] @override [CODE]public void windowclosing(windowevent e) {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.cleanup(); } settingsmanager.savesettings(); } }); setfocusable(true); requestfocus(); } private [CODE]void createmenubar() {[/CODE] menubar = [CODE]new jmenubar();[/CODE] gamemenu = [CODE]new jmenu(""oyun"");[/CODE] pausemenuitem = [CODE]new jmenuitem(""duraklat (p)"");[/CODE] pausemenuitem.addactionlistener(e -> { [CODE]if (gamepanel != null) {[/CODE] gamepanel.togglepause(); } }); savemenuitem = [CODE]new jmenuitem(""kaydet"");[/CODE] savemenuitem.addactionlistener(e -> { jfilechooser filechooser = [CODE]new jfilechooser();[/CODE] if (filechooser.showsavedialog(this) == jfilechooser.approve_option) { file file = filechooser.getselectedfile(); [CODE]if (gamepanel != null) {[/CODE] gamepanel.savegame(file); } } }); loadmenuitem = [CODE]new jmenuitem(""yükle"");[/CODE] loadmenuitem.addactionlistener(e -> { jfilechooser filechooser = [CODE]new jfilechooser();[/CODE] if (filechooser.showopendialog(this) == jfilechooser.approve_option) { file file = filechooser.getselectedfile(); [CODE]if (gamepanel != null) {[/CODE] gamepanel.loadgame(file); } } }); exitmenuitem = [CODE]new jmenuitem(""çıkış"");[/CODE] exitmenuitem.addactionlistener(e -> system.exit(0)); gamemenu.add(pausemenuitem); gamemenu.add(savemenuitem); gamemenu.add(loadmenuitem); gamemenu.addseparator(); gamemenu.add(exitmenuitem); menubar.add(gamemenu); setjmenubar(menubar); } [CODE]public void showmainmenu() {[/CODE] [CODE]if (gamepanel != null) {[/CODE] gamepanel.cleanup(); remove(gamepanel); gamepanel = null; } getcontentpane().removeall(); jpanel mainmenupanel = [CODE]new jpanel();[/CODE] mainmenupanel.setlayout(new boxlayout(mainmenupanel, boxlayout.y_axis)); mainmenupanel.setbackground(color.dark_gray); jlabel titlelabel = [CODE]new jlabel(""deadpool vs zombies"");[/CODE] titlelabel.setfont(new font(""arial"", font.bold, 28)); titlelabel.setforeground(color.red); titlelabel.setalignmentx(component.center_alignment); mainmenupanel.add(box.createverticalstrut(100)); mainmenupanel.add(titlelabel); mainmenupanel.add(box.createverticalstrut(50)); jbutton startbutton = createmenubutton(""yeni oyun""); startbutton.addactionlistener(e -> start[CODE]newgame());[/CODE] jbutton settingsbutton = createmenubutton(""ayarlar""); settingsbutton.addactionlistener(e -> showsettingsmenu()); jbutton exitbutton = createmenubutton(""çıkış""); exitbutton.addactionlistener(e -> { settingsmanager.savesettings(); system.exit(0); }); mainmenupanel.add(startbutton); mainmenupanel.add(box.createverticalstrut(20)); mainmenupanel.add(settingsbutton); mainmenupanel.add(box.createverticalstrut(20)); mainmenupanel.add(exitbutton); add(mainmenupanel); validate(); repa[CODE]int();[/CODE] } private jbutton createmenubutton([CODE]string text) {[/CODE] jbutton button = [CODE]new jbutton(text);[/CODE] button.setalignmentx(component.center_alignment); button.setmaximumsize([CODE]new dimension(200, 50));[/CODE] button.setfont(new font(""arial"", font.bold, 16)); [CODE]return button;[/CODE] } private [CODE]void startnewgame() {[/CODE] getcontentpane().removeall(); gamepanel = [CODE]new gamepanel(this);[/CODE] add(gamepanel); if (gamepanel.soundmanager != null) { settingsmanager.applysettings(gamepanel.soundmanager); } gamepanel.requestfocusinwindow(); validate(); repa[CODE]int();[/CODE] } private [CODE]void showsettingsmenu() {[/CODE] getcontentpane().removeall(); jpanel settingspanel = [CODE]new jpanel();[/CODE] settingspanel.setlayout(new boxlayout(settingspanel, boxlayout.y_axis)); settingspanel.setbackground(color.dark_gray); jlabel titlelabel = [CODE]new jlabel(""ayarlar"");[/CODE] titlelabel.setfont(new font(""arial"", font.bold, 24)); titlelabel.setforeground(color.white); titlelabel.setalignmentx(component.center_alignment); settingspanel.add(box.createverticalstrut(50)); settingspanel.add(titlelabel); settingspanel.add(box.createverticalstrut(50)); boolean sfxenabled = settingsmanager.issfxenabled(); boolean musicenabled = settingsmanager.ismusicenabled(); int sfxvalue = (int) (settingsmanager.getsfxvolume() * 100); int musicvalue = (int) (settingsmanager.getmusicvolume() * 100); jcheckbox sfxtogglebox = [CODE]new jcheckbox(""ses efektleri aktif"", sfxenabled);[/CODE] sfxtogglebox.setfont(new font(""arial"", font.bold, 16)); sfxtogglebox.setforeground(color.white); sfxtogglebox.setbackground(color.dark_gray); sfxtogglebox.setalignmentx(component.center_alignment); settingspanel.add(sfxtogglebox); settingspanel.add(box.createverticalstrut(10)); jlabel sfxlabel = [CODE]new jlabel(""ses efektleri seviyesi"");[/CODE] sfxlabel.setfont(new font(""arial"", font.bold, 18)); sfxlabel.setforeground(color.white); sfxlabel.setalignmentx(component.center_alignment); settingspanel.add(sfxlabel); jslider sfxslider = new jslider(jslider.horizontal, 0, 100, sfxvalue); setupslider(sfxslider); settingspanel.add(sfxslider); settingspanel.add(box.createverticalstrut(30)); jcheckbox musictogglebox = [CODE]new jcheckbox(""müzik aktif"", musicenabled);[/CODE] musictogglebox.setfont(new font(""arial"", font.bold, 16)); musictogglebox.setforeground(color.white); musictogglebox.setbackground(color.dark_gray); musictogglebox.setalignmentx(component.center_alignment); settingspanel.add(musictogglebox); settingspanel.add(box.createverticalstrut(10)); jlabel musiclabel = [CODE]new jlabel(""müzik seviyesi"");[/CODE] musiclabel.setfont(new font(""arial"", font.bold, 18)); musiclabel.setforeground(color.white); musiclabel.setalignmentx(component.center_alignment); settingspanel.add(musiclabel); jslider musicslider = new jslider(jslider.horizontal, 0, 100, musicvalue); setupslider(musicslider); settingspanel.add(musicslider); settingspanel.add(box.createverticalstrut(30)); // save button jbutton savebutton = createmenubutton(""kaydet""); savebutton.addactionlistener(e -> { settingsmanager.setsfxenabled(sfxtogglebox.isselected()); settingsmanager.setmusicenabled(musictogglebox.isselected()); settingsmanager.setsfxvolume(sfxslider.getvalue() / 100.0f); settingsmanager.setmusicvolume(musicslider.getvalue() / 100.0f); settingsmanager.savesettings(); if (gamepanel != null && gamepanel.soundmanager != null) { settingsmanager.applysettings(gamepanel.soundmanager); } system.out.pr[CODE]intln(""ayarlar kaydedildi"");[/CODE] showmainmenu(); }); settingspanel.add(savebutton); settingspanel.add(box.createverticalstrut(20)); jbutton backbutton = createmenubutton(""geri""); backbutton.addactionlistener(e -> showmainmenu()); settingspanel.add(backbutton); add(settingspanel); validate(); repa[CODE]int();[/CODE] } private [CODE]void setupslider(jslider slider) {[/CODE] slider.setmajortickspacing(25); slider.setminortickspacing(5); slider.setpa[CODE]intticks(true);[/CODE] slider.setpa[CODE]intlabels(true);[/CODE] slider.setalignmentx(component.center_alignment); slider.setmaximumsize([CODE]new dimension(300, 50));[/CODE] slider.setpreferredsize([CODE]new dimension(300, 50));[/CODE] // add custom labels hashtable<[CODE]integer, jlabel> labeltable = new hashtable<>();[/CODE] labeltable.put(0, createsliderlabel(""kapalı"")); labeltable.put(50, createsliderlabel(""orta"")); labeltable.put(100, createsliderlabel(""yüksek"")); slider.setlabeltable(labeltable); } private jlabel createsliderlabel([CODE]string text) {[/CODE] jlabel label = [CODE]new jlabel(text);[/CODE] label.setforeground(color.white); [CODE]return label;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] swingutilities.invokelater(() -> [CODE]new gamewindow());[/CODE] } } import javax.swing.*; import entitys.*; import entitys.zombie.*; import java.awt.*; import java.awt.event.*; import java.io.*; import java.util.arraylist; import java.util.list; import java.util.random; import silah.*; import mermi.*; [CODE]public class gamepanel extends jpanel implements runnable, mouselistener, keylistener {[/CODE] private gamewindow gamewindow; private thread gamethread; private boolean running = false; private boolean paused = false; private player player; private list<zombie> zombies; private list<bullet> bullets; private list<weapon> playerweapons; private list<ammopickup> ammopickups; private [CODE]int currentwave = 0;[/CODE] private [CODE]int zombieskilled = 0;[/CODE] private [CODE]int totalscore = 0;[/CODE] private random random; private [CODE]string currentmessage = """";[/CODE] private long messagedisplaytime = 0; private boolean gameovermenushown = false; private [CODE]static final int map_width = 1600;[/CODE] private [CODE]static final int map_height = 1200;[/CODE] private double camerax = 0; private double cameray = 0; // ui bilgileri private font uifont = new font(""arial"", font.bold, 14); [CODE]public soundmanager soundmanager;[/CODE] [CODE]public gamepanel(gamewindow gamewindow) {[/CODE] this.gamewindow = gamewindow; setpreferredsize([CODE]new dimension(map_width, map_height));[/CODE] setbackground(color.dark_gray); setfocusable(true); this.addmouselistener(this); random = [CODE]new random();[/CODE] initializegame(); // oyun döngüsünü başlatma startgameloop(); } [CODE]public void initializegame() {[/CODE] imageutils.ensureimagefolderexists(); currentwave = 0; zombieskilled = 0; totalscore = 0; player = [CODE]new player(400, 300);[/CODE] zombies = [CODE]new arraylist<>();[/CODE] bullets = [CODE]new arraylist<>();[/CODE] ammopickups = [CODE]new arraylist<>();[/CODE] // sadece başlangıç tabancasını oluştur playerweapons = [CODE]new arraylist<weapon>();[/CODE] weapon pistol = [CODE]new pistol();[/CODE] playerweapons.add(pistol); player.setcurrentweapon(playerweapons.get(0)); // keylistener ekleme this.addkeylistener(this); // ilk dalgayı başlatma startnextwave(); // soundmanager başlatma soundmanager = [CODE]new soundmanager();[/CODE] // ses efektlerini yükleme soundmanager.loadsoundeffect(""wave_start"", ""sounds\\newwave.wav""); soundmanager.loadsoundeffect(""gameover"", ""sounds\\gameover.wav""); // oyun müziğini yükleme [CODE]try {[/CODE] soundmanager.loadbackgroundmusic(""sounds\\gamebackground.wav""); system.out.pr[CODE]intln(""müzik başarıyla yüklendi"");[/CODE] } [CODE]catch (exception e) {[/CODE] system.err.println(""müzik yüklenirken hata: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } // ses ayarlarını uygula soundmanager.togglesoundeffects(true); // oyun başladığında müziği çal startgamemusic(); system.out.pr[CODE]intln(""müzik başladı"");[/CODE] } [CODE]public void startgamemusic() {[/CODE] [CODE]if (soundmanager != null) {[/CODE] system.out.println(""müzik başlatılıyor...""); soundmanager.togglemusic(true); } [CODE]else {[/CODE] system.out.println(""soundmanager null.""); } } [CODE]public void stopgamemusic() {[/CODE] [CODE]if (soundmanager != null) {[/CODE] soundmanager.togglemusic(false); } } private [CODE]void startgameloop() {[/CODE] if (gamethread != null && gamethread.isalive()) { running = false; [CODE]try {[/CODE] gamethread.join(1000); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } running = true; gamethread = [CODE]new thread(this);[/CODE] gamethread.start(); } @override [CODE]public void run() {[/CODE] // oyun döngüsü long lasttime = system.nanotime(); double amountofticks = 60.0; double ns = 1000000000 / amountofticks; double delta = 0; [CODE]while (running) {[/CODE] long now = system.nanotime(); delta += (now - lasttime) / ns; lasttime = now; [CODE]while (delta >= 1) {[/CODE] [CODE]if (!paused) {[/CODE] update(); } delta--; } repa[CODE]int();[/CODE] [CODE]try {[/CODE] thread.sleep(10); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } private [CODE]void update() {[/CODE] // player güncellemesi player.update(); // zombi güncellemeleri for (int i = zombies.size() - 1; i >= 0; i--) { zombie zombie = zombies.get(i); zombie.update(player); // player ile çarpışma kontrolü if (zombie.[CODE]intersects(player)) {[/CODE] player.takedamage(zombie.getdamage()); double centerplayerx = player.getx() + player.getwidth() / 2; double centerplayery = player.gety() + player.getheight() / 2; double centerzombiex = zombie.getx() + zombie.getwidth() / 2; double centerzombiey = zombie.gety() + zombie.getheight() / 2; double angle = math.atan2(centerzombiey - centerplayery, centerzombiex - centerplayerx); // zombiyi geri it zombie.x += math.cos(angle) * 10; zombie.y += math.sin(angle) * 10; // hasar sonrası kontrol etme if (player.gethealth() <= 0) { gameover(); break; } } } // mermi güncellemeleri for (int i = bullets.size() - 1; i >= 0; i--) { bullet bullet = bullets.get(i); bullet.update(); // merminin ekran dışına çıkma kontrolü if (bullet.isoutofbounds()) { bullets.remove(i); continue; } // zombiler ile çarpışma kontrolü for (int j = zombies.size() - 1; j >= 0; j--) { zombie zombie = zombies.get(j); if (bullet.[CODE]intersects(zombie)) {[/CODE] zombie.takedamage(bullet.getdamage()); // keskin nişancı tüfeği ile merminin zombileri delmesi if (!(bullet.getweapontype() == weapontype.sniperr[CODE]ifle)) {[/CODE] bullets.remove(i); break; } // zombi ölü mü if (zombie.gethealth() <= 0) { handlezombiedeath(zombie); zombieskilled++; totalscore += (currentwave * 10); // dalga numarasına göre puan ver // tüm zombiler öldü mü if (zombies.isempty()) { startnextwave(); } } } } } // cephane toplama güncellemeleri for (int i = ammopickups.size() - 1; i >= 0; i--) { ammopickup ammo = ammopickups.get(i); if (player.[CODE]intersects(ammo)) {[/CODE] player.collectammo(ammo); ammopickups.remove(i); } } updatezombies(); } private [CODE]void handlezombiedeath(zombie zombie) {[/CODE] zombies.remove(zombie); // asit tüküren zombi için özel efekt(diger zombilere hasar) [CODE]if (zombie instanceof acidzombie) {[/CODE] [CODE]for (zombie nearzombie : zombies) {[/CODE] if (zombie.getdistance(nearzombie) < 50) { nearzombie.takedamage(20); } } } if (random.nextdouble() < 0.3) { ammopickup ammo = new ammopickup(zombie.getx(), zombie.gety(), weapontype.values()[random.nextint(weapontype.values().length)]); ammopickups.add(ammo); } } private [CODE]void startnextwave() {[/CODE] currentwave++; player.sethealth(100); playsoundeffect(""wave_start""); // her dalga sonunda yeni silah verme [CODE]if (currentwave == 1) {[/CODE] // ilk dalgada sadece başlangıç tabancası olsun showmessage(""dalga "" + currentwave + "" başladı!""); } [CODE]else if (currentwave == 2) {[/CODE] playerweapons.add([CODE]new assaultrifle());[/CODE] showmessage(""piyade tüfeği kazandınız!""); } [CODE]else if (currentwave == 3) {[/CODE] playerweapons.add([CODE]new shotgun());[/CODE] showmessage(""pompalı tüfek kazandınız!""); } [CODE]else if (currentwave == 4) {[/CODE] playerweapons.add([CODE]new sniperrifle());[/CODE] showmessage(""keskin nişancı tüfeği kazandınız!""); } [CODE]else if (currentwave == 5) {[/CODE] playerweapons.add([CODE]new rocketlauncher());[/CODE] showmessage(""roketatar kazandınız!""); } [CODE]else if (currentwave > 5) {[/CODE] showmessage(""dalga "" + currentwave + "" başladı!""); } // dalgaya göre zombileri oluştur createzombies[CODE]forwave();[/CODE] } private [CODE]void createzombiesforwave() {[/CODE] [CODE]int basezombiecount = 5;[/CODE] [CODE]int zombiecount = basezombiecount + (currentwave * 2);[/CODE] [CODE]for (int i = 0;[/CODE] i < zombiecount; i++) { // geniş harita için spawn int x = random.next[CODE]int(map_width);[/CODE] int y = random.next[CODE]int(map_height);[/CODE] // playerdan belirli bir mesafede spawn ol while (math.abs(x - player.getx()) < 300 && math.abs(y - player.gety()) < 300) { x = random.next[CODE]int(map_width);[/CODE] y = random.next[CODE]int(map_height);[/CODE] } zombie zombie = createzombiebasedonwave(x, y); zombies.add(zombie); } } private zombie createzombiebasedonwave([CODE]int x, int y) {[/CODE] double zombietype = random.nextdouble(); if (currentwave >= 7 && zombietype < 0.2) { [CODE]return new acidzombie((double) x, (double) y);[/CODE] } else if (currentwave >= 5 && zombietype < 0.4) { [CODE]return new tankzombie((double) x, (double) y);[/CODE] } else if (currentwave >= 3 && zombietype < 0.6) { [CODE]return new crawlerzombie((double) x, (double) y);[/CODE] } [CODE]else {[/CODE] [CODE]return new normalzombie((double) x, (double) y);[/CODE] } } private [CODE]void showmessage(string message) {[/CODE] currentmessage = message; messagedisplaytime = system.currenttimemillis() + 3000; this.requestfocusinwindow(); } private [CODE]void gameover() {[/CODE] running = false; gameovermenushown = true; [CODE]if (soundmanager != null) {[/CODE] soundmanager.stopmusic(); soundmanager.playsoundeffect(""gameover""); system.out.pr[CODE]intln(""gameover sound played"");[/CODE] } repa[CODE]int();[/CODE] } [CODE]public void keypressed(keyevent e) {[/CODE] [CODE]if (gameovermenushown) {[/CODE] if (e.getkeycode() == keyevent.vk_escape) { gamewindow.showmainmenu(); } [CODE]return;[/CODE] } if (e.getkeycode() == keyevent.vk_escape || e.getkeycode() == keyevent.vk_p) { togglepause(); [CODE]return;[/CODE] } [CODE]if (paused) {[/CODE] if (e.getkeycode() == keyevent.vk_escape || e.getkeycode() == keyevent.vk_p) { togglepause(); } [CODE]return;[/CODE] } // silah değiştirme tuşları (1-5 arası rakamlar) if (e.getkeycode() >= keyevent.vk_1 && e.getkeycode() <= keyevent.vk_5) { int weaponindex = e.getkeycode() - keyevent.vk_1; if (weaponindex < playerweapons.size()) { player.setcurrentweapon(playerweapons.get(weaponindex)); showmessage(playerweapons.get(weaponindex).getname() + "" seçildi!""); } } // r tuşu ile yeniden doldurma if (e.getkeycode() == keyevent.vk_r) { if (player.getcurrentweapon() != null) { weapon currentweapon = player.getcurrentweapon(); int ammoneeded = currentweapon.getsarjorsize() - currentweapon.getcurrentammo(); if (ammoneeded > 0 && currentweapon.gettotalammo() > 0) { if (currentweapon.gettotalammo() >= ammoneeded) { currentweapon.setcurrentammo(currentweapon.getsarjorsize()); currentweapon.settotalammo(currentweapon.gettotalammo() - ammoneeded); } [CODE]else {[/CODE] currentweapon.setcurrentammo(currentweapon.getcurrentammo() + currentweapon.gettotalammo()); currentweapon.settotalammo(0); } showmessage(currentweapon.getname() + "" yeniden dolduruldu!""); } } } player.keypressed(e); } [CODE]public void keyreleased(keyevent e) {[/CODE] player.keyreleased(e); } @override [CODE]public void mousepressed(mouseevent e) {[/CODE] [CODE]if (!gameovermenushown) {[/CODE] player.mousepressed(e, bullets); } } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] [CODE]if (!gameovermenushown) {[/CODE] player.mousereleased(e); } } [CODE]public void mousemoved(mouseevent e) {[/CODE] player.mousemoved(e); } [CODE]public void togglepause() {[/CODE] paused = !paused; [CODE]if (soundmanager != null) {[/CODE] [CODE]if (paused) {[/CODE] soundmanager.pausemusic(); showmessage(""oyun duraklatıldı""); } [CODE]else {[/CODE] if (soundmanager.ismusicenabled()) { soundmanager.resumemusic(); } showmessage(""oyun devam ediyor""); } } } [CODE]public void savegame(file file) {[/CODE] [CODE]try (objectoutputstream oos = new objectoutputstream(new fileoutputstream(file))) {[/CODE] gamestate gamestate = [CODE]new gamestate( player, zombies, bullets, playerweapons, ammopickups, currentwave, zombieskilled, totalscore);[/CODE] oos.writeobject(gamestate); showmessage(""oyun kaydedildi!""); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] showmessage(""oyun kaydedilemedi!""); } } [CODE]public void loadgame(file file) {[/CODE] [CODE]try (objectinputstream ois = new objectinputstream(new fileinputstream(file))) {[/CODE] gamestate gamestate = (gamestate) ois.readobject(); player = gamestate.getplayer(); zombies = gamestate.getzombies(); bullets = gamestate.getbullets(); playerweapons = gamestate.getplayerweapons(); ammopickups = gamestate.getammopickups(); currentwave = gamestate.getcurrentwave(); zombieskilled = gamestate.getzombieskilled(); totalscore = gamestate.gettotalscore(); [CODE]for (weapon weapon : playerweapons) {[/CODE] weapon.setbulletlist(bullets); } if (player.getcurrentweapon() == null && !playerweapons.isempty()) { player.setcurrentweapon(playerweapons.get(0)); } if (!player.isimageloaded()) { player.loadplayerimage(); } showmessage(""oyun yüklendi!""); } [CODE]catch (ioexception | classnotfoundexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] showmessage(""oyun yüklenemedi!""); } } @override protected [CODE]void paintcomponent(graphics g) {[/CODE] super.pa[CODE]intcomponent(g);[/CODE] graphics2d g2d = (graphics2d) g; g2d.translate(-camerax, -cameray); g2d.setcolor(color.dark_gray); g2d.fillrect(0, 0, getwidth(), getheight()); // zombileri çiz [CODE]for (zombie zombie : zombies) {[/CODE] zombie.draw(g2d); } // mermileri çiz [CODE]for (bullet bullet : bullets) {[/CODE] bullet.draw(g2d); } [CODE]for (ammopickup ammo : ammopickups) {[/CODE] ammo.draw(g2d); } // oyuncuyu çiz player.draw(g2d); // ui bilgilerini çiz g2d.translate(camerax, cameray); drawui(g2d); // mini haritayı çiz (ui elemanlarının üzerine) drawminimap(g2d); if (!currentmessage.isempty() && system.currenttimemillis() < messagedisplaytime) { g2d.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2d.fillrect(getwidth() / 4, getheight() / 3, getwidth() / 2, 40); g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 18)); int textwidth = g2d.getfontmetrics().[CODE]stringwidth(currentmessage);[/CODE] g2d.draw[CODE]string(currentmessage, (getwidth() - textwidth) / 2, getheight() / 3 + 28);[/CODE] } // duraklatma [CODE]if (paused) {[/CODE] g2d.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2d.fillrect(0, 0, getwidth(), getheight()); g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 36)); [CODE]string pausetext = ""duraklatildi"";[/CODE] int textwidth = g2d.getfontmetrics().[CODE]stringwidth(pausetext);[/CODE] g2d.draw[CODE]string(pausetext, (getwidth() - textwidth) / 2, getheight() / 2);[/CODE] } [CODE]if (gameovermenushown) {[/CODE] g2d.setcolor([CODE]new color(0, 0, 0, 180));[/CODE] g2d.fillrect(0, 0, getwidth(), getheight()); g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 36)); [CODE]string gameovertext = ""oyun bi̇tti̇"";[/CODE] [CODE]string scoretext = ""toplam puan: "" + totalscore;[/CODE] int gameoverwidth = g2d.getfontmetrics().[CODE]stringwidth(gameovertext);[/CODE] int scorewidth = g2d.getfontmetrics(g2d.getfont()).[CODE]stringwidth(scoretext);[/CODE] g2d.draw[CODE]string(gameovertext, (getwidth() - gameoverwidth) / 2, getheight() / 2 - 30);[/CODE] g2d.setfont(new font(""arial"", font.bold, 24)); g2d.draw[CODE]string(scoretext, (getwidth() - scorewidth) / 2 + 50, getheight() / 2 + 20);[/CODE] drawbutton(g2d, ""yeniden başla"", getwidth() / 2 - 100, getheight() / 2 + 70, 200, 50); drawbutton(g2d, ""ana menü"", getwidth() / 2 - 100, getheight() / 2 + 140, 200, 50); } } private [CODE]void drawui(graphics2d g2d) {[/CODE] g2d.setfont(u[CODE]ifont);[/CODE] // sol üst köşe ve silah bilgisi g2d.setcolor(color.white); g2d.drawstring(""silah: "" + player.getcurrentweapon().getname(), 10, 20); g2d.drawstring(""şarjör: "" + player.getcurrentweapon().getcurrentammo() + "" / "" + player.getcurrentweapon().getsarjorsize(), 10, 40); g2d.drawstring(""toplam mermi: "" + player.getcurrentweapon().gettotalammo(), 10, 60); // envanterdeki silahları göster g2d.draw[CODE]string(""silahlar:"", 10, 80);[/CODE] [CODE]for (int i = 0;[/CODE] i < playerweapons.size(); i++) { weapon weapon = playerweapons.get(i); g2d.drawstring((i + 1) + "": "" + weapon.getname(), 10, 100 + (i * 20)); } // sağ üst köşe ve player bilgisi string healthtext = ""can: "" + player.gethealth(); [CODE]string scoretext = ""puan: "" + totalscore;[/CODE] [CODE]string wavetext = ""dalga: "" + currentwave;[/CODE] int healthwidth = g2d.getfontmetrics().[CODE]stringwidth(healthtext);[/CODE] int scorewidth = g2d.getfontmetrics().[CODE]stringwidth(scoretext);[/CODE] int wavewidth = g2d.getfontmetrics().[CODE]stringwidth(wavetext);[/CODE] g2d.draw[CODE]string(healthtext, getwidth() - healthwidth - 10, 20);[/CODE] g2d.draw[CODE]string(scoretext, getwidth() - scorewidth - 10, 40);[/CODE] g2d.draw[CODE]string(wavetext, getwidth() - wavewidth - 10, 60);[/CODE] } private [CODE]void updatezombies() {[/CODE] list<zombie> zombiestoremove = [CODE]new arraylist<>();[/CODE] [CODE]for (zombie zombie : zombies) {[/CODE] zombie.update(player); if (zombie.gethealth() <= 0) { zombiestoremove.add(zombie); zombieskilled++; totalscore += (currentwave * 10); } } zombies.removeall(zombiestoremove); if (!zombiestoremove.isempty() && zombies.isempty()) { startnextwave(); } if (!zombiestoremove.isempty()) { system.out.println(zombiestoremove.size() + "" zombi öldürüldü. kalan zombi: "" + zombies.size()); } } private [CODE]void drawbutton(graphics2d g2d, string text, int x, int y, int width, int height) {[/CODE] g2d.setcolor([CODE]new color(80, 80, 80));[/CODE] g2d.fillrect(x, y, width, height); g2d.setcolor(color.black); g2d.drawrect(x, y, width, height); g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 18)); int textwidth = g2d.getfontmetrics().[CODE]stringwidth(text);[/CODE] g2d.draw[CODE]string(text, x + (width - textwidth) / 2, y + height / 2 + 5);[/CODE] } @override [CODE]public void mouseclicked(mouseevent e) {[/CODE] [CODE]if (gameovermenushown) {[/CODE] int mousex = e.getx(); int mousey = e.gety(); [CODE]if (mousex >= getwidth() / 2 - 100 && mousex <= getwidth() / 2 + 100 && mousey >= getheight() / 2 + 70 && mousey <= getheight() / 2 + 120) {[/CODE] system.out.pr[CODE]intln(""yeniden başla clicked"");[/CODE] gameovermenushown = false; initializegame(); startgameloop(); this.requestfocusinwindow(); } [CODE]if (mousex >= getwidth() / 2 - 100 && mousex <= getwidth() / 2 + 100 && mousey >= getheight() / 2 + 140 && mousey <= getheight() / 2 + 190) {[/CODE] system.out.pr[CODE]intln(""ana menü clicked"");[/CODE] gameovermenushown = false; gamewindow.showmainmenu(); } } } @override [CODE]public void mouseentered(mouseevent e) {[/CODE] } @override [CODE]public void mouseexited(mouseevent e) {[/CODE] } @override [CODE]public void keytyped(keyevent e) {[/CODE] } // mi̇ni̇map private [CODE]void drawminimap(graphics2d g2d) {[/CODE] [CODE]int minimapwidth = 150;[/CODE] [CODE]int minimapheight = 100;[/CODE] g2d.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2d.fillrect(205, 10, minimapwidth, minimapheight); g2d.setcolor(color.green); int playerminix = 205 + (int) ((player.getx() / map_width) * minimapwidth); int playerminiy = 10 + (int) ((player.gety() / map_height) * minimapheight); g2d.filloval(playerminix, playerminiy, 5, 5); g2d.setcolor(color.red); [CODE]for (zombie zombie : zombies) {[/CODE] int zombieminix = 205 + (int) ((zombie.getx() / map_width) * minimapwidth); int zombieminiy = 10 + (int) ((zombie.gety() / map_height) * minimapheight); g2d.filloval(zombieminix, zombieminiy, 3, 3); } } [CODE]public void playsoundeffect(string name) {[/CODE] [CODE]if (soundmanager != null) {[/CODE] soundmanager.playsoundeffect(name); } } [CODE]public void cleanup() {[/CODE] stopgamemusic(); [CODE]if (soundmanager != null) {[/CODE] soundmanager.cleanup(); } } } import java.io.*; import java.util.properties; [CODE]public class settingsmanager {[/CODE] private static final string settings_file = ""gamesettings.properties""; // default settings private [CODE]static final boolean default_sfx_enabled = true;[/CODE] private [CODE]static final boolean default_music_enabled = true;[/CODE] private static final float default_sfx_volume = 0.6f; private static final float default_music_volume = 0.3f; private boolean sfxenabled; private boolean musicenabled; private float sfxvolume; private float musicvolume; private [CODE]static settingsmanager instance;[/CODE] [CODE]public static settingsmanager getinstance() {[/CODE] [CODE]if (instance == null) {[/CODE] instance = [CODE]new settingsmanager();[/CODE] } [CODE]return instance;[/CODE] } private settingsmanager() { loadsettings(); } [CODE]public void loadsettings() {[/CODE] properties props = [CODE]new properties();[/CODE] file settingsfile = [CODE]new file(settings_file);[/CODE] if (settingsfile.exists()) { [CODE]try (fileinputstream in = new fileinputstream(settingsfile)) {[/CODE] props.load(in); sfxenabled = boolean .parseboolean(props.getproperty(""sfx_enabled"", string.valueof(default_sfx_enabled))); musicenabled = boolean .parseboolean(props.getproperty(""music_enabled"", string.valueof(default_music_enabled))); sfxvolume = float.parsefloat(props.getproperty(""sfx_volume"", string.valueof(default_sfx_volume))); musicvolume = float.parsefloat(props.getproperty(""music_volume"", string.valueof(default_music_volume))); system.out.pr[CODE]intln(""settings loaded: "" + ""sfx="" + sfxenabled + "", sfx volume="" + sfxvolume + "", music="" + musicenabled + "", music volume="" + musicvolume);[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.err.println(""error loading settings: "" + e.getmessage()); usedefaultsettings(); } [CODE]catch (numberformatexception e) {[/CODE] system.err.println(""invalid number in settings file: "" + e.getmessage()); usedefaultsettings(); } } [CODE]else {[/CODE] usedefaultsettings(); savesettings(); } } [CODE]public void savesettings() {[/CODE] properties props = [CODE]new properties();[/CODE] props.setproperty(""sfx_enabled"", string.valueof(sfxenabled)); props.setproperty(""music_enabled"", string.valueof(musicenabled)); props.setproperty(""sfx_volume"", string.valueof(sfxvolume)); props.setproperty(""music_volume"", string.valueof(musicvolume)); [CODE]try (fileoutputstream out = new fileoutputstream(settings_file)) {[/CODE] props.store(out, ""game settings""); system.out.pr[CODE]intln(""settings saved successfully!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.err.println(""error saving settings: "" + e.getmessage()); } } private [CODE]void usedefaultsettings() {[/CODE] sfxenabled = default_sfx_enabled; musicenabled = default_music_enabled; sfxvolume = default_sfx_volume; musicvolume = default_music_volume; system.out.pr[CODE]intln(""using default settings"");[/CODE] } [CODE]public void applysettings(soundmanager soundmanager) {[/CODE] [CODE]if (soundmanager != null) {[/CODE] soundmanager.togglesoundeffects(sfxenabled); soundmanager.togglemusic(musicenabled); soundmanager.seteffectsvolume(sfxvolume); soundmanager.setmusicvolume(musicvolume); } } [CODE]public boolean issfxenabled() {[/CODE] [CODE]return sfxenabled;[/CODE] } [CODE]public void setsfxenabled(boolean sfxenabled) {[/CODE] this.sfxenabled = sfxenabled; } [CODE]public boolean ismusicenabled() {[/CODE] [CODE]return musicenabled;[/CODE] } [CODE]public void setmusicenabled(boolean musicenabled) {[/CODE] this.musicenabled = musicenabled; } [CODE]public float getsfxvolume() {[/CODE] [CODE]return sfxvolume;[/CODE] } [CODE]public void setsfxvolume(float sfxvolume) {[/CODE] [CODE]if (sfxvolume < 0f) sfxvolume = 0f;[/CODE] if (sfxvolume > 1.0f) sfxvolume = 1.0f; this.sfxvolume = sfxvolume; } [CODE]public float getmusicvolume() {[/CODE] [CODE]return musicvolume;[/CODE] } [CODE]public void setmusicvolume(float musicvolume) {[/CODE] [CODE]if (musicvolume < 0f) musicvolume = 0f;[/CODE] if (musicvolume > 1.0f) musicvolume = 1.0f; this.musicvolume = musicvolume; } } [CODE]public class game {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // oyunu başlatma gamewindow gamewindow = [CODE]new gamewindow();[/CODE] gamewindow.setvisible(true); } } import javax.sound.sampled.*; import java.io.file; import java.io.ioexception; import java.util.hashmap; import java.util.map; [CODE]public class soundmanager {[/CODE] private clip backgroundmusic; private map<[CODE]string, clip> soundeffects;[/CODE] private boolean musicenabled = true; private boolean soundeffectsenabled = true; private float musicvolume = 1.0f; // 1.0 = 100% private float effectsvolume = 1.0f; private boolean wasmusicplaying = false; [CODE]public soundmanager() {[/CODE] soundeffects = [CODE]new hashmap<>();[/CODE] } [CODE]public void loadbackgroundmusic(string filepath) {[/CODE] [CODE]try {[/CODE] [CODE]if (backgroundmusic != null) {[/CODE] backgroundmusic.close(); } system.out.pr[CODE]intln(""müzik dosyası yükleniyor: "" + filepath);[/CODE] file musicfile = [CODE]new file(filepath);[/CODE] if (!musicfile.exists()) { system.err.println(""müzik dosyası bulunamadı: "" + musicfile.getabsolutepath()); [CODE]return;[/CODE] } audioinputstream audiostream = audiosystem.getaudioinputstream(musicfile); backgroundmusic = audiosystem.getclip(); backgroundmusic.open(audiostream); backgroundmusic.loop(clip.loop_continuously); setmusicvolume(musicvolume); system.out.pr[CODE]intln(""müzik dosyası başarıyla yüklendi!"");[/CODE] } [CODE]catch (unsupportedaudiofileexception | ioexception | lineunavailableexception e) {[/CODE] system.err.println(""müzik yüklenirken hata: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadsoundeffect(string name, string filepath) {[/CODE] [CODE]try {[/CODE] file soundfile = [CODE]new file(filepath);[/CODE] audioinputstream audiostream = audiosystem.getaudioinputstream(soundfile); clip clip = audiosystem.getclip(); clip.open(audiostream); soundeffects.put(name, clip); } [CODE]catch (unsupportedaudiofileexception | ioexception | lineunavailableexception e) {[/CODE] system.err.println(""error loading sound effect: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void playsoundeffect(string name) {[/CODE] [CODE]if (!soundeffectsenabled) return;[/CODE] clip clip = soundeffects.get(name); [CODE]if (clip != null) {[/CODE] clip.stop(); clip.setframeposition(0); setclipvolume(clip, effectsvolume); clip.start(); } } [CODE]public void togglemusic(boolean enabled) {[/CODE] musicenabled = enabled; [CODE]if (backgroundmusic != null) {[/CODE] [CODE]if (musicenabled) {[/CODE] [CODE]try {[/CODE] backgroundmusic.setframeposition(0); backgroundmusic.start(); wasmusicplaying = true; setmusicvolume(musicvolume); system.out.pr[CODE]intln(""müzik başlatıldı, ses seviyesi: "" + musicvolume);[/CODE] } [CODE]catch (exception e) {[/CODE] system.err.println(""müzik başlatılırken hata: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } } [CODE]else {[/CODE] backgroundmusic.stop(); wasmusicplaying = false; system.out.pr[CODE]intln(""müzik durduruldu"");[/CODE] } } [CODE]else {[/CODE] system.out.pr[CODE]intln(""backgroundmusic null - müzik çalınamıyor!"");[/CODE] } } [CODE]public void togglesoundeffects(boolean enabled) {[/CODE] soundeffectsenabled = enabled; system.out.pr[CODE]intln(""ses efektleri "" + (enabled ? ""açıldı"" : ""kapatıldı""));[/CODE] } [CODE]public void setmusicvolume(float volume) {[/CODE] [CODE]if (volume < 0f) volume = 0f;[/CODE] if (volume > 1.0f) volume = 1.0f; this.musicvolume = volume; system.out.pr[CODE]intln(""müzik ses seviyesi ayarlandı: "" + volume);[/CODE] [CODE]if (backgroundmusic != null) {[/CODE] setclipvolume(backgroundmusic, volume); } } [CODE]public void seteffectsvolume(float volume) {[/CODE] [CODE]if (volume < 0f) volume = 0f;[/CODE] if (volume > 1.0f) volume = 1.0f; this.effectsvolume = volume; system.out.pr[CODE]intln(""efekt ses seviyesi ayarlandı: "" + volume);[/CODE] for (clip clip : soundeffects.values()) { [CODE]if (clip != null) {[/CODE] setclipvolume(clip, volume); } } } [CODE]public void setallvolumes(float volume) {[/CODE] setmusicvolume(volume); seteffectsvolume(volume); } private [CODE]void setclipvolume(clip clip, float volume) {[/CODE] [CODE]try {[/CODE] if (clip.iscontrolsupported(floatcontrol.type.master_gain)) { floatcontrol gaincontrol = (floatcontrol) clip.getcontrol(floatcontrol.type.master_gain); float db = (volume > 0) ? 20f * (float) math.log10(volume) : -80.0f; float min = gaincontrol.getminimum(); float max = gaincontrol.getmaximum(); db = math.max(min, math.min(max, db)); gaincontrol.setvalue(db); system.out.pr[CODE]intln(""clip ses seviyesi ayarlandı: "" + volume + "" ("" + db + "" db)"");[/CODE] } [CODE]else {[/CODE] system.out.pr[CODE]intln(""bu clip için ses kontrolü desteklenmiyor!"");[/CODE] } } [CODE]catch (exception e) {[/CODE] system.err.println(""ses seviyesi ayarlanırken hata: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public boolean ismusicenabled() {[/CODE] [CODE]return musicenabled;[/CODE] } [CODE]public boolean issoundeffectsenabled() {[/CODE] [CODE]return soundeffectsenabled;[/CODE] } [CODE]public float getmusicvolume() {[/CODE] [CODE]return musicvolume;[/CODE] } [CODE]public float geteffectsvolume() {[/CODE] [CODE]return effectsvolume;[/CODE] } [CODE]public void cleanup() {[/CODE] [CODE]if (backgroundmusic != null) {[/CODE] backgroundmusic.stop(); backgroundmusic.close(); } for (clip clip : soundeffects.values()) { [CODE]if (clip != null) {[/CODE] clip.stop(); clip.close(); } } } [CODE]public void pausemusic() {[/CODE] if (backgroundmusic != null && backgroundmusic.isrunning()) { wasmusicplaying = true; backgroundmusic.stop(); system.out.pr[CODE]intln(""müzik duraklatıldı"");[/CODE] } [CODE]else {[/CODE] wasmusicplaying = false; } } [CODE]public void resumemusic() {[/CODE] [CODE]if (backgroundmusic != null && wasmusicplaying && musicenabled) {[/CODE] backgroundmusic.start(); system.out.pr[CODE]intln(""müzik devam ediyor"");[/CODE] } } [CODE]public void stopmusic() {[/CODE] [CODE]if (backgroundmusic != null) {[/CODE] backgroundmusic.stop(); backgroundmusic.setframeposition(0); wasmusicplaying = false; system.out.pr[CODE]intln(""müzik durduruldu ve sıfırlandı"");[/CODE] } } } import java.io.file; [CODE]public class imageutils {[/CODE] [CODE]public static boolean ensureimagefolderexists() {[/CODE] file imagefolder = [CODE]new file(""images"");[/CODE] if (!imagefolder.exists()) { boolean created = imagefolder.mkdir(); [CODE]if (created) {[/CODE] system.out.println(""images klasörü oluşturuldu.""); [CODE]return true;[/CODE] } [CODE]else {[/CODE] system.err.pr[CODE]intln(""images klasörü oluşturulamadı!"");[/CODE] [CODE]return false;[/CODE] } } [CODE]else {[/CODE] file playerimage = new file(""images/player.png""); if (!playerimage.exists()) { system.out.println( ""uyarı: images/player.png bulunamadı. oyuncu resim olarak varsayılan oval kullanılacak.""); } [CODE]return true;[/CODE] } } } import java.io.serializable; import java.util.list; import entitys.*; import entitys.zombie.*; import silah.*; import mermi.*; [CODE]public class gamestate implements serializable {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private player player; private list<zombie> zombies; private list<bullet> bullets; private list<weapon> playerweapons; private list<ammopickup> ammopickups; private [CODE]int currentwave;[/CODE] private [CODE]int zombieskilled;[/CODE] private [CODE]int totalscore;[/CODE] [CODE]public gamestate(player player, list<zombie> zombies, list<bullet> bullets, list<weapon> playerweapons, list<ammopickup> ammopickups, int currentwave, int zombieskilled, int totalscore) {[/CODE] this.player = player; this.zombies = zombies; this.bullets = bullets; this.playerweapons = playerweapons; this.ammopickups = ammopickups; this.currentwave = currentwave; this.zombieskilled = zombieskilled; this.totalscore = totalscore; } [CODE]public player getplayer() {[/CODE] [CODE]return player;[/CODE] } [CODE]public list<zombie> getzombies() {[/CODE] [CODE]return zombies;[/CODE] } [CODE]public list<bullet> getbullets() {[/CODE] [CODE]return bullets;[/CODE] } [CODE]public list<weapon> getplayerweapons() {[/CODE] [CODE]return playerweapons;[/CODE] } [CODE]public list<ammopickup> getammopickups() {[/CODE] [CODE]return ammopickups;[/CODE] } [CODE]public int getcurrentwave() {[/CODE] [CODE]return currentwave;[/CODE] } [CODE]public int getzombieskilled() {[/CODE] [CODE]return zombieskilled;[/CODE] } [CODE]public int gettotalscore() {[/CODE] [CODE]return totalscore;[/CODE] } [CODE]public void resolvereferences() {[/CODE] [CODE]for (weapon weapon : playerweapons) {[/CODE] weapon.setbulletlist(bullets); } if (!playerweapons.isempty()) { player.setcurrentweapon(playerweapons.get(0)); } } } [CODE]package mermi;[/CODE] import java.awt.*; import entitys.*; import silah.*; [CODE]public class bullet implements entity {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] protected double x, y; protected double velox, veloy; protected double angle; protected double speed = 10.0; protected [CODE]int width = 4;[/CODE] protected [CODE]int height = 4;[/CODE] protected [CODE]int damage;[/CODE] protected weapontype weapontype; protected boolean ispenetrating = false; // keskin nişancı tüfeği private [CODE]static final int map_width = 1600;[/CODE] private [CODE]static final int map_height = 1200;[/CODE] [CODE]public bullet(double x, double y, double angle, int damage, weapontype weapontype) {[/CODE] this.x = x; this.y = y; this.angle = angle; this.damage = damage; this.weapontype = weapontype; velox = math.cos(angle) * speed; veloy = math.sin(angle) * speed; } @override [CODE]public void update() {[/CODE] x += velox; y += veloy; } @override [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.setcolor(getbulletcolor()); g2d.filloval(([CODE]int) x - width / 2, (int) y - height / 2, width, height);[/CODE] } [CODE]public boolean isoutofbounds() {[/CODE] [CODE]return x < 0 || x > map_width || y < 0 || y > map_height;[/CODE] } private color getbulletcolor() { switch (weapontype) { case pistol: return color.yellow; case assaultrifle: return color.orange; case shotgun: return color.red; case sniperrifle: return color.white; case rocketlauncher: return color.red; default: return color.white; } } @override [CODE]public double getx() {[/CODE] [CODE]return x;[/CODE] } @override [CODE]public double gety() {[/CODE] [CODE]return y;[/CODE] } @override [CODE]public int getwidth() {[/CODE] [CODE]return width;[/CODE] } @override [CODE]public int getheight() {[/CODE] [CODE]return height;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public weapontype getweapontype() {[/CODE] [CODE]return weapontype;[/CODE] } [CODE]public boolean ispenetrating() {[/CODE] [CODE]return ispenetrating;[/CODE] } [CODE]public void setpenetrating(boolean penetrating) {[/CODE] this.ispenetrating = penetrating; } @override [CODE]public boolean intersects(entity other) {[/CODE] return x - width / 2 < other.getx() + other.getwidth() && x + width / 2 > other.getx() && y - height / 2 < other.gety() + other.getheight() && y + height / 2 > other.gety(); } @override [CODE]public double getdistance(entity other) {[/CODE] double centerx = x; double centery = y; double othercenterx = other.getx() + other.getwidth() / 2; double othercentery = other.gety() + other.getheight() / 2; return math.sqrt(math.pow(centerx - othercenterx, 2) + math.pow(centery - othercentery, 2)); } } [CODE]package mermi;[/CODE] import java.awt.*; import java.util.list; import entitys.*; import entitys.zombie.*; import silah.*; [CODE]public class rocket extends bullet {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private [CODE]int explosionradius = 100;[/CODE] private color trailcolor = [CODE]new color(255, 140, 0, 150);[/CODE] [CODE]public rocket(double x, double y, double angle, int damage, weapontype weapontype) {[/CODE] super(x, y, angle, damage, weapontype); this.speed = 5.0; this.width = 8; this.height = 8; } @override [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.setcolor(color.red); g2d.filloval(([CODE]int) x - width / 2, (int) y - height / 2, width, height);[/CODE] // efekt bırakma g2d.setcolor(trailcolor); double traillength = 20.0; double trailx = x - math.cos(angle) * traillength; double traily = y - math.sin(angle) * traillength; g2d.drawline(([CODE]int) x, (int) y, (int) trailx, (int) traily);[/CODE] } [CODE]public void explode(list<zombie> zombies) {[/CODE] [CODE]for (zombie zombie : zombies) {[/CODE] double distance = getdistance(zombie); [CODE]if (distance <= explosionradius) {[/CODE] double damagemultiplier = 1.0 - (distance / explosionradius); [CODE]int explosiondamage = (int) (damage * damagemultiplier);[/CODE] zombie.takedamage(explosiondamage); } } } } [CODE]package mermi;[/CODE] import java.awt.*; import entitys.*; import silah.*; [CODE]public class ammopickup implements entity {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private double x, y; private [CODE]int width = 15;[/CODE] private [CODE]int height = 15;[/CODE] private weapontype weapontype; private [CODE]int amount;[/CODE] [CODE]public ammopickup(double x, double y, weapontype weapontype) {[/CODE] this.x = x; this.y = y; this.weapontype = weapontype; switch (weapontype) { case pistol: amount = 12; break; case assaultr[CODE]ifle: amount = 30;[/CODE] break; case shotgun: amount = 5; break; case sniperr[CODE]ifle: amount = 5;[/CODE] break; case rocketlauncher: amount = 1; break; default: amount = 10; } } @override [CODE]public void update() {[/CODE] } @override [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.setcolor(getammocolor()); g2d.fillrect(([CODE]int) x, (int) y, width, height);[/CODE] g2d.setcolor(color.black); g2d.drawrect(([CODE]int) x, (int) y, width, height);[/CODE] } private color getammocolor() { switch (weapontype) { case pistol: return color.yellow; case assaultrifle: return color.orange; case shotgun: return color.red; case sniperrifle: return color.white; case rocketlauncher: [CODE]return new color(128, 0, 0);[/CODE] default: return color.gray; } } @override [CODE]public double getx() {[/CODE] [CODE]return x;[/CODE] } @override [CODE]public double gety() {[/CODE] [CODE]return y;[/CODE] } @override [CODE]public int getwidth() {[/CODE] [CODE]return width;[/CODE] } @override [CODE]public int getheight() {[/CODE] [CODE]return height;[/CODE] } [CODE]public weapontype getweapontype() {[/CODE] [CODE]return weapontype;[/CODE] } [CODE]public int getamount() {[/CODE] [CODE]return amount;[/CODE] } @override [CODE]public boolean intersects(entity other) {[/CODE] return x < other.getx() + other.getwidth() && x + width > other.getx() && y < other.gety() + other.getheight() && y + height > other.gety(); } @override [CODE]public double getdistance(entity other) {[/CODE] double centerx = x + width / 2; double centery = y + height / 2; double othercenterx = other.getx() + other.getwidth() / 2; double othercentery = other.gety() + other.getheight() / 2; return math.sqrt(math.pow(centerx - othercenterx, 2) + math.pow(centery - othercentery, 2)); } } [CODE]package entitys;[/CODE] import java.awt.graphics2d; import java.io.serializable; [CODE]public interface entity extends serializable {[/CODE] [CODE]void update();[/CODE] [CODE]void draw(graphics2d g2d);[/CODE] double getx(); double gety(); [CODE]int getwidth();[/CODE] [CODE]int getheight();[/CODE] boolean [CODE]intersects(entity other);[/CODE] double getdistance(entity other); } [CODE]package entitys;[/CODE] import java.awt.*; import java.awt.event.*; import java.io.file; import java.io.ioexception; import java.util.list; import java.awt.image.bufferedimage; import javax.imageio.imageio; import entitys.zombie.*; import silah.*; import mermi.*; [CODE]public class player implements entity {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private double x, y; private double velox, veloy; private [CODE]int width = 20, height = 20;[/CODE] private [CODE]int health = 100;[/CODE] private double angle = 0; private boolean moveup, movedown, moveleft, moveright; private boolean isshooting; private weapon currentweapon; private long lastshottime; private [CODE]static final int map_width = 1600;[/CODE] private [CODE]static final int map_height = 1200;[/CODE] private transient bufferedimage playerimage; private boolean imageloaded = false; // ölçeklendirme faktörü - görüntüyü küçültmek için private double scalecarpan = 0.7; // görüntüyü %70 boyutuna küçültür [CODE]public player(double x, double y) {[/CODE] this.x = x; this.y = y; loadplayerimage(); } [CODE]public void loadplayerimage() {[/CODE] [CODE]try {[/CODE] playerimage = imageio.read(new file(""images\\dp_player.png"")); width = (int) (playerimage.getwidth() * scalecarpan); height = (int) (playerimage.getheight() * scalecarpan); imageloaded = true; system.out.println(""oyuncu görüntüsü başarıyla yüklendi.""); } [CODE]catch (ioexception e) {[/CODE] system.err.println(""oyuncu görüntüsü yüklenirken hata: "" + e.getmessage()); // default değerler width = 30; height = 30; imageloaded = false; } } @override [CODE]public void update() {[/CODE] // hareket işlemi velox = 0; veloy = 0; double speed = 3.0; [CODE]if (moveup) veloy -= speed;[/CODE] [CODE]if (movedown) veloy += speed;[/CODE] [CODE]if (moveleft) velox -= speed;[/CODE] [CODE]if (moveright) velox += speed;[/CODE] [CODE]if ((moveup || movedown) && (moveleft || moveright)) {[/CODE] double diagonal = math.sqrt(2); velox /= diagonal; veloy /= diagonal; } // yeni konum double [CODE]newx = x + velox;[/CODE] double [CODE]newy = y + veloy;[/CODE] setposition([CODE]newx, newy);[/CODE] // ateş etme [CODE]if (isshooting && currentweapon != null) {[/CODE] long currenttime = system.currenttimemillis(); long firerate = (long) (60000 / currentweapon.getfirerate()); // dakikada mermi ms cinsinden if (currenttime - lastshottime >= firerate && currentweapon.getcurrentammo() > 0) { shoot(); lastshottime = currenttime; } } } private [CODE]void shoot() {[/CODE] if (currentweapon != null && currentweapon.getcurrentammo() > 0) { currentweapon.fire(this, angle); } } [CODE]public void reloadweapon() {[/CODE] [CODE]if (currentweapon != null) {[/CODE] currentweapon.reload(); } } [CODE]public void takedamage(int damage) {[/CODE] health -= damage; [CODE]if (health < 0) health = 0;[/CODE] } [CODE]public void collectammo(ammopickup ammo) {[/CODE] if (currentweapon != null && currentweapon.gettype() == ammo.getweapontype()) { currentweapon.addammo(ammo.getamount()); } } [CODE]public void keypressed(keyevent e) {[/CODE] switch (e.getkeycode()) { case keyevent.vk_w: moveup = true; break; case keyevent.vk_s: movedown = true; break; case keyevent.vk_a: moveleft = true; break; case keyevent.vk_d: moveright = true; break; } } [CODE]public void keyreleased(keyevent e) {[/CODE] switch (e.getkeycode()) { case keyevent.vk_w: moveup = false; break; case keyevent.vk_s: movedown = false; break; case keyevent.vk_a: moveleft = false; break; case keyevent.vk_d: moveright = false; break; } } [CODE]public void mousepressed(mouseevent e, list<bullet> bullets) {[/CODE] isshooting = true; double mousex = e.getx(); double mousey = e.gety(); updateangle(mousex, mousey); [CODE]if (currentweapon != null) {[/CODE] currentweapon.setbulletlist(bullets); } } [CODE]public void mousereleased(mouseevent e) {[/CODE] isshooting = false; } [CODE]public void mousemoved(mouseevent e) {[/CODE] double mousex = e.getx(); double mousey = e.gety(); updateangle(mousex, mousey); } private [CODE]void updateangle(double mousex, double mousey) {[/CODE] // karakterin merkezi double centerx = x + width / 2; double centery = y + height / 2; // fare ile karakter merkezi arasındaki açıyı hesapla angle = math.atan2(mousey - centery, mousex - centerx); } @override [CODE]public void draw(graphics2d g2d) {[/CODE] // oyuncuyu çiz - görüntü veya varsayılan oval [CODE]if (imageloaded) {[/CODE] g2d.drawimage(playerimage, ([CODE]int) x, (int) y, width, height, null);[/CODE] // karakterin baktığı yönü gösteren ve silahı temsil eden çizgi double centerx = x + width / 2; double centery = y + height / 2; double linelength = 20; double endx = centerx + math.cos(angle) * linelength; double endy = centery + math.sin(angle) * linelength; g2d.setcolor(color.white); g2d.drawline(([CODE]int) centerx, (int) centery, (int) endx, (int) endy);[/CODE] } [CODE]else {[/CODE] // image yüklenemezse default mavi daire çiz g2d.setcolor(color.blue); g2d.filloval(([CODE]int) x, (int) y, width, height);[/CODE] // karakterin baktığı yönü gösteren ve silahı temsil eden çizgi double centerx = x + width / 2; double centery = y + height / 2; double linelength = 20; double endx = centerx + math.cos(angle) * linelength; double endy = centery + math.sin(angle) * linelength; g2d.setcolor(color.white); g2d.drawline(([CODE]int) centerx, (int) centery, (int) endx, (int) endy);[/CODE] } } @override [CODE]public double getx() {[/CODE] [CODE]return x;[/CODE] } @override [CODE]public double gety() {[/CODE] [CODE]return y;[/CODE] } @override [CODE]public int getwidth() {[/CODE] [CODE]return width;[/CODE] } @override [CODE]public int getheight() {[/CODE] [CODE]return height;[/CODE] } [CODE]public void sethealth(int health) {[/CODE] this.health = health; } [CODE]public double getangle() {[/CODE] [CODE]return angle;[/CODE] } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public weapon getcurrentweapon() {[/CODE] [CODE]return currentweapon;[/CODE] } [CODE]public void setcurrentweapon(weapon weapon) {[/CODE] this.currentweapon = weapon; } @override [CODE]public boolean intersects(entity other) {[/CODE] return x < other.getx() + other.getwidth() && x + width > other.getx() && y < other.gety() + other.getheight() && y + height > other.gety(); } @override [CODE]public double getdistance(entity other) {[/CODE] double centerx = x + width / 2; double centery = y + height / 2; double othercenterx = other.getx() + other.getwidth() / 2; double othercentery = other.gety() + other.getheight() / 2; return math.sqrt(math.pow(centerx - othercenterx, 2) + math.pow(centery - othercentery, 2)); } [CODE]public void setposition(double x, double y) {[/CODE] this.x = math.max(0, math.min(x, map_width - width)); this.y = math.max(0, math.min(y, map_height - height)); } // görüntü değiştirme metodu - farklı karakterler veya durumlar için [CODE]public void changeplayerimage(string imagepath) {[/CODE] [CODE]try {[/CODE] playerimage = imageio.read([CODE]new file(imagepath));[/CODE] imageloaded = true; system.out.pr[CODE]intln(""oyuncu görüntüsü değiştirildi: "" + imagepath);[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.err.println(""görüntü değiştirilirken hata: "" + e.getmessage()); imageloaded = false; } } // harita sınırları içinde hareket kontrolü [CODE]public boolean iswithinmapbounds(double newx, double newy) {[/CODE] [CODE]return newx >= 0 && newx <= map_width - width && newy >= 0 && newy <= map_height - height;[/CODE] } [CODE]public string getmapposition() {[/CODE] return string.format(""konum: (%.2f, %.2f) - harita boyutu: %dx%d"", x, y, map_width, map_height); } private void readobject(java.io.objectinputstream in) throws ioexception, [CODE]classnotfoundexception {[/CODE] in.defaultreadobject(); loadplayerimage(); } [CODE]public boolean isimageloaded() {[/CODE] [CODE]return imageloaded;[/CODE] } } package entitys.zombie; import java.awt.*; import java.io.serializable; import entitys.*; [CODE]public abstract class zombie implements entity, serializable {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public double x, y;[/CODE] protected double velox, veloy; protected [CODE]int width = 25;[/CODE] protected [CODE]int height = 25;[/CODE] protected [CODE]int health;[/CODE] protected [CODE]int damage;[/CODE] protected double speed; protected color color; [CODE]public zombie(double x, double y, int health, int damage, double speed, color color) {[/CODE] this.x = x; this.y = y; this.health = health; this.damage = damage; this.speed = speed; this.color = color; } [CODE]public void update(player player) {[/CODE] // oyuncuya doğru hareket etme double playerx = player.getx() + player.getwidth() / 2; double playery = player.gety() + player.getheight() / 2; double centerx = x + width / 2; double centery = y + height / 2; double angle = math.atan2(playery - centery, playerx - centerx); velox = math.cos(angle) * speed; veloy = math.sin(angle) * speed; x += velox; y += veloy; } @override [CODE]public void draw(graphics2d g2d) {[/CODE] g2d.setcolor(color); g2d.filloval(([CODE]int) x, (int) y, width, height);[/CODE] // can barı [CODE]int healthbarwidth = width;[/CODE] [CODE]int healthbarheight = 5;[/CODE] [CODE]int healthpercentage = (int) ((double) health / getmaxhealth() * healthbarwidth);[/CODE] g2d.setcolor(color.red); g2d.fillrect(([CODE]int) x, (int) y - healthbarheight - 2, healthbarwidth, healthbarheight);[/CODE] g2d.setcolor(color.green); g2d.fillrect(([CODE]int) x, (int) y - healthbarheight - 2, healthpercentage, healthbarheight);[/CODE] } [CODE]public void takedamage(int damage) {[/CODE] health -= damage; [CODE]if (health < 0) health = 0;[/CODE] } [CODE]public abstract int getmaxhealth();[/CODE] @override [CODE]public double getx() {[/CODE] [CODE]return x;[/CODE] } @override [CODE]public double gety() {[/CODE] [CODE]return y;[/CODE] } @override [CODE]public int getwidth() {[/CODE] [CODE]return width;[/CODE] } @override [CODE]public int getheight() {[/CODE] [CODE]return height;[/CODE] } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } @override [CODE]public boolean intersects(entity other) {[/CODE] return x < other.getx() + other.getwidth() && x + width > other.getx() && y < other.gety() + other.getheight() && y + height > other.gety(); } @override [CODE]public double getdistance(entity other) {[/CODE] double centerx = x + width / 2; double centery = y + height / 2; double othercenterx = other.getx() + other.getwidth() / 2; double othercentery = other.gety() + other.getheight() / 2; return math.sqrt(math.pow(centerx - othercenterx, 2) + math.pow(centery - othercentery, 2)); } } package entitys.zombie; import java.awt.color; import java.util.random; import entitys.*; [CODE]public class acidzombie extends zombie {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private [CODE]static final int max_health = 40;[/CODE] private [CODE]int tukcooldown = 0;[/CODE] private [CODE]static final int tuk_cooldown_max = 120;[/CODE] // sıklık private [CODE]int spitrange = 200;[/CODE] // tükürme menzili private [CODE]int spitdamage = 5;[/CODE] // tükürme hasarı private random random; [CODE]public acidzombie(double x, double y) {[/CODE] super(x, y, max_health, 10, 0.48, [CODE]new color(0, 100, 0));[/CODE] // koyu yeşil this.random = [CODE]new random();[/CODE] } @override [CODE]public void update(player player) {[/CODE] super.update(player); // asit tükürme mekanizması [CODE]if (tukcooldown <= 0) {[/CODE] double distance = getdistance(player); [CODE]if (distance <= spitrange) {[/CODE] tukacid(player); tukcooldown = tuk_cooldown_max; ; } } [CODE]else {[/CODE] tukcooldown--; } } private [CODE]void tukacid(player player) {[/CODE] double distance = getdistance(player); double hitchance = 1.0 - (distance / spitrange); if (random.nextdouble() < hitchance) { player.takedamage(spitdamage); } } @override [CODE]public int getmaxhealth() {[/CODE] [CODE]return max_health;[/CODE] } @override [CODE]public void update() {[/CODE] } } package entitys.zombie; import java.awt.color; [CODE]public class normalzombie extends zombie {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private [CODE]static final int max_health = 50;[/CODE] [CODE]public normalzombie(double x, double y) {[/CODE] super(x, y, max_health, 10, 0.6, color.green); } @override [CODE]public int getmaxhealth() {[/CODE] [CODE]return max_health;[/CODE] } @override [CODE]public void update() {[/CODE] } } package entitys.zombie; import java.awt.color; import entitys.*; [CODE]public class crawlerzombie extends zombie {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private [CODE]static final int max_health = 30;[/CODE] private boolean isjumping = false; private [CODE]int jumpcooldown = 0;[/CODE] private [CODE]static final int jump_cooldown_max = 60;[/CODE] // sıklık [CODE]public crawlerzombie(double x, double y) {[/CODE] super(x, y, max_health, 10, 0.9, color.yellow); } @override [CODE]public void update(player player) {[/CODE] double distance = getdistance(player); // yakında olduğunda atlama [CODE]if (distance < 50 && jumpcooldown <= 0 && !isjumping) {[/CODE] isjumping = true; jumpcooldown = jump_cooldown_max; speed *= 2; } [CODE]if (isjumping) {[/CODE] jumpcooldown--; [CODE]if (jumpcooldown <= 0) {[/CODE] isjumping = false; speed = 0.9; } } [CODE]else if (jumpcooldown > 0) {[/CODE] jumpcooldown--; } super.update(player); } @override [CODE]public int getmaxhealth() {[/CODE] [CODE]return max_health;[/CODE] } @override [CODE]public void update() {[/CODE] } } package entitys.zombie; import java.awt.color; [CODE]public class tankzombie extends zombie {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private [CODE]static final int max_health = 150;[/CODE] [CODE]public tankzombie(double x, double y) {[/CODE] super(x, y, max_health, 20, 0.3, color.gray); this.width = 35; this.height = 35; } @override [CODE]public int getmaxhealth() {[/CODE] [CODE]return max_health;[/CODE] } @override [CODE]public void update() {[/CODE] } } [CODE]package silah;[/CODE] import java.io.serializable; import java.util.list; import entitys.*; import mermi.*; [CODE]public abstract class weapon implements serializable {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] protected [CODE]string name;[/CODE] protected [CODE]int sarjorsize;[/CODE] protected [CODE]int currentammo;[/CODE] protected [CODE]int totalammo;[/CODE] protected double firerate; // dakikada atış sayısı protected [CODE]int damage;[/CODE] protected weapontype type; protected list<bullet> bulletlist; [CODE]public weapon(string name, int sarjorsize, double firerate, int damage, weapontype type) {[/CODE] this.name = name; this.sarjorsize = sarjorsize; this.currentammo = sarjorsize; this.totalammo = 10000;// başlangıç yedek mermi sayısı this.firerate = firerate; this.damage = damage; this.type = type; } [CODE]public abstract void fire(player player, double angle);[/CODE] [CODE]public void reload() {[/CODE] [CODE]if (totalammo > 0) {[/CODE] [CODE]int ammoneeded = sarjorsize - currentammo;[/CODE] int ammotoload = math.min(ammoneeded, totalammo); currentammo += ammotoload; totalammo -= ammotoload; } } [CODE]public void addammo(int amount) {[/CODE] totalammo += amount; } // getter ve setter metodları [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getsarjorsize() {[/CODE] [CODE]return sarjorsize;[/CODE] } [CODE]public int getcurrentammo() {[/CODE] [CODE]return currentammo;[/CODE] } [CODE]public int gettotalammo() {[/CODE] [CODE]return totalammo;[/CODE] } [CODE]public double getfirerate() {[/CODE] [CODE]return firerate;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public weapontype gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void setbulletlist(list<bullet> bulletlist) {[/CODE] this.bulletlist = bulletlist; } [CODE]public void setcurrentammo(int currentammo) {[/CODE] // negat[CODE]if değer olmaması için kontrol if (currentammo < 0) {[/CODE] this.currentammo = 0; } [CODE]else if (currentammo > sarjorsize) {[/CODE] // şarjör kapasitesini aşmaması için kontrol this.currentammo = sarjorsize; } [CODE]else {[/CODE] this.currentammo = currentammo; } } [CODE]public void settotalammo(int totalammo) {[/CODE] // negat[CODE]if değer olmaması için kontrol if (totalammo < 0) {[/CODE] this.totalammo = 0; } [CODE]else {[/CODE] this.totalammo = totalammo; } } } [CODE]package silah;[/CODE] import entitys.*; import mermi.*; [CODE]public class shotgun extends weapon {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public shotgun() {[/CODE] super(""pompalı tüfek"", 5, 60, 8, weapontype.shotgun); } @override [CODE]public void fire(player player, double angle) {[/CODE] [CODE]if (currentammo > 0) {[/CODE] double bulletx = player.getx() + player.getwidth() / 2; double bullety = player.gety() + player.getheight() / 2; // 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi double yayılmaangle = math.toradians(45); double teksacmaangle = yayılmaangle / 8; // 8 aralık 9 mermi [CODE]for (int i = 0;[/CODE] i < 9; i++) { double currentangle = angle - (yayılmaangle / 2) + (i * teksacmaangle); bullet bullet = [CODE]new bullet(bulletx, bullety, currentangle, damage, type);[/CODE] bulletlist.add(bullet); } currentammo--; } } } [CODE]package silah;[/CODE] [CODE]public enum weapontype {[/CODE] pistol, assaultr[CODE]ifle, shotgun, sniperrifle, rocketlauncher }[/CODE] [CODE]package silah;[/CODE] import entitys.*; import mermi.*; [CODE]public class sniperrifle extends weapon {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public sniperrifle() {[/CODE] super(""keskin nişancı tüfeği"", 5, 30, 50, weapontype.sniperr[CODE]ifle);[/CODE] } @override [CODE]public void fire(player player, double angle) {[/CODE] [CODE]if (currentammo > 0) {[/CODE] double bulletx = player.getx() + player.getwidth() / 2; double bullety = player.gety() + player.getheight() / 2; // mermi zombileri delip geçer bullet bullet = [CODE]new bullet(bulletx, bullety, angle, damage, type);[/CODE] bullet.setpenetrating(true); bulletlist.add(bullet); currentammo--; } } } [CODE]package silah;[/CODE] import entitys.*; import mermi.*; [CODE]public class pistol extends weapon {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public pistol() {[/CODE] super(""tabanca"", 12, 120, 15, weapontype.pistol); this.totalammo = integer.max_value; // sınırsız yedek şarjör } @override [CODE]public void fire(player player, double angle) {[/CODE] [CODE]if (currentammo > 0) {[/CODE] double bulletx = player.getx() + player.getwidth() / 2; double bullety = player.gety() + player.getheight() / 2; bullet bullet = [CODE]new bullet(bulletx, bullety, angle, damage, type);[/CODE] bulletlist.add(bullet); currentammo--; } } } [CODE]package silah;[/CODE] import java.util.random; import entitys.*; import mermi.*; [CODE]public class assaultrifle extends weapon {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private random random; [CODE]public assaultrifle() {[/CODE] super(""piyade tüfeği"", 30, 600, 10, weapontype.assaultr[CODE]ifle);[/CODE] this.random = [CODE]new random();[/CODE] } @override [CODE]public void fire(player player, double angle) {[/CODE] [CODE]if (currentammo > 0) {[/CODE] double bulletx = player.getx() + player.getwidth() / 2; double bullety = player.gety() + player.getheight() / 2; // 30 derece sapma double sapma = math.toradians(30); double randomsapma = (random.nextdouble() - 0.5) * sapma; bullet bullet = [CODE]new bullet(bulletx, bullety, angle + randomsapma, damage, type);[/CODE] bulletlist.add(bullet); currentammo--; } } } [CODE]package silah;[/CODE] import entitys.*; import mermi.*; [CODE]public class rocketlauncher extends weapon {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public rocketlauncher() {[/CODE] super(""roketatar"", 1, 10, 100, weapontype.rocketlauncher); } @override [CODE]public void fire(player player, double angle) {[/CODE] [CODE]if (currentammo > 0) {[/CODE] double bulletx = player.getx() + player.getwidth() / 2; double bullety = player.gety() + player.getheight() / 2; rocket rocket = [CODE]new rocket(bulletx, bullety, angle, damage, type);[/CODE] bulletlist.add(rocket); currentammo--; } } }"
4540765,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package quiz1bil211nebiyanar;[/CODE] [CODE]public class main {[/CODE] [CODE]public static int collatz(int i,int count) {[/CODE] [CODE]if(i==1) {[/CODE] [CODE]return count ;[/CODE] } [CODE]else if(i%2==0) {[/CODE] [CODE]return collatz(i/2,count+1);[/CODE] } [CODE]else {[/CODE] [CODE]return collatz(3*i+1,count+1);[/CODE] } } [CODE]public static void cocktailsort(int[] arr,int iteration) {[/CODE] //iteration 0 başlatılacak if(iteration==arr.length-1) { } [CODE]else {[/CODE] [CODE]if(iteration%2==0) {[/CODE] [CODE]for(int i=0;[/CODE]i<arr.length-1;i++) { [CODE]if(arr[i]>arr[i+1]) {[/CODE] [CODE]int temp=arr[i];[/CODE] arr[i]=arr[i+1]; arr[i+1]=temp; } } cocktailsort(arr, iteration+1); } [CODE]else {[/CODE] for(int i=arr.length-1;i>0;i--) { [CODE]if(arr[i-1]>arr[i]) {[/CODE] [CODE]int temp=arr[i-1];[/CODE] arr[i-1]=arr[i]; arr[i]=temp; } } cocktailsort(arr, iteration+1); } } } [CODE]public static void main(string[] args) {[/CODE] //system.out.pr[CODE]intln(collatz(5,0));[/CODE] sayac sayac=[CODE]new sayac(""10001"");[/CODE] //system.out.println(sayac.say()); [CODE]int[] arr1= {[/CODE]1,4,5,7,3,2}; cocktailsort(arr1, 0); [CODE]for(int i=0;[/CODE]i<arr1.length;i++) { system.out.pr[CODE]intln(arr1[i]);[/CODE] } } } [CODE]package quiz1bil211nebiyanar;[/CODE] [CODE]public class sayac {[/CODE] [CODE]static string str1;[/CODE] [CODE]public sayac(string str) {[/CODE] str1=str; } [CODE]public static int say() {[/CODE] [CODE]return say(str1);[/CODE] } [CODE]public static int say(string str1) {[/CODE] if(str1.length()==0) [CODE]return 0;[/CODE] [CODE]else {[/CODE] if(str1.charat(0)=='1') return 1+ say(str1.sub[CODE]string(1));[/CODE] [CODE]else {[/CODE] return say(str1.sub[CODE]string(1));[/CODE] } } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (haf[CODE]if ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public class muzikcalar {[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji) {[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(list<sarki> sarkilistesi) {[/CODE] [CODE]if (strateji != null) {[/CODE] strateji.cal(sarkilistesi); } } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki instanceof metalsarki) ((metalsarki) sarki).gostermetalozellikleri(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim,string sanatci) {[/CODE] this.isim=isim; this.sanatci=sanatci; // todo auto-generated constructor stub } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] -""+sanatci+"" -""+isim+"" - (hafif ve sakin)"");[/CODE] } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim,string sanatci,string metalozellik) {[/CODE] this.isim=isim; this.sanatci=sanatci; this.metalozellik=metalozellik; // todo auto-generated constructor stub } [CODE]void gostermetalozellikleri() {[/CODE] system.out.pr[CODE]intln(""[metal] -""+sanatci+"" -""+isim+"" ""+""[ozellik: ""+metalozellik+""]"");[/CODE] } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] -""+sanatci+"" -""+isim+"" -""+""(""+metalozellik+"")"");[/CODE] } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim,string sanatci) {[/CODE] this.isim=isim; this.sanatci=sanatci; // todo auto-generated constructor stub } [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] -""+sanatci+"" -""+isim+"" -(huzurlu ve nostaljik)"");[/CODE] } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.arraylist; import java.util.collections; import java.util.list; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<sarki> karisikliste = [CODE]new arraylist<>(sarkilistesi);[/CODE] collections.shuffle(karisikliste); [CODE]for (int i=0;[/CODE]i<karisikliste.size();i++) { karisikliste.get(i).oynat(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i=0;[/CODE]i<sarkilistesi.size();i++) { sarkilistesi.get(i).oynat(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list <sarki> sarkilistesi) {[/CODE] boolean isrock=false; [CODE]for(int i=0;[/CODE]i<sarkilistesi.size();i++) { if(sarkilistesi.get(i) instanceof rocksarki && !isrock) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi̇ yuksek"");[/CODE] isrock=true; } else if(!(sarkilistesi.get(i) instanceof rocksarki && isrock)) { system.out.pr[CODE]intln(""[bilgi] ses duzeyi̇ normal"");[/CODE] isrock=false; } sarkilistesi.get(i).oynat(); } } } [CODE]package lab2bil211nebiyanar;[/CODE] import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java [CODE]string sınıfı metotları 4 package lab3bil211nebiyanar;[/CODE] import java.io.file; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.filewriter; import java.io.ioexception; import java.io.inputstream; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]try {[/CODE] dosyametodlari.kelimeoku(); dosyametodlari.kelimesay(); dosyametodlari.sonucyaz(); } [CODE]catch (inputexception | kelimebulunamadiexception e) {[/CODE] // todo auto-generated catch block e.pr[CODE]intstacktrace();[/CODE] } } } [CODE]package lab3bil211nebiyanar;[/CODE] [CODE]public class kelimebulunamadiexception extends exception {[/CODE] [CODE]public kelimebulunamadiexception(string kelime) {[/CODE] system.out.pr[CODE]intln(""hata ""+kelime+"" bulunamadi"");[/CODE] } } [CODE]package lab3bil211nebiyanar;[/CODE] import java.lang.classfile.super[CODE]class;[/CODE] [CODE]public class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception(string filename) {[/CODE] super(""hata: "" + filename + "" bos.""); } } [CODE]package lab3bil211nebiyanar;[/CODE] import java.io.file; import java.io.filenotfoundexception; import java.io.filewriter; import java.io.ioexception; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class dosyametodlari {[/CODE] [CODE]static arraylist<string> aranankelimeler = new arraylist<>();[/CODE] [CODE]static arraylist<integer> kelimesayilari = new arraylist<>();[/CODE] [CODE]public static void kelimeoku() throws inputexception {[/CODE] file dosya = new file(""kelimeler.txt""); if (!dosya.exists()) throw new dosyabulunamadiexception(""kelimeler.txt""); [CODE]try (scanner scanner = new scanner(dosya)) {[/CODE] if (!scanner.hasnext()) throw new bosdosyaexception(""kelimeler.txt""); while (scanner.hasnextline()) { string kelime = scanner.nextline().trim().tolowercase(); if (!kelime.isempty()) { aranankelimeler.add(kelime); kelimesayilari.add(0); } } } [CODE]catch (filenotfoundexception e) {[/CODE] throw new dosyabulunamadiexception(""kelimeler.txt""); } } [CODE]public static void kelimesay() throws inputexception, kelimebulunamadiexception {[/CODE] file dosya = new file(""metin.txt""); if (!dosya.exists()) throw new dosyabulunamadiexception(""metin.txt""); [CODE]try (scanner scanner = new scanner(dosya)) {[/CODE] if (!scanner.hasnext()) throw new bosdosyaexception(""metin.txt""); while (scanner.hasnextline()) { string satir = scanner.nextline().tolowercase(); string removed=satir.replace(""\\p{punct}"",""""); string[] kelimeler = satir.split("" ""); [CODE]for (string kelime : kelimeler) {[/CODE] [CODE]for (int i = 0;[/CODE] i < aranankelimeler.size(); i++) { if (aranankelimeler.get(i).equals(kelime)) { kelimesayilari.set(i, kelimesayilari.get(i) + 1); } } } } } [CODE]catch (filenotfoundexception e) {[/CODE] throw new dosyabulunamadiexception(""metin.txt""); } [CODE]for (int i = 0;[/CODE] i < aranankelimeler.size(); i++) { if (kelimesayilari.get(i) == 0) { throw new kelimebulunamadiexception(aranankelimeler.get(i)); } } } [CODE]public static void sonucyaz() {[/CODE] try (printwriter writer = new printwriter(new filewriter(""sonuc.txt""))) { [CODE]for (int i = 0;[/CODE] i < aranankelimeler.size(); i++) { if (kelimesayilari.get(i) > 0) { writer.println(aranankelimeler.get(i) + "" "" + kelimesayilari.get(i)); } } } [CODE]catch (ioexception e) {[/CODE] system.err.println(""hata: sonuc.txt dosyasına yazılamadı.""); } } } [CODE]package lab3bil211nebiyanar;[/CODE] [CODE]public class inputexception extends exception {[/CODE] [CODE]public inputexception(string message) {[/CODE] super(message); } } [CODE]package lab3bil211nebiyanar;[/CODE] [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]public dosyabulunamadiexception(string filename) {[/CODE] super(""hata: "" + filename + "" bulunamadı.""); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon [CODE]package lab4nebiyanarbil211;[/CODE] import java.util.arraylist; import java.util.list; [CODE]public class inventory<t extends item> {[/CODE] private arraylist<t> items = [CODE]new arraylist<>();[/CODE] [CODE]public void additem(t item) {[/CODE] items.add(item); } [CODE]public void removeitem(t item) {[/CODE] items.remove(item); } [CODE]public void printinventory() {[/CODE] [CODE]for (t item : items) {[/CODE] system.out.println(item.getname() + "" - değer: "" + item.getvalue()); } } [CODE]public t mostvaluableitem(){[/CODE] [CODE]int maxind=0;[/CODE] [CODE]int i=0;[/CODE] [CODE]int max=-99;[/CODE] [CODE]for (t item : items) {[/CODE] if(item.getvalue()>max) { max=item.getvalue(); maxind=i; } i++; } return items.get(maxind); } [CODE]public t finditembyname(string name) {[/CODE] [CODE]for (t item : items) {[/CODE] if(item.getname().equals(name)) { [CODE]return item;[/CODE] } } [CODE]return null;[/CODE] } list<t> finditemsbyvalue([CODE]int value){[/CODE] arraylist<t>my[CODE]newlist=new arraylist<t>();[/CODE] [CODE]for(t item:items) {[/CODE] if(item.getvalue()>value); mynewlist.addlast(item); } [CODE]return mynewlist;[/CODE] } [CODE]int gettotalvalue() {[/CODE] [CODE]int sum=0;[/CODE] [CODE]for(t item:items) {[/CODE] sum+=item.getvalue(); } [CODE]return sum;[/CODE] } [CODE]public list<t> filterbytype(class<?> type) {[/CODE] list<t> filtereditems = [CODE]new arraylist<>();[/CODE] [CODE]for (t item : items) {[/CODE] if ((type == weapon.class && item instanceof weapon) || (type == armor.class && item instanceof armor) || (type == potion.[CODE]class && item instanceof potion)) {[/CODE] filtereditems.add(item); } } [CODE]return filtereditems;[/CODE] } [CODE]int gettotalweapondamage() {[/CODE] [CODE]int sum=0;[/CODE] [CODE]for(t item:items) {[/CODE] [CODE]if(item instanceof weapon) {[/CODE] sum+=((weapon) item).getdamage(); } } [CODE]return sum;[/CODE] } [CODE]public void sortbyvalue() {[/CODE] int n = items.size(); [CODE]for (int i = 0;[/CODE] i < n - 1; i++) { [CODE]for (int j = 0;[/CODE] j < n - i - 1; j++) { if (items.get(j).getvalue() < items.get(j + 1).getvalue()) { t temp = items.get(j); items.set(j, items.get(j + 1)); items.set(j + 1, temp); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory) {[/CODE] item item = inventory.mostvaluableitem(); [CODE]if (item != null) {[/CODE] system.out.println(""en değerli eşya: "" + item.getname() + "" - değer: "" + item.getvalue()); } } [CODE]public static void transferarmor(inventory<? super armor> destination,inventory<armor> source) {[/CODE] for (armor armor : new arraylist<>(source.items)) { destination.additem(armor); source.removeitem(armor); } } } [CODE]package lab4nebiyanarbil211;[/CODE] [CODE]public class weapon implements item {[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int damage;[/CODE] [CODE]public weapon(string name, int value, int damage) {[/CODE] this.name = name; this.value = value; this.damage = damage; } @override [CODE]public string getname() {[/CODE] // todo auto-generated method stub [CODE]return name;[/CODE] } [CODE]public int getvalue() {[/CODE] // todo auto-generated method stub [CODE]return value;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } } [CODE]package lab4nebiyanarbil211;[/CODE] [CODE]public interface item {[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]package lab4nebiyanarbil211;[/CODE] [CODE]public class armor implements item {[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense) {[/CODE] this.name = name; this.value = value; this.defense = defense; } [CODE]public int getdefense() {[/CODE] [CODE]return defense;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]package lab4nebiyanarbil211;[/CODE] [CODE]public class potion implements item {[/CODE] private [CODE]string effect;[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] [CODE]public potion(string name,int value,string effect) {[/CODE] this.value=value; this.name=name; this.effect=effect; } [CODE]public string getname() {[/CODE] // todo auto-generated method stub [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] // todo auto-generated method stub [CODE]return value;[/CODE] } [CODE]public string geteffect() {[/CODE] [CODE]return effect;[/CODE] } } [CODE]package lab4nebiyanarbil211;[/CODE] import java.util.arraylist; import java.util.list; [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] inventory<item> generalinventory = [CODE]new inventory<>();[/CODE] inventory<weapon> weaponinventory = [CODE]new inventory<>();[/CODE] weapon sword = [CODE]new weapon(""silah1"", 1000, 100);[/CODE] armor shield = [CODE]new armor(""kalkan1"", 800, 50);[/CODE] potion potion = [CODE]new potion(""i̇ksir1"", 300, ""can artışı oldu"");[/CODE] weapon shotgunweapon = [CODE]new weapon(""sawed-off"", 2000, 1905);[/CODE] weapon taramaliweapon=[CODE]new weapon(""m4a1"", 550, 770);[/CODE] generalinventory.additem(sword); generalinventory.additem(shield); generalinventory.additem(potion); generalinventory.additem(shotgunweapon); generalinventory.additem(taramaliweapon); weaponinventory.additem(sword); weaponinventory.additem(shotgunweapon); weaponinventory.additem(taramaliweapon); generalinventory.pr[CODE]intinventory();[/CODE] system.out.println(""en degerli item: "" + generalinventory.mostvaluableitem().getname()); inventory.pr[CODE]intmostvaluableitem(generalinventory);[/CODE] list<item> weapons = generalinventory.filterbytype(weapon.[CODE]class);[/CODE] system.out.pr[CODE]intln(""filtrelenmiş silahlar:"");[/CODE] [CODE]for (item item : weapons) {[/CODE] system.out.println(item.getname() + "" - deger: "" + item.getvalue()); } } } bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]package q1bil211nebiyanar;[/CODE] [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot() {[/CODE] this.name=""wall-e""; this.type=""trash""; this.batterylevel=100; this.isoperational=true; } [CODE]public robot(string name,string type,int batterylevel) {[/CODE] this.name=name; this.type=type; this.batterylevel=batterylevel; if(this.batterylevel>0) { this.isoperational=true; } [CODE]else {[/CODE] this.isoperational=false; } } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean isoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] this.batterylevel=100; } [CODE]public void printrobot() {[/CODE] system.out.println(string.[CODE]format(""robot name:%s robot type:%s trash battery level:"" + ""%d isoperational:%b"",name,type,batterylevel,isoperational));[/CODE] } } [CODE]package q1bil211nebiyanar;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory=[CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]package q1bil211nebiyanar;[/CODE] import java.security.permission; [CODE]public class soru1 {[/CODE] [CODE]public static void perm(string str,int index) {[/CODE] system.out.pr[CODE]intln(str);[/CODE] if(str.length()-1==index) { } [CODE]else {[/CODE] if((str.charat(index)>=65&&str.charat(index)<=90)) { index++; perm(str.substring(0, index+1).tolowercase()+str.sub[CODE]string(index+1),index);[/CODE] } else if(str.charat(index)>=48 && str.charat(index)<=57) { index++; perm(str.substring(0, index+1).touppercase()+str.sub[CODE]string(index+1),index);[/CODE] } } } [CODE]public static void main(string[] args) {[/CODE] perm(""a1b"", 0); } } [CODE]package q1bil211nebiyanar;[/CODE] import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory() {[/CODE] this.name=""factory1""; this.location=""moon""; this.robots=arraylist <robot>(); } [CODE]public factory(string name,string location) {[/CODE] this.name=name; this.location=location; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocation() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robots1) {[/CODE] robots.addlast(robots1); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name:""+name+"" location:""+location);[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void works() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]int maxbattery;[/CODE] [CODE]public abstractrobot(string modelname,int batterylife) {[/CODE] this.modelname=modelname; this.batteryl[CODE]ife=batterylife;[/CODE] this.maxbattery=batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public void recharge() {[/CODE] [CODE]if(maxbattery<100) {[/CODE] this.batteryl[CODE]ife=100;[/CODE] } [CODE]else {[/CODE] this.batteryl[CODE]ife=maxbattery;[/CODE] } } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.totalrobotproduced(); } } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname,int batterylife,boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed=isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife<10) {[/CODE] system.out.pr[CODE]intln(""[""+modelname+""] not enough battery to scan threads"");[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""]"" + ""scanning for threads... armed:""+isarmed); batteryl[CODE]ife-=10;[/CODE] } } [CODE]public void tooglearmedmode() {[/CODE] [CODE]if(isarmed) {[/CODE] isarmed=false; system.out.println(""securityrobot - ""+this.modelname+ "" is now unarmed""); } [CODE]else {[/CODE] isarmed=true; system.out.println(""securityrobot - ""+this.modelname+ "" is now unarmed""); } } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setarmed(boolean isarmed) {[/CODE] this.isarmed = isarmed; } } [CODE]package q2bil211nebiyanar;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname,int batterylife,int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower=cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife<10) {[/CODE] system.out.pr[CODE]intln(""[""+modelname+""] not enough battery to clean"");[/CODE] } [CODE]else {[/CODE] system.out.println(""[""+modelname+""] cleaning in progress .. cleaning power:""+cleaningpower); batteryl[CODE]ife-=10;[/CODE] } } [CODE]public void boostcleaningpower(int miktar) {[/CODE] this.cleaningpower+=miktar; system.out.println(""cleaningrobot - ""+this.modelname+"" now has cleaning power:""+this.cleaningpower); } } [CODE]package q2bil211nebiyanar;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots=[CODE]new arraylist<abstractrobot>();[/CODE] [CODE]static int n=0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] n++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] n++; } [CODE]public void performalltasks() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i) instanceof cleaningrobot) { cleaningrobot r1=(cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: ""+r1.getmodelname() +"", battery:""+r1.getbatterylife()+"", cleaning power:""+r1.getcleaningpower()); } else if(robots.get(i) instanceof securityrobot) { securityrobot r1=(securityrobot) robots.get(i); system.out.println(""securityrobot - model: ""+r1.getmodelname() +"", battery:""+r1.getbatterylife()+"", armed:""+r1.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i) instanceof cleaningrobot) { cleaningrobot r1=(cleaningrobot) robots.get(i); r1.boostcleaningpower( miktar); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(int i=0;[/CODE]i<robots.size();i++) { if(robots.get(i) instanceof securityrobot) { securityrobot r1=(securityrobot) robots.get(i); r1.tooglearmedmode(); } } } [CODE]public static void totalrobotproduced() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafından ""+n+"" robot uretildi"");[/CODE] } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] [CODE]package q4bil211nebiyanar;[/CODE] import java.util.arraylist; import java.util.collection; import java.util.list; [CODE]public class q3 {[/CODE] [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] list<t> filteredlist = [CODE]new arraylist<>();[/CODE] [CODE]for (object myobj : collection) {[/CODE] if (type.isinstance(myobj)) { filteredlist.add((t) myobj); } } [CODE]return filteredlist;[/CODE] } } [CODE]package q4bil211nebiyanar;[/CODE] import java.util.collection; import java.util.iterator; [CODE]public class q2 {[/CODE] [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] if (collection == null || collection.isempty()) { [CODE]return null;[/CODE] } t extreme = null; [CODE]for (t element : collection) {[/CODE] [CODE]if (extreme == null) {[/CODE] extreme = element; } [CODE]else {[/CODE] int compare = element.compareto(extreme); [CODE]if (findmax && compare > 0) {[/CODE] extreme = element; } [CODE]else if (!findmax && compare < 0) {[/CODE] extreme = element; } } } [CODE]return extreme;[/CODE] } } [CODE]package q4bil211nebiyanar;[/CODE] import java.util.arrays; import java.util.list; [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // todo auto-generated method stub undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] //q1 list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] system.out.pr[CODE]intln("""");[/CODE] //q2 list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.println(q2.findextreme(numbers, true)); system.out.println(q2.findextreme(numbers, false)); system.out.pr[CODE]intln("""");[/CODE] // q3 list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(q3.filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(q3.filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] } } [CODE]package q4bil211nebiyanar;[/CODE] import java.util.arraylist; //q1 [CODE]public class undoablelist<t> extends arraylist<t> {[/CODE] [CODE]public void undolast() {[/CODE] if(!this.isempty()) { this.remove(this.size()-1); //size-1 son indekse ulaş } } [CODE]public t getlastadded() {[/CODE] if(!this.isempty()) { return this.get(this.size()-1); } [CODE]return null;[/CODE] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 /** * */ /** * */ module assignment { requires java.desktop; } [CODE]package game;[/CODE] import java.awt.rectangle; [CODE]public class sniper extends gun {[/CODE] [CODE]public sniper() {[/CODE] super(5, 30, 0); this.reloadperbullet=500; } @override [CODE]public void fire(float x, float y, float angle, handler handler) {[/CODE] [CODE]if (!canfire()) return;[/CODE] bullet piercingbullet = new bullet(x, y, id.bullet, handler) { private float damage = 100f; private java.util.set<zombie> hitzombies = new java.util.hashset<>(); @override [CODE]public void tick() {[/CODE] x += velx; y += vely; for (gameobject obj : new java.util.linkedlist<>(handler.object)) { if (obj instanceof zombie zombie && !hitzombies.contains(zombie)) { if (getbounds().intersects(zombie.getbounds())) { zombie.health -= damage; hitzombies.add(zombie); if (zombie.health <= 0) { handler.removeobject(zombie); game.killedzombies++; } damage *= 0.5f; [CODE]if (damage < 10) {[/CODE] handler.removeobject(this); break; } } } } } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int)x, (int)y, 8, 8);[/CODE] } }; piercingbullet.velx = (float)(15 * math.cos(angle)); piercingbullet.vely = (float)(15 * math.sin(angle)); handler.addobject(piercingbullet); currentammo--; lastfiredtime = system.currenttimemillis(); } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; //entityler olusturulmadan once test i̇ci̇n kullani̇lan bir [CODE]class public class box extends gameobject {[/CODE] private player player; private camera cam; private bufferedimage zombieimage; [CODE]public box(float x, float y, id id,camera cam,player player) {[/CODE] super(x, y, id); this.maxhealth = 100; this.health = maxhealth; this.cam=cam; this.player=player; [CODE]try {[/CODE] file file = new file(""src/game/zomb.png""); // yol doğru olmalı zombieimage = imageio.read(file); system.out.pr[CODE]intln(""zombi resmi yüklendi!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""zombi resmi yüklenemedi!"");[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } @override [CODE]public void tick() {[/CODE] float dx = player.getx() - x; float dy = player.gety() - y; float distance = (float)math.sqrt(dx*dx + dy*dy); [CODE]if (distance != 0) {[/CODE] float speed = 1.0f; // zombi hızı velx = (dx / distance) * speed; vely = (dy / distance) * speed; } x += velx; y += vely; // harita dışına çıkmasın x = math.max(0, math.min(x, cam.getworldwidth() - 32)); y = math.max(0, math.min(y, cam.getworldheight() - 32)); } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (zombieimage != null) {[/CODE] g.drawimage(zombieimage, ([CODE]int)x, (int)y, 32, 32, null);[/CODE] } [CODE]else {[/CODE] g.setcolor(color.red); g.fillrect(([CODE]int)x, (int)y, 32, 32);[/CODE] } renderhealthbar(g, 32); } [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int)x, (int)y, 32, 32);[/CODE] } } [CODE]package game;[/CODE] import java.awt.graphics; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public abstract class zombie extends gameobject {[/CODE] protected player player; protected camera cam; protected bufferedimage image; protected [CODE]int damage;[/CODE] [CODE]public zombie(float x, float y, id id, camera cam, player player) {[/CODE] super(x, y, id); this.player = player; this.cam = cam; } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (image != null) {[/CODE] g.drawimage(image, ([CODE]int) x, (int) y, 32, 32, null);[/CODE] } [CODE]else {[/CODE] g.fillrect(([CODE]int) x, (int) y, 32, 32);[/CODE] } renderhealthbar(g, 32); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int) x, (int) y, 44, 44);[/CODE] } [CODE]public rectangle getattackbounds() {[/CODE] [CODE]return new rectangle((int) x + 16, (int) y + 16, 16, 16);[/CODE] } protected [CODE]void followplayer(float speed) {[/CODE] float dx = player.getx() - x; float dy = player.gety() - y; float distance = (float) math.sqrt(dx * dx + dy * dy); [CODE]if (distance == 0) return;[/CODE] float dirx = dx / distance; float diry = dy / distance; float [CODE]tryx = x + dirx * speed;[/CODE] float [CODE]tryy = y + diry * speed;[/CODE] rectangle testbounds = [CODE]new rectangle((int) tryx, (int) tryy, 32, 32);[/CODE] tilemanager tm = game.instance.gethandler().gettilemanager(); [CODE]if (tm == null) return;[/CODE] //nullsa hata atmadan returnla if (!tm.hascollision(testbounds)) { x = [CODE]tryx;[/CODE] y = [CODE]tryy;[/CODE] [CODE]return;[/CODE] } [CODE]tryx = x + dirx * speed;[/CODE] testbounds = [CODE]new rectangle((int) tryx, (int) y, 32, 32);[/CODE] if (!tm.hascollision(testbounds)) { x = [CODE]tryx;[/CODE] [CODE]return;[/CODE] } [CODE]tryy = y + diry * speed;[/CODE] testbounds = [CODE]new rectangle((int) x, (int) tryy, 32, 32);[/CODE] if (!tm.hascollision(testbounds)) { y = [CODE]tryy;[/CODE] } } } [CODE]package game;[/CODE] [CODE]public enum difficulty {[/CODE] easy, medium, hard, test } [CODE]package game;[/CODE] import java.io.file; import java.io.ioexception; import javax.imageio.imageio; import java.awt.rectangle; import java.awt.graphics; import java.awt.image.bufferedimage; [CODE]public class acidzombie extends zombie {[/CODE] private long lastspittime = 0; private long spitcooldown = 2000; // 2 saniye private float spitrange = 200f; private bufferedimage acidimage; [CODE]public acidzombie(float x, float y, camera cam, player player) {[/CODE] super(x, y, id.zombie, cam, player); this.maxhealth = 50; this.health = maxhealth; this.damage = 30; [CODE]try {[/CODE] image = imageio.read(new file(""src/game/zomb1.1.png"")); acidimage = imageio.read(new file(""src/game/acid.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""asit zombi veya asit resmi yüklenemedi!"");[/CODE] } } @override [CODE]public void tick() {[/CODE] float dx = player.getx() + 16 - x; float dy = player.gety() + 16 - y; followplayer(0.8f); // yavaş hareket // asit tükür long now = system.currenttimemillis(); float distance = (float) math.sqrt(dx * dx + dy * dy); [CODE]if (distance <= spitrange && now - lastspittime > spitcooldown) {[/CODE] float angle = (float) math.atan2(dy, dx); shootacid(angle); lastspittime = now; } if (this.health <= 0) { system.out.pr[CODE]intln(""zombi oldu"");[/CODE] explodenearby(); cam.gethandler().removeobject(this); // zombiyi kaldır game.killedzombies++; } } private [CODE]void shootacid(float angle) {[/CODE] bullet acid = new bullet(x, y, id.bullet, cam.gethandler()) { @override [CODE]public void tick() {[/CODE] x += velx; y += vely; if (getbounds().intersects(player.getbounds())) { player.takedamage(15); cam.gethandler().removeobject(this); } } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (acidimage != null) {[/CODE] g.drawimage(acidimage, ([CODE]int)x, (int)y, 10, 10, null);[/CODE] } } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int)x, (int)y, 10, 10);[/CODE] } }; acid.velx = (float) (6 * math.cos(angle)); acid.vely = (float) (6 * math.sin(angle)); cam.gethandler().addobject(acid); } private [CODE]void explodenearby() {[/CODE] system.out.println(""[asit zombi] patladı! yakındakilere hasar veriliyor...""); handler h = cam.gethandler(); system.out.println(""[asit zombi] patladı! yakındaki objelere hasar veriliyor...""); //yakındaki zombi hasarı for (gameobject obj : new java.util.linkedlist<>(h.object)) { double dist = math.hypot(obj.getx() - x, obj.gety() - y); [CODE]if (dist < 50) {[/CODE] [CODE]if (obj instanceof zombie z && obj != this) {[/CODE] z.health -= 80; if (z.health <= 0) { h.removeobject(z); game.killedzombies++; } } [CODE]else if (obj instanceof box box) {[/CODE] box.health -= 20; } } } } } [CODE]package game;[/CODE] [CODE]public abstract class gun {[/CODE] protected [CODE]int magazinesize;[/CODE] protected [CODE]int currentammo;[/CODE] protected [CODE]int reserveammo;[/CODE] protected [CODE]int firerate;[/CODE] // mermi/dk protected long lastfiredtime = 0; protected boolean isreloading = false; protected long reloadstarttime = 0; protected long reloadduration = 2000; // 2 sn protected [CODE]int reloadperbullet = 300;[/CODE] // 0.3 sn [CODE]public void setcurrentammo(int ammo) {[/CODE] this.currentammo = ammo; } [CODE]public void setreserveammo(int ammo) {[/CODE] this.reserveammo = ammo; } [CODE]public boolean isreloading() {[/CODE] [CODE]return isreloading;[/CODE] } [CODE]public float getreloadprogress() {[/CODE] [CODE]if (!isreloading) return 0;[/CODE] return math.min(1f, (system.currenttimemillis() - reloadstarttime) / (float)reloadduration); } [CODE]public gun(int magazinesize, int firerate, int reserveammo) {[/CODE] this.magazinesize = magazinesize; this.firerate = firerate; this.reserveammo = reserveammo; this.currentammo = magazinesize; } [CODE]public void addammo(int amount) {[/CODE] reserveammo += amount; } [CODE]public boolean canfire() {[/CODE] long currenttime = system.currenttimemillis(); [CODE]return currentammo > 0 && currenttime - lastfiredtime >= (60000 / firerate) && !isreloading;[/CODE] } [CODE]public void reload() {[/CODE] [CODE]if (currentammo == magazinesize || reserveammo == 0 || isreloading) return;[/CODE] [CODE]int needed = magazinesize - currentammo;[/CODE] int toreload = math.min(needed, reserveammo); isreloading = true; reloadstarttime = system.currenttimemillis(); reloadduration = math.min(toreload * reloadperbullet, 2500); } [CODE]public void cancelreload() {[/CODE] isreloading = false; reloadstarttime = 0; reloadduration = 0; } [CODE]public void completereload() {[/CODE] [CODE]int needed = magazinesize - currentammo;[/CODE] int toreload = math.min(needed, reserveammo); currentammo += toreload; reserveammo -= toreload; isreloading = false; } [CODE]public abstract void fire(float x, float y, float angle, handler handler);[/CODE] [CODE]public int getcurrentammo() {[/CODE] [CODE]return currentammo;[/CODE] } [CODE]public int getreserveammo() {[/CODE] [CODE]return reserveammo;[/CODE] } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class bullet extends gameobject {[/CODE] private handler handler; private [CODE]static bufferedimage bulletimage;[/CODE] [CODE]static {[/CODE] [CODE]try {[/CODE] bulletimage = imageio.read(new file(""src/game/bullet.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""bullet görseli yüklenemedi!"");[/CODE] } } [CODE]public bullet(float x, float y, id id, handler handler) {[/CODE] super(x, y, id); this.handler = handler; } @override [CODE]public void tick() {[/CODE] x += velx; y += vely; [CODE]for (int i = 0;[/CODE] i < handler.object.size(); i++) { gameobject obj = handler.object.get(i); [CODE]if (obj instanceof zombie zombie) {[/CODE] if (getbounds().intersects(zombie.getbounds())) { zombie.health -= 25; //system.out.println("">> mermi zombiye çarptı: "" + zombie.getclass().getsimplename() + "" | yeni can: "" + zombie.health); if (zombie.health <= 0) { [CODE]if (zombie instanceof acidzombie) {[/CODE] } [CODE]else {[/CODE] handler.removeobject(zombie); game.killedzombies++; if (zombie instanceof normalzombie) game.score += 10; else if (zombie instanceof tankzombie) game.score += 30; else if (zombie instanceof crawlerzombie) game.score += 15; if (game.player != null) { player p = game.player; java.util.list<gun> availableguns = new java.util.arraylist<>(); if (p.rifle != null) availableguns.add(p.r[CODE]ifle);[/CODE] if (p.shotgun != null) availableguns.add(p.shotgun); if (p.sniper != null) availableguns.add(p.sniper); if (p.rocketlauncher != null) availableguns.add(p.rocketlauncher); if (!availableguns.isempty()) { gun selectedgun = availableguns.get(new java.util.random().nextint(availableguns.size())); if (selectedgun instanceof rifle) selectedgun.addammo(10); else if (selectedgun instanceof shotgun) selectedgun.addammo(2); else if (selectedgun instanceof sniper) selectedgun.addammo(1); else if (selectedgun instanceof rocketlauncher) selectedgun.addammo(1); system.out.println(selectedgun.getclass().getsimplename() + "" için mermi düştü!""); } } } } handler.removeobject(this); break; } } } } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (bulletimage != null) {[/CODE] graphics2d g2d = (graphics2d) g.create(); [CODE]int drawx = (int) x;[/CODE] [CODE]int drawy = (int) y;[/CODE] [CODE]int w = 24, h = 24;[/CODE] float centerx = drawx + w / 2f; float centery = drawy + h / 2f; //açı hesap algoritması double angle = math.atan2(vely, velx); g2d.rotate(angle, centerx, centery); g2d.drawimage(bulletimage, drawx, drawy, w, h, null); g2d.dispose(); } [CODE]else {[/CODE] g.setcolor(color.yellow); g.fillrect(([CODE]int)x, (int)y, 8, 8);[/CODE] } } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int)x-2, (int)y-2, 12, 12);[/CODE] } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class shotgun extends gun {[/CODE] [CODE]public shotgun() {[/CODE] super(5, 60, 0); // şarjör: 5, ateş hızı: 60, yedek: 25 mermi this.reloadperbullet=400; } @override [CODE]public void fire(float x, float y, float angle, handler handler) {[/CODE] [CODE]if (!canfire()) return;[/CODE] [CODE]int pelletcount = 9;[/CODE] float spread = (float) math.toradians(45); // 9x5 45 derece dagil float startangle = angle - spread / 2; [CODE]for (int i = 0;[/CODE] i < pelletcount; i++) { float pelletangle = startangle + i * (spread / (pelletcount - 1)); bullet pellet = new bullet(x, y, id.bullet, handler) { private final float startx = x; private final float starty = y; @override [CODE]public void tick() {[/CODE] x += velx; y += vely; for (gameobject obj : new java.util.linkedlist<>(handler.object)) { [CODE]if (obj instanceof zombie zombie) {[/CODE] if (getbounds().intersects(zombie.getbounds())) { float dx = x - startx; float dy = y - starty; float distance = (float) math.sqrt(dx * dx + dy * dy); //mesafeye göre logaritmik hasar algoritmasi float basedamage = 50f; float mindamage = 5f; float logfactor = (float) math.log(distance + 2); float actualdamage = math.max(mindamage, basedamage / (0.5f + logfactor)); zombie.health -= actualdamage; if (zombie.health <= 0) { handler.removeobject(zombie); game.killedzombies++; } handler.removeobject(this); break; } } } } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(139, 69, 19));[/CODE] g.fillrect(([CODE]int) x, (int) y, 4, 4);[/CODE] } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int) x, (int) y, 4, 4);[/CODE] } }; pellet.velx = (float) (10 * math.cos(pelletangle)); pellet.vely = (float) (10 * math.sin(pelletangle)); handler.addobject(pellet); } currentammo--; lastfiredtime = system.currenttimemillis(); } } [CODE]package game;[/CODE] import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class normalzombie extends zombie {[/CODE] [CODE]public normalzombie(float x, float y, camera cam, player player) {[/CODE] super(x, y, id.zombie, cam, player); this.maxhealth = 100; this.health = maxhealth; this.damage = 30; [CODE]try {[/CODE] image = imageio.read(new file(""src/game/zomb1.3.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""normal zombi resmi yüklenemedi!"");[/CODE] } } @override [CODE]public void tick() {[/CODE] float dx = player.getx() + 16 - x; float dy = player.gety() + 16 - y; followplayer(1.0f); // yavaş } } [CODE]package game;[/CODE] [CODE]public enum id {[/CODE] player(), zombie(), block(), bullet(), particle(); } [CODE]package game;[/CODE] import java.awt.event.keyadapter; import java.awt.event.keyevent; [CODE]public class keyinput extends keyadapter {[/CODE] private player player; [CODE]public boolean keys[] = new boolean[4];[/CODE] // d, a, w, s [CODE]public void setplayer(player player) {[/CODE] this.player = player; } @override [CODE]public void keypressed(keyevent e) {[/CODE] int key = e.getkeycode(); // kontrol için system.out.pr[CODE]intln(""tuş basıldı: "" + key);[/CODE] // save alma if (key == keyevent.vk_m) { game.instance.savegame(); game.instance.showsavemenu = true; game.instance.savemenustarttime = system.currenttimemillis(); // system.out.pr[CODE]intln(""m başarili"");[/CODE] [CODE]return;[/CODE] } // f music kapa aç if (key == keyevent.vk_f) { game.instance.musicon = !game.instance.musicon; if (game.instance.backgroundmusic != null) { if (game.instance.musicon) { game.instance.backgroundmusic.start(); // system.out.pr[CODE]intln(""music acildi);[/CODE] } [CODE]else {[/CODE] game.instance.backgroundmusic.stop(); //system.out.pr[CODE]intln("" music kapandi"");[/CODE] } } [CODE]return;[/CODE] } // heal menü // heal menü if (game.openhealthmenu) { [CODE]if (player == null) return;[/CODE] switch (key) { case keyevent.vk_k -> { if ((game.score - game.spentscore) >= 100 && player.gethealth() < player.getmaxhealth()) { player.heal(20); game.spentscore += 100; } } case keyevent.vk_l -> { if ((game.score - game.spentscore) >= 250) { player.increasemaxhealth(20); game.spentscore += 250; } } case keyevent.vk_u -> { if ((game.score - game.spentscore) >= 150 && player.gethealth() < player.getmaxhealth()) { player.heal(player.getmaxhealth() - player.gethealth()); game.spentscore += 150; } } case keyevent.vk_o -> { game.openhealthmenu = false; game.instance.togglepause(); } } [CODE]return;[/CODE] } // movement if (key == keyevent.vk_d) keys[0] = true; if (key == keyevent.vk_a) keys[1] = true; if (key == keyevent.vk_w) keys[2] = true; if (key == keyevent.vk_s) keys[3] = true; // silah degisimi ve reload [CODE]if (player != null) {[/CODE] switch (key) { case keyevent.vk_1 -> player.setcurrentgun(player.pistol); case keyevent.vk_2 -> { if (player.rifle != null) player.setcurrentgun(player.r[CODE]ifle);[/CODE] } case keyevent.vk_3 -> { if (player.shotgun != null) player.setcurrentgun(player.shotgun); } case keyevent.vk_4 -> { if (player.sniper != null) player.setcurrentgun(player.sniper); } case keyevent.vk_5 -> { if (player.rocketlauncher != null) player.setcurrentgun(player.rocketlauncher); } case keyevent.vk_r -> { gun gun = player.getcurrentgun(); if (gun.isreloading()) { gun.cancelreload(); // system.out.pr[CODE]intln("" reload iptal "");[/CODE] } [CODE]else {[/CODE] gun.reload(); //system.out.println("" reload başladı.""); } } case keyevent.vk_h -> { game.openhealthmenu = true; game.instance.togglepause(); //system.out.pr[CODE]intln(""health menu acildi"");[/CODE] } } } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] int key = e.getkeycode(); if (key == keyevent.vk_d) keys[0] = false; if (key == keyevent.vk_a) keys[1] = false; if (key == keyevent.vk_w) keys[2] = false; if (key == keyevent.vk_s) keys[3] = false; } } [CODE]package game;[/CODE] [CODE]public class pistol extends gun {[/CODE] [CODE]public pistol() {[/CODE] super(12, 120, integer.max_value); // sınırsız yedek şarjör this.reloadperbullet=150; } @override [CODE]public void fire(float x, float y, float angle, handler handler) {[/CODE] [CODE]if (!canfire()) return;[/CODE] bullet bullet = new bullet(x, y, id.bullet,handler); bullet.velx = (float) (10 * math.cos(angle)); bullet.vely = (float) (10 * math.sin(angle)); handler.addobject(bullet); currentammo--; lastfiredtime = system.currenttimemillis(); } } [CODE]package game;[/CODE] import java.awt.graphics; import java.awt.rectangle; import java.util.linkedlist; [CODE]public class handler {[/CODE] [CODE]public linkedlist<gameobject> object = new linkedlist<>();[/CODE] private tilemanager tilemanager; [CODE]public void settilemanager(tilemanager tilemanager) {[/CODE] this.tilemanager = tilemanager; } [CODE]public tilemanager gettilemanager() {[/CODE] [CODE]return tilemanager;[/CODE] } [CODE]public void tick() {[/CODE] [CODE]for (int i = 0;[/CODE] i < object.size(); i++) { gameobject obj = object.get(i); obj.tick(); // collision checkliyoruz burda ve aşşağılarda if (tilemanager != null && obj.getid() != id.bullet) { if (tilemanager.hascollision(obj.getbounds())) { //algoritma obj.setx(obj.getx() - obj.velx); obj.sety(obj.gety() - obj.vely); obj.velx = 0; obj.vely = 0; } } } } [CODE]public int zombiecount() {[/CODE] [CODE]int count = 0;[/CODE] [CODE]for (gameobject obj : object) {[/CODE] [CODE]if (obj instanceof zombie) count++;[/CODE] } [CODE]return count;[/CODE] } [CODE]public void render(graphics g) {[/CODE] [CODE]for (int i = 0;[/CODE] i < object.size(); i++) { object.get(i).render(g); } [CODE]for (int i = 0;[/CODE] i < object.size(); i++) { gameobject obj = object.get(i); if (obj.getid() == id.bullet) { rectangle bulletbounds = obj.getbounds(); [CODE]for (int j = 0;[/CODE] j < object.size(); j++) { gameobject obj2 = object.get(j); if (obj2.getid() == id.block) { rectangle boxbounds = obj2.getbounds(); if (bulletbounds.[CODE]intersects(boxbounds)) {[/CODE] box box = (box) obj2; box.health -= 50; removeobject(obj); if (box.health <= 0) { removeobject(box); game.killedboxes++; } break; } } } if (tilemanager != null && tilemanager.hascollision(bulletbounds)) { removeobject(obj); } } } } [CODE]public gameobject addobject(gameobject tempobject) {[/CODE] object.add(tempobject); [CODE]return tempobject;[/CODE] } [CODE]public void removeobject(gameobject tempobject) {[/CODE] object.remove(tempobject); } } [CODE]package game;[/CODE] import java.util.random; [CODE]public class rifle extends gun {[/CODE] private random rand = [CODE]new random();[/CODE] [CODE]public rifle() {[/CODE] super(30, 600, 0); // 30 elde 600 hızında this.reloadperbullet=100; } @override [CODE]public void fire(float x, float y, float angle, handler handler) {[/CODE] [CODE]if (!canfire()) return;[/CODE] float deviation = (float) math.toradians(rand.nextfloat() * 30 - 15); float finalangle = angle + deviation; bullet bullet = new bullet(x, y, id.bullet,handler); bullet.velx = (float) (10 * math.cos(finalangle)); bullet.vely = (float) (10 * math.sin(finalangle)); handler.addobject(bullet); currentammo--; lastfiredtime = system.currenttimemillis(); } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.graphics2d; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class crawlerzombie extends zombie {[/CODE] private boolean leaped = false; private float angle = 0; //radyan [CODE]public crawlerzombie(float x, float y, camera cam, player player) {[/CODE] super(x, y, id.zombie, cam, player); this.maxhealth = 60; this.health = maxhealth; this.damage = 30; [CODE]try {[/CODE] image = imageio.read(new file(""src/game/crawl zombie.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""sürünge zombi resmi yüklenemedi!"");[/CODE] } } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (image != null) {[/CODE] graphics2d g2d = (graphics2d) g.create(); float dx = player.getx() - x; float dy = player.gety() - y; [CODE]int drawx = (int) x;[/CODE] [CODE]int drawy = (int) y;[/CODE] [CODE]int width = 32;[/CODE] [CODE]int height = 32;[/CODE] if (math.abs(dx) > math.abs(dy)) { [CODE]if (dx > 0) {[/CODE] //sağ g2d.drawimage(image, drawx, drawy, width, height, null); } [CODE]else {[/CODE] // sol g2d.drawimage(image, drawx + width, drawy, -width, height, null); } } [CODE]else {[/CODE] [CODE]if (dy > 0) {[/CODE] // aşağı g2d.rotate(math.pi / 2, drawx + width / 2.0, drawy + height / 2.0); g2d.drawimage(image, drawx, drawy, width, height, null); } [CODE]else {[/CODE] // yukarı g2d.rotate(-math.pi / 2, drawx + width / 2.0, drawy + height / 2.0); g2d.drawimage(image, drawx, drawy, width, height, null); } } g2d.dispose(); } [CODE]else {[/CODE] g.setcolor(color.green); g.fillrect(([CODE]int) x, (int) y, 32, 32);[/CODE] } renderhealthbar(g, 32); } @override [CODE]public void tick() {[/CODE] float dx = player.getx() + 16 - x; float dy = player.gety() + 16 - y; float distance = (float)math.sqrt(dx * dx + dy * dy); // eğer 1.5 tile (48px) veya daha yakınsa ve henüz atlamadıysa [CODE]if (distance <= 48 && !leaped) {[/CODE] //jump özelliği yazıldı //system.out.pr[CODE]intln(""atladi"");[/CODE] float boost = 6.0f; // zıplama hızı jump için velx = dx / distance * boost; vely = dy / distance * boost; x += velx; y += vely; leaped = true; } [CODE]else {[/CODE] followplayer(2.0f); // normal hiz } } } [CODE]package game;[/CODE] import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class tankzombie extends zombie {[/CODE] [CODE]public tankzombie(float x, float y, camera cam, player player) {[/CODE] super(x, y, id.zombie, cam, player); this.maxhealth = 300; this.health = maxhealth; this.damage = 60; [CODE]try {[/CODE] image = imageio.read(new file(""src/game/zomb1.4.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""tank zombi resmi yüklenemedi!"");[/CODE] } } @override [CODE]public void tick() {[/CODE] float dx = player.getx() + 16 - x; float dy = player.gety() + 16 - y; followplayer(0.5f); // çok yavaş } } [CODE]package game;[/CODE] import java.awt.canvas; import javax.sound.sampled.*; import java.awt.color; import java.awt.font; import java.awt.graphics; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferstrategy; import java.awt.image.bufferedimage; import java.io.*; import javax.imageio.imageio; [CODE]public class game extends canvas implements runnable {[/CODE] [CODE]public final static int width = 800;[/CODE] [CODE]public final static int height = 600;[/CODE] [CODE]string title = ""after the apocalypse"";[/CODE] [CODE]static protected int killedboxes = 0;[/CODE] [CODE]public static int killedzombies = 0;[/CODE] [CODE]public static int score = 0;[/CODE] [CODE]public static boolean gameover = false;[/CODE] private [CODE]int frames = 0;[/CODE] private [CODE]int fps = 0;[/CODE] public static difficulty difficulty = difficulty.medium; [CODE]public static boolean openhealthmenu = false;[/CODE] [CODE]public static game instance;[/CODE] private boolean bonusgiven = false; private tilemanager tilemanager; private bufferedimage menubackground, startbuttonimg, exitbuttonimg, musicbuttonimg,loadbuttonimg; rectangle startbutton; rectangle exitbutton; rectangle musicbutton; rectangle loadbutton; [CODE]public boolean musicon = true;[/CODE] [CODE]public clip backgroundmusic;[/CODE] [CODE]public boolean showdifficultymenu = false;[/CODE] [CODE]public rectangle easybutton = new rectangle(300, 240, 200, 40);[/CODE] [CODE]public rectangle mediumbutton = new rectangle(300, 300, 200, 40);[/CODE] [CODE]public rectangle hardbutton = new rectangle(300, 360, 200, 40);[/CODE] [CODE]public rectangle testbutton = new rectangle(300, 420, 200, 40);[/CODE] // yeni test butonu [CODE]public static int spentscore = 0;[/CODE] [CODE]public boolean gamestarted = false;[/CODE] [CODE]public boolean isloadinggame = false;[/CODE] [CODE]public boolean openescapemenu = false;[/CODE] [CODE]public boolean showsavemenu = false;[/CODE] long savemenustarttime = 0; private thread thread; private boolean isrunning = false; private keyinput input; private mouseinput minput; private handler handler; camera cam; [CODE]public static player player;[/CODE] private bufferedimage backgroundimage; private boolean ispaused = false; private [CODE]int currentwave = 1;[/CODE] private long wavestarttime = system.currenttimemillis(); private boolean waveinprogress = false; private long wavedelay = 2000; private long lastwavetime = 0; private boolean showwavetext = false; [CODE]public boolean openmainmenu = false;[/CODE] [CODE]public rectangle savebuttonrect = new rectangle(300, 250, 200, 40);[/CODE] [CODE]public rectangle loadbuttonrect = new rectangle(300, 310, 200, 40);[/CODE] [CODE]public game() {[/CODE] [CODE]new window(width, height, title, this);[/CODE] instance=this; init(); start(); } [CODE]public handler gethandler() {[/CODE] [CODE]return handler;[/CODE] } [CODE]public void startgame() {[/CODE] gamestarted = true; showd[CODE]ifficultymenu = false;[/CODE] openmainmenu = false; ispaused = false; gameover = false; init(); } [CODE]public void initmusic() {[/CODE] [CODE]try {[/CODE] audioinputstream audiostream = audiosystem.getaudioinputstream(new file(""src/game/backgroundmus.wav"")); backgroundmusic = audiosystem.getclip(); backgroundmusic.open(audiostream); backgroundmusic.loop(clip.loop_continuously); floatcontrol gaincontrol = (floatcontrol) backgroundmusic.getcontrol(floatcontrol.type.master_gain); gaincontrol.setvalue(1); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } private [CODE]void init() {[/CODE] [CODE]if (!isloadinggame) {[/CODE] killedzombies = 0; score = (difficulty == difficulty.test) ? 500 : 0; currentwave = 1; bonusgiven = false; } isloadinggame = false; [CODE]if (musicon && backgroundmusic == null) {[/CODE] [CODE]try {[/CODE] audioinputstream audiostream = audiosystem.getaudioinputstream(new file(""src/game/backgroundmus.wav"")); backgroundmusic = audiosystem.getclip(); backgroundmusic.open(audiostream); backgroundmusic.loop(clip.loop_continuously); floatcontrol gaincontrol = (floatcontrol) backgroundmusic.getcontrol(floatcontrol.type.master_gain); gaincontrol.setvalue(1); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]try {[/CODE] menubackground = imageio.read(new file(""src/game/anaekran.png"")); startbuttonimg = imageio.read(new file(""src/game/startgame.png"")); exitbuttonimg = imageio.read(new file(""src/game/exit.png"")); musicbuttonimg = imageio.read(new file(""src/game/music.png"")); loadbuttonimg = imageio.read(new file(""src/game/loadgame.png"")); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } startbutton = [CODE]new rectangle(300, 220, 200, 30);[/CODE] loadbutton = [CODE]new rectangle(300, 270, 200, 30);[/CODE] musicbutton = [CODE]new rectangle(300, 320, 200, 30);[/CODE] exitbutton = [CODE]new rectangle(300, 370, 200, 30);[/CODE] [CODE]if (!gamestarted) {[/CODE] openmainmenu = true; } [CODE]try {[/CODE] file file = new file(""src/game/bckg2.jpg""); backgroundimage = imageio.read(file); system.out.pr[CODE]intln(""arka plan yüklendi!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } handler = [CODE]new handler();[/CODE] tilemanager = [CODE]new tilemanager();[/CODE] handler.settilemanager(tilemanager); input = [CODE]new keyinput();[/CODE] for (var l : this.getkeylisteners()) this.removekeylistener(l); this.addkeylistener(input); cam = [CODE]new camera(0, 0, handler, backgroundimage);[/CODE] minput = [CODE]new mouseinput(handler, cam);[/CODE] for (var l : this.getmouselisteners()) this.removemouselistener(l); this.addmouselistener(minput); float spawnx = 300, spawny = 300; while (tilemanager.hascollision([CODE]new rectangle((int)spawnx, (int)spawny, 32, 32))) {[/CODE] spawnx += 32; // bloklarda sıkışmaması için } player = new player(spawnx, spawny, id.player, input, handler, cam); game.player = player; input.setplayer(player); handler.addobject(player); minput.findplayer(); } private synchronized [CODE]void start() {[/CODE] [CODE]if (isrunning) return;[/CODE] thread = [CODE]new thread(this);[/CODE] thread.start(); isrunning = true; } private synchronized [CODE]void stop() {[/CODE] [CODE]try {[/CODE] if (backgroundmusic != null) backgroundmusic.stop(); thread.join(); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } isrunning = false; } [CODE]public void run() {[/CODE] this.setfocusable(true); this.requestfocus(); this.requestfocus(); long lasttime = system.nanotime(); double amountofticks = 60.0; double ns = 1000000000 / amountofticks; double delta = 0; long timer = system.currenttimemillis(); [CODE]while (isrunning) {[/CODE] long now = system.nanotime(); delta += (now - lasttime) / ns; lasttime = now; [CODE]while (delta >= 1) {[/CODE] tick(); delta--; } render(); frames++; if (system.currenttimemillis() - timer > 1000) { timer += 1000; fps = frames; frames = 0; } } stop(); } [CODE]public void togglemainmenu() {[/CODE] [CODE]if (showdifficultymenu) return;[/CODE] openmainmenu = !openmainmenu; ispaused = openmainmenu; } private [CODE]void tick() {[/CODE] [CODE]if (gameover) return;[/CODE] [CODE]if (openmainmenu || openescapemenu) return;[/CODE] if (showsavemenu && system.currenttimemillis() - savemenustarttime > 2000) { showsavemenu = false; // 2 saniye sonra kapat } [CODE]if (ispaused || gameover) return;[/CODE] handler.tick(); cam.tick(); minput.tick(); gun gun = player.getcurrentgun(); if (gun.isreloading() && system.currenttimemillis() - gun.reloadstarttime >= gun.reloadduration) { gun.completereload(); } if (player.gethealth() <= 0) { gameover = true; [CODE]return;[/CODE] } [CODE]if (currentwave <= 12 && getremainingzombies() == 0 && !waveinprogress) {[/CODE] [CODE]if (!bonusgiven && currentwave > 1) {[/CODE] [CODE]int bonus = 75+(currentwave - 1) * 50;[/CODE] game.score += bonus; system.out.println((currentwave - 1) + "". dalga tamamlandı! +"" + bonus + "" skor.""); bonusgiven = true; } spawnwave(currentwave); if (currentwave == 2) player.unlockr[CODE]ifle();[/CODE] if (currentwave == 4) player.unlockshotgun(); if (currentwave == 6) player.unlocksniper(); if (currentwave == 11) player.unlockrocketlauncher(); showwavetext = true; currentwave++; waveinprogress = true; wavestarttime = system.currenttimemillis(); } [CODE]if (currentwave > 12 && getremainingzombies() == 0 && !waveinprogress) {[/CODE] gameover = true; system.out.pr[CODE]intln(""tüm dalgalar tamamlandı!"");[/CODE] } if (system.currenttimemillis() - wavestarttime > wavedelay) { waveinprogress = false; showwavetext = false; } } private [CODE]int getremainingzombies() {[/CODE] [CODE]int count = 0;[/CODE] for (gameobject obj : handler.object) { [CODE]if (obj instanceof zombie) {[/CODE] count++; } } [CODE]return count;[/CODE] } private [CODE]void spawnwave(int wave) {[/CODE] [CODE]int totalzombies;[/CODE] switch (d[CODE]ifficulty) {[/CODE] case easy -> totalzombies = (wave <= 10) ? 2 : 4; case medium -> totalzombies = 3 + wave * 2; case hard -> totalzombies = (int) ((3 + wave * 2) * 1.5); case test -> totalzombies = (wave < 12) ? 1 : 4; default -> totalzombies = 3 + wave * 2; } [CODE]for (int i = 0;[/CODE] i < totalzombies; i++) { float x = 0, y = 0; rectangle zombiebox; [CODE]int attempts = 0;[/CODE] // en fazla 10 deneme yeterli olacaktır daha iyi olsun istersek arttırırız do { x = (float) (math.random() * cam.getworldwidth()); y = (float) (math.random() * cam.getworldheight()); zombiebox = [CODE]new rectangle((int)x, (int)y, 32, 32);[/CODE] attempts++; } while ( (math.hypot(player.getx() - x, player.gety() - y) < 100 || tilemanager.hascollision(zombiebox) || !tilemanager.isspawnable(zombiebox)) && attempts < 10 ); // uygun değilse kaydır if (tilemanager.hascollision(zombiebox)) { [CODE]int[] dx = {[/CODE]0, 32, -32, 0, 0}; [CODE]int[] dy = {[/CODE]0, 0, 0, -32, 32}; [CODE]for (int j = 0;[/CODE] j < dx.length; j++) { float [CODE]newx = x + dx[j];[/CODE] float [CODE]newy = y + dy[j];[/CODE] rectangle [CODE]tryrect = new rectangle((int)newx, (int)newy, 32, 32);[/CODE] if (!tilemanager.hascollision([CODE]tryrect)) {[/CODE] x = [CODE]newx;[/CODE] y = [CODE]newy;[/CODE] break; } } } zombie z = (difficulty == difficulty.test && wave == 12) ? switch (i) { case 0 -> [CODE]new normalzombie(x, y, cam, player);[/CODE] case 1 -> [CODE]new tankzombie(x, y, cam, player);[/CODE] case 2 -> [CODE]new crawlerzombie(x, y, cam, player);[/CODE] case 3 -> [CODE]new acidzombie(x, y, cam, player);[/CODE] default -> [CODE]new normalzombie(x, y, cam, player);[/CODE] } : switch (i % 4) { case 0 -> [CODE]new normalzombie(x, y, cam, player);[/CODE] case 1 -> [CODE]new tankzombie(x, y, cam, player);[/CODE] case 2 -> [CODE]new crawlerzombie(x, y, cam, player);[/CODE] case 3 -> [CODE]new acidzombie(x, y, cam, player);[/CODE] default -> [CODE]new normalzombie(x, y, cam, player);[/CODE] }; handler.addobject(z); } waveinprogress = false; lastwavetime = system.currenttimemillis(); } private [CODE]void render() {[/CODE] bufferstrategy bs = this.getbufferstrategy(); [CODE]if (bs == null) {[/CODE] this.createbufferstrategy(3); [CODE]return;[/CODE] } graphics g = bs.getdrawgraphics(); graphics2d g2d = (graphics2d) g; // giriş arayüzü [CODE]if (!gamestarted && openmainmenu && !showdifficultymenu) {[/CODE] if (menubackground != null) g.drawimage(menubackground, 0, 0, game.width, game.height, null); [CODE]else {[/CODE] g.setcolor(color.black); g.fillrect(0, 0, game.width, game.height); } if (startbuttonimg != null) g.drawimage(startbuttonimg, startbutton.x, startbutton.y, startbutton.width, startbutton.height, null); if (exitbuttonimg != null) g.drawimage(exitbuttonimg, exitbutton.x, exitbutton.y, exitbutton.width, exitbutton.height, null); if (musicbuttonimg != null) g.drawimage(musicbuttonimg, musicbutton.x, musicbutton.y, musicbutton.width, musicbutton.height, null); if (loadbuttonimg != null) g.drawimage(loadbuttonimg, loadbutton.x, loadbutton.y, loadbutton.width, loadbutton.height, null); g.dispose(); bs.show(); [CODE]return;[/CODE] } [CODE]if (showdifficultymenu) {[/CODE] g.setcolor([CODE]new color(0, 0, 0, 180));[/CODE] g.fillrect(100, 100, 600, 400); g.setcolor(color.white); g.setfont(new font(""arial"", font.bold, 32)); g.draw[CODE]string(""zorluk seç"", 310, 160);[/CODE] g.setfont(new font(""arial"", font.plain, 20)); g.drawrect(easybutton.x, easybutton.y, easybutton.width, easybutton.height); g.drawstring(""kolay"", easybutton.x + 70, easybutton.y + 25); g.drawrect(mediumbutton.x, mediumbutton.y, mediumbutton.width, mediumbutton.height); g.drawstring(""orta"", mediumbutton.x + 75, mediumbutton.y + 25); g.drawrect(hardbutton.x, hardbutton.y, hardbutton.width, hardbutton.height); g.drawstring(""zor"", hardbutton.x + 80, hardbutton.y + 25); g.drawrect(testbutton.x, testbutton.y, testbutton.width, testbutton.height); g.drawstring(""test"", testbutton.x + 75, testbutton.y + 25); g.dispose(); bs.show(); [CODE]return;[/CODE] } // oyun g2d.translate(-cam.getx(), -cam.gety()); if (tilemanager != null) tilemanager.render(g2d); handler.render(g2d); g2d.translate(cam.getx(), cam.gety()); g.setcolor(color.white); g.setfont(new font(""arial"", font.bold, 16)); [CODE]string controlstext = ""h: health menu | m: save"";[/CODE] int texttwidth = g.getfontmetrics().[CODE]stringwidth(controlstext);[/CODE] g.drawstring(controlstext, (game.width - texttwidth) / 2 + 20, 20); [CODE]string musictext = ""f: music on/off"";[/CODE] int musictextwidth = g.getfontmetrics().[CODE]stringwidth(musictext);[/CODE] g.drawstring(musictext, (game.width - musictextwidth) / 2 + 20, 40); [CODE]string biltext = ""nebi̇ yanar 231301037"";[/CODE] int biltextwidth = g.getfontmetrics().[CODE]stringwidth(biltext);[/CODE] g.drawstring(biltext, (game.width - biltextwidth) / 2 + 20, 55); // üst yazılar g.setcolor(color.white); g.setfont(new font(""arial"", font.bold, 20)); g.drawstring(""killed zombies: "" + killedzombies, game.width - 190, 20); [CODE]int netscore = score - spentscore;[/CODE] g.drawstring(""score: "" + netscore + ""/"" + score, game.width - 190, 40); gun gun = player.getcurrentgun(); g.drawstring(""weapon: "" + gun.getclass().getsimplename(), 15, 20); g.drawstring(""ammo: "" + gun.getcurrentammo() + ""/"" + gun.getreserveammo(), 15, 40); g.setcolor(color.red); g.fillrect(10, 50, player.gethealth() * 2, 20); g.setcolor(color.white); g.setfont(new font(""arial"", font.bold, 15)); g.drawstring(""health: "" + player.gethealth(), 15, 65); if (gun.isreloading()) { [CODE]int radius = 12;[/CODE] int centerx = (int) (player.getx() - cam.getx() + 16); int centery = (int) (player.gety() - cam.gety() + 16); g.setcolor(color.white); g.drawoval(centerx - radius, centery - radius, radius * 2, radius * 2); float progress = gun.getreloadprogress(); //geçiş algoritması(r -> g) [CODE]int red = (int) (255 * (1 - progress));[/CODE] [CODE]int green = (int) (255 * progress);[/CODE] g.setcolor([CODE]new color(red, green, 0));[/CODE] g.fillarc(centerx - radius, centery - radius, radius * 2, radius * 2, 90, -([CODE]int) (360 * progress));[/CODE] } [CODE]if (showwavetext && currentwave > 1 && currentwave <= 13) {[/CODE] g.setfont(new font(""arial"", font.bold, 40)); g.setcolor(color.yellow); string text = (currentwave - 1) + "". dalga""; int textwidth = g.getfontmetrics().[CODE]stringwidth(text);[/CODE] g.drawstring(text, game.width / 2 - textwidth / 2, game.height / 2 - 100); } // heal menu [CODE]if (openhealthmenu) {[/CODE] g.setcolor([CODE]new color(0, 0, 0, 180));[/CODE] g.fillrect(100, 100, 600, 400); g.setcolor(color.white); g.setfont(new font(""arial"", font.bold, 24)); g.draw[CODE]string(""sağlik menüsü"", 310, 140);[/CODE] g.setfont(new font(""arial"", font.plain, 20)); g.draw[CODE]string(""[k] 100 skor → +20 can"", 240, 200);[/CODE] g.draw[CODE]string(""[l] 250 skor → +20 max can && anlık +20 regen "", 240, 240);[/CODE] g.draw[CODE]string(""[u] 150 skor → full can (regen)"", 240, 280);[/CODE] g.draw[CODE]string(""[o] menüden çık"", 240, 320);[/CODE] } // m ile save [CODE]if (showsavemenu) {[/CODE] g.setcolor([CODE]new color(0, 0, 0, 180));[/CODE] g.fillrect(250, 200, 300, 150); g.setcolor(color.white); g.setfont(new font(""arial"", font.bold, 24)); g.draw[CODE]string(""oyun kaydedildi!"", 290, 260);[/CODE] g.setfont(new font(""arial"", font.plain, 16)); g.draw[CODE]string(""save alindi"", 270, 300);[/CODE] } // oyunun iki türlü bitmesi [CODE]if (gameover) {[/CODE] g.setcolor(color.black); g.setfont(new font(""arial"", font.bold, 50)); if (player.gethealth() <= 0) g.drawstring(""you died!"", game.width / 2 - 130, game.height / 2); else g.drawstring(""tüm dalgalar tamamlandi!"", game.width / 2 - 390, game.height / 2); } // fps g.setcolor(color.green); g.setfont(new font(""arial"", font.plain, 14)); g.drawstring(""fps: "" + fps, game.width - 100, 70); g.dispose(); bs.show(); } [CODE]public void togglepause() {[/CODE] ispaused = !ispaused; system.out.pr[CODE]intln(""pause durumu: "" + (ispaused ? ""durduruldu"" : ""devam ediyor""));[/CODE] } [CODE]public void savegame() {[/CODE] [CODE]try {[/CODE] filewriter writer = new filewriter(""savegame.txt""); // dosyaya zombi player ve gun infoları yaz tekrar okuyacağız writer.write(""player,"" + player.getx() + "","" + player.gety() + "","" + player.gethealth() + "","" + player.getmaxhealth() + "","" + killedzombies + "","" + score + "","" + spentscore + "","" + currentwave + "","" + (player.rifle != null) + "","" + (player.shotgun != null) + "","" + (player.sniper != null) + "","" + (player.rocketlauncher != null) + "","" + (player.rifle != null ? player.rifle.getcurrentammo() : -1) + "","" + (player.rifle != null ? player.rifle.getreserveammo() : -1) + "","" + (player.shotgun != null ? player.shotgun.getcurrentammo() : -1) + "","" + (player.shotgun != null ? player.shotgun.getreserveammo() : -1) + "","" + (player.sniper != null ? player.sniper.getcurrentammo() : -1) + "","" + (player.sniper != null ? player.sniper.getreserveammo() : -1) + "","" + (player.rocketlauncher != null ? player.rocketlauncher.getcurrentammo() : -1) + "","" + (player.rocketlauncher != null ? player.rocketlauncher.getreserveammo() : -1) + "","" + player.pistol.getcurrentammo() + "","" + player.pistol.getreserveammo() + "","" + game.difficulty.name() + ""\n""); for (gameobject obj : handler.object) { [CODE]if (obj instanceof zombie zombie) {[/CODE] writer.write(""zombie,"" + zombie.getclass().getsimplename() + "","" + zombie.getx() + "","" + zombie.gety() + "","" + zombie.health + ""\n""); } } writer.close(); system.out.pr[CODE]intln(""oyun başarıyla kaydedildi!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadgame() {[/CODE] isloadinggame = true; [CODE]try {[/CODE] bufferedreader reader = new bufferedreader(new filereader(""savegame.txt"")); [CODE]string line;[/CODE] handler = [CODE]new handler();[/CODE] tilemanager = [CODE]new tilemanager();[/CODE] handler.settilemanager(tilemanager); input = [CODE]new keyinput();[/CODE] for (var l : this.getkeylisteners()) this.removekeylistener(l); this.addkeylistener(input); cam = [CODE]new camera(0, 0, handler, backgroundimage);[/CODE] minput = [CODE]new mouseinput(handler, cam);[/CODE] this.minput = minput; for (var l : this.getmouselisteners()) this.removemouselistener(l); this.addmouselistener(minput); minput.findplayer(); player = new player(0, 0, id.player, input, handler, cam); game.player = player; input.setplayer(player); minput.findplayer(); handler.addobject(player); while ((line = reader.readline()) != null) { string[] data = line.split("",""); if (data[0].equals(""player"")) { float savedx = float.parsefloat(data[1]); float savedy = float.parsefloat(data[2]); int savedhealth = integer.parse[CODE]int(data[3]);[/CODE] int savedmaxhealth = integer.parse[CODE]int(data[4]);[/CODE] killedzombies = integer.parse[CODE]int(data[5]);[/CODE] if (data.length >= 24) { //zorluga gelcek [CODE]try {[/CODE] game.difficulty = difficulty.valueof(data[23]); system.out.println(""yüklenen zorluk seviyesi: "" + game.d[CODE]ifficulty);[/CODE] } [CODE]catch (exception ex) {[/CODE] system.out.println(""zorluk seviyesi okunamadı, varsayılan medium kullanılacak.""); game.difficulty = difficulty.medium; } } score = integer.parse[CODE]int(data[6]);[/CODE] spentscore = (data.length >= 24) ? integer.parse[CODE]int(data[7]) : 0;[/CODE] currentwave = integer.parse[CODE]int(data[8]);[/CODE] player.setx(savedx); player.sety(savedy); rectangle checkrect = [CODE]new rectangle((int) savedx, (int) savedy, 32, 32);[/CODE] tilemanager tilemanager = handler.gettilemanager(); // stuck kalcak şekilde doğduysa kaydır if (tilemanager != null && tilemanager.hascollision(checkrect)) { boolean found = false; [CODE]int[] dx = {[/CODE]0, 32, -32, 0, 0}; // sağ, sol, yukarı, aşağı [CODE]int[] dy = {[/CODE]0, 0, 0, -32, 32}; [CODE]for (int i = 0;[/CODE] i < dx.length; i++) { float [CODE]newx = savedx + dx[i];[/CODE] float [CODE]newy = savedy + dy[i];[/CODE] rectangle [CODE]tryrect = new rectangle((int) newx, (int) newy, 32, 32);[/CODE] if (!tilemanager.hascollision([CODE]tryrect)) {[/CODE] player.setx([CODE]newx);[/CODE] player.sety([CODE]newy);[/CODE] found = true; break; } } } player.setmaxhealth(savedmaxhealth); player.takedamage(player.gethealth() - savedhealth); player.pistol.setcurrentammo(integer.parse[CODE]int(data[21]));[/CODE] player.pistol.setreserveammo(integer.parse[CODE]int(data[22]));[/CODE] // silahlar boolean hasrifle = boolean.parseboolean(data[9]); boolean hasshotgun = boolean.parseboolean(data[10]); boolean hassniper = boolean.parseboolean(data[11]); boolean hasrocket = boolean.parseboolean(data[12]); [CODE]if (hasrifle) {[/CODE] player.unlockr[CODE]ifle();[/CODE] player.rifle.setcurrentammo(integer.parse[CODE]int(data[13]));[/CODE] player.rifle.setreserveammo(integer.parse[CODE]int(data[14]));[/CODE] } [CODE]if (hasshotgun) {[/CODE] player.unlockshotgun(); player.shotgun.setcurrentammo(integer.parse[CODE]int(data[15]));[/CODE] player.shotgun.setreserveammo(integer.parse[CODE]int(data[16]));[/CODE] } [CODE]if (hassniper) {[/CODE] player.unlocksniper(); player.sniper.setcurrentammo(integer.parse[CODE]int(data[17]));[/CODE] player.sniper.setreserveammo(integer.parse[CODE]int(data[18]));[/CODE] } [CODE]if (hasrocket) {[/CODE] player.unlockrocketlauncher(); player.rocketlauncher.setcurrentammo(integer.parse[CODE]int(data[19]));[/CODE] player.rocketlauncher.setreserveammo(integer.parse[CODE]int(data[20]));[/CODE] } } else if (data[0].equals(""zombie"")) { [CODE]string type = data[1];[/CODE] float x = float.parsefloat(data[2]); float y = float.parsefloat(data[3]); int health = integer.parse[CODE]int(data[4]);[/CODE] rectangle zombierect = [CODE]new rectangle((int)x, (int)y, 32, 32);[/CODE] tilemanager tilemanager = handler.gettilemanager(); // 10 kez dene daha iyi olsun istersek arttırırız [CODE]int attempts = 0;[/CODE] while ((tilemanager.hascollision(zombierect) || !tilemanager.isspawnable(zombierect)) && attempts < 10) { x = (float) (math.random() * cam.getworldwidth()); y = (float) (math.random() * cam.getworldheight()); zombierect = [CODE]new rectangle((int)x, (int)y, 32, 32);[/CODE] attempts++; } // yukardaki playerin aynisi if (tilemanager.hascollision(zombierect)) { [CODE]int[] dx = {[/CODE]0, 32, -32, 0, 0}; [CODE]int[] dy = {[/CODE]0, 0, 0, -32, 32}; [CODE]for (int i = 0;[/CODE] i < dx.length; i++) { float [CODE]newx = x + dx[i];[/CODE] float [CODE]newy = y + dy[i];[/CODE] rectangle [CODE]tryrect = new rectangle((int)newx, (int)newy, 32, 32);[/CODE] if (!tilemanager.hascollision([CODE]tryrect)) {[/CODE] x = [CODE]newx;[/CODE] y = [CODE]newy;[/CODE] break; } } } zombie z = switch (type) { case ""normalzombie"" -> [CODE]new normalzombie(x, y, cam, player);[/CODE] case ""tankzombie"" -> [CODE]new tankzombie(x, y, cam, player);[/CODE] case ""crawlerzombie"" -> [CODE]new crawlerzombie(x, y, cam, player);[/CODE] case ""acidzombie"" -> [CODE]new acidzombie(x, y, cam, player);[/CODE] default -> null; }; [CODE]if (z != null) {[/CODE] z.health = health; handler.addobject(z); } } } reader.close(); gamestarted = true; openmainmenu = false; showd[CODE]ifficultymenu = false;[/CODE] ispaused = false; system.out.pr[CODE]intln(""kayıtlı oyun yüklendi!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""kayıtlı oyun bulunamadı!"");[/CODE] } minput.findplayer(); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new game();[/CODE] } } [CODE]package game;[/CODE] import java.awt.po[CODE]int;[/CODE] import java.awt.mouseinfo; import java.awt.event.mouseadapter; import java.awt.event.mouseevent; [CODE]public class mouseinput extends mouseadapter {[/CODE] private handler handler; private camera cam; private gameobject tempplayer = null; private boolean shooting = false; [CODE]public mouseinput(handler handler, camera cam) {[/CODE] this.handler = handler; this.cam = cam; } [CODE]public void findplayer() {[/CODE] [CODE]for (int i = 0;[/CODE] i < handler.object.size(); i++) { if (handler.object.get(i).getid() == id.player) { tempplayer = handler.object.get(i); break; } } } @override [CODE]public void mousepressed(mouseevent e) {[/CODE] shooting = true; int mx = e.getx(); int my = e.gety(); po[CODE]int click = new point(mx, my);[/CODE] // === ana menü === if (game.instance.openmainmenu) { if (game.instance.startbutton.contains(click)) { game.instance.openmainmenu = false; game.instance.showd[CODE]ifficultymenu = true;[/CODE] } else if (game.instance.loadbutton.contains(click)) { game.instance.loadgame(); } else if (game.instance.exitbutton.contains(click)) { system.exit(0); } else if (game.instance.musicbutton.contains(click)) { game.instance.musicon = !game.instance.musicon; if (game.instance.musicon) { if (game.instance.backgroundmusic != null) { game.instance.backgroundmusic.start(); } [CODE]else {[/CODE] game.instance.initmusic(); } } [CODE]else {[/CODE] if (game.instance.backgroundmusic != null) { game.instance.backgroundmusic.stop(); } } } [CODE]return;[/CODE] } // difficulty sec if (game.instance.showd[CODE]ifficultymenu) {[/CODE] if (game.instance.easybutton.contains(click)) { game.difficulty = difficulty.easy; game.instance.startgame(); } else if (game.instance.mediumbutton.contains(click)) { game.difficulty = difficulty.medium; game.instance.startgame(); } else if (game.instance.hardbutton.contains(click)) { game.difficulty = difficulty.hard; game.instance.startgame(); } else if (game.instance.testbutton.contains(click)) { game.difficulty = difficulty.test; game.instance.startgame(); } [CODE]return;[/CODE] } } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] shooting = false; } [CODE]public void tick() {[/CODE] [CODE]if (tempplayer == null) findplayer();[/CODE] [CODE]if (!shooting || tempplayer == null) return;[/CODE] player p = (player) tempplayer; gun gun = p.getcurrentgun(); if (gun.isreloading()) { gun.cancelreload(); // önce reload'u iptal et } if (gun.canfire()) { [CODE]try {[/CODE] point mousepos = mouseinfo.getpointerinfo().getlocation(); point gamepos = game.instance.getlocationonscreen(); int mx = mousepos.x - gamepos.x; int my = mousepos.y - gamepos.y; float[] guntip = p.getguntipposition(); float dx = mx - (guntip[0] - cam.getx()); float dy = my - (guntip[1] - cam.gety()); float angle = (float) math.atan2(dy, dx); gun.fire(guntip[0], guntip[1], angle, handler); } [CODE]catch (exception e) {[/CODE] } } } } [CODE]package game;[/CODE] import java.awt.image.bufferedimage; [CODE]public class camera {[/CODE] private float x, y; private handler handler; private gameobject tempplayer = null; private [CODE]int worldwidth, worldheight;[/CODE] [CODE]public handler gethandler() {[/CODE] [CODE]return handler;[/CODE] } [CODE]public int getworldwidth() {[/CODE] [CODE]return worldwidth;[/CODE] } [CODE]public int getworldheight() {[/CODE] [CODE]return worldheight;[/CODE] } [CODE]public camera(float x, float y, handler handler, bufferedimage backgroundimage) {[/CODE] this.x = x; this.y = y; this.handler = handler; findplayer(); this.worldwidth = tilemanager.width * tilemanager.tile_size; this.worldheight = tilemanager.height * tilemanager.tile_size; } [CODE]public void findplayer() {[/CODE] [CODE]for (int i = 0;[/CODE] i < handler.object.size(); i++) { if (handler.object.get(i).getid() == id.player) { tempplayer = handler.object.get(i); break; } } } [CODE]public void tick() {[/CODE] [CODE]if (tempplayer != null) {[/CODE] float newx = tempplayer.getx() - game.width / 2 + 16; float newy = tempplayer.gety() - game.height / 2 + 16; x += (newx - x) * 0.1; y += (newy - y) * 0.1; } [CODE]else {[/CODE] findplayer(); } //camera limitleri x = clamp(x, worldwidth - game.width, 0); y = clamp(y, worldheight - game.height + tilemanager.tile_size, 0); } [CODE]public int getx() {[/CODE] [CODE]return (int) x;[/CODE] } [CODE]public int gety() {[/CODE] [CODE]return (int) y;[/CODE] } private float clamp(float value, float max, float min) { [CODE]if (value < min) return min;[/CODE] [CODE]if (value > max) return max;[/CODE] [CODE]return value;[/CODE] } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class rocketlauncher extends gun {[/CODE] private [CODE]static bufferedimage rocketimage;[/CODE] //[CODE]static yaptık her seferde olusturmasin diye static {[/CODE] [CODE]try {[/CODE] rocketimage = imageio.read(new file(""src/game/rocketlauncherbullet.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""rocket bullet görseli yüklenemedi!"");[/CODE] } } [CODE]public rocketlauncher() {[/CODE] super(1, 10, 0); // 1 roket, 10 hızında, 3 yedek this.reloadperbullet=1000; } @override [CODE]public void fire(float x, float y, float angle, handler handler) {[/CODE] [CODE]if (!canfire()) return;[/CODE] bullet rocket = new bullet(x, y, id.bullet,handler) { @override [CODE]public void tick() {[/CODE] x += velx; y += vely; //collision baktık for (gameobject obj : handler.object) { if (obj.getid() == id.zombie) { if (getbounds().intersects(obj.getbounds())) { explode(); handler.removeobject(this); break; } } } } private [CODE]void explode() {[/CODE] for (gameobject obj : new java.util.linkedlist<>(handler.object)) { [CODE]if (obj instanceof zombie zomb) {[/CODE] double dist = math.hypot(zomb.getx() - x, zomb.gety() - y); [CODE]if (dist < 70) {[/CODE] zomb.health -= 150; if (zomb.health <= 0) { handler.removeobject(zomb); game.killedzombies++; } } } } } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (rocketimage != null) {[/CODE] g.drawimage(rocketimage, ([CODE]int) x, (int) y, 12, 12, null);[/CODE] } [CODE]else {[/CODE] g.setcolor(java.awt.color.orange); g.fillrect(([CODE]int) x, (int) y, 12, 12);[/CODE] } } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int)x, (int)y, 12, 12);[/CODE] } }; rocket.velx = (float) (7 * math.cos(angle)); rocket.vely = (float) (7 * math.sin(angle)); handler.addobject(rocket); currentammo--; lastfiredtime = system.currenttimemillis(); } } [CODE]package game;[/CODE] import java.awt.*; import java.awt.image.bufferedimage; import javax.imageio.imageio; import java.io.file; import java.io.ioexception; import java.util.hashset; import java.util.random; import java.util.set; [CODE]public class tilemanager {[/CODE] [CODE]public static final int tile_size = 32;[/CODE] [CODE]public static final int width = 40;[/CODE] [CODE]public static final int height = 30;[/CODE] private tile[][] tiles = [CODE]new tile[width][height];[/CODE] private set<po[CODE]int> occupied = new hashset<>();[/CODE] [CODE]public enum tiletype {[/CODE] grass(""grass.png"", false), bush(""bush.png"", false), tree(""tree.png"", true), haybale(""haybale.png"", true), // mapte çok collision alan olacagi icin brick(""brick.png"", true), // kullanilmadi stone(""stone.png"", true), lava(""lava.png"", false), water(""water.png"", false); [CODE]public final string filename;[/CODE] [CODE]public final boolean hascollision;[/CODE] tiletype([CODE]string filename, boolean hascollision) {[/CODE] this.filename = filename; this.hascollision = hascollision; } } [CODE]public static class tile {[/CODE] tiletype type; bufferedimage image; tile(tiletype type) { this.type = type; [CODE]try {[/CODE] image = imageio.read(new file(""src/game/"" + type.filename)); } [CODE]catch (ioexception e) {[/CODE] system.out.println(""görsel yüklenemedi: "" + type.filename); } } [CODE]void render(graphics g, int x, int y) {[/CODE] if (image != null) g.drawimage(image, x, y, tile_size, tile_size, null); } boolean hascollision() { return type.hascollision; } tiletype gettype() { [CODE]return type;[/CODE] } } [CODE]public tilemanager() {[/CODE] generatemap(); } [CODE]public void generatemap() {[/CODE] [CODE]for (int x = 0;[/CODE] x < width; x++) { [CODE]for (int y = 0;[/CODE] y < height; y++) { settile(x, y, tiletype.grass); } } [CODE]for (int x = 0;[/CODE] x < width; x++) { settile(x, 0, tiletype.brick); settile(x, height - 1, tiletype.brick); } [CODE]for (int y = 0;[/CODE] y < height; y++) { settile(0, y, tiletype.brick); settile(width - 1, y, tiletype.brick); } [CODE]int wx = 2, wy = 2;[/CODE] placearea(wx, wy, tiletype.water); surroundarea(wx, wy, tiletype.stone); [CODE]int lx = width - 5, ly = height - 5;[/CODE] placearea(lx, ly, tiletype.lava); surroundarea(lx, ly, tiletype.stone); random rand = [CODE]new random();[/CODE] [CODE]int treecount = 60;[/CODE] [CODE]int bushcount = 100;[/CODE] [CODE]for (int i = 0;[/CODE] i < treecount;) { int x = rand.next[CODE]int(width - 2) + 1;[/CODE] int y = rand.next[CODE]int(height - 2) + 1;[/CODE] [CODE]if (canplacetree(x, y)) {[/CODE] settile(x, y, tiletype.tree); marksurroundingoccupied(x, y); i++; } } [CODE]for (int i = 0;[/CODE] i < bushcount;) { int x = rand.next[CODE]int(width - 2) + 1;[/CODE] int y = rand.next[CODE]int(height - 2) + 1;[/CODE] po[CODE]int p = new point(x, y);[/CODE] if (!occupied.contains(p) && !isspecialtile(x, y)) { settile(x, y, tiletype.bush); i++; } } } private boolean canplacetree([CODE]int x, int y) {[/CODE] [CODE]if (isspecialtile(x, y)) return false;[/CODE] [CODE]for (int dx = -1;[/CODE] dx <= 1; dx++) { [CODE]for (int dy = -1;[/CODE] dy <= 1; dy++) { po[CODE]int p = new point(x + dx, y + dy);[/CODE] if (occupied.contains(p)) [CODE]return false;[/CODE] } } [CODE]return true;[/CODE] } private [CODE]void marksurroundingoccupied(int cx, int cy) {[/CODE] [CODE]for (int dx = -1;[/CODE] dx <= 1; dx++) { [CODE]for (int dy = -1;[/CODE] dy <= 1; dy++) { [CODE]int x = cx + dx;[/CODE] [CODE]int y = cy + dy;[/CODE] [CODE]if (x > 0 && y > 0 && x < width && y < height) {[/CODE] occupied.add([CODE]new point(x, y));[/CODE] } } } } private [CODE]void placearea(int startx, int starty, tiletype type) {[/CODE] [CODE]for (int x = startx;[/CODE] x < startx + 2; x++) { [CODE]for (int y = starty;[/CODE] y < starty + 2; y++) { settile(x, y, type); occupied.add([CODE]new point(x, y));[/CODE] } } } private [CODE]void surroundarea(int startx, int starty, tiletype type) {[/CODE] [CODE]for (int x = startx - 1;[/CODE] x <= startx + 2; x++) { [CODE]for (int y = starty - 1;[/CODE] y <= starty + 2; y++) { [CODE]if (x >= 0 && y >= 0 && x < width && y < height) {[/CODE] if (!occupied.contains([CODE]new point(x, y))) settile(x, y, type);[/CODE] } } } } private boolean isspecialtile([CODE]int x, int y) {[/CODE] tiletype t = gettiletypeat(x, y); return t == tiletype.water || t == tiletype.lava || t == tiletype.stone || t == tiletype.brick; } [CODE]public void settile(int x, int y, tiletype type) {[/CODE] [CODE]if (x >= 0 && x < width && y >= 0 && y < height) {[/CODE] tiles[x][y] = [CODE]new tile(type);[/CODE] } } [CODE]public void render(graphics g) {[/CODE] [CODE]for (int x = 0;[/CODE] x < width; x++) { [CODE]for (int y = 0;[/CODE] y < height; y++) { tiles[x][y].render(g, x * tile_size, y * tile_size); } } } [CODE]public boolean hascollision(float x, float y) {[/CODE] [CODE]int tilex = (int)(x / tile_size);[/CODE] [CODE]int tiley = (int)(y / tile_size);[/CODE] [CODE]if (tilex < 0 || tiley < 0 || tilex >= width || tiley >= height) return true;[/CODE] return tiles[tilex][tiley].hascollision(); } [CODE]public boolean hascollision(rectangle bounds) {[/CODE] int left = bounds.x; int right = bounds.x + bounds.width; int top = bounds.y; int bottom = bounds.y + bounds.height; [CODE]return hascollision(left, top) || hascollision(right, top) || hascollision(left, bottom) || hascollision(right, bottom);[/CODE] } [CODE]public tiletype gettiletypeat(int x, int y) {[/CODE] [CODE]if (x >= 0 && x < width && y >= 0 && y < height) {[/CODE] return tiles[x][y].type; } return tiletype.grass; } // iyi bir spawn yeri mi [CODE]public boolean isspawnable(rectangle rect) {[/CODE] int left = rect.x / tile_size; int top = rect.y / tile_size; int right = (rect.x + rect.width) / tile_size; int bottom = (rect.y + rect.height) / tile_size; [CODE]for (int x = left;[/CODE] x <= right; x++) { [CODE]for (int y = top;[/CODE] y <= bottom; y++) { [CODE]if (x < 0 || y < 0 || x >= width || y >= height) return false;[/CODE] tile tile = tiles[x][y]; tiletype type = tile.gettype(); if (type == tiletype.lava || type == tiletype.water || type == tiletype.brick || type == tiletype.stone || tile.hascollision()) { [CODE]return false;[/CODE] } } } [CODE]return true;[/CODE] } } [CODE]package game;[/CODE] import java.awt.dimension; import java.awt.image; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; import javax.swing.jframe; [CODE]public class window {[/CODE] private jframe frame; [CODE]public window(int width, int height, string title, game game) {[/CODE] frame = [CODE]new jframe(title);[/CODE] [CODE]try {[/CODE] image icon = imageio.read(new file(""src/game/icon.png"")); frame.seticonimage(icon); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""i̇kon yüklenemedi!"");[/CODE] } frame.setpreferredsize([CODE]new dimension(width, height));[/CODE] frame.setmaximumsize([CODE]new dimension(width, height));[/CODE] frame.setminimumsize([CODE]new dimension(width, height));[/CODE] frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setresizable(false); frame.setlocationrelativeto(null); frame.add(game); game.requestfocus(); frame.setvisible(true); } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class player extends gameobject {[/CODE] private float _acc = 1f; private float _dcc = 0.5f; private keyinput input; private [CODE]int health = 150;[/CODE] private handler handler; private camera cam; private [CODE]int maxhealth = 150;[/CODE] private bufferedimage pistolimg, r[CODE]ifleimg, shotgunimg, sniperimg, rocketimg;[/CODE] private bufferedimage idleimage; private bufferedimage[] runframes = [CODE]new bufferedimage[8];[/CODE] private [CODE]int animationindex = 0;[/CODE] private long lastframetime = 0; private long framedelay = 100; private [CODE]string direction = ""down"";[/CODE] private long lastdamagetime = 0; private long damagecooldown = 1000; private gun currentgun; [CODE]public gun pistol = new pistol();[/CODE] [CODE]public gun rifle = null;[/CODE] [CODE]public gun shotgun = null;[/CODE] [CODE]public gun sniper = null;[/CODE] [CODE]public gun rocketlauncher = null;[/CODE] [CODE]public void heal(int amount) {[/CODE] health = math.min(health + amount, maxhealth); } [CODE]public int getmaxhealth() {[/CODE] [CODE]return maxhealth;[/CODE] } [CODE]public void setmaxhealth(int maxhealth) {[/CODE] this.maxhealth = maxhealth; } [CODE]public void increasemaxhealth(int amount) {[/CODE] maxhealth += amount; health += amount; } [CODE]public player(float x, float y, id id, keyinput input, handler handler, camera cam) {[/CODE] super(x, y, id); this.input = input; this.handler = handler; this.cam = cam; this.currentgun = pistol; velx = 0; vely = 0; [CODE]try {[/CODE] idleimage = imageio.read(new file(""src/game/idle1.png"")); [CODE]for (int i = 0;[/CODE] i < 8; i++) { runframes[i] = imageio.read(new file(""src/game/run"" + (i + 1) + "".png"")); } system.out.pr[CODE]intln(""tüm sprite'lar başarıyla yüklendi!"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""sprite yüklenirken hata oluştu!"");[/CODE] } [CODE]try {[/CODE] pistolimg = imageio.read(new file(""src/game/pistol.png"")); rifleimg = imageio.read(new file(""src/game/assault_rifle.png"")); shotgunimg = imageio.read(new file(""src/game/shotgun.png"")); sniperimg = imageio.read(new file(""src/game/sniper.png"")); rocketimg = imageio.read(new file(""src/game/rocketlauncher.png"")); } [CODE]catch (ioexception e) {[/CODE] system.out.pr[CODE]intln(""silah görselleri yüklenemedi!"");[/CODE] } } //silah hizalama [CODE]public float[] getguntipposition() {[/CODE] float gunx = x; float guny = y; [CODE]int offsetx = 16;[/CODE] [CODE]int offsety = 16;[/CODE] int gunlength = switch (currentgun.getclass().getsimplename()) { case ""pistol"" -> 16; case ""r[CODE]ifle"" -> 20;[/CODE] case ""shotgun"" -> 18; case ""sniper"" -> 24; case ""rocketlauncher"" -> 26; default -> 16; }; switch (direction) { case ""right"" -> { gunx += offsetx + gunlength; guny += offsety; } case ""left"" -> { gunx += offsetx - gunlength; guny += offsety; } case ""up"" -> { gunx += offsetx; guny += offsety - gunlength; } case ""down"" -> { gunx += offsetx; guny += offsety + gunlength; } } [CODE]return new float[]{[/CODE]gunx, guny}; } @override [CODE]public void tick() {[/CODE] gun gun = getcurrentgun(); if (gun.isreloading() && system.currenttimemillis() - gun.reloadstarttime >= gun.reloadduration) { gun.completereload(); } // movement için if (input.keys[0]) { velx += _acc; direction = ""right""; } else if (input.keys[1]) { velx -= _acc; direction = ""left""; } [CODE]else {[/CODE] [CODE]if (velx > 0) velx -= _dcc;[/CODE] [CODE]else if (velx < 0) velx += _dcc;[/CODE] } if (input.keys[2]) { vely -= _acc; direction = ""up""; } else if (input.keys[3]) { vely += _acc; direction = ""down""; } [CODE]else {[/CODE] [CODE]if (vely > 0) vely -= _dcc;[/CODE] [CODE]else if (vely < 0) vely += _dcc;[/CODE] } velx = clamp(velx, 5, -5); vely = clamp(vely, 5, -5); float nextx = x + velx; float nexty = y + vely; rectangle nextbounds = [CODE]new rectangle((int) nextx, (int) nexty, 32, 32);[/CODE] if (handler.gettilemanager() == null || !handler.gettilemanager().hascollision(nextbounds)) { x = nextx; y = nexty; } [CODE]else {[/CODE] velx = 0; vely = 0; } long now = system.currenttimemillis(); [CODE]if (ismoving() && now - lastframetime > framedelay) {[/CODE] animationindex = (animationindex + 1) % runframes.length; lastframetime = now; } for (gameobject obj : handler.object) { if (obj instanceof zombie z && z.getattackbounds().[CODE]intersects(getbounds())) {[/CODE] [CODE]if (now - lastdamagetime >= damagecooldown) {[/CODE] takedamage(z.damage); lastdamagetime = now; } } } } private boolean ismoving() { return input.keys[0] || input.keys[1] || input.keys[2] || input.keys[3]; } private float clamp(float value, float max, float min) { [CODE]if (value > max) return max;[/CODE] [CODE]else if (value < min) return min;[/CODE] [CODE]return value;[/CODE] } @override [CODE]public void render(graphics g) {[/CODE] bufferedimage frame = runframes[animationindex]; [CODE]if (!ismoving()) {[/CODE] g.drawimage(idleimage, ([CODE]int) x, (int) y, 32, 32, null);[/CODE] } [CODE]else {[/CODE] switch (direction) { case ""right"" -> g.drawimage(frame, ([CODE]int) x, (int) y, 32, 32, null);[/CODE] case ""left"" -> g.drawimage(frame, ([CODE]int) x + 32, (int) y, -32, 32, null);[/CODE] case ""up"", ""down"" -> g.drawimage(frame, ([CODE]int) x, (int) y, 32, 32, null);[/CODE] } } bufferedimage gunimage = null; [CODE]if (currentgun instanceof pistol) gunimage = pistolimg;[/CODE] [CODE]else if (currentgun instanceof rifle) gunimage = rifleimg;[/CODE] [CODE]else if (currentgun instanceof shotgun) gunimage = shotgunimg;[/CODE] [CODE]else if (currentgun instanceof sniper) gunimage = sniperimg;[/CODE] [CODE]else if (currentgun instanceof rocketlauncher) gunimage = rocketimg;[/CODE] [CODE]if (gunimage != null) {[/CODE] [CODE]int gunwidth = 20, gunheight = 20;[/CODE] [CODE]int gunoffsetx = 0, gunoffsety = 0;[/CODE] switch (direction) { case ""right"" -> { gunoffsetx = 22; gunoffsety = 14; g.drawimage(gunimage, ([CODE]int) x + gunoffsetx, (int) y + gunoffsety, gunwidth, gunheight, null);[/CODE] } case ""left"" -> { gunoffsetx = -10; gunoffsety = 14; g.drawimage(gunimage, ([CODE]int) x + gunoffsetx + gunwidth, (int) y + gunoffsety, -gunwidth, gunheight, null);[/CODE] } case ""up"", ""down"" -> { graphics2d g2d = (graphics2d) g.create(); double angle = direction.equals(""up"") ? -math.pi / 2 : math.pi / 2; gunoffsetx = 6; gunoffsety = direction.equals(""up"") ? -5 : 20; [CODE]int centerx = (int) x + gunoffsetx + gunwidth / 2;[/CODE] [CODE]int centery = (int) y + gunoffsety + gunheight / 2;[/CODE] g2d.rotate(angle, centerx, centery); g2d.drawimage(gunimage, ([CODE]int) x + gunoffsetx, (int) y + gunoffsety, gunwidth, gunheight, null);[/CODE] g2d.dispose(); } } } renderhealthbar(g, 32); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle((int) x, (int) y, 32, 32);[/CODE] } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void takedamage(int damage) {[/CODE] health -= damage; [CODE]if (health <= 0) {[/CODE] health = 0; system.out.pr[CODE]intln(""you died"");[/CODE] game.gameover = true; } } [CODE]public gun getcurrentgun() {[/CODE] [CODE]return currentgun;[/CODE] } [CODE]public void setcurrentgun(gun gun) {[/CODE] if (currentgun != null) currentgun.cancelreload(); this.currentgun = gun; } [CODE]public void unlockrifle() {[/CODE] [CODE]if (rifle == null) rifle = new rifle();[/CODE] } [CODE]public void unlockshotgun() {[/CODE] [CODE]if (shotgun == null) shotgun = new shotgun();[/CODE] } [CODE]public void unlocksniper() {[/CODE] [CODE]if (sniper == null) sniper = new sniper();[/CODE] } [CODE]public void unlockrocketlauncher() {[/CODE] [CODE]if (rocketlauncher == null) rocketlauncher = new rocketlauncher();[/CODE] } } [CODE]package game;[/CODE] import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public abstract class gameobject {[/CODE] protected float x,y; protected float velx,vely; protected id id; protected [CODE]int health;[/CODE] protected [CODE]int maxhealth;[/CODE] [CODE]public gameobject(float x,float y,id id) {[/CODE] this.x=x; this.y=y; this.id=id; } [CODE]public abstract rectangle getbounds();[/CODE] [CODE]public abstract void tick();[/CODE] [CODE]public abstract void render(graphics g);[/CODE] [CODE]public void renderhealthbar(graphics g, int width) {[/CODE] g.setcolor(color.green); [CODE]int barwidth = (int)(width * ((float)health / maxhealth));[/CODE] g.fillrect(([CODE]int)x, (int)y - 10, barwidth, 5);[/CODE] if(health<= maxhealth*0.5) { g.setcolor(color.red); g.fillrect(([CODE]int)x, (int)y - 10, barwidth, 5);[/CODE] } } [CODE]public float getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public void setx(float x) {[/CODE] this.x = x; } [CODE]public float gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public void sety(float y) {[/CODE] this.y = y; } [CODE]public float getvelx() {[/CODE] [CODE]return velx;[/CODE] } [CODE]public void setvelx(float velx) {[/CODE] this.velx = velx; } [CODE]public float getvely() {[/CODE] [CODE]return vely;[/CODE] } [CODE]public void setvely(float vely) {[/CODE] this.vely = vely; } [CODE]public id getid() {[/CODE] [CODE]return id;[/CODE] } [CODE]public void setid(id id) {[/CODE] this.id = id; } }"
6418019,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package bil211_lab;[/CODE] [CODE]public class sayac {[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say1(string input){[/CODE] if(input.length() == 0){ [CODE]return 0;[/CODE] } if(input.charat(0) == '1'){ return 1 + say1(input.sub[CODE]string(1));[/CODE] } [CODE]else{[/CODE] return say1(input.sub[CODE]string(1));[/CODE] } } [CODE]public int say(){[/CODE] [CODE]return say1(str);[/CODE] } } [CODE]package bil211_lab;[/CODE] [CODE]public class lab1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] [CODE]int[] ar = {[/CODE]5, 4, 1, 2}; cocktailsort(ar); [CODE]for(int i = 0;[/CODE] i<ar.length; i++){ system.out.pr[CODE]intln(ar[i]);[/CODE] } sayac s1 = [CODE]new sayac(""10001"");[/CODE] system.out.println(s1.say()); } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]if(i%2 == 0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else{[/CODE] [CODE]return 1 + collatz(i*3 + 1);[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] sort2(arr, 0, arr.length - 1, false); } [CODE]public static void sort2(int[] array, int start, int end, boolean direction){[/CODE] [CODE]if(start >= end){[/CODE] [CODE]return;[/CODE] } [CODE]if(direction == false){[/CODE] [CODE]for(int i = start;[/CODE] i < end; i++){ [CODE]if(array[i] > array[i+1]){[/CODE] [CODE]int buyuk = array[i];[/CODE] array[i] = array[i+1]; array[i+1] = buyuk; } } end--; } [CODE]else{[/CODE] [CODE]for(int i = end;[/CODE] i>0; i-- ){ [CODE]if(array[i] < array[i-1]){[/CODE] [CODE]int kucuk = array[i];[/CODE] array[i] = array[i-1]; array[i-1] = kucuk; } } start++; } sort2( array,start, end, !direction); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.arraylist; import java.util.arrays; import java.util.collections; import java.util.list; import javax.sound.sampled.sourcedataline; [CODE]public class lab2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] arraylist<sarki> sarkilistesi = (arraylist)arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] system.out.println( ((metalsarki)s).getisim + "" - "" + ((metalsarki)s).getsanatci ; } } } } abstract [CODE]class sarki{[/CODE] protected [CODE]string isim;[/CODE] protected [CODE]string sanatci;[/CODE] [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public string getsanatci() {[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } [CODE]public void setsanatci(string sanatci) {[/CODE] this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] } [CODE]class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] setisim(isim); setsanatci(sanatci); this.metalozellik = metalozellik; } [CODE]public void gostermetalozellikler(){[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" "" + ""("" + metalozellik + "")"");[/CODE] } } [CODE]class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] setisim(isim); setsanatci(sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] setisim(isim); setsanatci(sanatci); } [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(arraylist<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi{[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi){[/CODE] system.out.pr[CODE]intln(""sirali calma"");[/CODE] [CODE]for(int i = 0;[/CODE] i<sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] ((metalsarki)s).oynat(); } [CODE]else if(s instanceof rocksarki){[/CODE] ((rocksarki)s).oynat(); } [CODE]else if(s instanceof klasiksarki){[/CODE] ((klasiksarki)s).oynat(); } } } } [CODE]class karisikcalma implements calmastratejisi{[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi){[/CODE] collections.shuffle(sarkilistesi); system.out.pr[CODE]intln(""karisik calma"");[/CODE] [CODE]for(int i = 0;[/CODE] i<sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] ((metalsarki)s).oynat(); } [CODE]else if(s instanceof rocksarki){[/CODE] ((rocksarki)s).oynat(); } [CODE]else if(s instanceof klasiksarki){[/CODE] ((klasiksarki)s).oynat(); } } } } [CODE]class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]public void cal(arraylist<sarki> sarkilistesi){[/CODE] boolean sesduzeyi = false; system.out.pr[CODE]intln(""rockcuozelcalma calma"");[/CODE] [CODE]for(int i = 0;[/CODE] i<sarkilistesi.size(); i++){ sarki s = sarkilistesi.get(i); [CODE]if(s instanceof metalsarki){[/CODE] ((metalsarki)s).oynat(); } [CODE]else if(s instanceof rocksarki && sesduzeyi == false){[/CODE] sesduzeyi = true; system.out.pr[CODE]intln(""[bi̇lgi̇] ses duzeyi: yuksek"");[/CODE] ((rocksarki)s).oynat(); } [CODE]else if(s instanceof rocksarki && sesduzeyi == true){[/CODE] ((rocksarki)s).oynat(); system.out.pr[CODE]intln(""[bi̇lgi̇] ses duzeyi: normal"");[/CODE] } [CODE]else if(s instanceof klasiksarki){[/CODE] ((klasiksarki)s).oynat(); } } } } [CODE]class muzikcalar{[/CODE] calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi strateji){[/CODE] this.strateji = strateji; } [CODE]public void muzikcal(arraylist<sarki> sarkilistesi){[/CODE] [CODE]if(strateji instanceof siralicalma){[/CODE] siralicalma sira = (siralicalma) strateji; sira.cal(sarkilistesi); } [CODE]else if(strateji instanceof karisikcalma){[/CODE] karisikcalma karisik = (karisikcalma) strateji; karisik.cal(sarkilistesi); } } } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 4 import java.io.*; import java.util.*; [CODE]public class kelimesayaci {[/CODE] [CODE]public static void main(string[] args) {[/CODE] } [CODE]public static void readfromfile(string filename){[/CODE] [CODE]try{[/CODE] scanner scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] while(scan.hasnextline()){ } } [CODE]catch(dosyabulunamadiexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]catch(bosdosyaexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]public void writetofile() throws dosyabulunamadiexception{[/CODE] [CODE]try{[/CODE] printwriter writer = new printwriter(new fileoutputstream(""sonuc.txt"")); } [CODE]catch(filenotfoundexception e){[/CODE] throw new dosyabulunamadiexception(""[hata]: sonuc.txt bulunamadı""); } } } [CODE]class inputexception extends exception{[/CODE] private [CODE]string message;[/CODE] [CODE]public inputexception(string message){[/CODE] super(message); } } [CODE]class kelimebulunamadiexception extends exception{[/CODE] private [CODE]string message;[/CODE] [CODE]public kelimebulunamadiexception(string message){[/CODE] super(message); } } [CODE]class dosyabulunamadiexception extends inputexception{[/CODE] private [CODE]string message;[/CODE] [CODE]public dosyabulunamadiexception(string message){[/CODE] super(message); } } [CODE]class bosdosyaexception extends inputexception{[/CODE] private [CODE]string message;[/CODE] [CODE]public bosdosyaexception(string message){[/CODE] super(message); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.nio.channels.pipe.sourcechannel; import java.util.arraylist; import java.util.list; import javax.print.attribute.standard.destination; [CODE]public class driver{[/CODE] [CODE]public static void main(string[] args) {[/CODE] inventory<weapon> weapon = [CODE]new inventory<>();[/CODE] inventory<item> item = [CODE]new inventory<>();[/CODE] weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] weapon sword2 = [CODE]new weapon(""sword2"", 500, 50);[/CODE] weapon sword3 = [CODE]new weapon(""weapon3"", 600, 120);[/CODE] weapon.additem(sword); weapon.additem(sword2); weapon.additem(sword3); armor armor1 = [CODE]new armor(""armor1"", 400, 40);[/CODE] potion potion1 = [CODE]new potion(""potion1"", 470, ""kill"");[/CODE] item.additem(armor1); item.additem(potion1); item.additem(sword); item.additem(sword2); system.out.pr[CODE]intln(""printinventor metodu:"");[/CODE] item.pr[CODE]intinventort();[/CODE] system.out.pr[CODE]intln(""find item has name armor1"");[/CODE] system.out.println(item.finditembyname(""armor1"")); system.out.pr[CODE]intln(""item that has value 400"");[/CODE] system.out.println(item.finditemsbyvalue(400)); system.out.pr[CODE]intln(""most valuable inventory in item"");[/CODE] system.out.println(item.mostvaluableitem()); system.out.pr[CODE]intln(""most valuable item in item inventory"");[/CODE] inventory.pr[CODE]intmostvaluableitem(item);[/CODE] system.out.pr[CODE]intln(""total weapon damage"");[/CODE] system.out.println(item.gettotalweapondamage()); ; } } [CODE]interface item{[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]class weapon implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int damage;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.name = name; this.value = value; this.damage = damage; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdamage(){[/CODE] [CODE]return damage;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return ""name: "" + name + "" value: "" + value + "" damage: "" + damage;[/CODE] } } [CODE]class armor implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense){[/CODE] this.name = name; this.value = value; this.defense = defense; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdefense(){[/CODE] [CODE]return defense;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return ""name: "" + name + "" value: "" + value + "" defense: "" + defense;[/CODE] } } [CODE]class potion implements item{[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]string effect ;[/CODE] [CODE]public potion(string name, int value, string effect){[/CODE] this.name = name; this.value = value; this.effect = effect; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public string geteffect(){[/CODE] [CODE]return effect;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return ""name: "" + name + "" value: "" + value + "" effect: "" + effect;[/CODE] } } [CODE]class inventory<t> {[/CODE] arraylist<t> list; [CODE]public inventory(){[/CODE] list = [CODE]new arraylist<>();[/CODE] } [CODE]void additem(t item){[/CODE] list.add(item); } [CODE]void removeitem(t item){[/CODE] list.remove(item); } [CODE]void printinventort(){[/CODE] [CODE]for(t element : list){[/CODE] system.out.pr[CODE]intln(element);[/CODE] } } t mostvaluableitem(){ [CODE]int mostvaluable = 0;[/CODE] [CODE]int index = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i<list.size(); i++){ if(((item) list.get(i)).getvalue() > mostvaluable){ mostvaluable = ((item) list.get(i)).getvalue(); index = i; } } return list.get(index); } t finditembyname([CODE]string name){[/CODE] [CODE]for(int i = 0;[/CODE] i<list.size(); i++){ if(name.equals(((item) list.get(i)).getname())){ return list.get(i); } } [CODE]return null;[/CODE] } list<t> finditemsbyvalue([CODE]int value){[/CODE] list<t> morevaluable = [CODE]new arraylist<>();[/CODE] [CODE]for(int i = 0;[/CODE] i<list.size(); i++){ if(value > ((item) list.get(i)).getvalue()){ morevaluable.add(list.get(i)); } } [CODE]return morevaluable;[/CODE] } [CODE]int gettotalvalue(){[/CODE] [CODE]int totalvalue = 0;[/CODE] [CODE]for(t elements : list){[/CODE] totalvalue += ((item)elements).getvalue(); } [CODE]return totalvalue;[/CODE] } list<t> filterbytype([CODE]class<?> type){[/CODE] list<t> filteredlist = [CODE]new arraylist<>();[/CODE] [CODE]for(t elements : list){[/CODE] if(type == ((item) elements).get[CODE]class()){[/CODE] filteredlist.add(elements); } } [CODE]return filteredlist;[/CODE] } [CODE]int gettotalweapondamage(){[/CODE] [CODE]int totaldamage = 0;[/CODE] [CODE]for(t elements : list){[/CODE] if(elements.getclass() == weapon.[CODE]class){[/CODE] totaldamage += ((weapon)elements).getdamage(); } } [CODE]return totaldamage;[/CODE] } [CODE]void sortbyvalue(){[/CODE] [CODE]for(int i = 0;[/CODE] i<list.size(); i++){ [CODE]for(int j = i+1;[/CODE] j<list.size()-1; j++){ if(((item) list.get(i)).getvalue() < ((item) list.get(j)).getvalue()){ t temp = list.get(i); t temp2 = list.get(j); list.set(i,temp2); list.remove(i+1); list.set(j, temp); list.remove(j+1); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item>inventory){[/CODE] item a = inventory.mostvaluableitem(); system.out.println(""name : "" + a.getname() + ""value : "" + a.getvalue()); [CODE]if(a instanceof weapon){[/CODE] system.out.println(""damage: "" + ((weapon)a).getdamage()); } [CODE]else if(a instanceof armor){[/CODE] system.out.println(""defense: "" + ((armor)a).getdefense()); } [CODE]else if(a instanceof potion){[/CODE] system.out.println(""effect: "" + ((potion)a).geteffect()); } } [CODE]public static void transferarmor(inventory<? super armor> destination,inventory<armor> source){[/CODE] list<armor> armors = source.filterbytype(armor.[CODE]class);[/CODE] [CODE]for(armor armor : armors){[/CODE] destination.additem(armor); source.removeitem(armor); } } } ""recursion"" kavramı nedir, kısaca açıklayınız. bir methodunun kendi kendini çağırması recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base durum: recursion a girmeden en basit case, decomposition: problemi daha küçük problemlere ayrıdığımız kısım, composition: jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. - [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak for döngüsü yerine recursive yapmak daha verimlidir bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? - stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. recursionun sonsuz bir döngüye girmesi tail recursion nedir, kısaca açıklayınız. - abstraction kavramını açıklayınız. gerekli bilgileri alıp geri kalan bilgileri gizlemek, blackbox a almak dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür cünkü employee hourlyemployee nin atasıdır. tersi mümkün degildir protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? ata class ın constructorını çağırmak ve bilgilerli almak için java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? mümkün değildir, her class bir üstündeki classı extend etmeli java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? verilen değişkenlerin typelarının aynı olup olmadıgına ve aralarında kalıtım ilişkisi var mı ona bakar. aralarındaki ilişki: typeları aynıdır ve b, a nın atasıdır metot overriding ve overloading kavramlarını açıklayınız. overriding: metotların signatureları aynıdır, metodu child classın özelliklerine göre tekrar düzenleriz. overloading: metotların isimleri aynıdır ama parametreler farklıdır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? - [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class içinde normal metod ya da abstract metod olabilir. abstract metodun gövdesi olmaz ve bu bu classı extend eden classta abstract metodlar override edilmelidir. abstract classtan bir obje yaratamayız. abstract classların constructoru olabilir ama interfacelerin olmaz abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? abstarct classi extend eden baska bir abstarct classta implement edilebilir abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metodun body si olmaz abstract [CODE]class icinde abstract olmayan metod ya yazabiliriz abstract classlar sayesinde subclasslara abstarct metodlari zorunlu kılmış oluruz abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract classlar tip olarak kullanılamaz ama interfaceler kullanılabilir. interfacelerde metodlar otomatik public abstract olarak tanımlanır marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden çok interface implement edebilir. bir interface baska bir interfacei implement edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstarct [CODE]classtan obje yaratamayiz, circle c = new circle();[/CODE] yaparız output: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? - java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 3 çeşittir: compile time error: syntax hataları örneğin parantezin unutulması, runtime error: sıfıra bölme , logical error: programın çalışıp istenilen sonucu vermemesi. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked türündeki hatalar icin kullanılır. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? - java'da kendi exceptionunuzu nasıl tanımlarsınız? o exception adı ile bir class oluştururum. bu class exception classını override etmelidir. java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? - static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught -1 finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? - what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cc java'da generic kavramı nedir, bu kavramın temel amacı nedir? bir classı veya metodu generic olarak tanımlamak daha flexible kod yazmamızı ve type safety sağlar upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. upper bound, type parametresinin upper bound olan class ve onun subclasslarından biri olması gerektiğini söyler, lower bound ise type parametresinin lower bound olan class ya da o classın üst classlarından birisi olması gerekitigini söyler. generic bir classın constructorunda type parametresi bulunur mu, neden? hayır bulunmaz mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. - [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. hata yok swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? b, , , , node [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. class_name <t> şeklinde olurdu, çünkü metodun parametresinden generic var bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(string name,string type, int batterylevel, boolean isoperational ){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = isoperational; } [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisoperational(boolean isoperational){[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] batterylevel = 100; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + "" isoperational: "" + isoperational);[/CODE] } } [CODE]public class q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55, true);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80, true);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] robots.addlast(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ robots.get(i).pr[CODE]introbot();[/CODE]; } } [CODE]public void work(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ int a = robots.get(i).getbatterylevel(); robots.get(i).setbatterylevel((a*75)/100); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); int sayi = robotfactory.sayi; system.out.pr[CODE]intln(""tüm fabrikalar tarafindan toplam "" + sayi + "" robot üretildi"");[/CODE] } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void recharge(){[/CODE] batteryl[CODE]ife = 100;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... "" + "" armed:"" + isarmed); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] isarmed = !isarmed; } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void recharge(){[/CODE] batteryl[CODE]ife = 100;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress..."" + "" cleaning power:"" + cleaningpower); batteryl[CODE]ife = batterylife - 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean...""); } } [CODE]public void boostcleaningpower(){[/CODE] cleaningpower = cleaningpower + 20; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int sayi;[/CODE] [CODE]public robotfactory(){[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] cleaningrobot [CODE]newcleaningrobot = new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add([CODE]newcleaningrobot);[/CODE] sayi++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] securityrobot [CODE]newsecurityrobot = new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add([CODE]newsecurityrobot);[/CODE] sayi++; } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i=0;[/CODE] i<robots.size(); i++){ robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ cleaningrobot c = (cleaningrobot) robots.get(i); system.out.println(""cleaningrobot - model: "" + c.getmodelname()+ "", battery: "" + c.getbatterylife() + "", cleaning power: "" + c.getcleaningpower()); } else if(robots.get(i) instanceof securityrobot){ securityrobot s = (securityrobot) robots.get(i); system.out.println(""securityrobot - model: "" + s.getmodelname()+ "", battery: "" + s.getbatterylife() + "", armed: "" + s.isarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ cleaningrobot c = (cleaningrobot) robots.get(i); int power = c.getcleaningpower() + miktar; c.setcleaningpower(power); system.out.println(""cleaningrobot - "" + c.getmodelname() + "" now has cleaning power: "" + c.getcleaningpower() ); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i = 0;[/CODE] i<robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ securityrobot s = (securityrobot) robots.get(i); s.togglearmedmode(); if(s.isarmed() == false){ system.out.println(""securityrobot - "" + s.getmodelname() + "" is now unarmed "" ); } [CODE]else{[/CODE] system.out.println(""securityrobot - "" + s.getmodelname() + "" is now armed "" ); } } } } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 import java.io.fileinputstream; import java.io.fileoutputstream; import java.io.ioexception; import java.io.objectinput; import java.io.objectinputstream; import java.io.objectoutputstream; import java.io.serializable; import java.util.arraylist; import java.util.scanner; import java.io.file; [CODE]public class quiz3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] scanner scan = new scanner(system.in); arraylist<envanterkaydi> esyalar = [CODE]new arraylist<>();[/CODE] boolean a = true; [CODE]try{[/CODE] [CODE]while(a == true){[/CODE] int islem = scan.next[CODE]int();[/CODE] [CODE]if(islem == 1){[/CODE] // esya ekleme esyaekle(esyalar, ""buzdolabı"", 5); } [CODE]else if(islem == 2){[/CODE] // esya cıkarma esyacikar(esyalar, ""buzdolabı""); } [CODE]else if(islem == 3){[/CODE] // stok guncelleme stokguncelle(esyalar, ""buzdolabı"", 6); } [CODE]else if(islem == 4){[/CODE] // envanter listeleme [CODE]for(envanterkaydi e : esyalar){[/CODE] system.out.println(""isim: "" + e.getisim() + "" stok: "" + e.getstok()); } } [CODE]else if(islem == 5){[/CODE] // dosyaya kaydetme [CODE]try{[/CODE] objectoutputstream oos = new objectoutputstream(new fileoutputstream(""sabit.txt"", true)); [CODE]for(envanterkaydi e : esyalar){[/CODE] oos.writeobject(e); } oos.close(); } [CODE]catch(ioexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if(islem == 6){[/CODE] // dosyadan geri yükleme [CODE]try{[/CODE] file file = new file(""sabit.txt""); if(file.exists() == false){ throw [CODE]new dosyabulunamadiexception();[/CODE] } objectinputstream ois = new objectinputstream(new fileinputstream(""sabit.txt"")); arraylist<envanterkaydi> ek = [CODE]new arraylist<>();[/CODE] [CODE]for(envanterkaydi e : ek){[/CODE] object o = ois.readobject(); ek.add((envanterkaydi) o); } ois.close();; } [CODE]catch(ioexception e ){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if( islem == 7){[/CODE] // çıkış a = false; } } } [CODE]catch(dosyabulunamadiexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]catch(classnotfoundexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]public static arraylist<envanterkaydi> esyaekle(arraylist<envanterkaydi> arr, string esyaismi, int miktar){[/CODE] boolean esyazatenvarmi = false; [CODE]try{[/CODE] [CODE]if(esyaismi == null){[/CODE] throw [CODE]new ozellikhatasiexception();[/CODE] } [CODE]for(envanterkaydi e : arr){[/CODE] if(e.getisim().equals(esyaismi)){ esyazatenvarmi = true; e.stokguncelle(e.getstok()); } } [CODE]if(esyazatenvarmi == false){[/CODE] arr.add([CODE]new envanterkaydi(esyaismi, miktar));[/CODE] } } [CODE]catch(ozellikhatasiexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]return arr;[/CODE] } [CODE]public static arraylist<envanterkaydi> esyacikar(arraylist<envanterkaydi> arr, string esyaismi){[/CODE] boolean esyazatenvarmi = false; [CODE]try{[/CODE] [CODE]for(envanterkaydi e : arr){[/CODE] if(esyaismi.equals(e.getisim())){ esyazatenvarmi = true; arr.remove(e); } } [CODE]if(esyazatenvarmi == false){[/CODE] throw [CODE]new esyayokexception();[/CODE] } } [CODE]catch(esyayokexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]return arr;[/CODE] } [CODE]public static arraylist<envanterkaydi> stokguncelle(arraylist<envanterkaydi> arr, string esyaismi, int miktar ){[/CODE] boolean esyazatenvarmi = false; [CODE]try{[/CODE] [CODE]for(envanterkaydi e : arr){[/CODE] if(esyaismi.equals(e.getisim())){ esyazatenvarmi = true; e.stokguncelle(miktar); } } [CODE]if(esyazatenvarmi == false){[/CODE] throw [CODE]new esyayokexception();[/CODE] } } [CODE]catch(esyayokexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]return arr;[/CODE] } } [CODE]class inputexception extends exception{[/CODE] [CODE]public inputexception(string message){[/CODE] super(message); } } [CODE]class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(){[/CODE] super(""hata: envanter dosyası bulunamadı.""); } } [CODE]class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(){[/CODE] super(""hata: envanter dosyası boş.""); } } [CODE]class stoknegatifexception extends exception{[/CODE] [CODE]public stoknegatifexception(){[/CODE] super(""hata: stok miktarı negatif olamaz.""); } } [CODE]class esyayokexception extends exception{[/CODE] [CODE]public esyayokexception(){[/CODE] super(""hata: i̇stenen eşya envanterde mevcut değil."") } } [CODE]class ozellikhatasiexception extends exception{[/CODE] [CODE]public ozellikhatasiexception(){[/CODE] super(""hata: eşya bilgileri hatalı veya eksik""); } } [CODE]class envanterkaydi implements serializable{[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public envanterkaydi(string isim, int stok){[/CODE] this.isim = isim; this.stok = stok; } [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public int getstok() {[/CODE] [CODE]return stok;[/CODE] } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } [CODE]public void setstok(int stok) {[/CODE] this.stok = stok; } [CODE]public void stokguncelle(int miktar){[/CODE] [CODE]try{[/CODE] this.stok = miktar; [CODE]if(stok < 0 ){[/CODE] throw [CODE]new stoknegatifexception();[/CODE] } } [CODE]catch(stoknegatifexception e){[/CODE] system.out.println(e.getmessage()); } } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.list; [CODE]public class quiz4 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); system.out.pr[CODE]intln(list);[/CODE] list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] } //soru 2 [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection,boolean findmax){[/CODE] if(collection.isempty()== true){ [CODE]return null;[/CODE] } t ext = null; [CODE]for (t element : collection) {[/CODE] [CODE]if (ext == null){[/CODE] ext = element; } [CODE]else{[/CODE] [CODE]if(findmax) {[/CODE] if(element.compareto(ext) > 0){ ext = element; } } [CODE]else if(!findmax){[/CODE] if(element.compareto(ext) < 0){ ext = element; } } } } [CODE]return ext;[/CODE] } //soru 3 [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type){[/CODE] if(collection.isempty() == true){ [CODE]return null;[/CODE] } list<t> filtered = [CODE]new arraylist<>();[/CODE] [CODE]for(object o : collection){[/CODE] if(type.isinstance(o)){ filtered.add((t) o); } } [CODE]return filtered;[/CODE] } } //soru 1 [CODE]class undoablelist<t> extends arraylist<t>{[/CODE] [CODE]public void undolast(){[/CODE] this.remove(getlast()); } [CODE]public t getlastadded(){[/CODE] if(this.isempty()){ [CODE]return null;[/CODE] } [CODE]else{[/CODE] return this.getlast(); } } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 [CODE]package entity;[/CODE] import main.gamepanel; [CODE]public class crawlingzombie extends entity{[/CODE] gamepanel gp; [CODE]public crawlingzombie(gamepanel gp){[/CODE] super(gp); this.gp = gp; direction = ""down""; speed = 2; damage = 1; maxl[CODE]ife = 1;[/CODE] l[CODE]ife = maxlife;[/CODE] po[CODE]int = 100;[/CODE] solidarea.x = 3; solidarea.y = 18; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; getimage(); } [CODE]public void getimage(){[/CODE] up1 = setup(""/npc/crawling_z_right1"", gp.tilesize, gp.tilesize); up2 = setup(""/npc/crawling_z_right2"", gp.tilesize, gp.tilesize); down1 = setup(""/npc/crawling_z_left1"", gp.tilesize, gp.tilesize); down2 = setup(""/npc/crawling_z_left2"", gp.tilesize, gp.tilesize); left1 = setup(""/npc/crawling_z_left1"", gp.tilesize, gp.tilesize); left2 = setup(""/npc/crawling_z_left2"", gp.tilesize, gp.tilesize); right1 = setup(""/npc/crawling_z_right1"", gp.tilesize, gp.tilesize); right2 = setup(""/npc/crawling_z_right2"", gp.tilesize, gp.tilesize); } [CODE]public void setaction() {[/CODE] int dx = gp.player.worldx - worldx; int dy = gp.player.worldy - worldy; if (math.abs(dx) > math.abs(dy)) { [CODE]if (dx > 0) {[/CODE] direction = ""right""; } [CODE]else {[/CODE] direction = ""left""; } } [CODE]else {[/CODE] [CODE]if (dy > 0) {[/CODE] direction = ""down""; } [CODE]else {[/CODE] direction = ""up""; } } } } [CODE]package entity;[/CODE] import java.awt.alphacomposite; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import main.gamepanel; import main.utilitytool; [CODE]public class entity {[/CODE] gamepanel gp; [CODE]public int worldx, worldy;[/CODE] [CODE]public int speed;[/CODE] [CODE]public bufferedimage up1, up2, down1, down2, left1, left2, right1, right2;[/CODE] [CODE]public string direction;[/CODE] [CODE]public int spritecounter = 0;[/CODE] [CODE]public int spritenum = 1;[/CODE] //[CODE]public rectangle attackarea = new rectangle(0, 0, 0, 0);[/CODE] [CODE]public rectangle solidarea = new rectangle(0, 0, 48, 48);[/CODE] [CODE]public int solidareadefaultx, solidareadefaulty;[/CODE] [CODE]public boolean collisionon = false;[/CODE] [CODE]public int actionlockcounter = 0;[/CODE] [CODE]public boolean invincible = false;[/CODE] [CODE]public int invinciblecounter = 0;[/CODE] [CODE]public boolean gunattack = false;[/CODE] //character status [CODE]public int maxlife;[/CODE] [CODE]public int life;[/CODE] [CODE]public int wave;[/CODE] [CODE]public int damage;[/CODE] [CODE]public int point = 0;[/CODE] [CODE]public entity(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public void setaction(){[/CODE]} [CODE]public void update(){[/CODE] setaction(); collisionon = false; gp.cchecker.checktile(this); int npcindex = gp.cchecker.checkentity(this, gp.npc); boolean contactplayer = gp.cchecker.checkplayer(this); [CODE]if(contactplayer){[/CODE] if(!gp.player.invincible && npcindex != 999){ int damage = gp.npc[npcindex].damage; [CODE]if(damage < 0){[/CODE] damage = 0; } gp.player.l[CODE]ife -= damage;[/CODE] gp.player.invincible = true; } } [CODE]if(collisionon == false){[/CODE] switch(direction){ case ""up"": worldy -= speed; break; case ""down"": worldy += speed; break; case ""left"": worldx -= speed; break; case ""right"": worldx += speed; break; } } spritecounter++; [CODE]if(spritecounter > 12){[/CODE] [CODE]if(spritenum == 1){[/CODE] spritenum = 2; } [CODE]else if(spritenum == 2){[/CODE] spritenum = 1; } spritecounter = 0; } [CODE]if(invincible){[/CODE] invinciblecounter++; [CODE]if(invinciblecounter > 40){[/CODE] invincible = false; invinciblecounter = 0; } } } [CODE]public void draw(graphics2d g2){[/CODE] bufferedimage image = null; int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; if(worldx + gp.tilesize > gp.player.worldx - gp.player.screenx && worldx - gp.tilesize < gp.player.worldx + gp.player.screenx && worldy + gp.tilesize > gp.player.worldy - gp.player.screeny && worldy - gp.tilesize < gp.player.worldy + gp.player.screeny ){ switch(direction){ case ""up"": [CODE]if(spritenum == 1){[/CODE] image = up1; } [CODE]if(spritenum == 2){[/CODE] image = up2; } break; case ""down"": [CODE]if(spritenum == 1){[/CODE] image = down1; } [CODE]if(spritenum == 2){[/CODE] image = down2; } break; case ""left"": [CODE]if(spritenum == 1){[/CODE] image = left1; } [CODE]if(spritenum == 2){[/CODE] image = left2; } break; case ""right"": [CODE]if(spritenum == 1){[/CODE] image = right1; } [CODE]if(spritenum == 2){[/CODE] image = right2; } break; } [CODE]if(invincible){[/CODE] g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, 0.3f)); } g2.drawimage(image, screenx, screeny, null); g2.setcomposite(alphacomposite.getinstance(alphacomposite.src_over, 1f)); } } [CODE]public bufferedimage setup(string imagepath, int widht, int height){[/CODE] utilitytool utool = [CODE]new utilitytool();[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream( imagepath + "".png"")); image = utool.scaleimage(image, widht, height); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } } [CODE]package entity;[/CODE] import main.gamepanel; [CODE]public class acidzombie extends entity {[/CODE] gamepanel gp; private [CODE]int acidattackcounter;[/CODE] private final [CODE]int acidattackinterval = 480;[/CODE] [CODE]public acidzombie(gamepanel gp) {[/CODE] super(gp); this.gp = gp; direction = ""down""; speed = 1; damage = 1; maxl[CODE]ife = 1;[/CODE] l[CODE]ife = maxlife;[/CODE] po[CODE]int = 150;[/CODE] acidattackcounter = 0; solidarea.x = 3; solidarea.y = 18; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; getimage(); } [CODE]public void getimage() {[/CODE] up1 = setup(""/npc/acid_z_up1"", gp.tilesize, gp.tilesize); up2 = setup(""/npc/acid_z_up2"", gp.tilesize, gp.tilesize); down1 = setup(""/npc/acid_z_down1"", gp.tilesize, gp.tilesize); down2 = setup(""/npc/acid_z_down2"", gp.tilesize, gp.tilesize); left1 = setup(""/npc/acid_z_left1"", gp.tilesize, gp.tilesize); left2 = setup(""/npc/acid_z_left2"", gp.tilesize, gp.tilesize); right1 = setup(""/npc/acid_z_right1"", gp.tilesize, gp.tilesize); right2 = setup(""/npc/acid_z_right2"", gp.tilesize, gp.tilesize); } [CODE]public void setaction() {[/CODE] acidattackcounter++; int diffx = gp.player.worldx - worldx; int diffy = gp.player.worldy - worldy; double distance = math.sqrt(d[CODE]iffx * diffx + diffy * diffy);[/CODE] [CODE]if(acidattackcounter >= acidattackinterval) {[/CODE] spitacid(); acidattackcounter = 0; } if(math.abs(diffx) > math.abs(d[CODE]iffy)) {[/CODE] direction = (d[CODE]iffx > 0) ? ""right"" : ""left"";[/CODE] } [CODE]else {[/CODE] direction = (d[CODE]iffy > 0) ? ""down"" : ""up"";[/CODE] } } [CODE]public int[] getacidspawnposition() {[/CODE] int spawnx = worldx + gp.tilesize / 2; int spawny = worldy + gp.tilesize / 2; switch(direction) { case ""up"": spawny -= 10; break; case ""down"": spawny += 10; break; case ""left"": spawnx -= 10; break; case ""right"": spawnx += 10; break; case ""upright"": { spawnx += 7; spawny -= 7; break; } case ""upleft"": { spawnx -= 7; spawny -= 7; break; } case ""downright"":{ spawnx += 7; spawny += 7; break; } case ""downleft"": { spawnx -= 7; spawny += 7; break; } } [CODE]return new int[]{[/CODE]spawnx, spawny}; } [CODE]public void spitacid() {[/CODE] [CODE]int[] spawnpos = getacidspawnposition();[/CODE] [CODE]int startx = spawnpos[0];[/CODE] [CODE]int starty = spawnpos[1];[/CODE] int targetx = gp.player.worldx + gp.tilesize / 2; int targety = gp.player.worldy + gp.tilesize / 2; acidbullet acid = [CODE]new acidbullet(gp, startx, starty, targetx, targety);[/CODE] gp.acidbulletlist.add(acid); } } [CODE]package entity;[/CODE] import main.gamepanel; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; [CODE]public class bullet extends entity {[/CODE] [CODE]public int dx;[/CODE] [CODE]public int dy;[/CODE] [CODE]public int bulletspeed = 8;[/CODE] [CODE]public int damage = 1;[/CODE] [CODE]public boolean explosive = false;[/CODE] [CODE]public int explosionradius = 20;[/CODE] [CODE]public int explosiontimer = 30;[/CODE] [CODE]public bufferedimage bulletimage;[/CODE] [CODE]public boolean piercing = false;[/CODE] [CODE]public bullet(gamepanel gp, int startx, int starty, int targetx, int targety) {[/CODE] super(gp); this.worldx = startx; this.worldy = starty; [CODE]int diffx = targetx - startx;[/CODE] [CODE]int diffy = targety - starty;[/CODE] double distance = math.sqrt(d[CODE]iffx * diffx + diffy * diffy);[/CODE] [CODE]if (distance == 0) distance = 1;[/CODE] // bölme hatasını önlemek için this.dx = (int) math.round((d[CODE]iffx / distance) * bulletspeed);[/CODE] this.dy = (int) math.round((d[CODE]iffy / distance) * bulletspeed);[/CODE] setupbulletimage(); } private [CODE]void setupbulletimage() {[/CODE] bulletimage = setup(""/bullet/bullet"", gp.tilesize, gp.tilesize); } [CODE]public void update() {[/CODE] worldx += dx; worldy += dy; } [CODE]public void draw(graphics2d g2) {[/CODE] int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; g2.drawimage(bulletimage, screenx, screeny, null); } [CODE]public rectangle getsolidarea() {[/CODE] return new rectangle(worldx, worldy, bulletimage.getwidth(), bulletimage.getheight()); } } [CODE]package entity;[/CODE] import main.gamepanel; [CODE]public class normalzombie extends entity{[/CODE] gamepanel gp; [CODE]public normalzombie(gamepanel gp){[/CODE] super(gp); this.gp = gp; direction = ""down""; speed = 1; damage = 1; maxl[CODE]ife = 2;[/CODE] l[CODE]ife = maxlife;[/CODE] po[CODE]int = 50;[/CODE] solidarea.x = 3; solidarea.y = 18; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; getimage(); } [CODE]public void getimage(){[/CODE] up1 = setup(""/npc/normal_z_up1"", gp.tilesize, gp.tilesize); up2 = setup(""/npc/normal_z_up2"", gp.tilesize, gp.tilesize); down1 = setup(""/npc/normal_z_down1"", gp.tilesize, gp.tilesize); down2 = setup(""/npc/normal_z_down2"", gp.tilesize, gp.tilesize); left1 = setup(""/npc/normal_z_left1"", gp.tilesize, gp.tilesize); left2 = setup(""/npc/normal_z_left2"", gp.tilesize, gp.tilesize); right1 = setup(""/npc/normal_z_right1"", gp.tilesize, gp.tilesize); right2 = setup(""/npc/normal_z_right2"", gp.tilesize, gp.tilesize); } [CODE]public void setaction() {[/CODE] int dx = gp.player.worldx - worldx; int dy = gp.player.worldy - worldy; if (math.abs(dx) > math.abs(dy)) { [CODE]if (dx > 0) {[/CODE] direction = ""right""; } [CODE]else {[/CODE] direction = ""left""; } } [CODE]else {[/CODE] [CODE]if (dy > 0) {[/CODE] direction = ""down""; } [CODE]else {[/CODE] direction = ""up""; } } } } [CODE]package entity;[/CODE] import java.awt.graphics2d; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import main.gamepanel; import main.utilitytool; [CODE]public class rocketbullet extends bullet {[/CODE] [CODE]public int damage = 5;[/CODE] [CODE]public int speed = 10;[/CODE] [CODE]public bufferedimage rocketimage;[/CODE] [CODE]public rocketbullet(gamepanel gp, int startx, int starty, int targetx, int targety) {[/CODE] super(gp, startx, starty, targetx, targety); this.bulletspeed = speed; [CODE]int diffx = targetx - startx;[/CODE] [CODE]int diffy = targety - starty;[/CODE] double distance = math.sqrt(d[CODE]iffx * diffx + diffy * diffy);[/CODE] [CODE]if(distance == 0) distance = 1;[/CODE] this.dx = (int)math.round((d[CODE]iffx / distance) * speed);[/CODE] this.dy = (int)math.round((d[CODE]iffy / distance) * speed);[/CODE] setuprocketimage(); } [CODE]public void setuprocketimage() {[/CODE] [CODE]try {[/CODE] rocketimage = imageio.read(getclass().getresourceasstream(""/bullet/rocketbullet.png"")); rocketimage = new utilitytool().scaleimage(rocketimage, gp.tilesize * 2, gp.tilesize * 2); } [CODE]catch(ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]if(rocketimage == null) {[/CODE] system.out.pr[CODE]intln(""rocketbullet resmi yüklenemedi!"");[/CODE] } [CODE]else {[/CODE] system.out.println(""rocketbullet resmi yüklendi, boyut: "" + rocketimage.getwidth() + ""x"" + rocketimage.getheight()); } } @override [CODE]public void draw(graphics2d g2) {[/CODE] int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; g2.drawimage(rocketimage, screenx, screeny, null); } @override public java.awt.rectangle getsolidarea() { return new java.awt.rectangle(worldx, worldy, rocketimage.getwidth(), rocketimage.getheight()); } } [CODE]package entity;[/CODE] import main.gamepanel; [CODE]public class tankzombie extends entity {[/CODE] gamepanel gp; [CODE]public tankzombie(gamepanel gp){[/CODE] super(gp); this.gp = gp; direction = ""down""; speed = 1; damage = 2; maxl[CODE]ife = 3;[/CODE] l[CODE]ife = maxlife;[/CODE] po[CODE]int = 200;[/CODE] solidarea.x = 3; solidarea.y = 18; solidarea.width = 42; solidarea.height = 30; solidareadefaultx = solidarea.x; solidareadefaulty = solidarea.y; getimage(); } [CODE]public void getimage(){[/CODE] up1 = setup(""/npc/tank_z_up1"", gp.tilesize, gp.tilesize); up2 = setup(""/npc/tank_z_up2"", gp.tilesize, gp.tilesize); down1 = setup(""/npc/tank_z_down1"", gp.tilesize, gp.tilesize); down2 = setup(""/npc/tank_z_down2"", gp.tilesize, gp.tilesize); left1 = setup(""/npc/tank_z_left1"", gp.tilesize, gp.tilesize); left2 = setup(""/npc/tank_z_left2"", gp.tilesize, gp.tilesize); right1 = setup(""/npc/tank_z_right1"", gp.tilesize, gp.tilesize); right2 = setup(""/npc/tank_z_right2"", gp.tilesize, gp.tilesize); } [CODE]public void setaction() {[/CODE] int dx = gp.player.worldx - worldx; int dy = gp.player.worldy - worldy; if (math.abs(dx) > math.abs(dy)) { [CODE]if (dx > 0) {[/CODE] direction = ""right""; } [CODE]else {[/CODE] direction = ""left""; } } [CODE]else {[/CODE] [CODE]if (dy > 0) {[/CODE] direction = ""down""; } [CODE]else {[/CODE] direction = ""up""; } } } } [CODE]package entity;[/CODE] import java.awt.rectangle; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import java.awt.graphics2d; import main.gamepanel; import main.utilitytool; [CODE]public class acidbullet extends entity {[/CODE] [CODE]public int worldx, worldy;[/CODE] [CODE]public int dx, dy;[/CODE] [CODE]public int speed = 5;[/CODE] [CODE]public int damage = 1;[/CODE] [CODE]public bufferedimage acidimage;[/CODE] [CODE]public rectangle solidarea;[/CODE] [CODE]public acidbullet(gamepanel gp, int startx, int starty, int targetx, int targety) {[/CODE] super(gp); this.worldx = startx; this.worldy = starty; [CODE]int diffx = targetx - startx;[/CODE] [CODE]int diffy = targety - starty;[/CODE] double distance = math.sqrt(d[CODE]iffx*diffx + diffy*diffy);[/CODE] dx = (int)math.round(d[CODE]iffx / distance * speed);[/CODE] dy = (int)math.round(d[CODE]iffy / distance * speed);[/CODE] setupacidimage(); system.out.pr[CODE]intln(""acidbullet oluşturuldu: startx="" + startx + "", starty="" + starty + "", targetx="" + targetx + "", targety="" + targety);[/CODE] } [CODE]public void setupacidimage() {[/CODE] [CODE]try {[/CODE] acidimage = imageio.read(getclass().getresourceasstream(""/bullet/aciddbullet.png"")); acidimage = new utilitytool().scaleimage(acidimage, gp.tilesize, gp.tilesize); } [CODE]catch(ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]if(acidimage == null) {[/CODE] system.out.pr[CODE]intln(""acidbullet resmi yüklenemedi!"");[/CODE] } [CODE]else {[/CODE] system.out.println(""acidbullet resmi yüklendi, boyut: "" + acidimage.getwidth() + ""x"" + acidimage.getheight()); } } [CODE]public void update() {[/CODE] worldx += dx; worldy += dy; } [CODE]public void draw(graphics2d g2) {[/CODE] int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; g2.drawimage(acidimage, screenx, screeny, null); } public java.awt.rectangle getsolidarea() { return new java.awt.rectangle(worldx, worldy, acidimage.getwidth(), acidimage.getheight()); } } [CODE]package entity;[/CODE] import main.keyhandler; import weapons.gun; import weapons.weapons; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; import java.util.arraylist; import main.gamepanel; [CODE]public class player extends entity{[/CODE] keyhandler keyh; [CODE]public weapons currentweapon;[/CODE] [CODE]public arraylist<weapons> weaponinventory;[/CODE] [CODE]public int currentweaponindex;[/CODE] [CODE]public final int screenx;[/CODE] [CODE]public final int screeny;[/CODE] [CODE]public int attacktimer = 0;[/CODE] [CODE]public int totalpoint = 0;[/CODE] [CODE]public player(gamepanel gp, keyhandler keyh){[/CODE] super(gp); this.keyh = keyh; screenx = gp.screenwidth/2 - (gp.tilesize/2); screeny = gp.screenheight/2 - (gp.tilesize/2); solidarea = [CODE]new rectangle();[/CODE] solidarea.x = 8; solidarea.y = 16; solidarea.width = 32; solidarea.height = 32; currentweapon = new gun(gp, gp.fps); weaponinventory = [CODE]new arraylist<>();[/CODE] weaponinventory.add(new gun(gp, gp.fps)); currentweaponindex = 0; currentweapon = weaponinventory.get(currentweaponindex); setdefaultvalues(); getplayerimage(); } [CODE]public void setdefaultvalues(){[/CODE] worldx = gp.tilesize * 24; worldy = gp.tilesize * 23; speed = 4; direction = ""down""; //player status wave = 1; totalpo[CODE]int = 0;[/CODE] maxl[CODE]ife = 6;[/CODE] l[CODE]ife = maxlife;[/CODE] } [CODE]public void resetposition(){[/CODE] worldx = gp.tilesize * 24; worldy = gp.tilesize * 23; } [CODE]public void getplayerimage(){[/CODE] up1 = setup(""/player/boy_up_1"", gp.tilesize, gp.tilesize); up2 = setup(""/player/boy_up_2"", gp.tilesize, gp.tilesize); down1 = setup(""/player/boy_down_1"", gp.tilesize, gp.tilesize); down2 = setup(""/player/boy_down_2"", gp.tilesize, gp.tilesize); left1 = setup(""/player/boy_left_1"", gp.tilesize, gp.tilesize); left2 = setup(""/player/boy_left_2"", gp.tilesize, gp.tilesize); right1 = setup(""/player/boy_right_1"", gp.tilesize, gp.tilesize); right2 = setup(""/player/boy_right_2"", gp.tilesize, gp.tilesize); } [CODE]public void switchweapon(int index){[/CODE] if(index >= 0 && index < weaponinventory.size()){ currentweaponindex = index; currentweapon = weaponinventory.get(currentweaponindex); } } [CODE]public void nextweapon(){[/CODE] currentweaponindex = (currentweaponindex + 1) % weaponinventory.size(); currentweapon = weaponinventory.get(currentweaponindex); } [CODE]public void previousweapon(){[/CODE] currentweaponindex = (currentweaponindex - 1 + weaponinventory.size()) % weaponinventory.size(); currentweapon = weaponinventory.get(currentweaponindex); } [CODE]public void update(){[/CODE] currentweapon.cooldownupdate(); [CODE]if(gunattack){[/CODE] gunattacking(); } else if(keyh.uppressed || keyh.downpressed || keyh.leftpressed || keyh.rightpressed || keyh.spacepressed){ if(keyh.uppressed){ direction = ""up""; } else if(keyh.downpressed){ direction = ""down""; } else if(keyh.leftpressed){ direction = ""left""; } else if(keyh.rightpressed){ direction = ""right""; } //check tile collision collisionon = false; gp.cchecker.checktile(this); //check npc collision int npcindex = gp.cchecker.checkentity(this, gp.npc); //[CODE]interactnpc(npcindex);[/CODE] contactzombie(npcindex); //[CODE]if collision is false, player can move if(collisionon == false){[/CODE] switch(direction){ case ""up"": worldy -= speed; break; case ""down"": worldy += speed; break; case ""left"": worldx -= speed; break; case ""right"": worldx += speed; break; } } spritecounter++; [CODE]if(spritecounter > 12){[/CODE] [CODE]if(spritenum == 1){[/CODE] spritenum = 2; } [CODE]else if(spritenum == 2){[/CODE] spritenum = 1; } spritecounter = 0; } } [CODE]if(invincible){[/CODE] invinciblecounter++; [CODE]if(invinciblecounter > 60){[/CODE] invincible = false; invinciblecounter = 0; } } [CODE]if(life <= 0){[/CODE] gp.gamestate = gp.gameoverstate; } } [CODE]public void contactzombie(int i){[/CODE] [CODE]if(i != 999){[/CODE] [CODE]if(!invincible){[/CODE] int damage = gp.npc[i].damage; [CODE]if(damage < 0){[/CODE] damage = 0; } l[CODE]ife -= damage;[/CODE] invincible = true; } } } [CODE]public void damagezombie(int i){[/CODE] [CODE]if(i != 999){[/CODE] if(!(gp.npc[i].invincible)){ gp.npc[i].l[CODE]ife -= 1;[/CODE] gp.npc[i].invincible = true; if(gp.npc[i].l[CODE]ife <= 0){[/CODE] gp.npc[i] = null; } } } } [CODE]public void gunattacking(){[/CODE] spritecounter++; [CODE]if(spritecounter <= 10){[/CODE] spritenum = 1; } [CODE]else if(spritecounter <= 30){[/CODE] spritenum = 2; } [CODE]else{[/CODE] spritenum = 1; spritecounter = 0; gunattack = false; } } [CODE]public int[] getguntipposition() {[/CODE] // başlangıç olarak, oyuncunun ""worldx"" ve ""worldy"" si, // sprite’ın sol üst köşesini temsil eder. [CODE]int spawnx = worldx;[/CODE] [CODE]int spawny = worldy;[/CODE] switch(direction) { case ""up"": // yukarı bakarken sprite 16 genişlik, 32 yükseklik // karakterin merkezini bul, sonra biraz yukarı kaydır spawnx += gp.tilesize / 2 - 16; // ortalamak için spawny -= 8; // kılıç ucunu yakalamak için break; case ""down"": spawnx += gp.tilesize / 2 - 20; // aşağıya bakarken en alt tarafa inmek için tilesize kadar + ufak offset spawny += gp.tilesize + 8; break; case ""left"": // sola bakarken sprite 32 genişlik, 16 yükseklik // soldan biraz dışarı spawnx -= 8; spawny += gp.tilesize / 2 - 15; break; case ""right"": spawnx += gp.tilesize + 8; spawny += gp.tilesize / 2 - 15; break; } [CODE]return new int[]{[/CODE]spawnx, spawny}; } [CODE]public void draw(graphics2d g2){[/CODE] bufferedimage image = null; [CODE]int tempscreenx = screenx;[/CODE] [CODE]int tempscreeny = screeny;[/CODE] switch(direction){ case ""up"": [CODE]if(!gunattack){[/CODE] [CODE]if(spritenum == 1){[/CODE]image = up1;} [CODE]if(spritenum == 2){[/CODE]image = up2;} } [CODE]if(gunattack){[/CODE] tempscreeny = screeny - gp.tilesize; [CODE]if(spritenum == 1){[/CODE]image = currentweapon.weaponup1;} [CODE]if(spritenum == 2){[/CODE]image = currentweapon.weaponup2;} } break; case ""down"": [CODE]if(!gunattack){[/CODE] [CODE]if(spritenum == 1){[/CODE]image = down1;} [CODE]if(spritenum == 2){[/CODE]image = down2;} } [CODE]if(gunattack){[/CODE] [CODE]if(spritenum == 1){[/CODE]image = currentweapon.weapondown1;} [CODE]if(spritenum == 2){[/CODE]image = currentweapon.weapondown2;} } break; case ""left"": [CODE]if(!gunattack){[/CODE] [CODE]if(spritenum == 1){[/CODE]image = left1;} [CODE]if(spritenum == 2){[/CODE]image = left2;} } [CODE]if(gunattack){[/CODE] tempscreenx = screenx - gp.tilesize; [CODE]if(spritenum == 1){[/CODE]image = currentweapon.weaponleft1;} [CODE]if(spritenum == 2){[/CODE]image = currentweapon.weaponleft2;} } break; case ""right"": [CODE]if(!gunattack){[/CODE] [CODE]if(spritenum == 1){[/CODE]image = right1;} [CODE]if(spritenum == 2){[/CODE]image = right2;} } [CODE]if(gunattack){[/CODE] [CODE]if(spritenum == 1){[/CODE]image = currentweapon.weaponright1;} [CODE]if(spritenum == 2){[/CODE]image = currentweapon.weaponright2;} } break; } g2.drawimage(image, tempscreenx, tempscreeny, null); } } [CODE]package main;[/CODE] import java.util.random; import entity.crawlingzombie; import entity.acidzombie; import entity.entity; import entity.normalzombie; import entity.tankzombie; import weapons.r[CODE]ifle;[/CODE] import weapons.rocketlauncher; import weapons.sniper; import weapons.weapons; import weapons.shotgun; [CODE]public class wavemanager {[/CODE] gamepanel gp; [CODE]public int currentwave = 0;[/CODE] [CODE]public wavemanager(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public void startwave(){[/CODE] [CODE]int numberofzombies = 5 + currentwave*3;[/CODE] gp.npc = [CODE]new entity[numberofzombies];[/CODE] random rnd = [CODE]new random();[/CODE] int minx = gp.tilesize * 3; int maxx = gp.worldwidth - gp.tilesize*3; int miny = gp.tilesize * 3; int maxy = gp.worldheight - gp.tilesize*3; [CODE]for (int i = 0;[/CODE] i < numberofzombies; i++) { int worldx = rnd.next[CODE]int(maxx - minx) + minx;[/CODE] int worldy = rnd.next[CODE]int(maxy - miny) + miny;[/CODE] [CODE]if (currentwave < 3) {[/CODE] gp.npc[i] = [CODE]new normalzombie(gp);[/CODE] } [CODE]else if (currentwave < 6) {[/CODE] if (rnd.nextboolean()) { gp.npc[i] = [CODE]new normalzombie(gp);[/CODE] } [CODE]else {[/CODE] gp.npc[i] = [CODE]new crawlingzombie(gp);[/CODE] } } [CODE]else if (currentwave < 9) {[/CODE] if (rnd.next[CODE]int(100) < 50) {[/CODE] gp.npc[i] = [CODE]new crawlingzombie(gp);[/CODE] } [CODE]else {[/CODE] gp.npc[i] = [CODE]new tankzombie(gp);[/CODE] } } [CODE]else {[/CODE] int type = rnd.next[CODE]int(100);[/CODE] [CODE]if (type < 40) {[/CODE] gp.npc[i] = [CODE]new crawlingzombie(gp);[/CODE] } [CODE]else if (type < 80) {[/CODE] gp.npc[i] = [CODE]new tankzombie(gp);[/CODE] } [CODE]else {[/CODE] gp.npc[i] = [CODE]new acidzombie(gp);[/CODE] } } gp.npc[i].worldx = worldx; gp.npc[i].worldy = worldy; } system.out.println(""dalga "" + currentwave + "" başladı. zombi sayısı: "" + numberofzombies); } [CODE]public boolean iswavefinished() {[/CODE] [CODE]for (int i = 0;[/CODE] i < gp.npc.length; i++) { if (gp.npc[i] != null) { [CODE]return false;[/CODE] } } [CODE]return true;[/CODE] } [CODE]public void nextwave() {[/CODE] [CODE]if(currentwave >= 12) {[/CODE] gp.gamestate = gp.winstate; system.out.println(""tebrikler! oyunu kazandınız. dalga "" + currentwave + "" tamamlandı.""); [CODE]return;[/CODE] } currentwave++; weapons [CODE]newweapon = null;[/CODE] [CODE]if (currentwave == 2) {[/CODE] newweapon = new rifle(gp, gp.fps); } [CODE]else if (currentwave == 4) {[/CODE] newweapon = new shotgun(gp, gp.fps); } [CODE]else if (currentwave == 6) {[/CODE] newweapon = new sniper(gp, gp.fps); } [CODE]else if (currentwave == 11) {[/CODE] newweapon = new rocketlauncher(gp, gp.fps); } [CODE]if(newweapon != null) {[/CODE] gp.player.weaponinventory.add([CODE]newweapon);[/CODE] gp.player.currentweapon = [CODE]newweapon;[/CODE] gp.player.currentweaponindex = gp.player.weaponinventory.size() - 1; gp.newweaponmessage = ""new weapon: "" + newweapon.getclass().getsimplename(); gp.newweaponmessagetimer = gp.fps * 2; } gp.wavetext = ""wave "" + currentwave; gp.wavetexttime = gp.fps * 2; gp.player.resetposition(); // yeni dalgayı başlat startwave(); } } [CODE]package main;[/CODE] import java.awt.graphics2d; import java.awt.image.bufferedimage; [CODE]public class utilitytool {[/CODE] [CODE]public bufferedimage scaleimage(bufferedimage original, int width, int height){[/CODE] bufferedimage scaledimage = new bufferedimage(width, height, original.gettype()); graphics2d g2 = scaledimage.creategraphics(); g2.drawimage(original, 0, 0, width, height, null); g2.dispose(); [CODE]return scaledimage;[/CODE] } } [CODE]package main;[/CODE] import java.awt.event.mouseadapter; import java.awt.event.mouseevent; import java.awt.image.bufferedimage; import java.util.arraylist; import java.awt.color; import java.awt.dimension; import java.awt.graphics; import java.awt.graphics2d; import java.awt.rectangle; import java.util.collections; import java.util.comparator; import javax.swing.jpanel; import data.saveload; import entity.acidbullet; import entity.bullet; import entity.entity; import entity.player; import entity.rocketbullet; import tile.tilemanager; import weapons.gun; [CODE]public class gamepanel extends jpanel implements runnable{[/CODE] final [CODE]int originaltilesize = 16;[/CODE] final [CODE]int scale = 3;[/CODE] [CODE]public final int tilesize = originaltilesize*scale;[/CODE] [CODE]public final int maxscreencol = 16;[/CODE] [CODE]public final int maxscreenrow = 12;[/CODE] [CODE]public final int screenwidth = tilesize*maxscreencol;[/CODE] [CODE]public final int screenheight = tilesize*maxscreenrow;[/CODE] //world settings [CODE]public final int maxworldcol = 50;[/CODE] [CODE]public final int maxworldrow = 50;[/CODE] [CODE]public final int worldwidth = tilesize * maxworldcol;[/CODE] [CODE]public final int worldheight = tilesize * maxworldrow;[/CODE] //[CODE]for full screen int screenwidth2 = screenwidth;[/CODE] [CODE]int screenheight2 = screenheight;[/CODE] bufferedimage tempscreen; graphics2d g2; [CODE]public int fps = 60;[/CODE] tilemanager tilem = [CODE]new tilemanager(this);[/CODE] saveload saveload = [CODE]new saveload(this);[/CODE] keyhandler keyh = [CODE]new keyhandler(this);[/CODE] [CODE]public string wavetext = """";[/CODE] [CODE]public int wavetexttime = 0;[/CODE] [CODE]public string newweaponmessage = """";[/CODE] [CODE]public int newweaponmessagetimer = 0;[/CODE] [CODE]public wavemanager wavemanager;[/CODE] [CODE]public collisionchecker cchecker = new collisionchecker(this);[/CODE] [CODE]public ui ui = new ui(this);[/CODE] thread gamethread; [CODE]public player player = new player(this, keyh);[/CODE] [CODE]public assetsetter asetter = new assetsetter(this);[/CODE] //npc [CODE]public int initialnpcarraysize = 10;[/CODE] [CODE]public entity npc[] = new entity[10];[/CODE] arraylist<entity> entitylist = [CODE]new arraylist<>();[/CODE] //game state [CODE]public int gamestate;[/CODE] [CODE]public final int titlestate = 0;[/CODE] [CODE]public final int playstate = 1;[/CODE] [CODE]public final int pausestate = 2;[/CODE] [CODE]public final int characterstate = 3;[/CODE] [CODE]public final int gameoverstate = 4;[/CODE] [CODE]public final int winstate = 5;[/CODE] //bullet [CODE]public arraylist<bullet> bulletlist = new arraylist<>();[/CODE] [CODE]public int mousex, mousey;[/CODE] [CODE]public arraylist<acidbullet> acidbulletlist = new arraylist<>();[/CODE] [CODE]public arraylist<rocketbullet> rocketbulletlist = new arraylist<>();[/CODE] [CODE]public gamepanel(){[/CODE] this.setpreferredsize([CODE]new dimension(screenwidth, screenheight));[/CODE] this.setbackground(color.black); this.setdoublebuffered(true); this.addkeylistener(keyh); wavemanager = [CODE]new wavemanager(this);[/CODE] this.setfocusable(true); this.addmouselistener([CODE]new mouseadapter() {[/CODE] @override [CODE]public void mousepressed(mouseevent e) {[/CODE] if(e.getbutton() == mouseevent.button1) { int mousex = e.getx(); int mousey = e.gety(); int[] spawnpos = player.getguntipposition(); int targetx = player.worldx + (mousex - player.screenx); int targety = player.worldy + (mousey - player.screeny); player.gunattack = true; arraylist<bullet> bullets = player.currentweapon.attacktozombie(gamepanel.this, spawnpos[0], spawnpos[1], targetx, targety); [CODE]for(bullet b : bullets) {[/CODE] bulletlist.add(b); } } } }); } [CODE]public void setupgame(){[/CODE] asetter.setnpc(); gamestate = titlestate; wavemanager.nextwave(); } [CODE]public void resetgame(){[/CODE] player.setdefaultvalues(); player.totalpo[CODE]int = 0;[/CODE] player.weaponinventory.clear(); player.weaponinventory.add([CODE]new gun(this, fps));[/CODE] player.currentweaponindex = 0; player.currentweapon = player.weaponinventory.get(0); wavemanager.currentwave = 1; wavetext = ""wave "" + wavemanager.currentwave; wavetexttime = fps * 3; wavemanager.startwave(); bulletlist.clear(); acidbulletlist.clear(); } [CODE]public void startgamethread(){[/CODE] gamethread = [CODE]new thread(this);[/CODE] gamethread.start(); } @override [CODE]public void run() {[/CODE] double draw[CODE]interval = 1000000000/fps;[/CODE] double delta = 0; long lasttime =system.nanotime(); long currenttime; [CODE]while(gamethread != null){[/CODE] currenttime = system.nanotime(); delta += (currenttime - lasttime) / draw[CODE]interval;[/CODE] lasttime = currenttime; [CODE]if(delta >= 1){[/CODE] update(); repa[CODE]int();[/CODE] delta--; } } } [CODE]public void update(){[/CODE] [CODE]if(gamestate == playstate){[/CODE] //player player.update(); [CODE]if(wavetexttime <= 0){[/CODE] [CODE]for(int i = 0;[/CODE] i<npc.length; i++){ [CODE]if(npc[i] != null){[/CODE] npc[i].update(); } } } for (int i = bulletlist.size() - 1; i >= 0; i--) { bullet b = bulletlist.get(i); b.update(); if(b.explosive){ int bulletcenterx = b.worldx + b.bulletimage.getwidth() / 2; int bulletcentery = b.worldy + b.bulletimage.getheight() / 2; [CODE]for (int j = 0;[/CODE] j < npc.length; j++) { [CODE]if (npc[j] != null) {[/CODE] int zombiecenterx = npc[j].worldx + npc[j].solidarea.x + npc[j].solidarea.width / 2; int zombiecentery = npc[j].worldy + npc[j].solidarea.y + npc[j].solidarea.height / 2; double distance = math.sqrt(math.pow(bulletcenterx - zombiecenterx, 2) + math.pow(bulletcentery - zombiecentery, 2)); if (distance <= b.explosionradius) { npc[j].life -= b.damage; if (npc[j].l[CODE]ife <= 0) {[/CODE] player.totalpoint += npc[j].po[CODE]int;[/CODE] npc[j] = null; } } } } if(b.explosiontimer > 0) { b.explosiontimer--; } [CODE]else {[/CODE] bulletlist.remove(i); } } [CODE]else{[/CODE] [CODE]for (int j = 0;[/CODE] j < npc.length; j++) { [CODE]if(npc[j] != null) {[/CODE] rectangle npcrect = new rectangle( npc[j].worldx + npc[j].solidarea.x, npc[j].worldy + npc[j].solidarea.y, npc[j].solidarea.width, npc[j].solidarea.height ); if(b.getsolidarea().[CODE]intersects(npcrect)) {[/CODE] npc[j].life -= b.damage; if(npc[j].l[CODE]ife <= 0) {[/CODE] player.totalpoint += npc[j].po[CODE]int;[/CODE] npc[j] = null; } if(!b.piercing){ bulletlist.remove(i); break; } } } } } } for (int i = acidbulletlist.size() - 1; i >= 0; i--) { acidbullet ab = acidbulletlist.get(i); ab.update(); java.awt.rectangle acidrect = ab.getsolidarea(); java.awt.rectangle playerrect = new java.awt.rectangle( player.worldx + player.solidarea.x, player.worldy + player.solidarea.y, player.solidarea.width, player.solidarea.height ); if(acidrect.[CODE]intersects(playerrect)) {[/CODE] if(!player.invincible) { player.life -= ab.damage; player.invincible = true; } acidbulletlist.remove(i); continue; } } for (int i = rocketbulletlist.size() - 1; i >= 0; i--) { rocketbullet rb = rocketbulletlist.get(i); rb.update(); if(rb.worldx < 0 || rb.worldx > worldwidth || rb.worldy < 0 || rb.worldy > worldheight) { rocketbulletlist.remove(i); continue; } } if(wavemanager.iswavefinished()){ wavemanager.nextwave(); } } [CODE]if(gamestate == pausestate){[/CODE] } } [CODE]public void paintcomponent(graphics g){[/CODE] super.pa[CODE]intcomponent(g);[/CODE] graphics2d g2 = (graphics2d)g; //title screen [CODE]if(gamestate == titlestate){[/CODE] ui.draw(g2); } //others [CODE]else{[/CODE] //tile tilem.draw(g2); //add entities to the list entitylist.add(player); [CODE]for(int i = 0;[/CODE] i<npc.length; i++){ [CODE]if(npc[i] != null){[/CODE] entitylist.add(npc[i]); } } //sort collections.sort(entitylist, [CODE]new comparator<entity>() {[/CODE] @override [CODE]public int compare(entity e1, entity e2) {[/CODE] int result = integer.compare(e1.worldy, e2.worldy); [CODE]return result;[/CODE] } }); //draw entities [CODE]for(int i = 0;[/CODE] i<entitylist.size(); i++){ entitylist.get(i).draw(g2); } //empty entity list entitylist.clear(); [CODE]for(bullet b: bulletlist){[/CODE] b.draw(g2); } [CODE]for (acidbullet ab : acidbulletlist) {[/CODE] ab.draw(g2); } [CODE]for(rocketbullet rb : rocketbulletlist) {[/CODE] rb.draw(g2); } //ui ui.draw(g2); } g2.dispose(); } } [CODE]package main;[/CODE] import java.awt.basicstroke; import java.awt.color; import java.awt.font; import java.awt.graphics2d; import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; import weapons.weapons; [CODE]public class ui {[/CODE] gamepanel gp; font arial; graphics2d g2; [CODE]public int commandnum = 0;[/CODE] bufferedimage heartfull, hearthalf, heartempty; [CODE]public ui(gamepanel gp){[/CODE] this.gp = gp; arial = new font(""arial"", font.bold, 27); loadheartimages(); } [CODE]public void draw(graphics2d g2){[/CODE] this.g2 = g2; g2.setfont(arial); g2.setcolor(color.white); //title state if(gp.gamestate == gp.titlestate){ drawtitlescreen(); } //play state if(gp.gamestate == gp.playstate){ drawplayerl[CODE]ife();[/CODE] drawgunandremainingbullet(); drawpo[CODE]int();[/CODE] drawwavetext(); draw[CODE]newweaponmessage();[/CODE] } //pause state if(gp.gamestate == gp.pausestate){ drawplayerl[CODE]ife();[/CODE] drawpausescreen(); } //character state if(gp.gamestate == gp.characterstate){ drawcharacterscreen(); } //game over state if(gp.gamestate == gp.gameoverstate){ drawgameoverscreen(); } //win state if(gp.gamestate == gp.winstate){ drawwinstate(); } } [CODE]public void drawgameoverscreen(){[/CODE] g2.setcolor([CODE]new color(0,0,0,150));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); [CODE]int x ;[/CODE] [CODE]int y ;[/CODE] [CODE]string text;[/CODE] g2.setfont(g2.getfont().derivefont(font.bold, 90f)); text = ""game over""; g2.setcolor(color.black); x = getx[CODE]forcenteredtext(text);[/CODE] y = gp.tilesize*5; g2.draw[CODE]string(text, x, y);[/CODE] g2.setcolor(color.white); g2.draw[CODE]string(text, x-4, y-4);[/CODE] //back to main menu g2.setfont(g2.getfont().derivefont(35f)); text = ""main menu""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize*4; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 0){[/CODE] g2.draw[CODE]string("">"", x-40, y);[/CODE] } //exit text = ""exit""; x = getx[CODE]forcenteredtext(text);[/CODE] y += 55; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 1){[/CODE] g2.draw[CODE]string("">"", x-40, y);[/CODE] } } [CODE]public void drawwinstate(){[/CODE] g2.setcolor([CODE]new color(0,0,0,150));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); [CODE]int x ;[/CODE] [CODE]int y ;[/CODE] [CODE]string text;[/CODE] g2.setfont(g2.getfont().derivefont(font.bold, 90f)); text = ""you win!""; g2.setcolor(color.yellow); x = getx[CODE]forcenteredtext(text);[/CODE] y = gp.tilesize*5; g2.draw[CODE]string(text, x, y);[/CODE] g2.setcolor(color.white); g2.draw[CODE]string(text, x-4, y-4);[/CODE] //back to main menu g2.setfont(g2.getfont().derivefont(35f)); text = ""main menu""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize*4; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 0){[/CODE] g2.draw[CODE]string("">"", x-40, y);[/CODE] } //exit text = ""exit""; x = getx[CODE]forcenteredtext(text);[/CODE] y += 55; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 1){[/CODE] g2.draw[CODE]string("">"", x-40, y);[/CODE] } } [CODE]public void drawgunandremainingbullet(){[/CODE] [CODE]int x = 20;[/CODE] [CODE]int y = 40;[/CODE] g2.setcolor(color.white); g2.setfont(g2.getfont().derivefont(font.bold, 25)); string weaponname = gp.player.currentweapon.getclass().getsimplename(); int remainingbullet = gp.player.currentweapon.getremainingbullet(); [CODE]string text = ""weapon: "" + weaponname + "" | bullet: "" + remainingbullet;[/CODE] g2.draw[CODE]string(text, x, y);[/CODE] } [CODE]public void drawpoint(){[/CODE] string point = ""total point: "" + gp.player.totalpo[CODE]int;[/CODE] int heartareax = gp.screenwidth - (gp.tilesize * (gp.player.maxlife / 2)) - gp.tilesize; [CODE]int x = heartareax;[/CODE] int y = (gp.tilesize / 2) - 2; g2.setcolor(color.white); g2.setfont(g2.getfont().derivefont(font.bold, 21)); g2.draw[CODE]string(point, x, y);[/CODE] } [CODE]public void drawplayerlife(){[/CODE] int x = gp.screenwidth - (gp.tilesize * (gp.player.maxlife / 2)) - gp.tilesize; int y = gp.tilesize/2; [CODE]int i=0;[/CODE] //draw max life while(i < gp.player.maxl[CODE]ife/2){[/CODE] g2.drawimage(heartempty, x, y, null); i++; x += gp.tilesize; } //reset x = gp.screenwidth - (gp.tilesize * (gp.player.maxlife / 2)) - gp.tilesize; y = gp.tilesize/2; i=0; //draw current life while(i < gp.player.l[CODE]ife){[/CODE] g2.drawimage(hearthalf, x, y, null); i++; if(i < gp.player.l[CODE]ife){[/CODE] g2.drawimage(heartfull, x, y, null); } i++; x += gp.tilesize; } } [CODE]public void loadheartimages(){[/CODE] heartfull = setup(""/heart/full_heart""); hearthalf = setup(""/heart/half_heart""); heartempty = setup(""/heart/empty_heart""); } [CODE]public bufferedimage setup(string imagepath){[/CODE] utilitytool utool = [CODE]new utilitytool();[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream( imagepath + "".png"")); image = utool.scaleimage(image, gp.tilesize, gp.tilesize); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } [CODE]public void drawtitlescreen(){[/CODE] g2.setcolor([CODE]new color(0,0,0));[/CODE] g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); //title name g2.setfont(g2.getfont().derivefont(font.italic, 70)); [CODE]string text = ""top-down shooter"";[/CODE] [CODE]int x = getxforcenteredtext(text);[/CODE] int y = gp.tilesize*3; //shadow g2.setcolor(color.gray); g2.draw[CODE]string(text, x+4, y+4);[/CODE] //main color g2.setcolor(color.white); g2.draw[CODE]string(text, x, y);[/CODE] //zombie image x = gp.screenwidth/2 - (gp.tilesize*2)/2; y += gp.tilesize*2; g2.drawimage(gp.player.down1, x, y, gp.tilesize*2, gp.tilesize*2, null); //menu g2.setfont(g2.getfont().derivefont(font.bold, 36)); text = ""[CODE]new game"";[/CODE] x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize*3; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 0){[/CODE] g2.drawstring("">"", x - gp.tilesize, y); } text = ""load game""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 1){[/CODE] g2.drawstring("">"", x - gp.tilesize, y); } text = ""quit""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 2){[/CODE] g2.drawstring("">"", x - gp.tilesize, y); } } [CODE]public void drawpausescreen(){[/CODE] color c = [CODE]new color(0, 0, 0, 185);[/CODE] g2.setcolor(c); g2.fillrect(0, 0, gp.screenwidth, gp.screenheight); g2.setfont(g2.getfont().derivefont(font.bold, 70)); [CODE]string text = ""paused"";[/CODE] [CODE]int x = getxforcenteredtext(text);[/CODE] int y = gp.tilesize*3; g2.setcolor(color.gray); g2.draw[CODE]string(text, x+4, y+4);[/CODE] g2.setcolor(color.white); g2.draw[CODE]string(text, x, y);[/CODE] g2.setfont(g2.getfont().derivefont(font.bold, 36)); text = ""resume""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize*3; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 0){[/CODE] g2.drawstring("">"", x - gp.tilesize, y); } text = ""save game""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 1){[/CODE] g2.drawstring("">"", x - gp.tilesize, y); } text = ""exit""; x = getx[CODE]forcenteredtext(text);[/CODE] y += gp.tilesize; g2.draw[CODE]string(text, x, y);[/CODE] [CODE]if(commandnum == 2){[/CODE] g2.drawstring("">"", x - gp.tilesize, y); } } [CODE]public int getxforcenteredtext(string text){[/CODE] int length = (int)g2.getfontmetrics().getstringbounds(text, g2).getwidth(); int x = gp.screenwidth/2 - length/2; [CODE]return x;[/CODE] } [CODE]public void drawwavetext(){[/CODE] if(gp.wavetexttime > 0){ g2.setfont(g2.getfont().derivefont(font.bold, 70)); g2.setcolor([CODE]new color(204, 0, 3));[/CODE] string text = gp.wavetext; [CODE]int x = getxforcenteredtext(text);[/CODE] int y = gp.screenheight / 3; g2.draw[CODE]string(text, x, y);[/CODE] gp.wavetexttime--; } } [CODE]public void drawnewweaponmessage(){[/CODE] if(gp.[CODE]newweaponmessagetimer > 0) {[/CODE] g2.setfont(g2.getfont().derivefont(font.bold, 40f)); g2.setcolor(color.black); int x = getxforcenteredtext(gp.[CODE]newweaponmessage);[/CODE] int y = gp.tilesize + 50; g2.drawstring(gp.[CODE]newweaponmessage, x, y);[/CODE] gp.[CODE]newweaponmessagetimer--;[/CODE] } } [CODE]public void drawcharacterscreen() {[/CODE] final int framex = gp.tilesize; final int framey = gp.tilesize; final int framewidth = gp.tilesize * 7; final int frameheight = gp.tilesize * 10; drawsubwindow(framex, framey, framewidth, frameheight); g2.setcolor(color.white); g2.setfont(g2.getfont().derivefont(20f)); [CODE]int textx = framex + 20;[/CODE] int texty = framey + gp.tilesize; final [CODE]int lineheight = 35;[/CODE] // tail x (sağ hizalama için) [CODE]int tailx = (framex + framewidth) - 30;[/CODE] // 1) wave g2.draw[CODE]string(""wave"", textx, texty);[/CODE] string value = string.valueof(gp.wavemanager.currentwave); [CODE]int xaligned = getxforaligntorighttext(value, tailx);[/CODE] g2.draw[CODE]string(value, xaligned, texty);[/CODE] texty += lineheight; // 2) life g2.draw[CODE]string(""life"", textx, texty);[/CODE] value = string.valueof(gp.player.l[CODE]ife);[/CODE] xaligned = getx[CODE]foraligntorighttext(value, tailx);[/CODE] g2.draw[CODE]string(value, xaligned, texty);[/CODE] texty += lineheight; // 3) weapon g2.draw[CODE]string(""weapon"", textx, texty);[/CODE] value = gp.player.currentweapon.getclass().getsimplename(); xaligned = getx[CODE]foraligntorighttext(value, tailx);[/CODE] g2.draw[CODE]string(value, xaligned, texty);[/CODE] texty += lineheight; // 4) available weapons g2.draw[CODE]string(""available weapons"", textx, texty);[/CODE] texty += lineheight; [CODE]int weaponlistx = textx + 20;[/CODE] for (weapons w : gp.player.weaponinventory) { string weaponname = w.getclass().getsimplename(); g2.draw[CODE]string(weaponname, weaponlistx, texty);[/CODE] texty += lineheight; } // 5) total point g2.draw[CODE]string(""total point"", textx, texty);[/CODE] value = string.valueof(gp.player.totalpo[CODE]int);[/CODE] xaligned = getx[CODE]foraligntorighttext(value, tailx);[/CODE] g2.draw[CODE]string(value, xaligned, texty);[/CODE] } [CODE]public void drawsubwindow(int x, int y, int widht, int height){[/CODE] color c = [CODE]new color(0, 0, 0, 210);[/CODE] g2.setcolor(c); g2.fillroundrect(x, y, widht, height, 35, 35); c = [CODE]new color(255, 255, 255);[/CODE] g2.setcolor(c); g2.setstroke([CODE]new basicstroke(5));[/CODE] g2.drawroundrect(x+5, y+5, widht-10, height-10, 25, 25); } [CODE]public int getxforaligntorighttext(string text, int tailx){[/CODE] int length = (int)g2.getfontmetrics().getstringbounds(text, g2).getwidth(); [CODE]int x = tailx - length;[/CODE] [CODE]return x;[/CODE] } } [CODE]package main;[/CODE] import entity.crawlingzombie; import entity.normalzombie; import entity.acidzombie; [CODE]public class assetsetter {[/CODE] gamepanel gp; [CODE]public assetsetter(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public void setnpc(){[/CODE] gp.npc[0] = [CODE]new normalzombie(gp);[/CODE] gp.npc[0].worldx = gp.tilesize*21; gp.npc[0].worldy = gp.tilesize*21; gp.npc[1] = [CODE]new normalzombie(gp);[/CODE] gp.npc[1].worldx = gp.tilesize*11; gp.npc[1].worldy = gp.tilesize*21; gp.npc[2] = [CODE]new normalzombie(gp);[/CODE] gp.npc[2].worldx = gp.tilesize*31; gp.npc[2].worldy = gp.tilesize*21; gp.npc[3] = [CODE]new crawlingzombie(gp);[/CODE] gp.npc[3].worldx = gp.tilesize*38; gp.npc[3].worldy = gp.tilesize*21; gp.npc[4] = [CODE]new crawlingzombie(gp);[/CODE] gp.npc[4].worldx = gp.tilesize*43; gp.npc[4].worldy = gp.tilesize*21; gp.npc[5] = [CODE]new acidzombie(gp);[/CODE] gp.npc[5].worldx = gp.tilesize*2; gp.npc[5].worldy = gp.tilesize*21; gp.npc[7] = [CODE]new acidzombie(gp);[/CODE] gp.npc[7].worldx = gp.tilesize*25; gp.npc[7].worldy = gp.tilesize*25; } } [CODE]package main;[/CODE] import java.awt.event.keyevent; import java.awt.event.keylistener; [CODE]public class keyhandler implements keylistener{[/CODE] gamepanel gp; [CODE]public boolean uppressed, downpressed, leftpressed, rightpressed, enterpressed, spacepressed;[/CODE] [CODE]public keyhandler(gamepanel gp){[/CODE] this.gp = gp; } @override [CODE]public void keytyped(keyevent e) {[/CODE] } [CODE]public boolean attackrequested = false;[/CODE] @override [CODE]public void keypressed(keyevent e) {[/CODE] int code = e.getkeycode(); // getkeycode returns the number of the key that was pressed //title state if(gp.gamestate == gp.titlestate){ if(code == keyevent.vk_w){ gp.ui.commandnum--; if(gp.ui.commandnum < 0){ gp.ui.commandnum = 2; } } if(code == keyevent.vk_s){ gp.ui.commandnum++; if(gp.ui.commandnum > 2){ gp.ui.commandnum = 0; } } if(code == keyevent.vk_enter){ if(gp.ui.commandnum == 0){ gp.resetgame(); gp.gamestate = gp.playstate; } if(gp.ui.commandnum == 1){ gp.saveload.load(); gp.gamestate = gp.playstate; } if(gp.ui.commandnum == 2){ system.exit(0); } } } //play state else if(gp.gamestate == gp.playstate){ if(code == keyevent.vk_w){ uppressed = true; } if(code == keyevent.vk_a){ leftpressed = true; } if(code == keyevent.vk_s){ downpressed = true; } if(code == keyevent.vk_d){ rightpressed = true; } if(code == keyevent.vk_p){ gp.gamestate = gp.pausestate; } if(code == keyevent.vk_space){ spacepressed = true; attackrequested = true; } if(code == keyevent.vk_r){ gp.player.currentweapon.reloadmagazine(); } if(code == keyevent.vk_q){ gp.player.previousweapon(); } if(code == keyevent.vk_e){ gp.player.nextweapon(); } if(code == keyevent.vk_c){ gp.gamestate = gp.characterstate; } } //pause state else if(gp.gamestate == gp.pausestate){ if(code == keyevent.vk_p){ gp.gamestate = gp.playstate; } if(code == keyevent.vk_w){ gp.ui.commandnum--; if(gp.ui.commandnum < 0){ gp.ui.commandnum = 2; } } if(code == keyevent.vk_s){ gp.ui.commandnum++; if(gp.ui.commandnum > 2){ gp.ui.commandnum = 0; } } if(code == keyevent.vk_enter){ if(gp.ui.commandnum == 0){ gp.gamestate = gp.playstate; } else if(gp.ui.commandnum == 1){ gp.saveload.save(); } else if(gp.ui.commandnum == 2){ system.exit(0); } } } //character state else if(gp.gamestate == gp.characterstate){ if(code == keyevent.vk_c){ gp.gamestate = gp.playstate; } } //game over state else if(gp.gamestate == gp.gameoverstate){ if(code == keyevent.vk_w){ gp.ui.commandnum--; if(gp.ui.commandnum < 0){ gp.ui.commandnum = 1; } } if(code == keyevent.vk_s){ gp.ui.commandnum++; if(gp.ui.commandnum < 1){ gp.ui.commandnum = 0; } } if(code == keyevent.vk_enter){ if(gp.ui.commandnum == 0){ gp.gamestate = gp.titlestate; } else if(gp.ui.commandnum == 1){ system.exit(0); } } } //game win state else if(gp.gamestate == gp.winstate){ if(code == keyevent.vk_w){ gp.ui.commandnum--; if(gp.ui.commandnum < 0){ gp.ui.commandnum = 1; } } if(code == keyevent.vk_s){ gp.ui.commandnum++; if(gp.ui.commandnum < 1){ gp.ui.commandnum = 0; } } if(code == keyevent.vk_enter){ if(gp.ui.commandnum == 0){ gp.gamestate = gp.titlestate; } else if(gp.ui.commandnum == 1){ system.exit(0); } } } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] int code = e.getkeycode(); if(code == keyevent.vk_w){ uppressed = false; } if(code == keyevent.vk_a){ leftpressed = false; } if(code == keyevent.vk_s){ downpressed = false; } if(code == keyevent.vk_d){ rightpressed = false; } if(code == keyevent.vk_enter){ enterpressed = false; } if(code == keyevent.vk_space){ spacepressed = false; } } } [CODE]package main;[/CODE] import javax.swing.jframe; [CODE]public class game {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe window = [CODE]new jframe();[/CODE] window.setdefaultcloseoperation(jframe.exit_on_close); window.setresizable(false); window.settitle(""top_down_shooter""); gamepanel gamepanel = [CODE]new gamepanel();[/CODE] window.add(gamepanel); window.pack(); window.setlocationrelativeto(null); window.setvisible(true); gamepanel.setupgame(); gamepanel.startgamethread(); } } [CODE]package main;[/CODE] import entity.entity; [CODE]public class collisionchecker {[/CODE] gamepanel gp; [CODE]public collisionchecker(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public void checktile(entity entity){[/CODE] int entityleftworldx = entity.worldx + entity.solidarea.x; int entityrightworldx = entity.worldx + entity.solidarea.x + entity.solidarea.width; int entitytopworldy = entity.worldy + entity.solidarea.y; int entitybottomworldy = entity.worldy + entity.solidarea.y + entity.solidarea.height; int entityleftcol = entityleftworldx/gp.tilesize; int entityrightcol = entityrightworldx/gp.tilesize; int entitytoprow = entitytopworldy/gp.tilesize; int entitybottomrow = entitybottomworldy/gp.tilesize; [CODE]int tilenum1;[/CODE] [CODE]int tilenum2;[/CODE] if(entityleftcol < 0 || entityrightcol >= gp.maxworldcol || entitytoprow < 0 || entitybottomrow >= gp.maxworldrow){ entity.collisionon = true; [CODE]return;[/CODE] } switch(entity.direction){ case ""up"": entitytoprow = (entitytopworldy - entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityleftcol][entitytoprow]; tilenum2 = gp.tilem.maptilenum[entityrightcol][entitytoprow]; if(gp.tilem.tile[tilenum1].collision == true || gp.tilem.tile[tilenum2].collision == true){ entity.collisionon = true; } break; case ""down"": entitybottomrow = (entitybottomworldy + entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityleftcol][entitybottomrow]; tilenum2 = gp.tilem.maptilenum[entityrightcol][entitybottomrow]; if(gp.tilem.tile[tilenum1].collision == true || gp.tilem.tile[tilenum2].collision == true){ entity.collisionon = true; } break; case ""left"": entityleftcol = (entityleftworldx - entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityleftcol][entitytoprow]; tilenum2 = gp.tilem.maptilenum[entityleftcol][entitybottomrow]; if(gp.tilem.tile[tilenum1].collision == true || gp.tilem.tile[tilenum2].collision == true){ entity.collisionon = true; } break; case ""right"": entityrightcol = (entityrightworldx + entity.speed)/gp.tilesize; tilenum1 = gp.tilem.maptilenum[entityrightcol][entitytoprow]; tilenum2 = gp.tilem.maptilenum[entityrightcol][entitybottomrow]; if(gp.tilem.tile[tilenum1].collision == true || gp.tilem.tile[tilenum2].collision == true){ entity.collisionon = true; } break; } } [CODE]public int checkentity(entity entity, entity[] target){[/CODE] [CODE]int index = 999;[/CODE] [CODE]for(int i= 0;[/CODE] i < target.length; i++){ [CODE]if(target[i] != null){[/CODE] entity.solidarea.x = entity.worldx + entity.solidarea.x; entity.solidarea.y = entity.worldy + entity.solidarea.y; target[i].solidarea.x = target[i].worldx + target[i].solidarea.x; target[i].solidarea.y = target[i].worldy + target[i].solidarea.y; switch(entity.direction){ case ""up"": entity.solidarea.y -= entity.speed; break; case ""down"": entity.solidarea.y += entity.speed; break; case ""left"": entity.solidarea.x -= entity.speed; break; case ""right"": entity.solidarea.x += entity.speed; break; } if(entity.solidarea.intersects(target[i].solidarea)){ [CODE]if(target[i] != entity){[/CODE] entity.collisionon = true; index = i; } } entity.solidarea.x = entity.solidareadefaultx; entity.solidarea.y = entity.solidareadefaulty; target[i].solidarea.x = target[i].solidareadefaultx; target[i].solidarea.y = target[i].solidareadefaulty; } } [CODE]return index;[/CODE] } [CODE]public boolean checkplayer(entity entity){[/CODE] boolean contactplayer = false; entity.solidarea.x = entity.worldx + entity.solidarea.x; entity.solidarea.y = entity.worldy + entity.solidarea.y; gp.player.solidarea.x = gp.player.worldx + gp.player.solidarea.x; gp.player.solidarea.y = gp.player.worldy + gp.player.solidarea.y; switch(entity.direction){ case ""up"": entity.solidarea.y -= entity.speed; break; case ""down"": entity.solidarea.y += entity.speed; break; case ""left"": entity.solidarea.x -= entity.speed; break; case ""right"": entity.solidarea.x += entity.speed; break; } if(entity.solidarea.intersects(gp.player.solidarea)){ entity.collisionon = true; contactplayer = true; } entity.solidarea.x = entity.solidareadefaultx; entity.solidarea.y = entity.solidareadefaulty; gp.player.solidarea.x = gp.player.solidareadefaultx; gp.player.solidarea.y = gp.player.solidareadefaulty; [CODE]return contactplayer;[/CODE] } } [CODE]package weapons;[/CODE] import java.util.arraylist; import entity.bullet; import main.gamepanel; [CODE]public class sniper extends weapons {[/CODE] [CODE]public sniper(gamepanel gp, int fps) {[/CODE] super(gp, 5, 30, fps); getweaponimage(); } [CODE]public void getweaponimage(){[/CODE] weaponup1 = setup(""/player/boy_sniper_up"", gp.tilesize, gp.tilesize*2); weaponup2 = setup(""/player/boy_sniper_up"", gp.tilesize, gp.tilesize*2); weapondown1 = setup(""/player/boy_sniper_down"", gp.tilesize, gp.tilesize*2); weapondown2 = setup(""/player/boy_sniper_down"", gp.tilesize, gp.tilesize*2); weaponleft1 = setup(""/player/boy_sniper_left"", gp.tilesize*2, gp.tilesize); weaponleft2 = setup(""/player/boy_sniper_left"", gp.tilesize*2, gp.tilesize); weaponright1 = setup(""/player/boy_sniper_right"", gp.tilesize*2, gp.tilesize); weaponright2 = setup(""/player/boy_sniper_right"", gp.tilesize*2, gp.tilesize); } [CODE]public arraylist<bullet> attacktozombie(gamepanel gp, int startx, int starty, int targetx, int targety) {[/CODE] arraylist<bullet> firedbullets = [CODE]new arraylist<>();[/CODE] [CODE]if(!canfire()){[/CODE] [CODE]return firedbullets;[/CODE] } remainingbulletnum--; currentcooldown = cooldownframes; bullet [CODE]newbullet = new bullet(gp, startx, starty, targetx, targety);[/CODE] newbullet.damage = 1; newbullet.piercing = true; firedbullets.add([CODE]newbullet);[/CODE] [CODE]return firedbullets;[/CODE] } } [CODE]package weapons;[/CODE] import java.util.arraylist; import entity.bullet; import main.gamepanel; [CODE]public class gun extends weapons{[/CODE] [CODE]public gun(gamepanel gp, int fps){[/CODE] super(gp, 12, 120, fps); getweaponimage(); } [CODE]public void getweaponimage(){[/CODE] weaponup1 = setup(""/player/boy_gun_up1"", gp.tilesize, gp.tilesize*2); weaponup2 = setup(""/player/boy_gun_up2"", gp.tilesize, gp.tilesize*2); weapondown1 = setup(""/player/boy_gun_down1"", gp.tilesize, gp.tilesize*2); weapondown2 = setup(""/player/boy_gun_down2"", gp.tilesize, gp.tilesize*2); weaponleft1 = setup(""/player/boy_gun_left1"", gp.tilesize*2, gp.tilesize); weaponleft2 = setup(""/player/boy_gun_left2"", gp.tilesize*2, gp.tilesize); weaponright1 = setup(""/player/boy_gun_right1"", gp.tilesize*2, gp.tilesize); weaponright2 = setup(""/player/boy_gun_right2"", gp.tilesize*2, gp.tilesize); } [CODE]public arraylist<bullet> attacktozombie(gamepanel gp, int startx, int starty, int targetx, int targety){[/CODE] arraylist<bullet> firedbullets = [CODE]new arraylist<>();[/CODE] [CODE]if(!canfire()){[/CODE] [CODE]return firedbullets;[/CODE] } remainingbulletnum--; currentcooldown = cooldownframes; bullet [CODE]newbullet = new bullet(gp, startx, starty, targetx, targety);[/CODE] firedbullets.add([CODE]newbullet);[/CODE] [CODE]return firedbullets;[/CODE] } } [CODE]package weapons;[/CODE] import java.util.arraylist; import entity.bullet; import main.gamepanel; [CODE]public class shotgun extends weapons{[/CODE] [CODE]public shotgun(gamepanel gp, int fps){[/CODE] super(gp,5, 60, fps); getweaponimage(); } [CODE]public void getweaponimage(){[/CODE] weaponup1 = setup(""/player/boy_shotgun_up"", gp.tilesize, gp.tilesize*2); weaponup2 = setup(""/player/boy_shotgun_up"", gp.tilesize, gp.tilesize*2); weapondown1 = setup(""/player/boy_shotgun_down"", gp.tilesize, gp.tilesize*2); weapondown2 = setup(""/player/boy_shotgun_down"", gp.tilesize, gp.tilesize*2); weaponleft1 = setup(""/player/boy_shotgun_left"", gp.tilesize*2, gp.tilesize); weaponleft2 = setup(""/player/boy_shotgun_left"", gp.tilesize*2, gp.tilesize); weaponright1 = setup(""/player/boy_shotgun_right"", gp.tilesize*2, gp.tilesize); weaponright2 = setup(""/player/boy_shotgun_right"", gp.tilesize*2, gp.tilesize); } [CODE]public arraylist<bullet> attacktozombie(gamepanel gp, int startx, int starty, int targetx, int targety){[/CODE] arraylist<bullet> firedbullets = [CODE]new arraylist<>();[/CODE] [CODE]if(!canfire()){[/CODE] [CODE]return firedbullets;[/CODE] } [CODE]int pelletcount = 9;[/CODE] double d[CODE]iffx = targetx - startx;[/CODE] double d[CODE]iffy = targety - starty;[/CODE] double baseangle = math.atan2(d[CODE]iffy, diffx);[/CODE] [CODE]int midindex = pelletcount / 2;[/CODE] [CODE]for (int i = 0;[/CODE] i < pelletcount; i++) { double angleoffset = (i - midindex) * 5.0; double finalangle = baseangle + math.toradians(angleoffset); int newtargetx = startx + (int)(math.cos(finalangle) * 1000); int newtargety = starty + (int)(math.sin(finalangle) * 1000); bullet [CODE]newbullet = new bullet(gp, startx, starty, newtargetx, newtargety);[/CODE] firedbullets.add([CODE]newbullet);[/CODE] } remainingbulletnum--; system.out.pr[CODE]intln(""kalan mermi: "" + remainingbulletnum);[/CODE] currentcooldown = cooldownframes; [CODE]return firedbullets;[/CODE] } } [CODE]package weapons;[/CODE] import java.util.arraylist; import javax.imageio.imageio; import java.awt.image.bufferedimage; import java.io.ioexception; import entity.bullet; import main.gamepanel; import main.utilitytool; [CODE]public abstract class weapons {[/CODE] gamepanel gp; [CODE]public int magazinecapacity;[/CODE] [CODE]public int remainingbulletnum;[/CODE] [CODE]public int firerate;[/CODE] [CODE]public int cooldownframes;[/CODE] [CODE]public int currentcooldown = 0;[/CODE] [CODE]public int fps;[/CODE] [CODE]public bufferedimage weaponup1, weaponup2, weapondown1, weapondown2, weaponleft1, weaponleft2, weaponright1, weaponright2;[/CODE] [CODE]public weapons(gamepanel gp, int magazinecapacity, int firerate, int fps){[/CODE] this.gp = gp; this.magazinecapacity = magazinecapacity; this.remainingbulletnum = magazinecapacity; this.firerate = firerate; this.fps = fps; this.cooldownframes = (fps * 60) / firerate; } [CODE]public void cooldownupdate() {[/CODE] [CODE]if (currentcooldown > 0) {[/CODE] currentcooldown--; } } [CODE]public boolean canfire(){[/CODE] [CODE]if(currentcooldown == 0 && remainingbulletnum > 0){[/CODE] [CODE]return true;[/CODE] } [CODE]else{[/CODE] [CODE]return false;[/CODE] } } [CODE]public bufferedimage setup(string imagepath, int widht, int height){[/CODE] utilitytool utool = [CODE]new utilitytool();[/CODE] bufferedimage image = null; [CODE]try{[/CODE] image = imageio.read(getclass().getresourceasstream( imagepath + "".png"")); image = utool.scaleimage(image, widht, height); } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } [CODE]public abstract void getweaponimage();[/CODE] [CODE]public abstract arraylist<bullet> attacktozombie(gamepanel gp, int startx, int starty, int targetx, int targety);[/CODE] [CODE]public void reloadmagazine(){[/CODE] remainingbulletnum = magazinecapacity; } [CODE]public int getmagazinecapacity(){[/CODE] [CODE]return magazinecapacity;[/CODE] } [CODE]public int getremainingbullet(){[/CODE] [CODE]return remainingbulletnum;[/CODE] } [CODE]public string tostring(){[/CODE] return getclass().getsimplename(); } } [CODE]package weapons;[/CODE] import java.util.arraylist; import java.util.random; import entity.bullet; import main.gamepanel; [CODE]public class rifle extends weapons {[/CODE] [CODE]public rifle(gamepanel gp, int fps) {[/CODE] super(gp, 30, 600, fps); getweaponimage(); } [CODE]public void getweaponimage(){[/CODE] weaponup1 = setup(""/player/boy_rifle_up"", gp.tilesize, gp.tilesize*2); weaponup2 = setup(""/player/boy_rifle_up"", gp.tilesize, gp.tilesize*2); weapondown1 = setup(""/player/boy_rifle_down"", gp.tilesize, gp.tilesize*2); weapondown2 = setup(""/player/boy_rifle_down"", gp.tilesize, gp.tilesize*2); weaponleft1 = setup(""/player/boy_rifle_left"", gp.tilesize*2, gp.tilesize); weaponleft2 = setup(""/player/boy_rifle_left"", gp.tilesize*2, gp.tilesize); weaponright1 = setup(""/player/boy_rifle_right"", gp.tilesize*2, gp.tilesize); weaponright2 = setup(""/player/boy_rifle_right"", gp.tilesize*2, gp.tilesize); } [CODE]public arraylist<bullet> attacktozombie(gamepanel gp, int startx, int starty, int targetx, int targety) {[/CODE] arraylist<bullet> firedbullets = [CODE]new arraylist<>();[/CODE] [CODE]if(!canfire()){[/CODE] [CODE]return firedbullets;[/CODE] } remainingbulletnum--; currentcooldown = cooldownframes; double d[CODE]iffx = targetx - startx;[/CODE] double d[CODE]iffy = targety - starty;[/CODE] double baseangle = math.atan2(d[CODE]iffy, diffx);[/CODE] random rand = [CODE]new random();[/CODE] int deviationdegrees = rand.next[CODE]int(61) - 30;[/CODE] double finalangle = baseangle + math.toradians(deviationdegrees); int newtargetx = startx + (int)(math.cos(finalangle) * 1000); int newtargety = starty + (int)(math.sin(finalangle) * 1000); bullet [CODE]newbullet = new bullet(gp, startx, starty, newtargetx, newtargety);[/CODE] firedbullets.add([CODE]newbullet);[/CODE] [CODE]return firedbullets;[/CODE] } } [CODE]package weapons;[/CODE] import java.util.arraylist; import entity.bullet; import entity.rocketbullet; import main.gamepanel; [CODE]public class rocketlauncher extends weapons{[/CODE] [CODE]public rocketlauncher(gamepanel gp, int fps) {[/CODE] super(gp, 1, 10, fps); // şarjör kapasitesi: 1, ateş hızı: 10 roket/dakika getweaponimage(); } [CODE]public void getweaponimage(){[/CODE] weaponup1 = setup(""/player/boy_rocket_up"", gp.tilesize, gp.tilesize*2); weaponup2 = setup(""/player/boy_rocket_up"", gp.tilesize, gp.tilesize*2); weapondown1 = setup(""/player/boy_rocket_down"", gp.tilesize, gp.tilesize*2); weapondown2 = setup(""/player/boy_rocket_down"", gp.tilesize, gp.tilesize*2); weaponleft1 = setup(""/player/boy_rocket_left"", gp.tilesize*2, gp.tilesize); weaponleft2 = setup(""/player/boy_rocket_left"", gp.tilesize*2, gp.tilesize); weaponright1 = setup(""/player/boy_rocket_right"", gp.tilesize*2, gp.tilesize); weaponright2 = setup(""/player/boy_rocket_right"", gp.tilesize*2, gp.tilesize); } [CODE]public arraylist<bullet> attacktozombie(gamepanel gp, int startx, int starty, int targetx, int targety) {[/CODE] arraylist<bullet> firedbullets = [CODE]new arraylist<>();[/CODE] [CODE]if (!canfire()) {[/CODE] [CODE]return firedbullets;[/CODE] } remainingbulletnum--; currentcooldown = cooldownframes; rocketbullet rocketbullet = [CODE]new rocketbullet(gp, startx, starty, targetx, targety);[/CODE] rocketbullet.damage = 4; firedbullets.add(rocketbullet); system.out.println(""rocket fired. remaining rockets: "" + remainingbulletnum); [CODE]return firedbullets;[/CODE] } } [CODE]package data;[/CODE] import java.io.serializable; import java.util.arraylist; [CODE]public class datastorage implements serializable {[/CODE] [CODE]public int maxlife;[/CODE] [CODE]public int life;[/CODE] [CODE]public int currentwave;[/CODE] [CODE]public int point;[/CODE] [CODE]public int worldx;[/CODE] [CODE]public int worldy;[/CODE] arraylist<[CODE]string> weaponnames = new arraylist<>();[/CODE] } [CODE]package data;[/CODE] import java.io.file; import java.io.fileinputstream; import java.io.fileoutputstream; import java.io.objectinputstream; import java.io.objectoutputstream; import main.gamepanel; import weapons.gun; import weapons.rocketlauncher; import weapons.shotgun; import weapons.sniper; import weapons.r[CODE]ifle;[/CODE] import weapons.weapons; [CODE]public class saveload {[/CODE] gamepanel gp; [CODE]public saveload(gamepanel gp){[/CODE] this.gp = gp; } [CODE]public weapons getobject(string weaponname){[/CODE] weapons obj = null; switch(weaponname){ case ""gun"" : obj = new gun(gp, gp.fps); break; case ""rifle"" : obj = new rifle(gp, gp.fps); break; case ""shotgun"" : obj = new shotgun(gp, gp.fps); break; case ""sniper"" : obj = new sniper(gp, gp.fps); break; case ""rocketlauncher"" : obj = new rocketlauncher(gp, gp.fps); break; } [CODE]return obj;[/CODE] } [CODE]public void save(){[/CODE] [CODE]try{[/CODE] file file = new file(""save.dat""); if(!file.exists()){ // dosya mevcut değilse oluşturur file.create[CODE]newfile();[/CODE] } objectoutputstream oos = new objectoutputstream(new fileoutputstream(new file(""save.dat""))); datastorage ds = [CODE]new datastorage();[/CODE] ds.maxlife = gp.player.maxl[CODE]ife;[/CODE] ds.life = gp.player.l[CODE]ife;[/CODE] ds.currentwave = gp.wavemanager.currentwave; ds.point = gp.player.totalpo[CODE]int;[/CODE] ds.worldx = gp.player.worldx; ds.worldy = gp.player.worldy; [CODE]for(int i = 0;[/CODE] i < gp.player.weaponinventory.size(); i++){ ds.weaponnames.add(gp.player.weaponinventory.get(i).getclass().getsimplename()); } oos.writeobject(ds); oos.close(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""save exception"");[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void load(){[/CODE] [CODE]try{[/CODE] system.out.println(""load işlemi başlatıldı.""); objectinputstream ois = new objectinputstream(new fileinputstream(new file(""save.dat""))); datastorage ds = (datastorage)ois.readobject(); ois.close(); gp.player.maxlife = ds.maxl[CODE]ife;[/CODE] gp.player.life = ds.l[CODE]ife;[/CODE] gp.wavemanager.currentwave = ds.currentwave; gp.wavetext = ""wave "" + ds.currentwave; gp.player.totalpoint = ds.po[CODE]int;[/CODE] gp.player.worldx = ds.worldx; gp.player.worldy = ds.worldy; gp.player.weaponinventory.clear(); [CODE]for(int i = 0;[/CODE] i < ds.weaponnames.size(); i++){ gp.player.weaponinventory.add(getobject(ds.weaponnames.get(i))); } } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""load exception"");[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } [CODE]package tile;[/CODE] import java.awt.image.bufferedimage; [CODE]public class tile {[/CODE] [CODE]public bufferedimage image;[/CODE] [CODE]public boolean collision = false;[/CODE] } [CODE]package tile;[/CODE] import java.awt.graphics2d; import java.io.bufferedreader; import java.io.ioexception; import java.io.inputstream; import java.io.inputstreamreader; import javax.imageio.imageio; import main.gamepanel; import main.utilitytool; [CODE]public class tilemanager {[/CODE] gamepanel gp; [CODE]public tile[] tile;[/CODE] [CODE]public int maptilenum[][];[/CODE] [CODE]public tilemanager(gamepanel gp){[/CODE] this.gp = gp; tile = [CODE]new tile[10];[/CODE] maptilenum = new int[gp.maxworldcol][gp.maxworldrow]; gettileimage(); loadmap(""/maps/map.txt""); } [CODE]public void gettileimage(){[/CODE] setup(0, ""ground"", false); setup(1, ""grass"", true); setup(2, ""stone"", false); setup(3, ""tree"", true); setup(4, ""tree2"", true); setup(5, ""light_left"", true); setup(6, ""light_right"", true); } [CODE]public void setup(int index, string imagename, boolean collision){[/CODE] utilitytool utool = [CODE]new utilitytool();[/CODE] [CODE]try{[/CODE] tile[index] = [CODE]new tile();[/CODE] tile[index].image = imageio.read(getclass().getresourceasstream(""/tiles/"" + imagename + "".png"")); tile[index].image = utool.scaleimage(tile[index].image, gp.tilesize, gp.tilesize); tile[index].collision = collision; } [CODE]catch(ioexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadmap(string filepath){[/CODE] [CODE]try{[/CODE] inputstream is = getclass().getresourceasstream(filepath); bufferedreader br = [CODE]new bufferedreader(new inputstreamreader(is));[/CODE] [CODE]int col = 0;[/CODE] [CODE]int row = 0;[/CODE] while(col < gp.maxworldcol && row < gp.maxworldrow ){ string line = br.readline(); while(col < gp.maxworldcol){ string numbers[] = line.split("" ""); int num = integer.parse[CODE]int(numbers[col]);[/CODE] maptilenum[col][row] = num; col++; } if(col == gp.maxworldcol){ col = 0; row++; } } br.close(); } [CODE]catch(exception e){[/CODE] } } [CODE]public void draw(graphics2d g2){[/CODE] [CODE]int worldcol = 0;[/CODE] [CODE]int worldrow= 0;[/CODE] while(worldcol < gp.maxworldcol && worldrow < gp.maxworldrow){ [CODE]int tilenum = maptilenum[worldcol][worldrow];[/CODE] int worldx = worldcol * gp.tilesize; int worldy = worldrow * gp.tilesize; int screenx = worldx - gp.player.worldx + gp.player.screenx; int screeny = worldy - gp.player.worldy + gp.player.screeny; if(worldx + gp.tilesize > gp.player.worldx - gp.player.screenx && worldx - gp.tilesize < gp.player.worldx + gp.player.screenx && worldy + gp.tilesize > gp.player.worldy - gp.player.screeny && worldy - gp.tilesize < gp.player.worldy + gp.player.screeny ){ g2.drawimage(tile[tilenum].image, screenx, screeny, null); } worldcol++; if(worldcol == gp.maxworldcol){ worldcol = 0; worldrow++; } } } }"
4114373,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s1.say()); } } [CODE]class sayac{[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] if(str.indexof('1')==-1){ [CODE]return 0;[/CODE] } [CODE]else{[/CODE] str = str.substring(str.indexof('1')+1, str.length()); [CODE]return say() + 1;[/CODE] } } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] a = {[/CODE]5,4,1,2}; cocktailsort(a); } [CODE]public static void cocktailsort(int[] arr){[/CODE] boolean flag = false; [CODE]for(int i = 1;[/CODE] i < arr.length; i++){ [CODE]if(arr[i-1]>arr[i]){[/CODE] [CODE]int temp = arr[i];[/CODE] arr[i] = arr[i-1]; arr[i-1] = temp; flag = true; } } [CODE]if(!flag){[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length; i++){ system.out.pr[CODE]int(arr[i] + "" "");[/CODE] } } [CODE]else{[/CODE] cocktailsort(arr); } } } [CODE]public class lab1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i == 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]if(i%2==0){[/CODE] [CODE]return collatz(i/2) + 1;[/CODE] } [CODE]else{[/CODE] [CODE]return collatz(3*i + 1) + 1;[/CODE] } } } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 4 import java.io.file; import java.io.pr[CODE]intstream;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]class inputexception extends exception{[/CODE] [CODE]public inputexception(string e){[/CODE] super(e); } } [CODE]class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(string e){[/CODE] super(e); } } [CODE]class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(string e){[/CODE] super(e); } } [CODE]class kelimebulunamadiexception extends exception{[/CODE] [CODE]public kelimebulunamadiexception(string e){[/CODE] super(e); } } [CODE]public class lab3q1{[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]try{[/CODE] file kelimeler = new file(""kelimeler.txt""); file metin = new file(""metin.txt""); file sonuc = new file(""sonuc.txt""); kelimesay(kelimeler, metin, sonuc); } [CODE]catch(kelimebulunamadiexception e){[/CODE] system.err.println(e.getmessage()); } [CODE]catch(dosyabulunamadiexception e){[/CODE] system.out.println(""hata: "" + e.getmessage()); } [CODE]catch(bosdosyaexception e){[/CODE] system.out.println(""hata: "" + e.getmessage()); } [CODE]catch(exception e){[/CODE] system.out.println(""hata.""); } } [CODE]public static void kelimesay(file kelimeler, file metin, file sonuc) throws exception{[/CODE] if(!kelimeler.exists()){ throw new dosyabulunamadiexception(""kelimeler.txt bulunamadı.""); } if(!metin.exists()){ throw new dosyabulunamadiexception(""metin.txt bulunamadı.""); } if(!sonuc.exists()){ throw new dosyabulunamadiexception(""sonuc.txt bulunamadı.""); } scanner sc = [CODE]new scanner(kelimeler);[/CODE] arraylist<[CODE]string> kelimelerarraylist = new arraylist<>();[/CODE] while(sc.hasnext()){ kelimelerarraylist.add(sc.next().replaceall(""\\p{punct}"", """")); } if(kelimelerarraylist.size()==0){ throw new bosdosyaexception(""kelimeler.txt boş.""); } int[] kelimesayilari = new int[kelimelerarraylist.size()]; scanner sc2 = [CODE]new scanner(metin);[/CODE] [CODE]string metinstring = """";[/CODE] while(sc2.hasnext()){ metinstring += sc2.next().replaceall(""\\p{punct}"", """").tolowercase() + "" ""; } if(metinstring.length()==0){ throw new bosdosyaexception(""metin.txt boş.""); } boolean flag = false; boolean flag2 = true; [CODE]while(!flag){[/CODE] flag2 = true; [CODE]for(int i = 0;[/CODE] i < kelimelerarraylist.size(); i++){ if(metinstring.contains(kelimelerarraylist.get(i))){ kelimesayilari[i] += 1; metinstring = metinstring.substring(0, metinstring.indexof(kelimelerarraylist.get(i))) + metinstring.substring(metinstring.indexof(kelimelerarraylist.get(i)) + kelimelerarraylist.get(i).length(), metinstring.length()); flag2 = false; } } [CODE]if(flag2){[/CODE] flag = true; } } pr[CODE]intstream printstream = new printstream(sonuc);[/CODE] system.setout(pr[CODE]intstream);[/CODE] //system.out sonuc.txt'e yazacak şekilde ayarlandı. [CODE]for(int i = 0;[/CODE] i<kelimesayilari.length; i++){ [CODE]if(kelimesayilari[i]>0){[/CODE] system.out.println(kelimelerarraylist.get(i) + "" "" + kelimesayilari[i]); } } [CODE]for(int i = 0;[/CODE] i < kelimesayilari.length; i++){ [CODE]if(checkzeros(kelimesayilari)[i] == 1){[/CODE] throw new kelimebulunamadiexception(""hata: "" + kelimelerarraylist.get(i) + "" metinde bulunamadı.""); } } } [CODE]public static int[] checkzeros(int[] kelimesayilari){[/CODE] int[] a = new int[kelimesayilari.length]; [CODE]for(int i = 0;[/CODE] i < kelimesayilari.length; i++){ [CODE]if(kelimesayilari[i]==0){[/CODE] a[i] = 1; } } [CODE]return a;[/CODE] } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.arraylist; import java.util.list; [CODE]public class inventory<t> {[/CODE] arraylist<t> items = [CODE]new arraylist<>();[/CODE] [CODE]void additem(t item){[/CODE] items.add(item); } [CODE]void removeitem(t item){[/CODE] items.remove(item); } [CODE]void printinventory(){[/CODE] [CODE]for(int i = 0;[/CODE] i < items.size(); i++){ system.out.println(items.get(i)); } } t mostvaluableitem(){ t most = items.get(0); [CODE]for(int i = 1;[/CODE] i < items.size(); i++){ item item = (item)items.get(i); if(item.getvalue()>((item)most).getvalue()){ most = items.get(i); } } [CODE]return most;[/CODE] } t finditembyname([CODE]string name){[/CODE] t foundeditem = null; [CODE]for(int i = 0;[/CODE] i < items.size(); i++){ item item = (item)items.get(i); if(item.getname().equals(name)){ foundeditem = items.get(i); } } [CODE]return foundeditem;[/CODE] } list<t> finditemsbyvalue([CODE]int value){[/CODE] arraylist<t> list = [CODE]new arraylist<>();[/CODE] [CODE]for(int i = 0;[/CODE] i < items.size(); i++){ item item = (item)items.get(i); if(item.getvalue()>value){ list.add(items.get(i)); } } [CODE]return list;[/CODE] } [CODE]int gettotalvalue(){[/CODE] [CODE]int totalvalue = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i<items.size();i++){ item item = (item)items.get(i); totalvalue += item.getvalue(); } [CODE]return totalvalue;[/CODE] } //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! list<t> filterbytype([CODE]class<?> type){[/CODE] arraylist<t> list = [CODE]new arraylist<>();[/CODE] [CODE]class<?> class1 = type;[/CODE] [CODE]for(int i = 0;[/CODE] i<items.size(); i++){ if(items.get(i).getclass().equals([CODE]class1)){[/CODE] list.add(items.get(i)); } } [CODE]return list;[/CODE] } [CODE]int gettotalweapondamage(){[/CODE] class<weapon> weaponclass = weapon.[CODE]class;[/CODE] [CODE]int totalweapondamage = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < items.size(); i++){ if(items.get(i).get[CODE]class() == weaponclass){[/CODE] weapon weapon = (weapon)items.get(i); totalweapondamage += weapon.getdamage(); } } [CODE]return totalweapondamage;[/CODE] } [CODE]void sortbyvalue(){[/CODE] [CODE]for(int i = 0;[/CODE] i < items.size(); i++){ [CODE]for(int j = i;[/CODE] j < items.size(); j++){ item item1 = (item)items.get(i); item item2 = (item)items.get(j); if(item1.getvalue()<item2.getvalue()){ t temp = items.get(i); items.set(i, items.get(j)); items.set(j, temp); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory){[/CODE] system.out.println(inventory.mostvaluableitem()); } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source){[/CODE] [CODE]for(int i = 0;[/CODE] i<source.items.size(); i++){ destination.additem(source.items.get(i)); } } } [CODE]public class weapon implements item{[/CODE] [CODE]int damage;[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.damage = damage; this.name = name; this.value = value; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdamage(){[/CODE] [CODE]return damage;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return name + "" "" + value + "" "" + damage;[/CODE] } } [CODE]public interface item {[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]public class armor implements item{[/CODE] [CODE]int defense;[/CODE] [CODE]int value;[/CODE] [CODE]string name;[/CODE] [CODE]public armor(string name, int value, int defense){[/CODE] this.defense = defense; this.name = name; this.value = value; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdefense(){[/CODE] [CODE]return defense;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return name + "" "" + value + "" "" + defense;[/CODE] } } [CODE]public class potion implements item{[/CODE] [CODE]string effect;[/CODE] [CODE]int value;[/CODE] [CODE]string name;[/CODE] [CODE]public potion(string name, int value, string effect){[/CODE] this.effect = effect; this.name = name; this.value = value; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public string geteffect(){[/CODE] [CODE]return effect;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return name + "" "" + value + "" "" + effect;[/CODE] } } import java.util.list; [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args){[/CODE] inventory<weapon> weaponinventory = [CODE]new inventory<>();[/CODE] weaponinventory.additem([CODE]new weapon(""sniper rifle"", 700, 70));[/CODE] weaponinventory.additem([CODE]new weapon(""pistol"", 200, 20));[/CODE] weaponinventory.additem([CODE]new weapon(""rocket launcher"", 1000, 100));[/CODE] weaponinventory.additem([CODE]new weapon(""rifle"", 400, 40));[/CODE] system.out.pr[CODE]intln(""total weapon damage: "");[/CODE] int totalweapondamage = weaponinventory.gettotalweapondamage(); system.out.pr[CODE]intln(totalweapondamage);[/CODE] system.out.pr[CODE]intln();[/CODE] inventory<item> iteminventory = [CODE]new inventory<>();[/CODE] iteminventory.additem([CODE]new potion(""speed potion"", 500, ""gives speed""));[/CODE] item goldenchestplate = [CODE]new armor(""golden chestplate"", 250, 25);[/CODE] iteminventory.additem(goldenchestplate); iteminventory.additem([CODE]new weapon(""diamond sword"", 1000, 100));[/CODE] iteminventory.additem([CODE]new armor(""iron boots"", 300, 30));[/CODE] iteminventory.additem([CODE]new potion(""invisibility potion"", 2000, ""makes you invisible""));[/CODE] iteminventory.additem([CODE]new armor(""diamond leggings"", 600, 60));[/CODE] iteminventory.additem([CODE]new weapon(""iron sword"", 750, 75));[/CODE] iteminventory.removeitem(goldenchestplate); system.out.pr[CODE]intln(""item inventory: "");[/CODE] iteminventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""most valuable item of item inventory: "");[/CODE] system.out.println(iteminventory.mostvaluableitem()); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""armor 'iron boots' in item inventory"");[/CODE] system.out.println(iteminventory.finditembyname(""iron boots"")); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""items that have more value than 400: "");[/CODE] list<item> valuableitems = iteminventory.finditemsbyvalue(400); [CODE]for(int i = 0;[/CODE] i<valuableitems.size();i++){ system.out.println(valuableitems.get(i)); } system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""total value of item inventory: "");[/CODE] system.out.println(iteminventory.gettotalvalue()); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""just weapon items in item inventory: "");[/CODE] class<weapon> weaponclass = weapon.[CODE]class;[/CODE] list<item> weapons = iteminventory.filterbytype(weapon[CODE]class);[/CODE] [CODE]for(int i = 0;[/CODE] i<weapons.size();i++){ system.out.println(weapons.get(i)); } system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""just armor items in item inventory: "");[/CODE] class<armor> armorclass = armor.[CODE]class;[/CODE] list<item> armors = iteminventory.filterbytype(armor[CODE]class);[/CODE] [CODE]for(int i = 0;[/CODE] i<armors.size();i++){ system.out.println(armors.get(i)); } system.out.pr[CODE]intln();[/CODE] iteminventory.sortbyvalue(); system.out.pr[CODE]intln(""sorted inventory: "");[/CODE] iteminventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""most valuable item in item inventory: "");[/CODE] inventory.pr[CODE]intmostvaluableitem(iteminventory);[/CODE] system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""most valuable item in weapon inventory: "");[/CODE] inventory.pr[CODE]intmostvaluableitem(weaponinventory);[/CODE] system.out.pr[CODE]intln();[/CODE] inventory<armor> armorinventory = [CODE]new inventory<>();[/CODE] armorinventory.additem([CODE]new armor(""emerald boots"", 1000, 100));[/CODE] armorinventory.additem([CODE]new armor(""emerald leggings"", 1000, 100));[/CODE] armorinventory.additem([CODE]new armor(""emerald chestplate"", 1000, 100));[/CODE] inventory.transferarmor(iteminventory, armorinventory); system.out.pr[CODE]intln(""item inventory with armor inventory armors: "");[/CODE] iteminventory.pr[CODE]intinventory();[/CODE] } } ""recursion"" kavramı nedir, kısaca açıklayınız. recursion, aynı fonksiyonun kendi içerisinde base condition sağlanana kadar çağırılmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. recursive metod, fonksiyonun halletmesi gereken ana problem, diğer fonksiyona(aynı fonksiyon) yollayacağı problem ve en son da çözecek bir şey kalmayınca çıkması gereken kısım olan base conditiondan oluşur. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. . bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? string'in ölçecek elemanının kalmaması (0'a eşit olması) stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack kod içerisinde çağırdığımız fonksiyonun içindeki verileri ilk çağırılandan son çağırılana kadar çağırması, ve eğer recursion yaparken base condition hiçbir zaman sağlanmazsa stack sonsuza kadar dolmaya devam eder ve stack overflow olmuş olur. tail recursion nedir, kısaca açıklayınız. tail recursion, recursion'un her defasında return olması yerine en son çağırdığımız fonksiyonda return edip en başa dönmesidir. abstraction kavramını açıklayınız. abstraction bir işlevin nasıl çalıştığına değil ne yaptığına bakan, gereksiz detaylara boğulmadan istenileni vermesine denilen kavramdır. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? employee, hourlyemployee'nin parenti oldugu için hourlyemployee is a employee deriz yani mümkün olur ama employee is hourlyemployee olmadığı için mümkün olmaz. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected: class, package ve subclass default: class ve package olduğundan dolayı default private'e daha yakındır. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü parentta bulunan her şey child'da da vardır ve bu yüzden objeyi oluştururken tüm değişkenleri ayarlamak istiyorsak bi üstteki parent'in constructerini çağırmak zorundayız. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır mümkün değildir çünkü b'de ve c'de aynı metotlar veya değişkenler olabilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? getclass() gibi class'ın kendisine de bakıp aynı zamanda parent'larının da eşit olmasını döndürür metot overriding ve overloading kavramlarını açıklayınız. metot override: tamamen aynı olan metotlar, metot overloading: dönüş tipi hariç her şeyi aynı olan metotlar [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? output: [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? eğer metot override edilmişse dynamic binding, edilmemişse static binding yapilir. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? çünkü static, private ve final metotlara override yapılmaz bu yüzden de dynamic binding'e gerek olmaz. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic binding gerçekleşir çünkü aynı adda olan iki ayrı metotu çağırırken java'nın hangi metodu çağırmasını hesaplaması gerekiyor. dinamik bağlamada jvm'nin görevi nedir? jvm'nin görevi referans edilen en parent class'tan başlayarak oluşturulan child objesine doğru gelerek her class'ta metodun override edilmiş olup olmadığını hesaplayıp bularak, doğru metodu çağırmasıdır. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? parent objenin içerdiği her şeyi child obje içerir fakat child objenin içerdiği her şeyi (metod, değişken vs.) parent obje içermez. bu yüzden parent p = [CODE]new child();[/CODE] yapılabilirken child c = [CODE]new parent();[/CODE] yapılamaz. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? tüm bindingler dinamik olsaydı child classta çağırdığımız ve child class'a özgü olan bir override metodu çağıramazdık. [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? parent referansıyla bir child object oluşturulduğu için o referanstan çağırdığımız child objesinin parenttaki metod yerine child'daki override edilmiş metodu çağırmasını istediğimiz için dinamik bağlama. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? i̇lk objede statik bağlama, ikinci objede dinamik bağlama java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class o class içerisine daha sonra implement etmek istediğimiz özellikleri önceden yazabilmemizi sağlayan class türüdür. constructor'u olamaz çünkü abstract class'tan obje oluşturulamaz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? eğer parent class içerisinde tanimladigimiz abstract metodlarin hepsini child classin içinde implement etmek istemiyorsak child class olrak abstract metodlar harici olusturdugumuz bir abstract class var olabilir. bu class'ta parent class içinde yaptığımız abstract metotlari implement edebiliriz. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. abstract metotlar programın daha iyi okunmasını sağlar. aynı zamanda program için bir şema görevi görür. abstract class ile farklı insanlar aynı proje içinde daha kolay çalışabilirler çünkü abstract class'larin içindeki her metodu bilmek zorunda kalmazlar, herkes kendi bildiği/yapması gereken yeri yaparak işbirliği içinde çalışabilir. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class veya interface'lerden obje oluşturulamaz. i̇nterface'in abstract class'tan farkı ise içerisindeki tüm metotların/degiskenlerin tanimlanmayacak oluşudur. yani bir abstract class tamamen abstract metotlar içermek zorunda değildir ama interface tamamen bir kara kutu gibi çalışır, yani içerisinde hiçbir şey yoktur, isimlerden başka. marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? bir class birden fazla interface'i implement edemez. bir interface başka bir interface'i implement edebilir. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? abstract olan bir class'tan obje oluşturulamaz. eğer abstract [CODE]classi aktardığımız class'tan bir obje oluşturmak istiyorsak ""circle c = new circle();[/CODE]"" kullanabiliriz. hata duzeldikten sonra da, ""drawing circle \n displaying"" yazılır. [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? interface'lerin içindeki metotların ne yaptığı interface içinde tanımlanamaz. ayrıca class c'deki public void show() metodu implement ettiği iki interface'in hangisinin çağırılacağını bilemez. bu yüzden class c'deki metotta direkt olarak ""a"" veya ""b"" yazdıran bir metot yazılabilir. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. - java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws kullanırken child classi yazarsak catch içinde parent class'i cagiramayiz. bu yüzden eğer birden fazla hata catch etmek istiyorsak tüm hataların ortak atasını(parentini) throws ile almalıyız finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğundaki kodlar, try'da throw edilen hata catch'de yakalansa da yakalanmasa da çağrılır java'da kendi exceptionunuzu nasıl tanımlarsınız? bir class oluşturarak, ismine oluşturmak istedigimiz hata adını yazarak throwable classini extend edip, olusturmak istediğimiz durumu if'le yazdıktan sonra o durumun içinde hatamızı tanımlıyoruz, daha sonra o hatanin olup olmadığı yerde kontrol için yazdigimiz classta olusturdugumuz hata classini 'throws' ile alıp, catch içinde o hatayı tanimlayarak yazıyoruz. java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? o class tam olarak o sorunu çözememiş ise bir sonraki parent'a fırlatır ve hata orda çözülür static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught -1 finally oops done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? burada m1()deki ioexception m2() içerisine gittiğinde catch'de ilk olarak exception olarak yakalanır bu yüzden de caught1 yazar yani caught2 yazmamış olur, çünkü try catch okunurken yukardan başlanarak aşağı inilir text file ile binary file arasındaki fark nedir? text file direkt string şekilde yazarken binary file byte byte yazar. bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? buffer'ın kapanmamasına sebep olur binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? - binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? 4byte'lık verilerle yazılabilir. buffered reader ve scanner sın[CODE]ıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? hasnext() metoduyla, false döndürürse dosya bitmiştir binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? - public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] _______ f = new _______(""numbers.bin"", ""____""); f.write[CODE]int(10);[/CODE] f.write[CODE]int(20);[/CODE] int a = f.read[CODE]int();[/CODE] f.seek(_____________); int b = f.read[CODE]int();[/CODE] system.out.pr[CODE]intln(a + b);[/CODE] f.close(); } } boşluklara sırasıyla ne gelmelidir? output? randomaccessfile, randomaccessfile, true, 4, output: 30 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); ______________ pw = [CODE]new ______________(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] pw.close(); } } boşluklara sırasıyla ne gelmelidir? bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir? printwriter, printwriter, log.txt: new log entry what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cb java'da generic kavramı nedir, bu kavramın temel amacı nedir? generic, javada bir class'in içine veya bir metodun içerisine birbirinden farklı tipte değişkenleri koymamızı sağlar upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. upper bound <? super ...> ile yani o classin extend olduğu classlari icine alirken, lower bound <? extend ...> şeklinde olduğu için o classtan extend edilen classlari içine alabilir. generic bir classın constructorunda type parametresi bulunur mu, neden? type parametresi class içerisinde nasıl tanımlandıysa, örneğin t değişkeni ile tanimlandiysa t type olmuş olur. mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. - [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. - swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? head.next.next() head head.next() [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. class<t extend collections> ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 70 java gui'leri bağlamında olay güdümlü (event driven) programlamayı tanımlayın. event driven programlama program akışını kullanıcının kontroluyle devam ettirebilir. kullanıcının girdilerine göre değişen program akışıdır. geleneksel sıralı programlama ile olay güdümlü (event driven) programlama arasındaki temel fark nedir? geleneksel sıralı programlamada program akışı, programı yazan tarafından önceden belirlenmiştir ve buna göre çalışır fakat event driven'da çeşitli olaylara karşılık çeşitli fonksiyonlar vardır ve bu fonksiyonlar kullanicinin girdilerine göre çalışır. borderlayout yöneticisi, bir konteynerdeki bileşenleri nasıl düzenler? içerisinde çeşitli metodlar ve parametreler vardır ve içerisine yazdığımız contentleri yönlere göre atayabilir north south center gibi java gui uygulamalarında jpanel'in amacı nedir? jpanel, ekleyeceğimiz componentleri tutan bir paneldir. olusturdugumuz window içerisine çeşitli paneller ekleyerek katmanlara göre farklı componentler ekleyebiliriz. java'daki gui programları neden tipik olarak sonsuz bir olay döngüsü çalıştırır ve bu durum sistem veya uygulama tarafından tetiklenen yeniden çizim (repaint) olaylarıyla nasıl ilişkilidir? program kullanıcı programı kapatmadigi sürece tüm girdileri ölçmek zorundadır ve buna göre tepki vermek zorundadır. örneğin bir oyunda karakterin yürümesini istiyorsak arkaplanda program sürekli bizim klavyemize basıp basmadigimizi kontrol etmesi gerekiyor ve bunu aynı zamanda ekrana çizmesi gerekiyor. bir swing uygulamasında repaint() metodunu çağırmanın etkisi nedir? repaint() belli aralıklarla ekrana gosterilen icerikleri gunceller, eğer bir metod ekranda değişiklik yapıyorsa, metottan sonra repaint() bu değişiklikleri sürekli olarak ekrana verir. aşağıdaki kodun çalışmasını izleyin ve düğmeye tıklandığında ne olduğunu belirleyin: [CODE]public class simplegui extends jframe implements actionlistener {[/CODE] [CODE]public simplegui() {[/CODE] setsize(200, 100); setdefaultcloseoperation(jframe.exit_on_close); jbutton button = [CODE]new jbutton(""click me"");[/CODE] button.addactionlistener(this); add(button); setvisible(true); } [CODE]public void actionperformed(actionevent e) {[/CODE] joptionpane.showmessagedialog(this, ""button was clicked!""); system.exit(0); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new simplegui();[/CODE] } } program basladiginda simplegui() objesi yaratır ve 200 100 boyutlarinda bir pencere açar ve pencerenin içinde ""click me"" yazan buton vardır. butona basıldığında ""button was clicked"" gösterilir ve system.exit(0) ile programdan çıkılır. aşağıdaki kod parçasını inceleyin: import javax.swing.*; import java.awt.*; [CODE]public class layoutexample {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe frame = [CODE]new jframe(""layout test"");[/CODE] frame.setsize(400, 300); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlayout([CODE]new borderlayout());[/CODE] frame.add(new jlabel(""n""), borderlayout.north); frame.add(new jbutton(""s""), borderlayout.south); frame.add(new jpanel(), borderlayout.center); frame.setvisible(true); } } bu program çalıştığında bileşenlerin nasıl düzenlendiğini açıklayın. program calistiginda layout test yazan bir frame oluşur 400 300 boyutlarinda ve framein layoutu ayarlanir, kuzeye n, güneye s, ve ortaya panel objesi ekler ve frame'in gorunurlugunu true olarak ayarlar. bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]public class quiz1q2 {[/CODE] [CODE]public static void main(string[] args){[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; this.isoperational = true; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]int(""robot name: "" + name);[/CODE] system.out.pr[CODE]int("" robot type: "" + type);[/CODE] system.out.pr[CODE]int("" battery level: "" + batterylevel + ""%"");[/CODE] system.out.pr[CODE]int("" is operational: "" + isoperational);[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public void setisoperational(boolean isoperational){[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] batterylevel = 100; } } [CODE]class factory{[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<robot>();[/CODE] [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; } [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public arraylist getrobots(){[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).pr[CODE]introbot();[/CODE] system.out.pr[CODE]intln();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).setbatterylevel(robots.get(i).getbatterylevel()-15); } } } import java.util.arraylist; [CODE]public class quiz1q1 {[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.println(combination(""a1b2"").to[CODE]string());[/CODE] } [CODE]public static arraylist combination(string s){[/CODE] [CODE]int c = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < s.length(); i++){ if((s.charat(i)>=65 && s.charat(i)<91) || (s.charat(i)>=97 && s.charat(i)<123)){ c += 1; } } arraylist<[CODE]string> a = new arraylist<string>();[/CODE] boolean flag = true; [CODE]while(flag){[/CODE] [CODE]for(int i = 0;[/CODE] i < s.length(); i++){ if(s.charat(i)>=65 && s.charat(i)<91){ if(!a.contains(s)){ a.add(s); } [CODE]else{[/CODE] s = s.substring(0, i+1) + s.substring(i+1,s.length()).tolowercase(); } s = s.substring(0, i) + (char)(s.charat(i)+32) + s.substring(i+1, s.length()); } else if(s.charat(i)>=97 && s.charat(i)<123){ if(!a.contains(s)){ a.add(s); } [CODE]else{[/CODE] s = s.substring(0, i+1) + s.substring(i+1,s.length()).touppercase(); } s = s.substring(0, i) + (char)(s.charat(i)-32) + s.substring(i+1, s.length()); } } if(a.size()==math.pow(2, c)){ flag = false; } } [CODE]return a;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int defaultbattery;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.defaultbattery = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge(){[/CODE] this.batteryl[CODE]ife = defaultbattery;[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public abstract void boostcleaningpower(int miktar);[/CODE] [CODE]public abstract void togglearmedmode();[/CODE] [CODE]public abstract string tostring();[/CODE] [CODE]public abstract int getcleaningpower();[/CODE] [CODE]public abstract boolean getarmedmode();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.pr[CODE]intnumberofrobots();[/CODE] } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public boolean getarmedmode(){[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(""["" + modelname + ""] "" + ""scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] [CODE]if(isarmed){[/CODE] isarmed = false; } [CODE]else{[/CODE] isarmed = true; } } [CODE]public string tostring(){[/CODE] [CODE]return ""security robot - model: "" + modelname + "", battery: "" + batterylife + "", armed: "" + isarmed + ""\n"";[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask(){[/CODE] [CODE]if(batterylife>=10){[/CODE] system.out.println(""["" + modelname + ""] "" + ""cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int power){[/CODE] this.cleaningpower += power; } [CODE]public string tostring(){[/CODE] [CODE]return ""cleaning robot - model: "" + modelname + "", battery: "" + batterylife + "", cleaning power: "" + cleaningpower + ""\n"";[/CODE] } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public static int robotsayisi = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] robotsayisi += 1; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] robotsayisi += 1; } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ system.out.print(robots.get(i).to[CODE]string());[/CODE] } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ robots.get(i).boostcleaningpower(miktar); system.out.println(""cleaning robot - "" + robots.get(i).modelname + "" now has cleaning power: "" + robots.get(i).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i = 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ robots.get(i).togglearmedmode(); if(robots.get(i).getarmedmode()){ system.out.println(""security robot - "" + robots.get(i).modelname + "" is now armed""); } [CODE]else{[/CODE] system.out.println(""security robot - "" + robots.get(i).modelname + "" is now unarmed""); } } } } [CODE]public static void printnumberofrobots(){[/CODE] system.out.println(""tüm fabrikalar tarafından toplam "" + robotsayisi + "" robot üretildi.""); } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.inputmismatchexception; import java.util.scanner; [CODE]public class quiz3q1 extends exception{[/CODE] [CODE]public static arraylist<envanterkaydi> esyalar = new arraylist<>();[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]while(true){[/CODE] system.out.pr[CODE]intln(""-----terminal menüsü-----"");[/CODE] system.out.println(""1. eşya ekleme\n2. eşya çıkarma\n3. stok güncelleme\n4. envanter listeleme\n5. dosyaya kaydetme\n6. dosyadan geri yükleme\n7. çıkış""); scanner kullanici = new scanner(system.in); [CODE]try{[/CODE] int karar = kullanici.next[CODE]int();[/CODE] [CODE]if(karar==1){[/CODE] system.out.pr[CODE]intln(""eklemek istediğiniz eşyayı giriniz: "");[/CODE] string esya = kullanici.next(); kullanici.nextline(); system.out.pr[CODE]intln(""bu eşyadan eklemek istediğiniz stok miktarını giriniz: "");[/CODE] int miktar = kullanici.next[CODE]int();[/CODE] [CODE]try{[/CODE] esyaekle(esya, miktar); } [CODE]catch(stoknegatifexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]catch(ozellikhatasiexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if(karar==2){[/CODE] system.out.pr[CODE]intln(""çıkarmak istediğiniz eşyayı giriniz: "");[/CODE] string esya = kullanici.next(); kullanici.nextline(); [CODE]try{[/CODE] esyacikar(esya); } [CODE]catch(esyayokexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if(karar==3){[/CODE] system.out.pr[CODE]intln(""güncellemek istediğiniz eşyayı giriniz: "");[/CODE] string esya = kullanici.next(); kullanici.nextline(); system.out.pr[CODE]intln(""güncellemek istediğiniz miktarı giriniz: "");[/CODE] int miktar = kullanici.next[CODE]int();[/CODE] [CODE]try{[/CODE] stokguncelle(esya, miktar); } [CODE]catch(stoknegatifexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]catch(esyayokexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if(karar==4){[/CODE] envanterilistele(); } [CODE]else if(karar==5){[/CODE] [CODE]try{[/CODE] dosyayakaydet(); } [CODE]catch(dosyabulunamadiexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if(karar==6){[/CODE] [CODE]try{[/CODE] dosyadanyukle(); } [CODE]catch(dosyabulunamadiexception e){[/CODE] system.out.println(e.getmessage()); } [CODE]catch(bosdosyaexception e){[/CODE] system.out.println(e.getmessage()); } } [CODE]else if(karar==7){[/CODE] cikis(); } } [CODE]catch(inputmismatchexception e){[/CODE] system.out.pr[CODE]intln(""lütfen bir sayı giriniz!"");[/CODE] } } } [CODE]public static void esyaekle(string esya, int miktar) throws stoknegatifexception, ozellikhatasiexception{[/CODE] [CODE]if(miktar<0){[/CODE] throw new stoknegatifexception(""hata: stok miktarı negatif olamaz.""); } boolean flag = false; [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ if(esyalar.get(i).getisim().equals(esya)){ flag = true; } } [CODE]if(flag){[/CODE] throw new ozellikhatasiexception(""hata: eklemeye çalıştığınız eşya zaten envanterde mevcut.""); } envanterkaydi e = [CODE]new envanterkaydi(esya, miktar);[/CODE] esyalar.add(e); system.out.pr[CODE]intln(miktar + "" tane "" + esya + "" başarıyla eklendi!"");[/CODE] } [CODE]public static void esyacikar(string esya) throws esyayokexception{[/CODE] boolean flag = false; [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ if(esyalar.get(i).getisim().equals(esya)){ flag = true; } } [CODE]if(!flag){[/CODE] throw new esyayokexception(""hata: istenen eşya envanterde mevcut değil.""); } [CODE]int index = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ if(esyalar.get(i).getisim()==esya){ index = i; } } esyalar.remove(index); system.out.println(esya + "" başarıyla envanterden silindi.""); } [CODE]public static void stokguncelle(string esya, int miktar) throws stoknegatifexception, esyayokexception{[/CODE] [CODE]if(miktar<0){[/CODE] throw new stoknegatifexception(""hata: stok miktarı negatif olamaz.""); } boolean flag = false; [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ if((esyalar.get(i).getisim().equals(esya))){ flag = true; } } [CODE]if(!flag){[/CODE] throw new esyayokexception(""hata: istenen eşya envanterde mevcut değil.""); } [CODE]int index = 0;[/CODE] [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ if(esyalar.get(i).getisim()==esya){ index = i; } } esyalar.get(index).stokguncelle(miktar); system.out.println(esya + "" eşyasının sayısı başarıyla "" + miktar + "" olarak güncellendi.""); } [CODE]public static void envanterilistele(){[/CODE] if(esyalar.isempty()){ system.out.println(""envanterde eşya yok.""); } [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ system.out.println((i+1) + "". "" + esyalar.get(i)); } } [CODE]public static void dosyayakaydet() throws dosyabulunamadiexception{[/CODE] [CODE]try{[/CODE] fileoutputstream k = new fileoutputstream(""envanter.txt""); pr[CODE]intwriter pw = new printwriter(k);[/CODE] [CODE]for(int i = 0;[/CODE] i < esyalar.size(); i++){ pw.println(esyalar.get(i)); system.out.pr[CODE]intln(i);[/CODE] } pw.flush(); pw.close(); system.out.println(""veriler envanter.txt'ye başarıyla kaydedildi.""); } [CODE]catch(filenotfoundexception e){[/CODE] throw new dosyabulunamadiexception(""hata: envanter dosyası bulunamadı.""); } } [CODE]public static void dosyadanyukle() throws dosyabulunamadiexception, bosdosyaexception{[/CODE] esyalar.clear(); [CODE]try{[/CODE] fileinputstream envanter = new fileinputstream(""envanter.txt""); scanner yukleme = [CODE]new scanner(envanter);[/CODE] if(!yukleme.hasnext()){ throw new bosdosyaexception(""hata: envanter dosyası boş.""); } while(yukleme.hasnext()){ string esya = yukleme.next(); int miktar = yukleme.next[CODE]int();[/CODE] envanterkaydi e = [CODE]new envanterkaydi(esya, miktar);[/CODE] esyalar.add(e); } system.out.println(""veriler envanter.txt'den başarıyla yüklendi.""); } [CODE]catch (filenotfoundexception e){[/CODE] throw new dosyabulunamadiexception(""hata: envanter dosyası bulunamadı.""); } } [CODE]public static void cikis(){[/CODE] system.exit(0); } } [CODE]class inputexception extends exception{[/CODE] [CODE]public inputexception(string e){[/CODE] super(e); } } [CODE]class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(string e){[/CODE] super(e); } } [CODE]class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(string e){[/CODE] super(e); } } [CODE]class stoknegatifexception extends exception{[/CODE] [CODE]public stoknegatifexception(string e){[/CODE] super(e); } } [CODE]class esyayokexception extends exception{[/CODE] [CODE]public esyayokexception(string e){[/CODE] super(e); } } [CODE]class ozellikhatasiexception extends exception{[/CODE] [CODE]public ozellikhatasiexception(string e){[/CODE] super(e); } } [CODE]class envanterkaydi{[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public envanterkaydi(string isim, int stok){[/CODE] this.isim = isim; this.stok = stok; } [CODE]public void stokguncelle(int miktar){[/CODE] this.stok = miktar; } [CODE]public string getisim(){[/CODE] [CODE]return isim;[/CODE] } [CODE]public int getstok(){[/CODE] [CODE]return stok;[/CODE] } [CODE]public string tostring(){[/CODE] [CODE]return isim + "" "" + stok;[/CODE] } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] [CODE]package q3;[/CODE] import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.iterator; import java.util.list; import java.util.vector; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [hello, world] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""ek testler: "");[/CODE] arraylist<[CODE]integer> arraylist = new arraylist<>();[/CODE] //filterbytype'da kullanmak için arraylist.add(1); arraylist.add(2); arraylist.add(3); list<object> mixed2 = arrays.aslist(17, ""merhaba"", 5.2, ""dünya"", 66, false, arraylist, [CODE]new vector<>(), 'c', ""!"", true);[/CODE] system.out.println(filterbytype(mixed2, string.[CODE]class));[/CODE] // çıktı: [merhaba, dünya, !] system.out.println(filterbytype(mixed2, integer.[CODE]class));[/CODE] // çıktı: [17, 66] system.out.println(filterbytype(mixed2, arraylist.[CODE]class));[/CODE] // çıktı: [[1, 2, 3]] system.out.println(filterbytype(mixed2, vector.[CODE]class));[/CODE] // çıktı: [[]] system.out.println(filterbytype(mixed2, character.[CODE]class));[/CODE] // çıktı: [c] system.out.println(filterbytype(mixed2, boolean.[CODE]class));[/CODE] // çıktı: [false, true] } [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type){[/CODE] iterator<?> iterator = collection.iterator(); list<t> list1 = [CODE]new arraylist<>();[/CODE] [CODE]class<t> class1 = type;[/CODE] while(iterator.hasnext()){ t next = (t)iterator.next(); if(next.getclass().equals([CODE]class1)){[/CODE] list1.add(next); } } [CODE]return list1;[/CODE] } } [CODE]package q1;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); string a = list.getlastadded(); list.undolast(); system.out.pr[CODE]intln(a);[/CODE] system.out.pr[CODE]intln(list);[/CODE] } } [CODE]package q1;[/CODE] import java.util.arraylist; [CODE]public class undoablelist<t> extends arraylist<t> {[/CODE] [CODE]public void undolast(){[/CODE] [CODE]if(!isempty()){[/CODE] remove(get(size()-1)); } } [CODE]public t getlastadded(){[/CODE] [CODE]return get(size()-1);[/CODE] } } [CODE]package q2;[/CODE] import java.util.arrays; import java.util.collection; import java.util.iterator; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(""for 'numbers' list: "");[/CODE] system.out.pr[CODE]intln(""max value: "" + findextreme(numbers, true));[/CODE] //max system.out.pr[CODE]intln(""min value: "" + findextreme(numbers, false));[/CODE] //min list<integer> numbers2 = arrays.aslist(4,8,15,16,23,42); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""(ek test) for 'numbers2' list: "");[/CODE] system.out.pr[CODE]intln(""max value: "" + findextreme(numbers2, true));[/CODE] //max system.out.pr[CODE]intln(""min value: "" + findextreme(numbers2, false));[/CODE] //min } [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax){[/CODE] iterator<t> iterator = collection.iterator(); [CODE]if(findmax){[/CODE] t max = iterator.next(); while(iterator.hasnext()){ t next = iterator.next(); if(next.compareto(max)>0){ max = next; } } [CODE]return max;[/CODE] } [CODE]else{[/CODE] t min = iterator.next(); while(iterator.hasnext()){ t next = iterator.next(); if(next.compareto(min)<0){ min = next; } } [CODE]return min;[/CODE] } } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 import java.io.file; import javax.swing.imageicon; [CODE]public class sniper extends weapon{[/CODE] gamepanel game; [CODE]public sniper(gamepanel game){[/CODE] capacity = 5; currentcapacity = 5; shootspeed = 30; wave = 6; reloadcooldown = 5000; this.game = game; name = ""sniper r[CODE]ifle"";[/CODE] image = new imageicon(""textures/weapons/sniper rifle.png""); bulletimage = new imageicon(this.getclass().getresource(""/textures/weapons/rifle_bullet.png"")); soundpath = new file(""snipersound.wav""); } [CODE]void shoot(int mousex, int mousey) {[/CODE] [CODE]if(currentcapacity>0){[/CODE] if(settings.volume){ playsound(); } currentcapacity -= 1; game.addbullet(mousex, mousey); } } } import java.awt.color; import java.awt.font; import java.awt.graphics; import java.awt.graphics2d; import java.awt.toolkit; import java.awt.event.keyevent; import java.io.file; import java.io.ioexception; import java.awt.event.keyadapter; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; import javax.sound.sampled.lineunavailableexception; import javax.sound.sampled.unsupportedaudiofileexception; import javax.swing.imageicon; import javax.swing.joptionpane; import javax.swing.jpanel; [CODE]class menu extends jpanel {[/CODE] private mouseinput mouseinput = [CODE]new mouseinput(this);[/CODE] window window; [CODE]public uielement startbuttonelement, settingsbuttonelement, quitbuttonelement = new uielement(0, 0, 0, 0, null);[/CODE] imageicon bgimage = new imageicon(this.getclass().getresource(""/textures/ui/bg.png "")); imageicon titleimage = new imageicon(this.getclass().getresource(""/textures/ui/title2.png"")); imageicon startbutton = new imageicon(this.getclass().getresource(""/textures/ui/start_button.png"")); imageicon settingsbutton = new imageicon(this.getclass().getresource(""/textures/ui/settings_button.png"")); imageicon quitbutton = new imageicon(this.getclass().getresource(""/textures/ui/quit_button.png"")); imageicon gif = new imageicon(this.getclass().getresource(""/textures/ui/rain.g[CODE]if""));[/CODE] boolean settingson; private boolean rainmode = true; private boolean extrememode = false; private boolean volume = true; private boolean fullscreen = false; file rainsound = new file(""rain.wav""); audioinputstream raininput; clip rainclip; keyinput keyinput = [CODE]new keyinput();[/CODE] private mousecursor mousecursor = [CODE]new mousecursor(0, 0, 32, 32);[/CODE] gamesavemanager savemanager = [CODE]new gamesavemanager();[/CODE] [CODE]public menu(window window) throws unsupportedaudiofileexception, ioexception, lineunavailableexception{[/CODE] this.window = window; setfocusable(true); requestfocus(); setlayout(null); addkeylistener(keyinput); addmousemotionlistener(mouseinput); addmouselistener(mouseinput); savemanager.loadsettings(); raininput = audiosystem.getaudioinputstream(rainsound); rainclip = audiosystem.getclip(); rainclip.open(raininput); rainclip.setframeposition(0); rainmode = settings.rain; extrememode = settings.extreme; volume = settings.volume; fullscreen = settings.fullscreen; setfocusable(true); addkeylistener([CODE]new keyadapter() {[/CODE] @override [CODE]public void keypressed(keyevent e) {[/CODE] [CODE]if (settingson) {[/CODE] if (e.getkeycode() == keyevent.vk_z) { volume = !volume; settings.volume = volume; [CODE]if(!volume){[/CODE] rainclip.stop(); } [CODE]else{[/CODE] rainclip.start(); rainclip.loop(clip.loop_continuously); } savemanager.savesettings(); } if (e.getkeycode() == keyevent.vk_r) { rainmode = !rainmode; settings.rain = rainmode; savemanager.savesettings(); } if (e.getkeycode() == keyevent.vk_e) { extrememode = !extrememode; settings.extreme = extrememode; savemanager.savesettings(); } if (e.getkeycode() == keyevent.vk_f5) { fullscreen = !fullscreen; settings.fullscreen = fullscreen; savemanager.savesettings(); [CODE]if(fullscreen){[/CODE] window.fullscreen(); window.changesize((int)toolkit.getdefaulttoolkit().getscreensize().getwidth(), (int)toolkit.getdefaulttoolkit().getscreensize().getheight()); } [CODE]else{[/CODE] window.changesize(960, 540); window.fullscreen(); } } if (e.getkeycode() == keyevent.vk_k) { savemanager.savesettings(); } repa[CODE]int();[/CODE] } if (e.getkeycode() == keyevent.vk_escape) { settingson = !settingson; repa[CODE]int();[/CODE] } } }); } [CODE]public void paintcomponent(graphics g) {[/CODE] g.drawimage(bgimage.getimage(), 0, 0, getwidth(), getheight(), null); if(settings.rain){ g.drawimage(gif.getimage(), 0, 0, getwidth(), getheight(), null); if(settings.volume){ rainclip.loop(clip.loop_continuously); } } g.setcolor([CODE]new color(0, 0, 0, 100));[/CODE] g.fillrect(0, 0, getwidth(), getheight()); g.setcolor([CODE]new color(255, 128, 0, 25));[/CODE] g.filloval(mouseinput.getmousex() - 75, mouseinput.getmousey() - 75, 150, 150); g.drawimage(titleimage.getimage(), getwidth() / 2 - getwidth() / 8, getheight() / 9 - getheight() / 16, getwidth() / 4, getheight() / 8, null); startbuttonelement = [CODE]new uielement(getwidth() / 2 - getwidth() / 12, getheight() / 2 - getheight() / 12, getwidth() / 6, getheight() / 6, startbutton);[/CODE] settingsbuttonelement = new uielement(getwidth() / 2 - getwidth() / 12, (int) (getheight() / 1.6) - getheight() / 12, getwidth() / 6, getheight() / 6, settingsbutton); quitbuttonelement = new uielement(getwidth() / 2 - getwidth() / 12, (int) (getheight() / 1.33) - getheight() / 12, getwidth() / 6, getheight() / 6, quitbutton); startbuttonelement.draw((graphics2d) g); settingsbuttonelement.draw((graphics2d) g); quitbuttonelement.draw((graphics2d) g); [CODE]if(settingson){[/CODE] g.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] [CODE]int leftpanelx = getwidth() / 18;[/CODE] [CODE]int leftpanely = getheight() / 8;[/CODE] int leftpanelwidth = (int) (getwidth() / 3.5); int leftpanelheight = (int) (getheight() / 1.3); g.fillrect(leftpanelx, leftpanely, leftpanelwidth, leftpanelheight); g.setcolor(color.white); g.setfont(new font(""courier new"", font.bold, getwidth()/60)); g.draw[CODE]string(""game modes"", leftpanelx + 20, leftpanely + 40);[/CODE] g.draw[CODE]string(""[r] rain mod: "" + (rainmode ? ""on"" : ""off""), leftpanelx + 20, leftpanely + 100);[/CODE] g.draw[CODE]string(""[e] extreme mod: "" + (extrememode ? ""on"" : ""off""), leftpanelx + 20, leftpanely + 150);[/CODE] [CODE]int rightpanelx = getwidth() - getwidth() / 3;[/CODE] [CODE]int rightpanely = getheight() / 8;[/CODE] int rightpanelwidth = (int) (getwidth() / 3.5); int rightpanelheight = (int) (getheight() / 1.3); g.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g.fillrect(rightpanelx, rightpanely, rightpanelwidth, rightpanelheight); g.setcolor(color.white); g.draw[CODE]string(""audio and visual"", rightpanelx + 20, rightpanely + 40);[/CODE] g.draw[CODE]string(""[z] sound: "" + (volume ? ""on"" : ""off""), rightpanelx + 20, rightpanely + 100);[/CODE] g.draw[CODE]string(""[f5] fullscreen: "" + (fullscreen ? ""on"" : ""off""), rightpanelx + 20, rightpanely + 170);[/CODE] } mousecursor.draw((graphics2d) g, mouseinput.getmousex(), mouseinput.getmousey()); } [CODE]public void update() {[/CODE] repa[CODE]int();[/CODE] mouseinput.update(); mousecursor.update(); if(mouseinput.ismousepressed){ if((mouseinput.getmousex() > quitbuttonelement.getx() && mouseinput.getmousex() < quitbuttonelement.getx() + quitbuttonelement.getwidth()) && (mouseinput.getmousey() > quitbuttonelement.gety() && mouseinput.getmousey() < quitbuttonelement.gety() + quitbuttonelement.getheight())) { sureexit(); mouseinput.ismousepressed = false; } if((mouseinput.getmousex() > settingsbuttonelement.getx() && mouseinput.getmousex() < settingsbuttonelement.getx() + settingsbuttonelement.getwidth()) && (mouseinput.getmousey() > settingsbuttonelement.gety() && mouseinput.getmousey() < settingsbuttonelement.gety() + settingsbuttonelement.getheight())) { mouseinput.ismousepressed = false; [CODE]if(settingson){[/CODE] settingson = false; } [CODE]else{[/CODE] settingson = true; } } if((mouseinput.getmousex() > startbuttonelement.getx() && mouseinput.getmousex() < startbuttonelement.getx() + startbuttonelement.getwidth()) && (mouseinput.getmousey() > startbuttonelement.gety() && mouseinput.getmousey() < startbuttonelement.gety() + startbuttonelement.getheight())) { startgame(); mouseinput.ismousepressed = false; } } } [CODE]public void sureexit() {[/CODE] int result = joptionpane.showconfirmdialog(null, ""sure? you want to exit?"", ""exit"",joptionpane.yes_no_option,joptionpane.question_message); if (result == joptionpane.yes_option) { system.exit(0); } } [CODE]public void startgame(){[/CODE] rainclip.stop(); rainclip = null; savemanager.savesettings(); window.gameon = true; system.out.println(window.gameon); game.close(); game.create(); } } import java.awt.graphics2d; import java.util.arraylist; import java.util.list; import java.util.random; [CODE]public class wavemanager {[/CODE] [CODE]public int wave = 0;[/CODE] arraylist<zombie> zombies; random rand; healthkit healthkit; magazine magazine; arraylist<healthkit> healthkits = [CODE]new arraylist<>();[/CODE] arraylist<magazine> magazines = [CODE]new arraylist<>();[/CODE] [CODE]public int zombiecount;[/CODE] [CODE]public double mult;[/CODE] [CODE]public int dead;[/CODE] arraylist<acidarea> acidareas = [CODE]new arraylist<>();[/CODE] arraylist<double> acidtimes = [CODE]new arraylist<>();[/CODE] long last_time = system.nanotime(); double currenttime; [CODE]public wavemanager(gamepanel game){[/CODE] this.game = game; this.zombies = [CODE]new arraylist<>();[/CODE] this.rand = [CODE]new random();[/CODE] if(settings.extreme){ mult = 20.0; } [CODE]else{[/CODE] mult = 10.0; } } [CODE]public gamepanel game;[/CODE] boolean validspawn(zombie zombie){ for(building building: game.buildings){ if(zombie.checkcollusion(game.camera, building)){ [CODE]return false;[/CODE] } } [CODE]return true;[/CODE] } [CODE]public void spawnzombies(){[/CODE] zombies.clear(); [CODE]if(dead >= wave*mult){[/CODE] dead = 0; } zombiecount = ([CODE]int)(wave * mult) - dead;[/CODE] arraylist<[CODE]class<? extends zombie>> availablezombies = new arraylist<>();[/CODE] availablezombies.add(normalzombie.[CODE]class);[/CODE] [CODE]if(wave >= 4){[/CODE] availablezombies.add(reptilezombie.[CODE]class);[/CODE] } [CODE]if(wave >= 7){[/CODE] availablezombies.add(tankzombie.[CODE]class);[/CODE] } [CODE]if(wave >= 10){[/CODE] availablezombies.add(acidzombie.[CODE]class);[/CODE] } [CODE]for(int i = 0;[/CODE] i < zombiecount; i++){ int x = rand.nextint(0, game.bg.width); int y = rand.nextint(0, game.bg.height); system.out.pr[CODE]intln(x + "" "" + y);[/CODE] class<? extends zombie> zombietype = availablezombies.get(rand.nextint(availablezombies.size())); [CODE]try {[/CODE] zombie zombie = zombietype.getdeclaredconstructor(int.class, int.class, player.class, camera.class).newinstance(x, y, game.player, game.camera); [CODE]if(validspawn(zombie)){[/CODE] zombies.add(zombie); zombie.definemanager(this); } [CODE]else{[/CODE] i--; } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } [CODE]public void update(){[/CODE] currenttime = system.currenttimemillis(); long time = system.nanotime(); [CODE]int delta_time = (int) ((time - last_time) / 1000000);[/CODE] last_time = time; [CODE]for (int i = 0;[/CODE] i < zombies.size(); i++) { if (zombies.get(i).isdead()) { dead += 1; game.player.score += wave; if(zombies.get(i) instanceof acidzombie){ acidareas.add(new acidarea(zombies.get(i).x - 64, zombies.get(i).y - 64, 128, 128)); acidtimes.add(currenttime); } int r = rand.next[CODE]int(0,20);[/CODE] [CODE]if(r==1 || r==2){[/CODE] healthkit = new healthkit(zombies.get(i).x, zombies.get(i).y, 48, 48); healthkits.add(healthkit); } [CODE]if(r==3 || r==4 || r==5){[/CODE] magazine = new magazine(zombies.get(i).x, zombies.get(i).y, 48, 48); magazines.add(magazine); } zombies.remove(i); i--; } } if(zombies.isempty()){ nextwave(); } [CODE]for(zombie z: zombies){[/CODE] z.update(); } [CODE]for(int i = 0;[/CODE] i < acidareas.size(); i++){ if(currenttime - acidtimes.get(i) > 3000){ acidareas.remove(i); acidtimes.remove(i); } } [CODE]for(zombie z: zombies){[/CODE] [CODE]for(acidarea area: acidareas){[/CODE] if(area.checkcollusion(game.camera, z)){ z.health -= delta_time / 30.0; system.out.pr[CODE]intln(delta_time);[/CODE] } } } } [CODE]public void render(graphics2d g, camera cam) {[/CODE] [CODE]for (zombie z : zombies) {[/CODE] z.draw2(g); } [CODE]for(healthkit hk: healthkits){[/CODE] hk.draw2(g, cam); } [CODE]for(magazine mg: magazines){[/CODE] mg.draw2(g, cam); } [CODE]for(acidarea area: acidareas){[/CODE] area.draw2(g, cam); } } [CODE]public void nextwave() {[/CODE] wave += 1; spawnzombies(); } [CODE]public list<zombie> getzombies() {[/CODE] [CODE]return zombies;[/CODE] } } import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class mousecursor extends gameobject{[/CODE] private imageicon mouseicon = new imageicon(this.getclass().getresource(""/textures/cursor.png"")); [CODE]public mousecursor(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public void update() {[/CODE] } [CODE]public void draw(graphics2d g) {[/CODE] } [CODE]public void draw(graphics2d g, int x, int y) {[/CODE] g.drawimage(mouseicon.getimage(), x-16, y-16, width, height, null); } } import java.awt.graphics2d; import java.awt.rectangle; import javax.swing.imageicon; [CODE]public class building extends gameobject{[/CODE] player player; imageicon[] buildingimages = [CODE]new imageicon[14];[/CODE] imageicon buildingimage = buildingimages[11] = new imageicon(this.getclass().getresource(""/textures/tilesets/city/house1.png""));; [CODE]int wbuilding;[/CODE] { [CODE]for(int i = 0;[/CODE] i < 11; i++){ buildingimages[i] = new imageicon(this.getclass().getresource(""/textures/tilesets/city/house"" + (int)(i+1) + "".png"")); } buildingimages[11] = new imageicon(this.getclass().getresource(""/textures/tilesets/city/building1.png"")); buildingimages[12] = new imageicon(this.getclass().getresource(""/textures/tilesets/city/building2.png"")); buildingimages[13] = new imageicon(this.getclass().getresource(""/textures/tilesets/city/building3.png"")); } [CODE]public building(int x, int y, int width, int height){[/CODE] super(x, y, width, height); } [CODE]public void setbuilding(int i){[/CODE] buildingimage = buildingimages[i]; } [CODE]public void getplayer(player player){[/CODE] this.player = player; } [CODE]public void draw(graphics2d g) {[/CODE] g.drawimage(buildingimage.getimage(), x, y, width, height, null); rectangle bounds1 = [CODE]new rectangle((int) x, (int) y, width, height);[/CODE] //g.draw(bounds1); } } import java.awt.graphics2d; [CODE]public abstract class zombie extends gameobject{[/CODE] [CODE]public zombie(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public boolean isdead() {[/CODE] [CODE]return health <= 0;[/CODE] } wavemanager wavemanager; gamepanel game; [CODE]public double health, speed;[/CODE] [CODE]public double damage;[/CODE] [CODE]public double velx, vely;[/CODE] boolean isjumping; double speed2 = speed; [CODE]public boolean collusion = false;[/CODE] abstract [CODE]void attack();[/CODE] player player; camera camera; [CODE]void definemanager(wavemanager wm){[/CODE] wavemanager = wm; game = wm.game; } boolean isnearplayer; abstract [CODE]void draw2(graphics2d g);[/CODE] [CODE]public void movetowardsplayer() {[/CODE] double playercenterx = player.getx() + player.getwidth() / 2.0; double playercentery = player.gety() + player.getheight() / 2.0; double zombiecenterx = x + width / 2.0; double zombiecentery = y + height / 2.0; double dx = playercenterx - zombiecenterx; double dy = playercentery - zombiecentery; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(isjumping){[/CODE] speed2 = 10; } double angle = math.atan2(dy, dx); velx = math.cos(angle) * speed2; vely = math.sin(angle) * speed2; [CODE]if(distance >= 50){[/CODE] [CODE]if(!isjumping){[/CODE] speed2 = speed; } isnearplayer = false; } [CODE]if(distance < 50){[/CODE] speed2 = 0; isnearplayer = true; } collusion = false; for(building building: game.buildings){ [CODE]if(checkcollusion(camera, building)){[/CODE] collusion = true; [CODE]if (velx > 0) {[/CODE] x -= velx; velx = 0; } [CODE]else if (velx < 0) {[/CODE] x += math.abs(velx); velx = 0; } [CODE]if (vely > 0) {[/CODE] y -= vely; vely = 0; } [CODE]else if (vely < 0) {[/CODE] y += math.abs(vely); vely = 0; } } } x += velx; y += vely; } } import java.awt.alphacomposite; import java.awt.color; import java.awt.font; import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class pause extends gameobject{[/CODE] [CODE]int a;[/CODE] private font u[CODE]ifont;[/CODE] imageicon pauseicon = new imageicon(this.getclass().getresource(""/textures/ui/pause.png"")); [CODE]public pause(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public void set(int w, int h){[/CODE] width = w; height = h; uifont = new font(""courier new"", font.bold, w/40); } [CODE]public void update(){[/CODE] [CODE]if(a<150) a += 3;[/CODE] } [CODE]public void draw(graphics2d g) {[/CODE] g.setcolor([CODE]new color(0,0,0,a));[/CODE] g.fillrect(0, 0, width , height); g.setcolor([CODE]new color(255,255,255));[/CODE] g.setfont(u[CODE]ifont);[/CODE] float alpha = a/150.0f; alphacomposite ac = alphacomposite.getinstance(alphacomposite.src_over,alpha); g.setcomposite(ac); g.drawimage(pauseicon.getimage(), width/3, width/8,width/3,width/18, null); g.drawstring(""press 'p' for unpause"", width/2 - (int)(width/6.5), height/2); g.drawstring(""press 'esc' for main menu"", width/2 - (int)(width/5.5), (int)(height/1.5)); } } import java.awt.color; import java.awt.graphics2d; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.util.arraylist; import javax.swing.imageicon; [CODE]public class acidzombie extends zombie{[/CODE] private imageicon acidzombieimage = new imageicon(this.getclass().getresource(""/textures/zombies/acidzombie.png"")); arraylist<acid> acids = [CODE]new arraylist<>();[/CODE] double currenttime; double acidtime; [CODE]public acidzombie(int x, int y, player player, camera camera){[/CODE] super(x,y,80,80); this.health = 10; this.speed = 4; this.damage = 0.2; this.player = player; this.camera = camera; this.visible = true; } [CODE]void attack() {[/CODE] [CODE]if(currenttime - acidtime > 600){[/CODE] acids.add(new acid((int)(x + width/2 - camera.x),(int)(y + height/2 - camera.y),(int)(player.getx() + player.getwidth() / 2.0 - camera.x), (int)(player.gety() + player.getheight() / 2.0 - camera.y))); acidtime = currenttime; } } [CODE]public void update() {[/CODE] [CODE]for(acid acid: acids){[/CODE] acid.update(); } [CODE]for(int i = 0;[/CODE] i < acids.size(); i++){ if(player.checkcollusion(camera, acids.get(i))){ acids.remove(i); if(player.isplayerattackable()){ player.sethealth(player.gethealth() - 5); } } } double dx = player.x - x; double dy = player.y - y; currenttime = system.currenttimemillis(); double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance < 1000 && distance > 200){[/CODE] movetowardsplayer(); } [CODE]if(distance <= 200){[/CODE] attack(); } } [CODE]public void draw2(graphics2d g) {[/CODE] [CODE]for(acid acid: acids){[/CODE] acid.draw(g); } [CODE]if (visible) {[/CODE] double dx = player.getx() + player.getwidth() / 2.0 - (x + width/2); double dy = player.gety() + player.getheight() / 2.0 - (y + height/2); double angle = math.atan2(dy, dx) + math.pi / 2; g.translate(x - camera.getx() + width/2, y - camera.gety() + height/2); g.rotate(angle); g.drawimage(acidzombieimage.getimage(), -width/2, -height/2, width, height, null); g.settrans[CODE]form(new affinetransform());[/CODE] g.setcolor([CODE]new color(215,0,0));[/CODE] g.fillrect(x - camera.getx() + 15, y - camera.gety(), ([CODE]int)((width-30) * (health / 10)), 5);[/CODE] g.setcolor([CODE]new color(255,255,255));[/CODE] g.drawrect(x - camera.getx() + 15, y - camera.gety(), (width-30), 5); } } [CODE]public void draw(graphics2d g) {[/CODE] } } import java.io.file; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; import javax.swing.imageicon; [CODE]public abstract class weapon {[/CODE] [CODE]public int capacity;[/CODE] [CODE]public int currentcapacity;[/CODE] [CODE]public int shootspeed;[/CODE] [CODE]public int wave;[/CODE] [CODE]public int reloadcooldown;[/CODE] [CODE]public string name;[/CODE] [CODE]public int speed = 50;[/CODE] [CODE]public int magazine = capacity;[/CODE] [CODE]public file soundpath;[/CODE] public file reloadpath = new file(""reloadsound.wav""); [CODE]public audioinputstream audioinput;[/CODE] [CODE]public clip clip;[/CODE] [CODE]public void playsound(){[/CODE] [CODE]new thread(() -> {[/CODE] [CODE]try{[/CODE] audioinput = audiosystem.getaudioinputstream(soundpath); clip = audiosystem.getclip(); clip.open(audioinput); clip.setframeposition(0); clip.start(); system.out.pr[CODE]intln(""bang"");[/CODE] } [CODE]catch(exception e){[/CODE] } }).start(); } [CODE]public void reloadsound(){[/CODE] [CODE]new thread(() -> {[/CODE] [CODE]try{[/CODE] audioinput = audiosystem.getaudioinputstream(reloadpath); clip = audiosystem.getclip(); clip.open(audioinput); clip.setframeposition(0); clip.start(); system.out.pr[CODE]intln(""r"");[/CODE] } [CODE]catch(exception e){[/CODE] } }).start(); } imageicon image,bulletimage; abstract [CODE]void shoot(int mousex, int mousey);[/CODE] [CODE]public void reload(){[/CODE] [CODE]if(magazine > capacity){[/CODE] magazine -= capacity - currentcapacity; currentcapacity = capacity; } [CODE]else{[/CODE] currentcapacity += magazine; magazine = 0; } system.out.pr[CODE]intln(magazine);[/CODE] system.out.pr[CODE]intln(capacity - currentcapacity);[/CODE] if(settings.volume){ reloadsound(); } } } import java.awt.graphics2d; import java.awt.geom.affinetrans[CODE]form;[/CODE] import javax.swing.imageicon; [CODE]public class bullet extends gameobject{[/CODE] private double velx, vely; private double speed = 50.0; private double angle; [CODE]public boolean enabled;[/CODE] private imageicon bulletimage; wavemanager wavemanager; camera camera; explosion explosion = null; weapon weapon; double exptime = 0; double currenttime; long last_time = system.nanotime(); [CODE]public bullet(int startx, int starty, int targetx, int targety, weapon weapon, double ang, wavemanager wm, camera cam) {[/CODE] super(startx, starty, 8, 8); enabled = true; camera = cam; wavemanager = wm; this.weapon = weapon; speed = weapon.speed; double d[CODE]iffx = targetx - startx;[/CODE] double d[CODE]iffy = targety - starty;[/CODE] double distance = math.sqrt(d[CODE]iffx * diffx + diffy * diffy);[/CODE] double ang2 = math.toradians(ang); angle = math.atan2(d[CODE]iffy, diffx) + ang2;[/CODE] [CODE]if (distance != 0) {[/CODE] velx = math.cos(angle) * speed; vely = math.sin(angle) * speed; } [CODE]else {[/CODE] velx = 0; vely = 0; } bulletimage = weapon.bulletimage; } [CODE]public void update() {[/CODE] currenttime = system.currenttimemillis(); long time = system.nanotime(); [CODE]int delta_time = (int) ((time - last_time) / 1000000);[/CODE] last_time = time; x += velx; y += vely; for(zombie z: wavemanager.zombies){ [CODE]if(checkcollusion(camera, z) && !(weapon instanceof rocketlauncher)){[/CODE] z.health -= 5; [CODE]if(!(weapon instanceof sniper)){[/CODE] enabled = false; } [CODE]else{[/CODE] z.health -= 5; enabled = true; } } } for(zombie z: wavemanager.zombies){ [CODE]if(checkcollusion(camera, z)){[/CODE] [CODE]if(weapon instanceof rocketlauncher){[/CODE] [CODE]if(explosion==null){[/CODE] explosion = new explosion(x + camera.x - 128, y + camera.y - 128, 256, 256); velx = 0; vely = 0; exptime = currenttime; } } } } for(building b: wavemanager.game.buildings){ [CODE]if(checkcollusion(camera, b)){[/CODE] [CODE]if(weapon instanceof rocketlauncher){[/CODE] [CODE]if(explosion==null){[/CODE] explosion = new explosion(x + camera.x - 128, y + camera.y - 128, 256, 256); velx = 0; vely = 0; exptime = currenttime; } } [CODE]else{[/CODE] enabled = false; } } } [CODE]if(explosion!=null){[/CODE] for(zombie z: wavemanager.zombies){ if(explosion.checkcollusion(camera, z)){ z.health -= delta_time * 10; } } } } [CODE]public void draw(graphics2d g) {[/CODE] affinetrans[CODE]form transform = new affinetransform();[/CODE] transform.translate(x, y); transform.rotate(angle + math.pi, bulletimage.getimage().getwidth(null) / 20, bulletimage.getimage().getheight(null) / 20); [CODE]if(weapon instanceof rocketlauncher){[/CODE] transform.scale(0.15, 0.15); } [CODE]else{[/CODE] transform.scale(0.05, 0.05); } g.drawimage(bulletimage.getimage(), trans[CODE]form, null);[/CODE] [CODE]if(explosion != null){[/CODE] explosion.draw2(g, camera); } [CODE]if(currenttime - exptime >= 750 && explosion != null){[/CODE] exptime = 0; explosion = null; enabled = false; } } [CODE]public boolean isoutofbounds() {[/CODE] [CODE]return x < 0 || x > 4000 || y < 0 || y > 3000;[/CODE] } } import java.io.file; import javax.swing.imageicon; [CODE]public class shotgun extends weapon{[/CODE] gamepanel game; [CODE]public shotgun(gamepanel game){[/CODE] capacity = 5; currentcapacity = 5; shootspeed = 60; wave = 4; reloadcooldown = 5000; this.game = game; name = ""shotgun""; image = new imageicon(""textures/weapons/shotgun.png""); bulletimage = new imageicon(this.getclass().getresource(""/textures/weapons/rifle_bullet.png"")); soundpath = new file(""shotgunsound.wav""); } [CODE]void shoot(int mousex, int mousey) {[/CODE] [CODE]if(currentcapacity>0){[/CODE] if(settings.volume){ playsound(); } currentcapacity -= 1; game.addbullet(mousex, mousey); } } } import java.awt.graphics2d; [CODE]public class acid extends gameobject{[/CODE] double angle; double speed = 10; [CODE]public acid(int startx, int starty, int targetx, int targety){[/CODE] super(startx, starty, 6, 6); double d[CODE]iffx = targetx - startx;[/CODE] double d[CODE]iffy = targety - starty;[/CODE] double distance = math.sqrt(d[CODE]iffx * diffx + diffy * diffy);[/CODE] angle = math.atan2(d[CODE]iffy, diffx);[/CODE] [CODE]if (distance != 0) {[/CODE] velx = math.cos(angle) * speed; vely = math.sin(angle) * speed; } [CODE]else {[/CODE] velx = 0; vely = 0; } } [CODE]public void update(){[/CODE] x += velx; y += vely; } [CODE]public void draw(graphics2d g) {[/CODE] g.filloval(x, y, width, height); } } import java.awt.color; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.geom.affinetrans[CODE]form;[/CODE] import javax.swing.imageicon; [CODE]public class reptilezombie extends zombie{[/CODE] private imageicon reptilezombieimage = new imageicon(this.getclass().getresource(""/textures/zombies/reptilezombie.png"")); [CODE]public reptilezombie(int x, int y, player player, camera camera){[/CODE] super(x,y,64,64); this.health = 10; this.speed = 4; this.damage = 0.2; this.player = player; this.camera = camera; this.visible = true; } [CODE]void attack() {[/CODE] if (isnearplayer && player.isplayerattackable()) { player.sethealth(player.gethealth()-damage); //system.out.println(""attack "" + player.gethealth()); } } private boolean canjump = true; private long lastjumptime = 0; private final long jumpcooldown = 2000; [CODE]public void update() {[/CODE] double dx = player.x - x; double dy = player.y - y; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance < 1000){[/CODE] movetowardsplayer(); } attack(); checkjump(); } [CODE]public void checkjump(){[/CODE] double playercenterx = player.getx() + player.getwidth() / 2.0; double playercentery = player.gety() + player.getheight() / 2.0; double zombiecenterx = x + width / 2.0; double zombiecentery = y + height / 2.0; double dx = playercenterx - zombiecenterx; double dy = playercentery - zombiecentery; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if (distance < 100) {[/CODE] [CODE]if (canjump) {[/CODE] isjumping = true; canjump = false; lastjumptime = system.currenttimemillis(); } } [CODE]if(distance < 50){[/CODE] isjumping = false; } if (!canjump && system.currenttimemillis() - lastjumptime > jumpcooldown) { canjump = true; } } [CODE]public void draw2(graphics2d g) {[/CODE] [CODE]if (visible) {[/CODE] double dx = player.getx() + player.getwidth() / 2.0 - (x + width/2); double dy = player.gety() + player.getheight() / 2.0 - (y + height/2); double angle = math.atan2(dy, dx) + math.pi / 2; g.translate(x - camera.getx() + width/2, y - camera.gety() + height/2); g.rotate(angle); g.drawimage(reptilezombieimage.getimage(), -width/2, -height/2, width, height, null); g.settrans[CODE]form(new affinetransform());[/CODE] g.setcolor([CODE]new color(215,0,0));[/CODE] g.fillrect(x - camera.getx() + 15, y - camera.gety(), ([CODE]int)((width-30) * (health / 10)), 5);[/CODE] g.setcolor([CODE]new color(255,255,255));[/CODE] g.drawrect(x - camera.getx() + 15, y - camera.gety(), (width-30), 5); } rectangle bounds1 = new rectangle((int) x - camera.x, (int) y - camera.y, width, height); //g.draw(bounds1); } [CODE]public void draw(graphics2d g) {[/CODE] } } import java.awt.color; import java.awt.graphics2d; import java.awt.image; import java.awt.rectangle; import java.awt.geom.affinetrans[CODE]form;[/CODE] import javax.swing.imageicon; [CODE]public class normalzombie extends zombie{[/CODE] imageicon normalzombieimage = new imageicon(this.getclass().getresource(""/textures/zombies/normalzombie.png"")); [CODE]public normalzombie(int x, int y, player player, camera camera){[/CODE] super(x,y,80,80); this.health = 20; this.speed = 2; this.damage = 0.2; this.player = player; this.camera = camera; this.visible = true; } [CODE]void attack() {[/CODE] if (isnearplayer && player.isplayerattackable()) { player.sethealth(player.gethealth()-damage); //system.out.println(""attack "" + player.gethealth()); } } [CODE]public void update() {[/CODE] double dx = player.x - x; double dy = player.y - y; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance < 1000){[/CODE] movetowardsplayer(); } attack(); } [CODE]public void draw2(graphics2d g) {[/CODE] [CODE]if (visible) {[/CODE] double dx = player.getx() + player.getwidth() / 2.0 - (x + width/2); double dy = player.gety() + player.getheight() / 2.0 - (y + height/2); double angle = math.atan2(dy, dx) + math.pi / 2; g.translate(x - camera.getx() + width/2, y - camera.gety() + height/2); g.rotate(angle); g.drawimage(normalzombieimage.getimage(), -width/2, -height/2, width, height, null); g.settrans[CODE]form(new affinetransform());[/CODE] g.setcolor([CODE]new color(215,0,0));[/CODE] g.fillrect(x - camera.getx() + 15, y - camera.gety(), ([CODE]int)((width-30) * (health / 20)), 5);[/CODE] g.setcolor([CODE]new color(255,255,255));[/CODE] g.drawrect(x - camera.getx() + 15, y - camera.gety(), (width-30), 5); } rectangle bounds1 = new rectangle((int) x - camera.x, (int) y - camera.y, width, height); //g.draw(bounds1); } [CODE]public void draw(graphics2d g) {[/CODE] } } import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class magazine extends gameobject{[/CODE] imageicon magazine = new imageicon(this.getclass().getresource(""/textures/zombies/magazine.g[CODE]if""));[/CODE] [CODE]public magazine(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public void draw2(graphics2d g, camera cam) {[/CODE] g.drawimage(magazine.getimage(), x - cam.x, y - cam.y, width, height, null); } [CODE]public void draw(graphics2d g) {[/CODE] } } import java.awt.event.keyevent; import java.awt.event.keylistener; [CODE]public class keyinput implements keylistener {[/CODE] private boolean up, down, left, right,sh[CODE]ift,q,r,t,k,p,num1,num2,num3,num4,num5,f5,esc;[/CODE] [CODE]public boolean isup(){[/CODE] [CODE]return up;[/CODE] } [CODE]public boolean isdown(){[/CODE] [CODE]return down;[/CODE] } [CODE]public boolean isleft(){[/CODE] [CODE]return left;[/CODE] } [CODE]public boolean isright(){[/CODE] [CODE]return right;[/CODE] } [CODE]public boolean isshift(){[/CODE] [CODE]return shift;[/CODE] } [CODE]public boolean isq(){[/CODE] [CODE]return q;[/CODE] } [CODE]public boolean isr(){[/CODE] [CODE]return r;[/CODE] } [CODE]public boolean ist(){[/CODE] [CODE]return t;[/CODE] } [CODE]public boolean isk(){[/CODE] [CODE]return k;[/CODE] } [CODE]public boolean isp(){[/CODE] [CODE]return p;[/CODE] } [CODE]public boolean is1(){[/CODE] [CODE]return num1;[/CODE] } [CODE]public boolean is2(){[/CODE] [CODE]return num2;[/CODE] } [CODE]public boolean is3(){[/CODE] [CODE]return num3;[/CODE] } [CODE]public boolean is4(){[/CODE] [CODE]return num4;[/CODE] } [CODE]public boolean is5(){[/CODE] [CODE]return num5;[/CODE] } [CODE]public boolean isf5(){[/CODE] [CODE]return f5;[/CODE] } [CODE]public boolean isesc(){[/CODE] [CODE]return esc;[/CODE] } [CODE]public void keypressed(keyevent e) {[/CODE] int key = e.getkeycode(); if (key == keyevent.vk_w) up = true; if (key == keyevent.vk_s) down = true; if (key == keyevent.vk_a) left = true; if (key == keyevent.vk_d) right = true; if (key == keyevent.vk_sh[CODE]ift) shift = true;[/CODE] if (key == keyevent.vk_q) q = true; if (key == keyevent.vk_r) r = true; if (key == keyevent.vk_t) t = true; if (key == keyevent.vk_k) k = true; if (key == keyevent.vk_p) p = true; if (key == keyevent.vk_1) num1 = true; if (key == keyevent.vk_2) num2 = true; if (key == keyevent.vk_3) num3 = true; if (key == keyevent.vk_4) num4 = true; if (key == keyevent.vk_5) num5 = true; if (key == keyevent.vk_f5) f5 = true; if (key == keyevent.vk_escape) esc = true; } [CODE]public void keyreleased(keyevent e) {[/CODE] int key = e.getkeycode(); if (key == keyevent.vk_w) up = false; if (key == keyevent.vk_s) down = false; if (key == keyevent.vk_a) left = false; if (key == keyevent.vk_d) right = false; if (key == keyevent.vk_sh[CODE]ift) shift = false;[/CODE] if (key == keyevent.vk_q) q = false; if (key == keyevent.vk_r) r = false; if (key == keyevent.vk_t) t = false; if (key == keyevent.vk_k) k = false; if (key == keyevent.vk_p) p = false; if (key == keyevent.vk_1) num1 = false; if (key == keyevent.vk_2) num2 = false; if (key == keyevent.vk_3) num3 = false; if (key == keyevent.vk_4) num4 = false; if (key == keyevent.vk_5) num5 = false; if (key == keyevent.vk_f5) f5 = false; if (key == keyevent.vk_escape) esc = false; } [CODE]public void keytyped(keyevent e) {[/CODE] } } import java.io.*; [CODE]public class gamesavemanager {[/CODE] private gamepanel gamepanel; [CODE]public gamesavemanager(gamepanel gamepanel) {[/CODE] this.gamepanel = gamepanel; } [CODE]public gamesavemanager() {[/CODE] } [CODE]public void savesettings(){[/CODE] try (bufferedwriter writer = new bufferedwriter(new filewriter(""settings.txt""))) { writer.write(""rain="" + settings.rain); writer.[CODE]newline();[/CODE] writer.write(""extreme="" + settings.extreme); writer.[CODE]newline();[/CODE] writer.write(""fullscreen="" + settings.fullscreen); writer.[CODE]newline();[/CODE] writer.write(""volume="" + settings.volume); writer.[CODE]newline();[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadsettings(){[/CODE] try (bufferedreader reader = new bufferedreader(new filereader(""settings.txt""))) { [CODE]string line;[/CODE] while ((line = reader.readline()) != null) { string[] parts = line.split(""=""); [CODE]string key = parts[0];[/CODE] [CODE]string value = parts[1];[/CODE] switch (key) { case ""rain"": settings.rain = boolean.parseboolean(value); break; case ""extreme"": settings.extreme = boolean.parseboolean(value); break; case ""fullscreen"": settings.fullscreen = boolean.parseboolean(value); break; case ""volume"": settings.volume = boolean.parseboolean(value); break; } } system.out.pr[CODE]intln(""loadsettings"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void savegame() {[/CODE] try (bufferedwriter writer = new bufferedwriter(new filewriter(""save.txt""))) { writer.write(""wave="" + (gamepanel.wavemanager.wave-1)); writer.[CODE]newline();[/CODE] writer.write(""playerx="" + gamepanel.player.getx()); writer.[CODE]newline();[/CODE] writer.write(""playery="" + gamepanel.player.gety()); writer.[CODE]newline();[/CODE] writer.write(""players="" + gamepanel.player.score); writer.[CODE]newline();[/CODE] writer.write(""playerh="" + gamepanel.player.gethealth()); writer.[CODE]newline();[/CODE] writer.write(""playerf="" + gamepanel.player.getfatigue()); writer.[CODE]newline();[/CODE] writer.write(""camerax="" + gamepanel.camera.getx()); writer.[CODE]newline();[/CODE] writer.write(""cameray="" + gamepanel.camera.gety()); writer.[CODE]newline();[/CODE] writer.write(""deadzombies="" + gamepanel.wavemanager.dead); writer.[CODE]newline();[/CODE] writer.write(""magazine2="" + gamepanel.rifle.magazine); writer.[CODE]newline();[/CODE] writer.write(""capacity2="" + gamepanel.rifle.currentcapacity); writer.[CODE]newline();[/CODE] writer.write(""magazine3="" + gamepanel.shotgun.magazine); writer.[CODE]newline();[/CODE] writer.write(""capacity3="" + gamepanel.shotgun.currentcapacity); writer.[CODE]newline();[/CODE] writer.write(""magazine4="" + gamepanel.sniper.magazine); writer.[CODE]newline();[/CODE] writer.write(""capacity4="" + gamepanel.sniper.currentcapacity); writer.[CODE]newline();[/CODE] writer.write(""magazine5="" + gamepanel.rocket.magazine); writer.[CODE]newline();[/CODE] writer.write(""capacity5="" + gamepanel.rocket.currentcapacity); writer.[CODE]newline();[/CODE] system.out.pr[CODE]intln(""saved"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void loadgame() {[/CODE] try (bufferedreader reader = new bufferedreader(new filereader(""save.txt""))) { [CODE]string line;[/CODE] while ((line = reader.readline()) != null) { string[] parts = line.split(""=""); [CODE]string key = parts[0];[/CODE] [CODE]string value = parts[1];[/CODE] switch (key) { case ""wave"": gamepanel.wavemanager.wave = integer.parse[CODE]int(value);[/CODE] break; case ""rain"": settings.rain = boolean.parseboolean(value); break; case ""extreme"": settings.extreme = boolean.parseboolean(value); break; case ""playerx"": gamepanel.player.setx(integer.parse[CODE]int(value));[/CODE] break; case ""playery"": gamepanel.player.sety(integer.parse[CODE]int(value));[/CODE] break; case ""players"": gamepanel.player.score = integer.parse[CODE]int(value);[/CODE] break; case ""playerh"": gamepanel.player.sethealth(double.parsedouble(value)); break; case ""playerf"": gamepanel.player.setfatigue(double.parsedouble(value)); break; case ""camerax"": gamepanel.camera.setx(integer.parse[CODE]int(value));[/CODE] break; case ""cameray"": gamepanel.camera.sety(integer.parse[CODE]int(value));[/CODE] break; case ""deadzombies"": gamepanel.wavemanager.dead = integer.parse[CODE]int(value);[/CODE] break; case ""magazine2"": gamepanel.rifle.magazine = integer.parse[CODE]int(value);[/CODE] break; case ""capacity2"": gamepanel.rifle.currentcapacity = integer.parse[CODE]int(value);[/CODE] break; case ""magazine3"": gamepanel.shotgun.magazine = integer.parse[CODE]int(value);[/CODE] break; case ""capacity3"": gamepanel.shotgun.currentcapacity = integer.parse[CODE]int(value);[/CODE] break; case ""magazine4"": gamepanel.sniper.magazine = integer.parse[CODE]int(value);[/CODE] break; case ""capacity4"": gamepanel.sniper.currentcapacity = integer.parse[CODE]int(value);[/CODE] break; case ""magazine5"": gamepanel.rocket.magazine = integer.parse[CODE]int(value);[/CODE] break; case ""capacity5"": gamepanel.rocket.currentcapacity = integer.parse[CODE]int(value);[/CODE] break; } } system.out.pr[CODE]intln(""load"");[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } import java.io.file; import javax.swing.imageicon; [CODE]public class pistol extends weapon{[/CODE] gamepanel game; [CODE]public pistol(gamepanel game){[/CODE] capacity = 12; currentcapacity = 12; shootspeed = 120; magazine = integer.max_value; wave = 0; reloadcooldown = 5000; this.game = game; name = ""pistol""; image = new imageicon(""textures/weapons/pistol.png""); bulletimage = new imageicon(this.getclass().getresource(""/textures/weapons/pistol_bullet.png"")); soundpath = new file(""pistolsound.wav""); } [CODE]void shoot(int mousex, int mousey) {[/CODE] [CODE]if(currentcapacity>0){[/CODE] if(settings.volume){ playsound(); } currentcapacity -= 1; game.addbullet(mousex, mousey); } } } import java.awt.color; import java.awt.dimension; import java.awt.font; import java.awt.graphics; import java.awt.graphics2d; import java.awt.image; import java.io.file; import java.io.ioexception; import java.util.arraylist; import java.util.random; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; import javax.sound.sampled.lineunavailableexception; import javax.sound.sampled.unsupportedaudiofileexception; import javax.swing.imageicon; import javax.swing.jpanel; [CODE]class gamepanel extends jpanel{[/CODE] [CODE]public arraylist<bullet> bullets = new arraylist<>();[/CODE] [CODE]int playerwidth = 96;[/CODE] [CODE]int playerheight = 96;[/CODE] [CODE]int playerspeed = 5;[/CODE] [CODE]public player player = new player(480, 270, playerwidth, playerheight, playerspeed, this);[/CODE] [CODE]public camera camera = new camera(0, 0, 0, 0);[/CODE] [CODE]public background bg = new background(0, 0, 6144, 3456);[/CODE] private mousecursor mousecursor = [CODE]new mousecursor(0, 0, 32, 32);[/CODE] arraylist<building> buildings = [CODE]new arraylist<>();[/CODE] imageicon gif = new imageicon(this.getclass().getresource(""/textures/ui/rain.g[CODE]if""));[/CODE] pistol pistol = [CODE]new pistol(this);[/CODE] r[CODE]ifle rifle = new rifle(this);[/CODE] shotgun shotgun = [CODE]new shotgun(this);[/CODE] sniper sniper = [CODE]new sniper(this);[/CODE] rocketlauncher rocket = [CODE]new rocketlauncher(this);[/CODE] weapon currentweapon = pistol; protected double mouseangle = 0; private keyinput keyinput = [CODE]new keyinput();[/CODE] private mouseinput mouseinput; [CODE]int active = 0;[/CODE] private image playerimage = new imageicon(""textures/player/player_icon.png"").getimage(); private image weaponimage; private font u[CODE]ifont;[/CODE] [CODE]public long lastreloadtime = 0;[/CODE] [CODE]public long currenttime = 0;[/CODE] [CODE]public long deadtime = 0;[/CODE] long pausetime = 0; gameover gameover = [CODE]new gameover(0, 0, 0, 0);[/CODE] pause pause = [CODE]new pause(0, 0, 0, 0);[/CODE] [CODE]int panelheight;[/CODE] [CODE]int panelwidth;[/CODE] file rainsound = new file(""rain.wav""); audioinputstream raininput; clip rainclip; file musicsound = new file(""music.wav""); audioinputstream musicinput; clip musicclip; boolean ispaused; wavemanager wavemanager = [CODE]new wavemanager(this);[/CODE] private gamesavemanager savemanager; window window; [CODE]public gamepanel(window window) throws unsupportedaudiofileexception, ioexception, lineunavailableexception{[/CODE] this.window = window; setfocusable(true); requestfocus(); setlayout(null); player.setvisible(true); addkeylistener(keyinput); raininput = audiosystem.getaudioinputstream(rainsound); rainclip = audiosystem.getclip(); rainclip.open(raininput); rainclip.setframeposition(0); musicinput = audiosystem.getaudioinputstream(musicsound); musicclip = audiosystem.getclip(); musicclip.open(musicinput); musicclip.setframeposition(0); if(settings.volume){ musicclip.loop(clip.loop_continuously); if(settings.rain){ rainclip.loop(clip.loop_continuously); } } [CODE]for(int i = 0;[/CODE] i < 23; i++){ buildings.add([CODE]new building(0, 0, 512, 512));[/CODE] } [CODE]for(building building: buildings){[/CODE] building.getplayer(player); } currentweapon = pistol; player.changeimage(currentweapon); lastreloadtime = system.currenttimemillis(); weaponimage = currentweapon.image.getimage(); mouseinput = [CODE]new mouseinput(this, currentweapon);[/CODE] addmousemotionlistener(mouseinput); addmouselistener(mouseinput); savemanager = [CODE]new gamesavemanager(this);[/CODE] savemanager.loadgame(); savemanager.loadsettings(); setbuildings(); } [CODE]public void mousepressed(int mousex, int mousey){[/CODE] addbullet(mousex, mousey); } private [CODE]void renderui(graphics g, int w, int h) {[/CODE] graphics2d g2d = (graphics2d) g; uifont = new font(""courier new"", font.bold, w/60); g2d.setfont(u[CODE]ifont);[/CODE] g2d.setcolor([CODE]new color(0, 0, 0, 150));[/CODE] g2d.fillroundrect(w - (int)(w/3.8) - (int)(w/100), (int)(w/100), (int)(w/3.8), w/14, 20, 20); g2d.fillroundrect((int)(w/100), (int)(w/100), (int)(w/4.5), w/20, 20, 20); g2d.drawimage(playericon(player.gethealth()).getimage(), w - w/16 - w/72, w/72, w/16, w/16, null); g2d.setcolor(color.white); g2d.drawstring(""score:"" + player.score, w - w/4, w/15); uifont = new font(""courier new"", font.bold, w/80); g2d.setfont(u[CODE]ifont);[/CODE] g2d.drawimage(weaponimage, w/55, w/65, w/24, w/24, null); g2d.setcolor(color.red); g2d.fillrect(w - w/6 - w/12, w/48, (int)(player.gethealth()*w/6/100), w/96); g2d.setcolor(color.white); g2d.drawrect(w - w/6 - w/12, w/48, w/6, w/96); g2d.setcolor([CODE]new color(0,75,150));[/CODE] g2d.fillrect(w - w/6 - w/12, w/32, (int)(player.getfatigue()*w/6/100), w/96); g2d.setcolor(color.white); g2d.drawrect(w- w/6 - w/12, w/32, w/6, w/96); int reloadbar = (int)((currenttime-lastreloadtime)*currentweapon.reloadcooldown/7/w/24); [CODE]if(reloadbar>w/24){[/CODE] reloadbar = w/24; } g2d.setcolor([CODE]new color(75,150,0));[/CODE] g2d.fillrect(w/55, w/60, reloadbar, w/160); g2d.setcolor(color.white); g2d.drawrect(w/55, w/60, w/24, w/160); g2d.setcolor(color.white); g2d.drawstring(""bullet: "" + currentweapon.currentcapacity + ""/"" + currentweapon.magazine, w/15, w/20); g2d.drawstring(""weapon: "" + currentweapon.name, w/15, w/35); g2d.setcolor([CODE]new color(200,100,0,255));[/CODE] g2d.fillrect(w/3, w/50, (int)(((double)(wavemanager.zombies.size())/wavemanager.wave/wavemanager.mult)*w/3), w/50); g2d.setcolor(color.white); g2d.drawrect(w/3, w/50, w/3, w/50); g2d.drawstring(""wave: "" + wavemanager.wave, w/3, w/50); string str = wavemanager.zombies.size() + ""/"" + (int)(wavemanager.wave*wavemanager.mult); g2d.drawstring(str, w/3 + w/3 - str.length()*w/130, w/25); g2d.draw[CODE]string(""press 'k' to save the game"", w - w/5, h - h/35);[/CODE] } [CODE]public imageicon playericon(double health){[/CODE] [CODE]if(health>80){[/CODE] return new imageicon(""textures/player/player_icon.png""); } [CODE]else if(health>60){[/CODE] return new imageicon(""textures/player/player_icon2.png""); } [CODE]else if(health>40){[/CODE] return new imageicon(""textures/player/player_icon3.png""); } [CODE]else if(health>20){[/CODE] return new imageicon(""textures/player/player_icon4.png""); } [CODE]else{[/CODE] return new imageicon(""textures/player/player_icon5.png""); } } [CODE]public int getrandomnumber(int min, int max) {[/CODE] return (int) ((math.random() * (max - min)) + min); } [CODE]public void addbullet(int x, int y){[/CODE] double ang = 0; [CODE]if(currentweapon instanceof pistol){[/CODE] ang = 0; bullets.add(new bullet(player.getx() - camera.getx() + player.getwidth()/2, player.gety() - camera.gety() + player.getheight()/2, x, y, currentweapon, ang, wavemanager, camera)); } [CODE]else if(currentweapon instanceof rifle){[/CODE] ang = getrandomnumber(-15, 15); bullets.add(new bullet(player.getx() - camera.getx() + player.getwidth()/2, player.gety() - camera.gety() + player.getheight()/2, x, y, currentweapon, ang, wavemanager, camera)); } [CODE]else if(currentweapon instanceof shotgun){[/CODE] ang = -22.5; [CODE]for(int i = 0;[/CODE] i < 9; i++){ bullets.add(new bullet(player.getx() - camera.getx() + player.getwidth()/2, player.gety() - camera.gety() + player.getheight()/2, x, y, currentweapon, ang, wavemanager, camera)); ang += 5.0; } } [CODE]else if(currentweapon instanceof sniper){[/CODE] ang = 0; bullets.add(new bullet(player.getx() - camera.getx() + player.getwidth()/2, player.gety() - camera.gety() + player.getheight()/2, x, y, currentweapon, ang, wavemanager, camera)); } [CODE]else if(currentweapon instanceof rocketlauncher){[/CODE] ang = 0; bullets.add(new bullet(player.getx() - camera.getx() + player.getwidth()/2, player.gety() - camera.gety() + player.getheight()/2, x, y, currentweapon, ang, wavemanager, camera)); } } [CODE]public void setbuildings(){[/CODE] [CODE]int a = 64;[/CODE] buildings.get(0).setx(bg.x+2*a); buildings.get(0).sety(bg.y+6*a); buildings.get(0).setbuilding(0); buildings.get(1).setx(bg.x+2*a); buildings.get(1).sety(bg.y+17*a); buildings.get(1).setbuilding(6); buildings.get(2).setx(bg.x+2*a); buildings.get(2).sety(bg.y+27*a); buildings.get(2).setbuilding(13); buildings.get(3).setx(bg.x+2*a); buildings.get(3).sety(bg.y+44*a); buildings.get(3).setbuilding(3); buildings.get(4).setx(bg.x+19*a); buildings.get(4).sety(bg.y+2*a); buildings.get(4).setbuilding(3); buildings.get(5).setx(bg.x+19*a); buildings.get(5).sety(bg.y+12*a); buildings.get(5).setbuilding(11); buildings.get(6).setx(bg.x+19*a); buildings.get(6).sety(bg.y+29*a); buildings.get(6).setbuilding(2); buildings.get(7).setx(bg.x+19*a); buildings.get(7).sety(bg.y+39*a); buildings.get(7).setbuilding(1); buildings.get(8).setx(bg.x+29*a); buildings.get(8).sety(bg.y+2*a); buildings.get(8).setbuilding(7); buildings.get(9).setx(bg.x+29*a); buildings.get(9).sety(bg.y+12*a); buildings.get(9).setbuilding(4); buildings.get(10).setx(bg.x+29*a); buildings.get(10).sety(bg.y+29*a); buildings.get(10).setbuilding(7); buildings.get(11).setx(bg.x+29*a); buildings.get(11).sety(bg.y+39*a); buildings.get(11).setbuilding(5); buildings.get(12).setx(bg.x+39*a); buildings.get(12).sety(bg.y+29*a); buildings.get(12).setbuilding(3); buildings.get(13).setx(bg.x+39*a); buildings.get(13).sety(bg.y+39*a); buildings.get(13).setbuilding(9); buildings.get(14).setx(bg.x+46*a); buildings.get(14).sety(bg.y+2*a); buildings.get(14).setbuilding(6); buildings.get(15).setx(bg.x+46*a); buildings.get(15).sety(bg.y+12*a); buildings.get(15).setbuilding(9); buildings.get(16).setx(bg.x+56*a); buildings.get(16).sety(bg.y+29*a); buildings.get(16).setbuilding(2); buildings.get(17).setx(bg.x+56*a); buildings.get(17).sety(bg.y+39*a); buildings.get(17).setbuilding(12); buildings.get(18).setx(bg.x+73*a); buildings.get(18).sety(bg.y+29*a); buildings.get(18).setbuilding(8); buildings.get(19).setx(bg.x+73*a); buildings.get(19).sety(bg.y+46*a); buildings.get(19).setbuilding(3); buildings.get(20).setx(bg.x+83*a); buildings.get(20).sety(bg.y+12*a); buildings.get(20).setbuilding(5); buildings.get(21).setx(bg.x+83*a); buildings.get(21).sety(bg.y+29*a); buildings.get(21).setbuilding(10); buildings.get(22).setx(bg.x+83*a); buildings.get(22).sety(bg.y+46*a); buildings.get(22).setbuilding(7); } protected [CODE]void paintcomponent(graphics g){[/CODE] super.pa[CODE]intcomponent(g);[/CODE] panelheight = getheight(); panelwidth = getwidth(); setpreferredsize([CODE]new dimension(panelwidth,panelheight));[/CODE] g.setcolor([CODE]new color(237,201,175));[/CODE] g.fillrect(0, 0, panelwidth, panelheight); camera.follow(player, panelwidth, panelheight, 6144,3456); bg.setx(-camera.getx()); bg.sety(-camera.gety()); graphics2d g2d = (graphics2d)g; bg.draw(g); if((!(bg.x>0) && (!(bg.x<-4280)))|| (!(bg.y<-2430) && !(bg.y>0))){ setbuildings(); } [CODE]for (building building : buildings) {[/CODE] building.draw((graphics2d)g); } g2d.translate(player.getx() - camera.getx() + player.getwidth()/2, player.gety() - camera.gety() + player.getheight()/2); g2d.rotate(mouseangle); player.draw(g2d); wavemanager.render((graphics2d)g, camera); [CODE]for (bullet bullet : bullets) {[/CODE] bullet.draw((graphics2d)g); } mousecursor.draw((graphics2d)g, mouseinput.getmousex(), mouseinput.getmousey()); if(settings.rain){ g.drawimage(gif.getimage(), 0, 0, panelwidth, panelheight, null); } g.setcolor(new color(0,0,0,150-(int)player.getfatigue())); g.fillrect(0,0,panelwidth,panelheight); g.setcolor(new color(128,0,0,50-(int)player.gethealth()/2)); g.fillrect(0,0,panelwidth,panelheight); renderui(g, panelwidth, panelheight); if(player.isdead()){ gameover.set(panelwidth, panelheight); gameover.draw((graphics2d)g); } [CODE]if(ispaused){[/CODE] pause.set(panelwidth, panelheight); pause.draw((graphics2d)g); } } [CODE]public void update(){[/CODE] [CODE]if(!ispaused){[/CODE] update2(); } [CODE]else{[/CODE] if(keyinput.isesc()){ rainclip.stop(); musicclip.stop(); musicclip = null; rainclip = null; window.switchtomenu(); } } currenttime = system.currenttimemillis(); pause.update(); repa[CODE]int();[/CODE] if(keyinput.isp() && currenttime - pausetime > 1000){ pausetime = currenttime; ispaused = !ispaused; } } [CODE]public void update2(){[/CODE] repa[CODE]int();[/CODE] //system.out.println(""player position - x: "" + player.getx() + "", y: "" + player.gety()); //system.out.println(bg.getx()); //system.out.println(bg.y); //system.out.println(camera.gety()); if(!player.isdead()){ player.update(); mouseinput.update(); mousecursor.update(); mouseangle = math.pi/2 + math.atan2(mouseinput.getmousey() - (player.gety() - camera.gety() + player.getheight()/2) , mouseinput.getmousex() - (player.getx() - camera.getx() + player.getwidth()/2)); } [CODE]else{[/CODE] gameover.update(); } if (player.getx() < 0) { player.setx(0); } if (player.gety() < 0) { player.sety(0); } if (player.getx() + player.getwidth() > bg.getwidth()) { player.setx(bg.getwidth() - player.getwidth()); } if (player.gety() + player.getheight() > bg.getheight()) { player.sety(bg.getheight() - player.getheight()); } wavemanager.update(); [CODE]for (int i = 0;[/CODE] i < bullets.size(); i++) { bullet b = bullets.get(i); b.update(); if (b.isoutofbounds()) { b.enabled = false; } if(!b.enabled){ bullets.remove(i); i--; } } if(keyinput.isdown()){ player.vely = player.getspeed(); } else if(!keyinput.isup()){ player.vely = 0; } if(keyinput.isup()){ player.vely = player.getspeed() * -1; } else if(!keyinput.isdown()){ player.vely = 0; } if(keyinput.isleft()){ player.velx = player.getspeed() * -1; } else if(!keyinput.isright()){ player.velx = 0; } if(keyinput.isright()){ player.velx = player.getspeed(); } else if(!keyinput.isleft()){ player.velx = 0; } if(keyinput.isr()){ if(currenttime - lastreloadtime > currentweapon.reloadcooldown){ if(currentweapon.magazine>0){ currentweapon.reload(); lastreloadtime = currenttime; } } } if(keyinput.ist() && player.isdead()){ player.sethealth(100); player.setfatigue(100); deadtime = currenttime; gameover = [CODE]new gameover(0, 0, 0, 0);[/CODE] player.score -= 50 * wavemanager.wave; } if(keyinput.isk()){ savemanager.savegame(); } if(keyinput.isp()){ pause = [CODE]new pause(0, 0, 0, 0);[/CODE] } if(keyinput.is1()){ currentweapon = pistol; player.changeimage(currentweapon); weaponimage = currentweapon.image.getimage(); mouseinput = [CODE]new mouseinput(this, currentweapon);[/CODE] addmousemotionlistener(mouseinput); addmouselistener(mouseinput); } if(keyinput.is2() && wavemanager.wave >= rifle.wave){ currentweapon = r[CODE]ifle;[/CODE] player.changeimage(currentweapon); weaponimage = currentweapon.image.getimage(); mouseinput = [CODE]new mouseinput(this, currentweapon);[/CODE] addmousemotionlistener(mouseinput); addmouselistener(mouseinput); } if(keyinput.is3() && wavemanager.wave >= shotgun.wave){ currentweapon = shotgun; player.changeimage(currentweapon); weaponimage = currentweapon.image.getimage(); mouseinput = [CODE]new mouseinput(this, currentweapon);[/CODE] addmousemotionlistener(mouseinput); addmouselistener(mouseinput); } if(keyinput.is4() && wavemanager.wave >= sniper.wave){ currentweapon = sniper; player.changeimage(currentweapon); weaponimage = currentweapon.image.getimage(); mouseinput = [CODE]new mouseinput(this, currentweapon);[/CODE] addmousemotionlistener(mouseinput); addmouselistener(mouseinput); } if(keyinput.is5() && wavemanager.wave >= rocket.wave){ currentweapon = rocket; player.changeimage(currentweapon); weaponimage = currentweapon.image.getimage(); mouseinput = [CODE]new mouseinput(this, currentweapon);[/CODE] addmousemotionlistener(mouseinput); addmouselistener(mouseinput); } if(bg.getx()>1){ bg.setx(0); } if(bg.gety()>1){ bg.sety(0); } if(bg.getx()<-4281){ bg.setx(-4280); } if(bg.gety()<-2431){ bg.sety(-2430); } if(keyinput.isshift() && !player.isdead()){ if(player.getfatigue()>0){ player.setspeed(10); player.setfatigue(player.getfatigue()-0.25); } [CODE]else{[/CODE] player.setspeed(5); } } [CODE]else{[/CODE] player.setspeed(5); player.setfatigue(player.getfatigue()+0.5); } } } import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class uielement extends gameobject {[/CODE] imageicon button; [CODE]public uielement(int x, int y, int width, int height, imageicon imageicon) {[/CODE] super(x, y, width, height); button = imageicon; } [CODE]public void draw(graphics2d g) {[/CODE] g.drawimage(button.getimage(), x, y, width, height, null); } } import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class healthkit extends gameobject{[/CODE] imageicon healthkit = new imageicon(this.getclass().getresource(""/textures/zombies/healthkit.g[CODE]if""));[/CODE] [CODE]public healthkit(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public void draw2(graphics2d g, camera cam) {[/CODE] g.drawimage(healthkit.getimage(), x - cam.x, y - cam.y, width, height, null); } [CODE]public void draw(graphics2d g) {[/CODE] throw [CODE]new unsupportedoperationexception(""unimplemented method 'draw'"");[/CODE] } } import java.io.file; import javax.swing.imageicon; [CODE]public class rifle extends weapon{[/CODE] gamepanel game; [CODE]public rifle(gamepanel game){[/CODE] capacity = 30; currentcapacity = 30; shootspeed = 600; wave = 2; reloadcooldown = 5000; this.game = game; name = ""r[CODE]ifle"";[/CODE] image = new imageicon(""textures/weapons/rifle.png""); bulletimage = new imageicon(this.getclass().getresource(""/textures/weapons/rifle_bullet.png"")); soundpath = new file(""riflesound.wav""); } [CODE]void shoot(int mousex, int mousey) {[/CODE] [CODE]if(currentcapacity>0){[/CODE] if(settings.volume){ playsound(); } currentcapacity -= 1; game.addbullet(mousex, mousey); } } } import java.awt.graphics2d; import java.awt.image; import java.awt.toolkit; import java.io.file; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; [CODE]public class explosion extends gameobject{[/CODE] image explosion; public file explosionpath = new file(""explosionsound.wav""); [CODE]public audioinputstream audioinput;[/CODE] [CODE]public clip clip;[/CODE] [CODE]public explosion(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); explosion = toolkit.getdefaulttoolkit().createimage(this.getclass().getresource(""/textures/weapons/explosion.g[CODE]if""));[/CODE] if(settings.volume){ [CODE]try{[/CODE] audioinput = audiosystem.getaudioinputstream(explosionpath); clip = audiosystem.getclip(); clip.open(audioinput); clip.setframeposition(0); clip.start(); system.out.pr[CODE]intln(""e"");[/CODE] } [CODE]catch(exception e){[/CODE] } } } [CODE]public void draw2(graphics2d g, camera cam) {[/CODE] g.drawimage(explosion, x - cam.x, y - cam.y, width, height, null); } [CODE]public void draw(graphics2d g) {[/CODE] } [CODE]public void update() {[/CODE] } } import java.awt.graphics; import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class background extends gameobject {[/CODE] public imageicon backgroundimage1 = new imageicon(this.getclass().getresource(""/textures/backgrounds/city.png"")); public imageicon black = new imageicon(this.getclass().getresource(""/textures/backgrounds/bg2.png"")); [CODE]public background(int x, int y, int width, int height){[/CODE] super(x, y, width, height); } [CODE]public void update() {[/CODE] } [CODE]public void draw(graphics2d g) {[/CODE] } [CODE]public void draw(graphics g) {[/CODE] g.drawimage(backgroundimage1.getimage(), x, y, width, height, null); g.drawimage(black.getimage(), x, y, width, height, null); } } import java.awt.color; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.geom.affinetrans[CODE]form;[/CODE] import javax.swing.imageicon; [CODE]public class tankzombie extends zombie{[/CODE] private imageicon tankzombieimage = new imageicon(this.getclass().getresource(""/textures/zombies/tankzombie.png"")); [CODE]public tankzombie(int x, int y, player player, camera camera){[/CODE] super(x,y,96,96); this.health = 40; this.speed = 2; this.damage = 0.3; this.player = player; this.camera = camera; this.visible = true; } [CODE]void attack() {[/CODE] if (isnearplayer && player.isplayerattackable()) { player.sethealth(player.gethealth()-damage); //system.out.println(""attack "" + player.gethealth()); } } [CODE]public void update() {[/CODE] double dx = player.x - x; double dy = player.y - y; // i̇ki nokta arasındaki mesafe double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance < 1000){[/CODE] movetowardsplayer(); } attack(); } [CODE]public void draw2(graphics2d g) {[/CODE] [CODE]if (visible) {[/CODE] // oyuncunun merkezi ile zombinin merkezi arasındaki açı double dx = player.getx() + player.getwidth() / 2.0 - (x + width/2); double dy = player.gety() + player.getheight() / 2.0 - (y + height/2); double angle = math.atan2(dy, dx) + math.pi / 2; g.translate(x - camera.getx() + width/2, y - camera.gety() + height/2); g.rotate(angle); g.drawimage(tankzombieimage.getimage(), -width/2, -height/2, width, height, null); g.settrans[CODE]form(new affinetransform());[/CODE] g.setcolor([CODE]new color(215,0,0));[/CODE] g.fillrect(x - camera.getx() + 15, y - camera.gety(), ([CODE]int)((width-30) * (health / 40)), 5);[/CODE] g.setcolor([CODE]new color(255,255,255));[/CODE] g.drawrect(x - camera.getx() + 15, y - camera.gety(), (width-30), 5); } rectangle bounds1 = new rectangle((int) x - camera.x, (int) y - camera.y, width, height); //g.draw(bounds1); } @override [CODE]public void draw(graphics2d g) {[/CODE] // todo auto-generated method stub throw [CODE]new unsupportedoperationexception(""unimplemented method 'draw'"");[/CODE] } } import java.awt.graphics2d; import java.awt.image; import java.awt.toolkit; import java.io.file; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; [CODE]public class acidarea extends gameobject{[/CODE] image acid; public file acidpath = new file(""acid.wav""); [CODE]public audioinputstream audioinput;[/CODE] [CODE]public clip clip;[/CODE] [CODE]public acidarea(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); acid = toolkit.getdefaulttoolkit().createimage(this.getclass().getresource(""/textures/zombies/acid.g[CODE]if""));[/CODE] if(settings.volume){ [CODE]try{[/CODE] audioinput = audiosystem.getaudioinputstream(acidpath); clip = audiosystem.getclip(); clip.open(audioinput); clip.setframeposition(0); clip.start(); system.out.pr[CODE]intln(""e"");[/CODE] } [CODE]catch(exception e){[/CODE] } } } [CODE]public void draw2(graphics2d g, camera cam) {[/CODE] g.drawimage(acid, x - cam.x, y - cam.y, (int)(width*1.5), (int)(height*1.5), null); } [CODE]public void draw(graphics2d g) {[/CODE] } [CODE]public void update() {[/CODE] } } import java.awt.alphacomposite; import java.awt.color; import java.awt.font; import java.awt.graphics2d; import javax.swing.imageicon; [CODE]public class gameover extends gameobject{[/CODE] [CODE]int a;[/CODE] private font u[CODE]ifont;[/CODE] imageicon deadicon = new imageicon(this.getclass().getresource(""/textures/ui/dead.png"")); [CODE]public gameover(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public void set(int w, int h){[/CODE] width = w; height = h; uifont = new font(""courier new"", font.bold, w/40); } [CODE]public void update(){[/CODE] [CODE]if(a<150) a += 3;[/CODE] } [CODE]public void draw(graphics2d g) {[/CODE] g.setcolor([CODE]new color(0,0,0,a));[/CODE] g.fillrect(0, 0, width , height); g.setcolor([CODE]new color(255,255,255));[/CODE] g.setfont(u[CODE]ifont);[/CODE] float alpha = a/150.0f; alphacomposite ac = alphacomposite.getinstance(alphacomposite.src_over,alpha); g.setcomposite(ac); g.drawimage(deadicon.getimage(), width/3, width/8,width/3,width/18, null); g.drawstring(""press 't' for respawn"", width/2 - (int)(width/6.5), height/2); } } import java.awt.cursor; import java.awt.image; import java.awt.po[CODE]int;[/CODE] import java.awt.toolkit; import java.awt.image.memoryimagesource; import java.io.ioexception; import javax.sound.sampled.lineunavailableexception; import javax.sound.sampled.unsupportedaudiofileexception; import javax.swing.imageicon; import javax.swing.jframe; [CODE]public class game{[/CODE] [CODE]static window window;[/CODE] [CODE]public static void main(string[] args) throws ioexception{[/CODE] create(); } [CODE]public static void create(){[/CODE] [CODE]try {[/CODE] window = [CODE]new window();[/CODE] window.start(); window.run(); } [CODE]catch (unsupportedaudiofileexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]catch (lineunavailableexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public static void close(){[/CODE] window.dispose(); } } [CODE]class window extends jframe{[/CODE] private gamepanel gamepanel; private menu menupanel; private thread thread; private boolean running = false; [CODE]public static int width = 960;[/CODE] [CODE]public static int height = 540;[/CODE] [CODE]public static boolean gameon = false;[/CODE] [CODE]public static boolean fs = false;[/CODE] [CODE]public void start(){[/CODE] running = true; thread = [CODE]new thread();[/CODE] thread.start(); } [CODE]public void run(){[/CODE] [CODE]while(running){[/CODE] update(); repa[CODE]int();[/CODE] [CODE]try{[/CODE] thread.sleep(16); } [CODE]catch(interruptedexception e){[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } private [CODE]void update(){[/CODE] [CODE]if(gameon && gamepanel!=null){[/CODE] gamepanel.update(); } [CODE]else{[/CODE] menupanel.update(); } setsize(width,height); } [CODE]public cursor pointer(){[/CODE] [CODE]int[] pixels = new int[16 * 16];[/CODE] image image = toolkit.getdefaulttoolkit().createimage([CODE]new memoryimagesource(16, 16, pixels, 0, 16));[/CODE] cursor transparentcursor = toolkit.getdefaulttoolkit().createcustomcursor(image, [CODE]new point(0, 0), ""invisiblecursor"");[/CODE] [CODE]return transparentcursor;[/CODE] } gamesavemanager savemanager = [CODE]new gamesavemanager();[/CODE] [CODE]public window() throws unsupportedaudiofileexception, ioexception, lineunavailableexception{[/CODE] [CODE]if(gameon){[/CODE] gamepanel = [CODE]new gamepanel(this);[/CODE] add(gamepanel); } [CODE]else{[/CODE] menupanel = [CODE]new menu(this);[/CODE] add(menupanel); } imageicon gameicon = new imageicon(this.getclass().getresource(""/textures/icon.png"")); setsize(width,height); setlocation((int)toolkit.getdefaulttoolkit().getscreensize().getwidth()/2 - width/2, (int)toolkit.getdefaulttoolkit().getscreensize().getheight()/2 - height/2); //setextendedstate(jframe.maximized_both); //tam ekran i̇çi̇n setundecorated(fs); setdefaultcloseoperation(exit_on_close); settitle(""gravewave""); seticonimage(gameicon.getimage()); setcursor(po[CODE]inter());[/CODE] setvisible(true); setresizable(false); savemanager.loadsettings(); if(settings.fullscreen){ fs = false; fullscreen(); changesize((int)toolkit.getdefaulttoolkit().getscreensize().getwidth(), (int)toolkit.getdefaulttoolkit().getscreensize().getheight()); } [CODE]else{[/CODE] fs = true; changesize(960, 540); fullscreen(); } } [CODE]public void switchtomenu() {[/CODE] gameon = false; game.close(); game.create(); } [CODE]public void changesize(int w, int h){[/CODE] width = w; height = h; } [CODE]public void fullscreen(){[/CODE] [CODE]if(!fs){[/CODE] dispose(); fs = true; setundecorated(true); setextendedstate(maximized_both); setvisible(true); } [CODE]else{[/CODE] dispose(); fs = false; setundecorated(false); setlocationrelativeto(null); setvisible(true); } } } import java.awt.event.mouseadapter; import java.awt.event.mouseevent; import javax.swing.jpanel; [CODE]public class mouseinput extends mouseadapter{[/CODE] private [CODE]int mousex, mousey;[/CODE] private jpanel game; [CODE]public boolean ismousepressed;[/CODE] weapon weapon; private long lastbullettime = 0; [CODE]public static long bulletfireinterval = 500;[/CODE] [CODE]public void update(){[/CODE] long currenttime = system.currenttimemillis(); [CODE]if(ismousepressed && game instanceof gamepanel){[/CODE] [CODE]if(currenttime - lastbullettime >= bulletfireinterval){[/CODE] lastbullettime = currenttime; weapon.shoot(mousex, mousey); } } } [CODE]public mouseinput(jpanel game, weapon weapon){[/CODE] this.game = game; this.weapon = weapon; bulletfireinterval = (long)(60.0/weapon.shootspeed*1000); } [CODE]public mouseinput(jpanel game){[/CODE] this.game = game; } [CODE]public int getmousex(){[/CODE] [CODE]return mousex;[/CODE] } [CODE]public int getmousey(){[/CODE] [CODE]return mousey;[/CODE] } [CODE]public void mousemoved(mouseevent e) {[/CODE] mousex = e.getx(); mousey = e.gety(); } [CODE]public void mousedragged(mouseevent e) {[/CODE] mousex = e.getx(); mousey = e.gety(); } [CODE]public void mousepressed(mouseevent e) {[/CODE] ismousepressed = true; } [CODE]public void mousereleased(mouseevent e){[/CODE] ismousepressed = false; } } import java.awt.graphics2d; [CODE]public class camera extends gameobject{[/CODE] [CODE]public camera(int x, int y, int width, int height) {[/CODE] super(x, y, width, height); } [CODE]public void update() {[/CODE] } [CODE]public void draw(graphics2d g) {[/CODE] } [CODE]public void follow(gameobject gameobject, int panelwidth, int panelheight, int bgwidth, int bgheight) {[/CODE] x += ((gameobject.getx() - x) - panelwidth / 2 + gameobject.getwidth() / 2) * 0.05f; y += ((gameobject.gety() - y) - panelheight / 2 + gameobject.getheight() / 2) * 0.05f; [CODE]if (x < 0) {[/CODE] x = 0; } [CODE]if (x > bgwidth - panelwidth) {[/CODE] x = bgwidth - panelwidth; } [CODE]if (y < 0) {[/CODE] y = 0; } [CODE]if (y > bgheight - panelheight) {[/CODE] y = bgheight - panelheight; } } } import java.io.file; import javax.swing.imageicon; [CODE]public class rocketlauncher extends weapon{[/CODE] gamepanel game; [CODE]public rocketlauncher(gamepanel game){[/CODE] capacity = 1; currentcapacity = 1; shootspeed = 10; speed = 10; wave = 11; reloadcooldown = 5000; this.game = game; name = ""rocket launcher""; image = new imageicon(""textures/weapons/rocket launcher.png""); bulletimage = new imageicon(this.getclass().getresource(""/textures/weapons/rocket_bullet.png"")); soundpath = new file(""rocketsound.wav""); } [CODE]void shoot(int mousex, int mousey) {[/CODE] [CODE]if(currentcapacity>0){[/CODE] if(settings.volume){ playsound(); } currentcapacity -= 1; game.addbullet(mousex, mousey); } } } [CODE]public class settings {[/CODE] [CODE]public static boolean fullscreen, rain = true, extreme, volume = true;[/CODE] } import java.awt.graphics2d; import java.awt.rectangle; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.io.file; import javax.sound.sampled.audioinputstream; import javax.sound.sampled.audiosystem; import javax.sound.sampled.clip; import javax.swing.imageicon; [CODE]public class player extends gameobject {[/CODE] private [CODE]int speed;[/CODE] private imageicon playerimage = new imageicon(this.getclass().getresource(""/textures/player/player_pistol.png"")); private imageicon pistolplayer = new imageicon(this.getclass().getresource(""/textures/player/player_pistol.png"")); private imageicon rifleplayer = new imageicon(this.getclass().getresource(""/textures/player/player_rifle.png"")); private imageicon shotgunplayer = new imageicon(this.getclass().getresource(""/textures/player/player_shotgun.png"")); private imageicon sniperplayer = new imageicon(this.getclass().getresource(""/textures/player/player_sniper.png"")); private imageicon rocketplayer = new imageicon(this.getclass().getresource(""/textures/player/player_rocket.png"")); [CODE]public double velx, vely;[/CODE] private double health; private double fatigue; private gamepanel gamepanel; [CODE]public boolean collusion = false;[/CODE] [CODE]public int score;[/CODE] public file path = new file(""collectsound.wav""); [CODE]public audioinputstream audioinput;[/CODE] [CODE]public clip clip;[/CODE] [CODE]public player(int x, int y, int width, int height, int speed, gamepanel gamepanel) {[/CODE] super(x, y, width, height); this.speed = speed; this.gamepanel = gamepanel; health = 100; fatigue = 100; } [CODE]public void changeimage(weapon weapon){[/CODE] [CODE]if(weapon instanceof pistol){[/CODE] playerimage = pistolplayer; } [CODE]if(weapon instanceof rifle){[/CODE] playerimage = r[CODE]ifleplayer;[/CODE] } [CODE]if(weapon instanceof shotgun){[/CODE] playerimage = shotgunplayer; } [CODE]if(weapon instanceof sniper){[/CODE] playerimage = sniperplayer; } [CODE]if(weapon instanceof rocketlauncher){[/CODE] playerimage = rocketplayer; } } [CODE]public boolean isplayerattackable(){[/CODE] return gamepanel.currenttime - gamepanel.deadtime > 3000; } [CODE]public void update() {[/CODE] [CODE]if(health > 100){[/CODE] health = 100; } [CODE]if(health < 0){[/CODE] health = 0; } x += velx; y += vely; collusion = false; for(building building: gamepanel.buildings){ if(checkcollusion(gamepanel.camera, building)){ collusion = true; [CODE]if (velx > 0) {[/CODE] x -= velx; velx = 0; } [CODE]if (velx < 0) {[/CODE] x -= velx; velx = 0; } [CODE]if (vely > 0) {[/CODE] y -= vely; vely = 0; } [CODE]if (vely < 0) {[/CODE] y -= vely; vely = 0; } } } [CODE]for(int i = 0;[/CODE] i < gamepanel.wavemanager.healthkits.size(); i++){ if(checkcollusion(gamepanel.camera, gamepanel.wavemanager.healthkits.get(i))){ gamepanel.wavemanager.healthkits.remove(gamepanel.wavemanager.healthkits.get(i)); health += 10; score += gamepanel.wavemanager.wave*3; i--; if(settings.volume){ [CODE]new thread(() -> {[/CODE] [CODE]try{[/CODE] audioinput = audiosystem.getaudioinputstream(path); clip = audiosystem.getclip(); clip.open(audioinput); clip.setframeposition(0); clip.start(); system.out.pr[CODE]intln(""c"");[/CODE] } [CODE]catch(exception e){[/CODE] } }).start(); } } } [CODE]for(int i = 0;[/CODE] i < gamepanel.wavemanager.magazines.size(); i++){ if(checkcollusion(gamepanel.camera, gamepanel.wavemanager.magazines.get(i))){ gamepanel.wavemanager.magazines.remove(gamepanel.wavemanager.magazines.get(i)); if(!(gamepanel.currentweapon instanceof pistol)){ gamepanel.currentweapon.magazine += gamepanel.currentweapon.capacity; } score += gamepanel.wavemanager.wave *3; i--; if(settings.volume){ [CODE]new thread(() -> {[/CODE] [CODE]try{[/CODE] audioinput = audiosystem.getaudioinputstream(path); clip = audiosystem.getclip(); clip.open(audioinput); clip.setframeposition(0); clip.start(); system.out.pr[CODE]intln(""c"");[/CODE] } [CODE]catch(exception e){[/CODE] } }).start(); } } } //system.out.pr[CODE]intln(x);[/CODE] //system.out.println(gamepanel.buildings.get(0).getx() + "" "" + gamepanel.buildings.get(0).gety()); } [CODE]public int getspeed(){[/CODE] [CODE]return speed;[/CODE] } [CODE]public void setspeed(int speed){[/CODE] this.speed = speed; } [CODE]public void draw(graphics2d g) {[/CODE] [CODE]if(visible){[/CODE] g.drawimage(playerimage.getimage(), -width/2, -height/2, width, height, null); g.settrans[CODE]form(new affinetransform());[/CODE] } rectangle bounds1 = new rectangle((int) x - gamepanel.camera.x + (int)velx, (int) y - gamepanel.camera.y + ([CODE]int)vely, width, height);[/CODE] //g.draw(bounds1); } [CODE]public double gethealth(){[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(double health){[/CODE] this.health = health; } [CODE]public double getfatigue(){[/CODE] [CODE]return fatigue;[/CODE] } [CODE]public void setfatigue(double fatigue){[/CODE] if(this.fatigue<=100){ this.fatigue = fatigue; } if(this.fatigue>100){ this.fatigue = 100; } } [CODE]public boolean isdead(){[/CODE] [CODE]return health<=0;[/CODE] } } import java.awt.graphics2d; import java.awt.rectangle; [CODE]public abstract class gameobject {[/CODE] protected [CODE]int x, y;[/CODE] protected [CODE]int width, height;[/CODE] protected boolean visible; protected double velx, vely; [CODE]public gameobject(int x, int y, int width, int height){[/CODE] this.x = x; this.y = y; this.width = width; this.height = height; this.visible = true; } [CODE]public abstract void update();[/CODE] [CODE]public abstract void draw(graphics2d g);[/CODE] [CODE]public boolean isvisible(){[/CODE] [CODE]return visible;[/CODE] } [CODE]public void setvisible(boolean visible){[/CODE] this.visible = visible; } [CODE]public int getx(){[/CODE] [CODE]return x;[/CODE] } [CODE]public int gety(){[/CODE] [CODE]return y;[/CODE] } [CODE]public void setx(int x){[/CODE] this.x = x; } [CODE]public void sety(int y){[/CODE] this.y = y; } [CODE]public void setwidth(int width){[/CODE] this.width = width; } [CODE]public void setheight(int height){[/CODE] this.height = height; } [CODE]public int getwidth(){[/CODE] [CODE]return width;[/CODE] } [CODE]public int getheight(){[/CODE] [CODE]return height;[/CODE] } [CODE]public boolean checkcollusion(camera camera, gameobject other) {[/CODE] rectangle bounds1 = [CODE]new rectangle((int) x, (int) y, width, height);[/CODE] rectangle bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); [CODE]if(this instanceof player && other instanceof building){[/CODE] bounds1 = new rectangle((int) x - camera.x + (int)velx*2, (int) y - camera.y + ([CODE]int)vely*2, width, height);[/CODE] bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } [CODE]if(other instanceof zombie && this instanceof bullet){[/CODE] bounds2 = new rectangle((int) other.getx() - camera.x, (int) other.gety() - camera.y, other.getwidth(), other.getheight()); } [CODE]if(this instanceof zombie && other instanceof building){[/CODE] bounds1 = new rectangle((int) x - camera.x + (int)velx*2, (int) y - camera.y + ([CODE]int)vely*2, width - 10, height - 10);[/CODE] bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } [CODE]if(this instanceof bullet && other instanceof building){[/CODE] bounds1 = [CODE]new rectangle((int) x, (int) y, width, height);[/CODE] bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } [CODE]if(this instanceof player && (other instanceof healthkit || other instanceof magazine)){[/CODE] bounds1 = [CODE]new rectangle((int) x, (int) y, width, height);[/CODE] bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } [CODE]if(this instanceof explosion && other instanceof zombie){[/CODE] bounds1 = [CODE]new rectangle((int) x, (int) y, width, height);[/CODE] bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } [CODE]if(this instanceof acidarea && other instanceof zombie){[/CODE] bounds1 = [CODE]new rectangle((int) x, (int) y, width, height);[/CODE] bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } [CODE]if(this instanceof player && other instanceof acid){[/CODE] bounds1 = new rectangle((int) x - camera.x, (int) y - camera.y, width, height); bounds2 = new rectangle((int) other.getx(), (int) other.gety(), other.getwidth(), other.getheight()); } return bounds1.[CODE]intersects(bounds2);[/CODE] } }"
5281670,"müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar{[/CODE] calmastratejisi strateji ; [CODE]void setstrateji(calmastratejisi s){[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki){[/CODE] metalsarki castedotherobj = (metalsarki) sarki; castedotherobj.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]public class metalsarki extends sarki{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] super(isim,sanatci); this.metalozellik = metalozellik; } @override [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim +"" (enstrumantal)"");[/CODE] } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatci + "" - "" + isim + "" [ozellik: ]"" + metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] super(isim, sanatci); } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.arraylist; import java.util.collection; import java.util.collections; import java.util.list; import java.util.random; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] list<[CODE]integer> numbers = new arraylist<>();[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { numbers.add(i); } collections.shuffle(numbers); [CODE]for (int index : numbers) {[/CODE] sarkilistesi.get(index).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 0;[/CODE] i < sarkilistesi.size() ; i++){ sarkilistesi.get(i).oynat(); } } } abstract [CODE]public class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] [CODE]public sarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for(int i = 1;[/CODE] i < sarkilistesi.size() ; ++i){ if(sarkilistesi.get(i) instanceof rocksarki ){ system.out.pr[CODE]intln(""[bilgi] ses duzeyi : yuksek"");[/CODE] sarkilistesi.get(i).oynat(); if(sarkilistesi.get(i + 1) instanceof rocksarki){ sarkilistesi.get(i).oynat(); system.out.pr[CODE]intln(""[bilgi] ses duzeyi : normal"");[/CODE] ++i; } } sarkilistesi.get(i).oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 4 import java.io.*; import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]try {[/CODE] list<string> kelimeler = dosyaoku(""kelimeler.txt""); list<string> metin = dosyaoku(""metin.txt""); [CODE]int[] kelimesayisi = kelimelerisay(kelimeler, metin);[/CODE] dosyayaz(""sonuc.txt"", kelimeler, kelimesayisi); } [CODE]catch (inputexception e) {[/CODE] system.err.println(e.getmessage()); } } [CODE]public static int[] kelimelerisay(list<string> kelimeler, list<string> metin) throws kelimebulunamadiexception {[/CODE] int[] kelimesayisi = new int[kelimeler.size()]; [CODE]for (string satir : metin) {[/CODE] string[] kelimelerdizisi = satir.tolowercase().split(""\\p{punct}""); [CODE]for (int i = 0;[/CODE] i < kelimelerdizisi.length-1; i++) { string removed = kelimelerdizisi[i].replaceall(""\\p{punct}"" , """"); [CODE]for (int j = 0;[/CODE] j < kelimeler.size(); j++) { if (removed.equals(kelimeler.get(j))) { kelimesayisi[j]++; } } } } [CODE]for (int i = 0;[/CODE] i < kelimeler.size(); i++) { [CODE]if (kelimesayisi[i] == 0) {[/CODE] throw new kelimebulunamadiexception(kelimeler.get(i)); } } [CODE]return kelimesayisi;[/CODE] } [CODE]public static list<string> dosyaoku(string dosyaadi) throws inputexception {[/CODE] file dosya = [CODE]new file(dosyaadi);[/CODE] list<[CODE]string> satirlar = new arraylist<>();[/CODE] [CODE]try (bufferedreader reader = new bufferedreader(new filereader(dosya))) {[/CODE] [CODE]string satir;[/CODE] while ((satir = reader.readline()) != null) { satir = satir.tolowercase(); if (!satir.isempty()) { satirlar.add(satir); } } } [CODE]catch (ioexception e) {[/CODE] system.err.pr[CODE]intln(""dosya okunurken hata oldu"");[/CODE] } if (satirlar.isempty()) { throw [CODE]new bosdosyaexception(dosyaadi);[/CODE] } [CODE]return satirlar;[/CODE] } [CODE]public static void dosyayaz(string dosyaadi, list<string> kelimeler, int[] kelimesayilari) {[/CODE] [CODE]try (printwriter writer = new printwriter(new filewriter(dosyaadi))) {[/CODE] [CODE]for (int i = 0;[/CODE] i < kelimeler.size(); i++) { [CODE]if (kelimesayilari[i] > 0) {[/CODE] writer.println(kelimeler.get(i) + "" "" + kelimesayilari[i]); } } } [CODE]catch (ioexception e) {[/CODE] system.err.pr[CODE]intln(""dosya yazilirken hata oldu"");[/CODE] } } } [CODE]class kelimebulunamadiexception extends inputexception{[/CODE] [CODE]public kelimebulunamadiexception(string kelime) {[/CODE] super(""hata: "" + kelime + "" metinde bulunamadi""); } } [CODE]class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(string dosyaadi) {[/CODE] super(""hata: "" + dosyaadi + "" bos""); } } [CODE]public class inputexception extends exception{[/CODE] [CODE]public inputexception(string message){[/CODE] super(message); } } [CODE]public class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(string dosyaadi) {[/CODE] super(""hata: "" + dosyaadi + "" bulunamadi""); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.arraylist; import java.util.list; [CODE]class inventory<t extends item> {[/CODE]//asistan ok dedi private list<t> items = [CODE]new arraylist<>();[/CODE] [CODE]public void additem(t item){[/CODE] items.add(item); } [CODE]public void removeitem(t item){[/CODE] items.remove(item); } [CODE]public void printinventory(){[/CODE] [CODE]for(t item : items){[/CODE] system.out.println(item.getname()); } } int max = integer.min_value; t maxitem; [CODE]public t mostvalueableitem(){[/CODE] [CODE]for(t item : items){[/CODE] if(item.getvalue() > max){ max = item.getvalue(); maxitem = item; } } [CODE]return maxitem;[/CODE] } [CODE]public t finditembyname(string name){[/CODE] [CODE]for(t item : items){[/CODE] if(item.getname().equals(name)){ [CODE]return item;[/CODE] } } [CODE]return null;[/CODE] } [CODE]public list<t> finditemsbyvalue(int value) {[/CODE] list<t> valuelist = [CODE]new arraylist<>();[/CODE] [CODE]for(t item : items){[/CODE] if(item.getvalue() > value){ valuelist.add(item); } } [CODE]return valuelist;[/CODE] } [CODE]public int gettotalvalue(){[/CODE] [CODE]int sum = 0;[/CODE] [CODE]for(t item : items){[/CODE] sum += item.getvalue(); } [CODE]return sum;[/CODE] } [CODE]public list<t> filterbytype(class<?> type){[/CODE] list<t> filteritems = [CODE]new arraylist<>();[/CODE] [CODE]for (t item : items) {[/CODE] if (type.isinstance(item)) { filteritems.add(item); } } [CODE]return filteritems;[/CODE] } [CODE]public int gettotalweapondamage(){[/CODE] [CODE]int sum = 0;[/CODE] [CODE]for (t item : items) {[/CODE] [CODE]if (item instanceof weapon) {[/CODE] sum += item.getvalue(); } } [CODE]return sum;[/CODE] } [CODE]public void sortbyvalue(){[/CODE] [CODE]for (int i = 0;[/CODE] i < items.size() - 1; i++) { [CODE]for (int j = 0;[/CODE] j < items.size()-1-i; j++) { // jnin sinirindan emiin degilim kontrol et!! if (items.get(j).getvalue() < items.get(j + 1).getvalue()) { t temp = items.get(j); items.set(j, items.get(j + 1)); items.set(j + 1, temp); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item>inventory){[/CODE] inventory.sortbyvalue(); // azalan sekilde siraliyor ilk eleman en buyuk olan olur system.out.println(inventory.items.get(0).getname()); } [CODE]public static void transferarmor(inventory<? super armor> destination,inventory<armor> source){[/CODE] list<armor> armors = source.filterbytype(armor.[CODE]class);[/CODE] [CODE]for (armor armor : armors) {[/CODE] destination.additem(armor); } source.items.removeall(armors); // source da bir inventory o yuzden yapabildin } } [CODE]public class weapon implements item {[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int damage;[/CODE] [CODE]public weapon(string name, int value, int damage) {[/CODE] this.name = name; this.value = value; this.damage = damage; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]interface item{[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]public class armor implements item{[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense) {[/CODE] this.name = name; this.value = value; this.defense = defense; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]public class potion implements item{[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]string effect;[/CODE] [CODE]public potion(string name, int value, string effect) {[/CODE] this.name = name; this.value = value; this.effect = effect; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } //tum metotlar calısıyor asistan hepsini mainde gostermek zorunda degilsiniz dedigi icin birkacini gosterdim [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sinif adi: "" + weaponclass.getname()); weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon //itemdan olusan inventory<item> inventory = [CODE]new inventory<>();[/CODE] inventory.additem([CODE]new weapon(""kilic"", 600, 500));[/CODE] inventory.additem([CODE]new armor(""kalkan"", 400, 400));[/CODE] inventory.additem([CODE]new potion(""zehir"", 100, ""zehirle""));[/CODE] inventory.additem([CODE]new weapon(""kilic2"", 100, 9));[/CODE] inventory.additem(sword); inventory.additem([CODE]new weapon(""iclal"",2900 , 8));[/CODE] inventory.removeitem(sword); system.out.pr[CODE]intln(""envanter:"");[/CODE] inventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""en degerli item:"");[/CODE] inventory.pr[CODE]intmostvaluableitem(inventory);[/CODE] system.out.pr[CODE]intln(""toplam weapon damage:"");[/CODE] system.out.println(inventory.gettotalweapondamage()); system.out.println(""toplam value: "" + inventory.gettotalvalue()); system.out.pr[CODE]intln(""olmayan bir itemi bul"");[/CODE] system.out.println(inventory.finditembyname(""yok"")); system.out.pr[CODE]intln();[/CODE] //weapondan olusan inventory<weapon> inventory2 = [CODE]new inventory<>();[/CODE] inventory2.additem([CODE]new weapon(""kilic2"", 100, 9));[/CODE] inventory2.additem(sword); inventory2.additem([CODE]new weapon(""iclal"",2900 , 8));[/CODE] system.out.pr[CODE]intln(""envanter2:"");[/CODE] inventory2.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""en degerli item:"");[/CODE] inventory.pr[CODE]intmostvaluableitem(inventory2);[/CODE] system.out.pr[CODE]intln(""toplam weapon damage:"");[/CODE] system.out.println(inventory2.gettotalweapondamage()); system.out.println(""toplam value: "" + inventory2.gettotalvalue()); system.out.pr[CODE]intln();[/CODE] //tran[CODE]forarmor inventory<? super armor> inventory3 = new inventory<>();[/CODE] inventory<armor> inventory4 = [CODE]new inventory<>();[/CODE] inventory4.additem([CODE]new armor(""zirh1"" , 100 , 20));[/CODE] inventory4.additem([CODE]new armor(""zirh2"" ,200 , 20));[/CODE] inventory4.additem([CODE]new armor(""zirh3"" , 300 , 20));[/CODE] inventory4.additem([CODE]new armor(""zirh4"" , 400 , 20));[/CODE] inventory3.additem([CODE]new armor(""kalkan"", 400, 400));[/CODE] system.out.pr[CODE]intln(""transferden önce inventory3"");[/CODE] inventory3.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""transferden önce inventory4"");[/CODE] inventory4.pr[CODE]intinventory();[/CODE] inventory.transferarmor(inventory3, inventory4); system.out.pr[CODE]intln(""transferden sonra inventory3"");[/CODE] inventory3.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""transferden sonra inventory4"");[/CODE] inventory4.pr[CODE]intinventory();[/CODE] } } ""recursion"" kavramı nedir, kısaca açıklayınız. recursion bir methodun kendini çağırması kavramıdır recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case recursive call jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. her bir call yapıldığında stacke o methodun variableları ve kendisi çağrılır ve en baştan başlayarak methodlar çalıştırılır [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. iterat[CODE]if olarak yapmak daha az yer ve zaman kullanımına sebep olacaktır bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? stringin uzunluğunun sıfıra eşit olup olmadığına bakmak stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack metod çağrıldığında variablelarının saklandığı ve kullanımı bitince çıktığı yerdir eşer method çok kez çağrılırsa stack overflow olur tail recursion nedir, kısaca açıklayınız. - java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? static binding compiler time dynamic run time java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? çünkü override edilemezler dolayısı ile derleme zamanında sınıf üzerinden çözülür overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overriding run time overloading compile time dinamik bağlamada jvm'nin görevi nedir? hangi metotun çağrılacağını nesnenin gerçek türüne göre belirlemek java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? upcasting bir child class nesnesinin üst sınıfın referansında saklanmasıdır downcastibg bir üst sınıf referansının alt sonıf türüne çevirmektir java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? override edilme özelliği kaybolurdu , gereksiz bellek kullanımı olurdu class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child // dynamic [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book // dynamic java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlardan nesne oluşturulamaz , evet olabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır yapılamaz abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. genellikle bi şablon görevi görürler , tamamen veya kısmen tamamlanmış metotlar içerebilirler, abstract [CODE]classlardan nesne oluşturulamaz abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? [CODE]interfacelerde değişkenler final değerlerini alırlar abstract classlar isle sonradan implement edilebilecek şablonlar gibi düşünülebilir o yüzden böyle bi zorunluluk yoktur , abstract classlar kullanılabilir interfaceler kullanılamaz marker interface ve functional interface kavramları nedir, nasıl kullanılır? - bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet ikisi de mümkündür abstract class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? c is a shape ama shape in draw metodu implement edilmemiş bunun yerine circle c = [CODE]new circle() denilirse drawing circle displaying çıktısı verir interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? - text file ile binary file arasındaki fark nedir? text dosyaları insan tarafından okunabilir karakterler içerir, binary dosyalar ise makine tarafından okunabilen 0 ve 1lerden oluşan veri saklar. bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? veri kaybına yazma işlemi tamamlanmadan programın kapanması durumunda eksikliğe yol açabilir binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? serializable interfacei metodu yoktur çünkü marker binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? evet dataoutputstream veya objectoutputstream kullanarak buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? bufferedreader.readline() ve scanner.hasnext() metotları ile binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? -- [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] _______ f = new _______(""numbers.bin"", ""____""); f.write[CODE]int(10);[/CODE] f.write[CODE]int(20);[/CODE] int a = f.read[CODE]int();[/CODE] f.seek(_____________); int b = f.read[CODE]int();[/CODE] system.out.pr[CODE]intln(a + b);[/CODE] f.close(); } } boşluklara sırasıyla ne gelmelidir? output? randomaccessfile , new randomaccessfile(""numbers.bin"", ""rw"") ,4 output 30 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); ______________ pw = [CODE]new ______________(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] pw.close(); } } boşluklara sırasıyla ne gelmelidir? bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir? printwriter , printwriter(fos) new log entry append edilir what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cc java'da generic kavramı nedir, bu kavramın temel amacı nedir? generic kavramı tipe bağlı olmadan metot ya da class tanımlamaktır , amaç kod döngüsünü sağlamaktır upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. — generic bir classın constructorunda type parametresi bulunur mu, neden? bulunamaz mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. object olan a olanın parentıdır. java’da her şey obje [CODE]classından türer class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. tnin array şeklinde başlatılmış olması hata. swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? a b a null [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. list<t> bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] //a=65 a=97 private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(){[/CODE] this.name = ""wall-e""; this.type = ""trash""; this.batterylevel = 100; this.isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; [CODE]if(batterylevel > 0){[/CODE] isoperational = true; } [CODE]else{[/CODE] isoperational = false; } } [CODE]public string getname() {[/CODE] [CODE]return name ;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbattery() {[/CODE] [CODE]return batterylevel ;[/CODE] } [CODE]public void setbattery(int batterylevel) {[/CODE] this.batterylevel = batterylevel ; } [CODE]public boolean getisop() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisop(boolean isoperational ) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] this.batterylevel = 100; } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""% "" + "" is\r\n"" + // ""operational:"" + isoperational);[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class question1 {[/CODE] //q1 dedigimde compiler sorun cikardi caner hoca sebebnini bilmiyorum dedigi icin question1 seklinde adlandirdim [CODE]public static void main(string[] args) {[/CODE] [CODE]string s = findperm(""abc"" , 0);[/CODE] system.out.pr[CODE]intln(s);[/CODE] [CODE]string s1 = findperm(""ab"" , 0);[/CODE] system.out.pr[CODE]intln(s1);[/CODE] [CODE]string s2 = findperm(""a12b"" , 0);[/CODE] system.out.pr[CODE]intln(s2);[/CODE] } [CODE]public static string findperm(string s , int i){[/CODE] char c = 'x'; if(i >= s.length()) [CODE]return """";[/CODE] if(s.charat(i) != '0' && s.charat(i) != '1' && s.charat(i) != '2' && s.charat(i) != '3' && s.charat(i) != '4' && s.charat(i) != '5' && s.charat(i) != '6' && s.charat(i) != '7' && s.charat(i) != '8' && s.charat(i) != '9' ){ if(s.charat(i) <= 'z' && s.charat(i) >= 'a'){ c = (char) (s.charat(i) - 'a'); return c + findperm(s.sub[CODE]string(i+1) , i+1) ;[/CODE] } if(s.charat(i) <= 'z' && s.charat(i) >= 'a'){ c = (char) (s.charat(i) + 32); return c + findperm(s.sub[CODE]string(i+1) , i+1);[/CODE] } } [CODE]else{[/CODE] return s.charat(i) + findperm(s.sub[CODE]string(i+1) , i+2) ;[/CODE] } [CODE]return """";[/CODE] } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] this.name = ""factory1""; this.location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname() {[/CODE] [CODE]return name ;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getloc() {[/CODE] [CODE]return location ;[/CODE] } [CODE]public void setloc(string location) {[/CODE] this.location = location; } [CODE]public void addrobot(robot robot){[/CODE] this.robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for(int i = 0 ;[/CODE] i < robots.size(); i++){ robots.get(i).charge(); } } [CODE]public void printfactory(){[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for(int i = 0 ;[/CODE] i < robots.size(); i++){ robots.get(i).pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery{[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] //??? // burada robotfactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz factory.allrobots(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } @override [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } [CODE]int keeper = getbatterylife();[/CODE] @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = keeper;[/CODE] } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... armed: "" + isarmed); this.batteryl[CODE]ife-=10;[/CODE] } else if(this.batteryl[CODE]ife < 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] if(this.isarmed){ this.isarmed = false; } [CODE]else{[/CODE] this.isarmed = true; } } [CODE]public boolean isarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]int keeper = getbatterylife();[/CODE] [CODE]public cleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public int getbatterylife() {[/CODE] return this.batteryl[CODE]ife;[/CODE] } @override [CODE]public void recharge() {[/CODE] this.batteryl[CODE]ife = keeper;[/CODE] } @override [CODE]public void performtask() {[/CODE] if(this.batteryl[CODE]ife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress... cleaning power: "" + cleaningpower); this.batteryl[CODE]ife-=10;[/CODE] } else if(this.batteryl[CODE]ife < 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean..."" ); } } [CODE]public void boostcleaningpower(){[/CODE] this.cleaningpower += 50; } [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower) {[/CODE] this.cleaningpower = cleaningpower; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots; [CODE]static int totalproduced = 0;[/CODE] [CODE]public robotfactory() {[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] totalproduced++; robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] totalproduced++; robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] } [CODE]public void performalltasks(){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ system.out.println(""securityrobot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", armed: "" + ((securityrobot) robots.get(i)).isarmed()); } if(robots.get(i) instanceof cleaningrobot){ system.out.println(""cleaningrobot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", cleaning power: "" + ((cleaningrobot) robots.get(i)).getcleaningpower()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof cleaningrobot){ ((cleaningrobot) robots.get(i)).setcleaningpower(((cleaningrobot) robots.get(i)).getcleaningpower() + miktar); system.err.println(""cleaningrobot - "" + robots.get(i).getmodelname() +"" now has cleaning power: "" + ((cleaningrobot) robots.get(i)).getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for(int i= 0;[/CODE] i < robots.size(); i++){ if(robots.get(i) instanceof securityrobot){ securityrobot s = (securityrobot)robots.get(i); s.togglearmedmode(); if(s.isarmed()){ system.out.println(""securityrobot - "" + s.getmodelname() + "" is now armed""); } [CODE]else{[/CODE] system.out.println(""securityrobot - "" + s.getmodelname() + "" is now unarmed""); } } } } [CODE]public void allrobots(){[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalproduced + "" robot uretildi\r"");[/CODE] } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 import java.io.*; import java.util.*; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] try (scanner scanner = new scanner(system.in)) { list<envanterkaydi> envanter = [CODE]new arraylist<>();[/CODE] [CODE]while (true) {[/CODE] system.out.println(""\n1. eşya ekleme""); system.out.println(""2. eşya çikarma""); system.out.println(""3. stok güncelleme""); system.out.println(""4. envanter listeleme""); system.out.println(""5. dosyaya kaydetme""); system.out.println(""6. dosyadan geri yükle""); system.out.println(""7. çikiş""); system.out.pr[CODE]int(""seçim: "");[/CODE] int secim = scanner.next[CODE]int();[/CODE] scanner.nextline(); [CODE]try{[/CODE] [CODE]if(secim == 1){[/CODE] system.out.pr[CODE]int(""eşya adi: "");[/CODE] string isim = scanner.nextline(); system.out.pr[CODE]int(""başlangiçtaki stoğu: "");[/CODE] int stok = scanner.next[CODE]int();[/CODE] boolean varmi = false; [CODE]for(int i=0 ;[/CODE] i < envanter.size(); i++){ if(envanter.get(i).getisim().equals(isim)){ varmi = true; envanter.get(i).stokguncelle(stok); } } [CODE]if(!varmi){[/CODE] envanter.add([CODE]new envanterkaydi(isim, stok));[/CODE] } } [CODE]if(secim == 2){[/CODE] system.out.pr[CODE]int(""çikarilacak eşya adi: "");[/CODE] string isim = scanner.nextline(); boolean varmi = false; [CODE]for(int i=0 ;[/CODE] i < envanter.size(); i++){ if(envanter.get(i).getisim().equals(isim)){ varmi = true; envanter.remove(i); break; } } [CODE]if(!varmi){[/CODE] system.out.pr[CODE]intln(""böyle bir eşya yok"");[/CODE] } } [CODE]if(secim == 3){[/CODE] system.out.pr[CODE]int(""eşya adi: "");[/CODE] string isim = scanner.nextline(); system.out.pr[CODE]int(""stokta olacak miktar değişimi: "");[/CODE] int stok = scanner.next[CODE]int();[/CODE] boolean varmi = false; [CODE]for(int i=0 ;[/CODE] i < envanter.size(); i++){ if(envanter.get(i).getisim().equals(isim)){ varmi = true; envanter.get(i).stokguncelle(stok); } } [CODE]if (!varmi) {[/CODE] system.err.pr[CODE]intln(""öyle bir eşya envanterde yok"");[/CODE] } } [CODE]if(secim == 4){[/CODE] if (envanter.isempty()) { system.out.println(""envanterde esya yok.""); } [CODE]else {[/CODE] [CODE]for (envanterkaydi esya : envanter) {[/CODE] system.out.println(""isim: "" + esya.getisim() + "" stok: "" + esya.getstok()); } } } [CODE]if(secim ==5){[/CODE] try (printwriter pw = new printwriter(new filewriter(""envanter.txt""))) { [CODE]for(int i=0 ;[/CODE] i < envanter.size(); i++){ pw.println(envanter.get(i).getisim() + "" : "" + envanter.get(i).getstok()); } } [CODE]catch (ioexception e) {[/CODE] system.err.pr[CODE]intln(""yazarken hata oldu "");[/CODE] } } [CODE]if(secim == 6){[/CODE] try (bufferedreader br = new bufferedreader(new filereader(""envanter.txt""))) { [CODE]string satir;[/CODE] envanter.clear(); while ((satir = br.readline()) != null) { string[] oku = satir.split("" : ""); envanter.add(new envanterkaydi(oku[0], integer.parse[CODE]int(oku[1])));[/CODE] } } [CODE]catch (ioexception e) {[/CODE] //system.err.pr[CODE]intln(""okurken hata oldu: "");[/CODE] throw [CODE]new bosdosyaexception();[/CODE] } } [CODE]if(secim == 7){[/CODE] system.out.pr[CODE]intln(""envanterden çikiliyor"");[/CODE] [CODE]return;[/CODE] } } [CODE]catch(exception e){[/CODE] throw new exception(e.getmessage()); } } } } } [CODE]public class esyayokexception extends exception {[/CODE] [CODE]public esyayokexception() {[/CODE] super(""hata: i̇stenen eşya envanterde mevcut değil.""); } } [CODE]public class ozellikhatasiexception extends exception {[/CODE] [CODE]public ozellikhatasiexception() {[/CODE] super(""hata: eşya bilgileri hatali veya eksik.""); } } [CODE]public class envanterkaydi {[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public envanterkaydi(string isim, int stok) {[/CODE] this.isim = isim; this.stok = stok; } [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public int getstok() {[/CODE] [CODE]return stok;[/CODE] } [CODE]public void stokguncelle(int miktar) throws stoknegatifexception {[/CODE] if (this.stok + miktar < 0) { throw new stoknegatifexception(""hata: stok miktari negatif olamaz.""); } this.stok += miktar; } } [CODE]public class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception() {[/CODE] super(""hata: envanter dosyasi boş.""); } } [CODE]public class stoknegatifexception extends exception {[/CODE] [CODE]public stoknegatifexception(string message) {[/CODE] super(message); } } [CODE]public class inputexception extends exception {[/CODE] [CODE]public inputexception(string message) {[/CODE] super(message); } //gecen haftaki gibi unutma! } [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]public dosyabulunamadiexception() {[/CODE] super(""hata: envanter dosyasi bulunamadi.""); } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.arraylist; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<integer> numbers = arrays.aslist(3, 9, 1, 6,11,13,0,89,-1); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, ""sanane"" , 33,true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] } [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection,boolean findmax) {[/CODE] //comparable comprareto kullancan unutma if(collection.isempty()){ [CODE]return null;[/CODE] } arraylist<t> liste = [CODE]new arraylist<>(collection);[/CODE] t karsilastir = liste.get(0); [CODE]for(int i = 1;[/CODE] i < liste.size(); i++){ if(findmax && liste.get(i).compareto(karsilastir) > 0){ karsilastir = liste.get(i); } else if(!findmax && liste.get(i).compareto(karsilastir) < 0){ karsilastir = liste.get(i); } } [CODE]return karsilastir;[/CODE] } [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] arraylist<t> res = [CODE]new arraylist<>();[/CODE] [CODE]for (object obj : collection) {[/CODE] if (type.isinstance(obj)) { res.add((t)(obj)); } } [CODE]return res;[/CODE] } } [CODE]class undoablelist<t> extends arraylist<t> {[/CODE] [CODE]public void undolast() {[/CODE] if (!this.isempty()) { this.remove(this.size() - 1); } } [CODE]public t getlastadded() {[/CODE] if (!this.isempty()) { return this.get(this.size() - 1); } [CODE]else{[/CODE] [CODE]return null;[/CODE] } } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 import java.awt.*; /** * hiz * can * hasar */ [CODE]public abstract class zombie {[/CODE] protected [CODE]string name;[/CODE] protected double x, y; protected [CODE]int health;[/CODE] protected double speed; protected [CODE]int damage;[/CODE] protected color color; [CODE]public zombie(string name, double x, double y, int health, double speed, int damage, color color) {[/CODE] this.name = name; this.x = x; this.y = y; this.health = health; this.speed = speed; this.damage = damage; this.color = color; } // zombilerin oyuncuya dogru hareket etmesi icin oyuncunun konumlarını alıp zombiyi ona gore guncellicez // burada zombimiz surunge mi diye kontrol etmeliyiz oyle ise yaklasinca ziplayacak (yani hizlanacak) [CODE]public void update(double px, double py) {[/CODE] double distancex = px - x; double distancey = py - y; double dist = distancex*distancex + distancey*distancey; double angle = math.atan2(py - y, px - x); // once aralarindaki aciyi radyan cinsinden bulcaz if(this.name.equals(""crawlerzombie "")){ [CODE]if(dist < (150*150)){[/CODE] x += (1.10)*speed * math.cos(angle); // x bileseni y += (1.10)*speed * math.sin(angle); // y bileseni } } x += speed * math.cos(angle); // x bileseni y += speed * math.sin(angle); // y bilesini } [CODE]public void draw(graphics g) {[/CODE] g.setcolor(color); g.filloval(([CODE]int)x - 15, (int)y - 15, 30, 30);[/CODE] } // oyuncu ile collision oldu mu [CODE]public boolean collideswith(player p) {[/CODE] double distancex = p.x - x; double distancey = p.y - y; double dist = distancex*distancex + distancey*distancey; // aralarındaki mesafenin kareleri toplamı // eger 35 unitten kucukse demekki artık collision oldu [CODE]return dist < (35*35);[/CODE] // 40 iken tam uc uca degme oluyordu o yuzden 35 yaptim } // mermi ile collison oldu mu oyuncu ile ayni mantik [CODE]public boolean ishitbybullet(bullet b) {[/CODE] // eger bir roketatar ise bu kisim game panelde handle ettin unutma /* if (b.getexplosionradius() > 0) { double dx = (x - b.x); double dy = (y - b.y); double distsq = dx*dx + dy*dy; if (distsq < (b.getexplosionradius()*b.getexplosionradius())) { [CODE]return true;[/CODE] } }*/ double dx = (x - b.x); double dy = (y - b.y); double dist = dx*dx + dy*dy; [CODE]return dist < (15*15);[/CODE] } [CODE]public void takedamage(int dmg) {[/CODE] health -= dmg; } [CODE]public boolean isalive() {[/CODE] [CODE]return health > 0;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } // zombilerin ozelliklerini txt dosyasina kaydedebilmek icin override edicez [CODE]public abstract string tosave();[/CODE] [CODE]public static zombie fromsave(string line) {[/CODE] // kaydettigimiz sira ile geri okuyacagiz // ""tur"" + x + "" "" + y + "" "" + health; [CODE]try {[/CODE] string[] arr = line.split("" ""); [CODE]string type = arr[0];[/CODE] double zx = double.parsedouble(arr[1]); double zy = double.parsedouble(arr[2]); int zh = integer.parse[CODE]int(arr[3]);[/CODE] switch(type) { case ""normalzombie"": { normalzombie nz = [CODE]new normalzombie(zx, zy);[/CODE] nz.health = zh; [CODE]return nz;[/CODE] } case ""crawlerzombie"": { crawlerzombie cz = [CODE]new crawlerzombie(zx, zy);[/CODE] cz.health = zh; [CODE]return cz;[/CODE] } case ""tankzombie"": { tankzombie tz = [CODE]new tankzombie(zx, zy);[/CODE] tz.health = zh; [CODE]return tz;[/CODE] } case ""spitterzombie"": { spitterzombie sz = [CODE]new spitterzombie(zx, zy);[/CODE] sz.health = zh; [CODE]return sz;[/CODE] } } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return null;[/CODE] } } import java.awt.*; /* * zombi olunce arkasinda mermi kutusu bırakır icinde random sayida mermi olan */ [CODE]public class ammodrop {[/CODE] double x, y; [CODE]int amount;[/CODE] boolean iscollected = false; [CODE]public ammodrop(double x, double y, int amount) {[/CODE] this.x = x; this.y = y; this.amount = amount; } [CODE]public void draw(graphics g) {[/CODE] g.setcolor(color.yellow); g.fillrect(([CODE]int)x - 5, (int)y - 5, 10, 10);[/CODE] } [CODE]public boolean collideswith(player player) {[/CODE] double dx = player.x - x; double dy = player.y - y; [CODE]return dx*dx + dy*dy < (20*20);[/CODE] } } import javax.imageio.imageio; import java.awt.*; import java.io.*; import java.util.arraylist; import java.util.list; [CODE]public class gamemap {[/CODE] private [CODE]int[][] mapdata;[/CODE] private [CODE]int rows, cols;[/CODE] private final [CODE]int tilesize = 16;[/CODE] private image grassimage; [CODE]public gamemap(string mapfilepath) {[/CODE] loadmap(mapfilepath); loadimages(); } private [CODE]void loadmap(string mapfilepath) {[/CODE] list<[CODE]string> lines = new arraylist<>();[/CODE] // haritadan bilgileri okumak try (inputstream is = getclass().getresourceasstream(""map.txt""); bufferedreader reader = [CODE]new bufferedreader(new inputstreamreader(is))) {[/CODE] [CODE]string line;[/CODE] while ((line = reader.readline()) != null) { // if (!line.trim().isempty()) { lines.add(line); } } rows = lines.size(); [CODE]if (rows > 0) {[/CODE] // bosuk ile ayirdigimiz icin string[] tokens = lines.get(0).split(""\\s+""); cols = tokens.length; } mapdata = [CODE]new int[rows][cols];[/CODE] [CODE]for (int i = 0;[/CODE] i < rows; i++) { string[] tokens = lines.get(i).split(""\\s+""); [CODE]for (int j = 0;[/CODE] j < cols; j++) { mapdata[i][j] = integer.parse[CODE]int(tokens[j]);[/CODE] } } } [CODE]catch (ioexception ex) {[/CODE] ex.pr[CODE]intstacktrace();[/CODE] } } private [CODE]void loadimages() {[/CODE] [CODE]try {[/CODE] grassimage = imageio.read(getclass().getresource(""grass.png"")); } [CODE]catch (ioexception ex) {[/CODE] ex.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void draw(graphics g) {[/CODE] [CODE]for (int row = 0;[/CODE] row < rows; row++) { [CODE]for (int col = 0;[/CODE] col < cols; col++) { [CODE]int x = col * tilesize;[/CODE] [CODE]int y = row * tilesize;[/CODE] g.drawimage(grassimage, x, y, tilesize, tilesize, null); } } } /* * oyuncu sinirlar ile collide edecek mi kontrolü yapar bunun icin map e 1 degerleri ekledik */ [CODE]public boolean checkcollision(rectangle rect) {[/CODE] int startcol = rect.x / tilesize; int endcol = (rect.x + rect.width) / tilesize; int startrow = rect.y / tilesize; int endrow = (rect.y + rect.height) / tilesize; [CODE]for (int row = startrow;[/CODE] row <= endrow; row++) { [CODE]for (int col = startcol;[/CODE] col <= endcol; col++) { [CODE]if (row >= 0 && row < rows && col >= 0 && col < cols && mapdata[row][col] == 1) {[/CODE] rectangle tilerect = [CODE]new rectangle(col * tilesize, row * tilesize, tilesize, tilesize);[/CODE] if (rect.[CODE]intersects(tilerect)) {[/CODE] [CODE]return true;[/CODE] } } } } [CODE]return false;[/CODE] } [CODE]public int gettilesize() {[/CODE] [CODE]return tilesize;[/CODE] } } import java.util.list; /* sarjor kapasitesi * ates hizi * toplam mermi sayisi (bazilari sonsuz) */ [CODE]public abstract class weapon {[/CODE] protected [CODE]string name;[/CODE] protected [CODE]int magazinecapacity;[/CODE] //sarjor kapasitesi protected [CODE]int currentmagazine;[/CODE] protected [CODE]int totalammo;[/CODE] // toplam mermi sayisi protected [CODE]int firerate;[/CODE] // ates hizi protected long lastfiretime; [CODE]public weapon(string name, int capacity, int totalammo, int firerate) {[/CODE] this.name = name; this.magazinecapacity = capacity; // baslangicta full this.currentmagazine = capacity; this.totalammo = totalammo; this.firerate = firerate; this.lastfiretime = 0; } /* * (sx, sy) den (tx, ty) ye ates edilecek * bu metod list of bullets donecek cunku her silah sadece bir adet mermi ateslemiyor */ [CODE]public abstract list<bullet> fire(double sx, double sy, double tx, double ty);[/CODE] // getterlar [CODE]public void setcurrentmagazine(int cm) {[/CODE] currentmagazine = cm; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public int getmagazinecapacity() {[/CODE] [CODE]return magazinecapacity;[/CODE] } [CODE]public int getcurrentmagazine() {[/CODE] [CODE]return currentmagazine;[/CODE] } [CODE]public int gettotalammo() {[/CODE] [CODE]return totalammo;[/CODE] } [CODE]public void settotalammo(int ta) {[/CODE] totalammo = ta; } [CODE]public void reload() {[/CODE] // keyhandle yaparken r tusuna basilirsa bu metotu cagir [CODE]int need = magazinecapacity - currentmagazine;[/CODE] [CODE]if (totalammo >= need) {[/CODE] totalammo -= need; currentmagazine = magazinecapacity; } [CODE]else {[/CODE] currentmagazine += totalammo; totalammo = 0; } } [CODE]public void addammo(int amount) {[/CODE] totalammo += amount; } protected boolean canfire() { long msbetweenshots = 60000 / firerate; // mermi/dakika long now = system.currenttimemillis(); long timesincelastshot = now - lastfiretime; [CODE]if (timesincelastshot < msbetweenshots) {[/CODE]// yeteri kadar sure gecti mi [CODE]return false;[/CODE] } [CODE]else {[/CODE] [CODE]return true;[/CODE] } } } import java.awt.*; [CODE]public class bullet {[/CODE] [CODE]public double x, y;[/CODE] [CODE]public double angle;[/CODE] [CODE]public double speed;[/CODE] [CODE]public int damage;[/CODE] private boolean canpassthrough; private double explosionradius; private boolean isenemybullet = false; [CODE]public bullet(double sx, double sy, double angle, double speed, int dmg, boolean canpassthrough, boolean isenemybullet) {[/CODE] this.x = sx; this.y = sy; this.angle = angle; this.speed = speed; this.damage = dmg; this.canpassthrough = canpassthrough; this.explosionradius = 0; this.isenemybullet = isenemybullet; } [CODE]public boolean isenemybullet() {[/CODE] [CODE]return isenemybullet;[/CODE] } [CODE]public void update() {[/CODE] x += speed * math.cos(angle); y += speed * math.sin(angle); } [CODE]public void draw(graphics g) {[/CODE] [CODE]if (isenemybullet) {[/CODE] g.setcolor(color.green); // asit tukuren zombinin } [CODE]else {[/CODE] g.setcolor(color.yellow); // oyuncu mermisi } g.filloval(([CODE]int)x - 3, (int)y - 3, 6, 6);[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public boolean canpassthrough() {[/CODE] [CODE]return canpassthrough;[/CODE] } [CODE]public void setexplosionradius(double r) {[/CODE] explosionradius = r; } [CODE]public double getexplosionradius() {[/CODE] [CODE]return explosionradius;[/CODE] } } import java.util.arraylist; import java.util.collections; import java.util.list; /** * pompalı tüfek * fire rate 60 */ [CODE]public class shotgun extends weapon {[/CODE] [CODE]public shotgun() {[/CODE] super(""pompalı tüfek"", 5, 30, 60); } @override [CODE]public list<bullet> fire(double sx, double sy, double tx, double ty) {[/CODE] if (!canfire()) return collections.emptylist(); if (currentmagazine <= 0) return collections.emptylist(); lastfiretime = system.currenttimemillis(); currentmagazine--; list<bullet> bullets = [CODE]new arraylist<>();[/CODE] double baseangle = math.atan2(ty - sy, tx - sx); // once her zaman duz bulunur double totalspread = math.toradians(45); double ith = totalspread / 8; // 9 mermi 8 aralik double start = baseangle - (totalspread / 2); [CODE]for (int i = 0;[/CODE] i < 9; i++) { double angle = start + i * ith; // 45 derece (radyan cinsinden) / 8 ile aradaki her bir mesafeyi bulmus gibi olduk bullet bullet = [CODE]new bullet(sx, sy, angle, 10, 10, false,false);[/CODE] bullets.add(bullet); } [CODE]return bullets;[/CODE] } } import java.awt.color; import java.awt.graphics; [CODE]public class spit {[/CODE] [CODE]public double x, y;[/CODE] private double angle; private double speed; private [CODE]int damage;[/CODE] private [CODE]int size = 8;[/CODE] [CODE]public spit(double x, double y, double angle, double speed, int damage) {[/CODE] this.x = x; this.y = y; this.angle = angle; this.speed = speed; this.damage = damage; } [CODE]public void update() {[/CODE] x += speed * math.cos(angle); y += speed * math.sin(angle); } [CODE]public void draw(graphics g) {[/CODE] g.setcolor(color.green); g.filloval(([CODE]int) (x - size / 2), (int) (y - size / 2), size, size);[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } // oyuncuya dogru hareket [CODE]public boolean collideswith(player player) {[/CODE] double dx = player.x - x; double dy = player.y - y; double distance = math.sqrt(dx * dx + dy * dy); [CODE]return distance < (35);[/CODE] } } import javax.swing.*; import java.awt.*; import java.awt.event.actionevent; import java.awt.event.actionlistener; [CODE]public class gamewindow extends jframe {[/CODE] private gamepanel gamepanel; [CODE]public gamewindow() {[/CODE] settitle(""zombastik""); // isme karar ver unutma !! setdefaultcloseoperation(jframe.exit_on_close); setsize(1024, 768); setlocationrelativeto(null); gamepanel = [CODE]new gamepanel();[/CODE] add(gamepanel, borderlayout.center); menubar(); setvisible(true); //oyunu baslat gamepanel.startgame(); } private [CODE]void menubar() {[/CODE] jmenubar menubar = [CODE]new jmenubar();[/CODE] jmenu gamemenu = [CODE]new jmenu(""menu"");[/CODE] jmenuitem pauseitem = [CODE]new jmenuitem(""pause"");[/CODE] jmenuitem resumeitem = [CODE]new jmenuitem(""resume"");[/CODE] jmenuitem saveitem = [CODE]new jmenuitem(""save"");[/CODE] jmenuitem loaditem = [CODE]new jmenuitem(""load"");[/CODE] pauseitem.addactionlistener([CODE]new actionlistener() {[/CODE] @override [CODE]public void actionperformed(actionevent e) {[/CODE] gamepanel.pausegame(); } }); resumeitem.addactionlistener([CODE]new actionlistener() {[/CODE] @override [CODE]public void actionperformed(actionevent e) {[/CODE] gamepanel.resumegame(); } }); saveitem.addactionlistener([CODE]new actionlistener() {[/CODE] @override [CODE]public void actionperformed(actionevent e) {[/CODE] gamepanel.savegame(); } }); loaditem.addactionlistener([CODE]new actionlistener() {[/CODE] @override [CODE]public void actionperformed(actionevent e) {[/CODE] gamepanel.loadgame(); } }); gamemenu.add(pauseitem); gamemenu.add(resumeitem); gamemenu.add(saveitem); gamemenu.add(loaditem); menubar.add(gamemenu); setjmenubar(menubar); } } import java.awt.color; /* * normal zombi * can: orta- hız: yavaş- hasar: orta */ [CODE]public class normalzombie extends zombie {[/CODE] [CODE]public normalzombie(double x, double y) {[/CODE] super(""normalzombie "", x, y, 50, 1.0, 10, color.green); } @override [CODE]public string tosave() {[/CODE] [CODE]return ""normalzombie "" + x + "" "" + y + "" "" + health;[/CODE] } } import java.util.arraylist; import java.util.collections; import java.util.list; /** * keskin nişancı tüfeği * fire rate 30 * bu can pass through */ [CODE]public class sniperrifle extends weapon {[/CODE] [CODE]public sniperrifle() {[/CODE] super(""keskin nişancı tüfeği"", 5, 20, 30); } @override [CODE]public list<bullet> fire(double sx, double sy, double tx, double ty) {[/CODE] if (!canfire()) return collections.emptylist(); if (currentmagazine <= 0) return collections.emptylist(); lastfiretime = system.currenttimemillis(); currentmagazine--; double angle = math.atan2(ty - sy, tx - sx); // duz ates bullet bullet = [CODE]new bullet(sx, sy, angle, 15, 25, true,false);[/CODE] list<bullet> bullets = [CODE]new arraylist<>();[/CODE] bullets.add(bullet); [CODE]return bullets;[/CODE] } } import java.util.arraylist; import java.util.list; /* tabanca : default silah bu * sinirsiz ammo * atan2 methodu : [CODE]returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta) * bu methodu cok kullanicaz */ public class pistol extends weapon {[/CODE] [CODE]public pistol() {[/CODE] super(""tabanca"", 12, 99999, 120); } @override [CODE]public list<bullet> fire(double sx, double sy, double tx, double ty) {[/CODE] [CODE]if (!canfire()) return new arraylist<>();[/CODE] [CODE]if (currentmagazine <= 0) return new arraylist<>();[/CODE] lastfiretime = system.currenttimemillis(); currentmagazine--; double angle = math.atan2(ty - sy, tx - sx); // duz atis yapar bullet bullet = [CODE]new bullet(sx, sy, angle, 10, 10, false,false);[/CODE] list<bullet> bullets = [CODE]new arraylist<>();[/CODE] bullets.add(bullet); [CODE]return bullets;[/CODE] } } import javax.swing.jlabel; import javax.swing.joptionpane; import javax.swing.jpanel; import javax.swing.jwindow; import javax.swing.swingconstants; import javax.swing.swingutilities; import javax.swing.timer; import java.awt.*; import java.awt.event.*; import java.io.*; import java.util.arraylist; import java.util.list; import java.util.random; [CODE]public class gamepanel extends jpanel implements actionlistener, keylistener, mouselistener, mousemotionlistener {[/CODE] // timing private timer timer; private final [CODE]int delay = 16;[/CODE] // ~60 fps (16 ms per frame) 60 fps saglayacak // game state private boolean ispaused; private player player; private java.util.list<zombie> zombies; private java.util.list<bullet> bullets; private list<spit> spits; private list<ammodrop> ammodrops = [CODE]new arraylist<>();[/CODE] private [CODE]int wavenumber;[/CODE] private [CODE]int score;[/CODE] private random random; private gamemap gamemap; // nisan almak icin private po[CODE]int mousepos = new point(0, 0);[/CODE] [CODE]public gamepanel() {[/CODE] setbackground(color.dark_gray); setfocusable(true); // listeners addkeylistener(this); addmouselistener(this); addmousemotionlistener(this); // initialize baslat timer = [CODE]new timer(delay, this);[/CODE] //her 16 msda actionper[CODE]formed() methodu cagrilir ispaused = false;[/CODE] random = [CODE]new random();[/CODE] } [CODE]public void startgame() {[/CODE] // yeni oyuncu yarat player = [CODE]new player(512, 384);[/CODE] // zombi ve mermi listlerini yarat zombies = [CODE]new arraylist<>();[/CODE] bullets = [CODE]new arraylist<>();[/CODE] spits = [CODE]new arraylist<>();[/CODE] // harita gamemap = new gamemap(""map.txt""); wavenumber = 0; // 1 oldugunda piyade tufegi hemen geliyor dikkat et score = 0; spawnwave(wavenumber); // start timer timer.start(); // java tanim : starts the timer, causing it to start sending action events to its listeners. // her 16 msnde bir actionper[CODE]formed() cagrilir delay = 16 }[/CODE] // oyun yüklendiginde ya da kaydedilginde kisa sureli mesaj gostermek icin private [CODE]void showtempmsg(string message) {[/CODE] jwindow window = [CODE]new jwindow();[/CODE] jlabel label = [CODE]new jlabel(message);[/CODE] label.setfont(new font(""arial"", font.bold, 22)); jpanel panel = [CODE]new jpanel(new borderlayout());[/CODE] panel.add(label, borderlayout.center); window.getcontentpane().add(panel); window.setsize(200, 150); window.setlocationrelativeto(null); window.setvisible(true); new timer(1000, e -> window.dispose()).start(); // 1 saniye sonra kendi kapanir } private [CODE]void spawnwave(int wave) {[/CODE] // her dalgada daha fazla ve cesitli zombiler gelir [CODE]int zombiecount = 3 + (wave * 2);[/CODE] int w = math.max(1, getwidth()); // eger component henuz cagrilmadiysa sikinti cikmasin diye max kullandik int h = math.max(1, getheight() / 2); // getler 0 ise 1 degeri alir ve negative bound olmaz // hesapladigimiz width(w) ve height(h) noktalari kullanilarak rastgele bir yerde zombiler olusturulur // dalga arttikca daha zor olmasını ve zombi cesitliligini saglamak icin random.next[CODE]int(100) kullandik for (int i = 0;[/CODE] i < zombiecount; i++) { zombie z; if (wave >= 3 && random.next[CODE]int(100) < 30) {[/CODE] z = new spitterzombie(random.nextint(w),random.next[CODE]int(h));[/CODE] } else if (wave >= 2 && random.next[CODE]int(100) < 20) {[/CODE] z = new tankzombie(random.nextint(w),random.next[CODE]int(h));[/CODE] } else if (wave >= 1 && random.next[CODE]int(100) < 30) {[/CODE] z = new crawlerzombie(random.nextint(w),random.next[CODE]int(h));[/CODE] } [CODE]else {[/CODE] z = new normalzombie(random.nextint(w),random.next[CODE]int(h));[/CODE] } zombies.add(z); } // belirli zombi dalgalari temzilendikten sonra odul olarak yeni silah verir // silahların eklenme sirasi ile sayi tuslarındaki sirasi aynidir // 1-> tabanca 2-> piyade tufegi gibi... [CODE]if (wave == 1) {[/CODE] // 1. dalgadan sonra piyade tufegi player.addweapon([CODE]new assaultrifle());[/CODE] } [CODE]else if (wave == 3) {[/CODE] // 3. dalgadan sonra pompali tufek player.addweapon([CODE]new shotgun());[/CODE] } [CODE]else if (wave == 5) {[/CODE] // 5. dalgadan sonra keskin nisanci player.addweapon([CODE]new sniperrifle());[/CODE] } [CODE]else if (wave == 10) {[/CODE] // 10. dalgadan sonra roketatar player.addweapon([CODE]new rocketlauncher());[/CODE] } } @override [CODE]public void actionperformed(actionevent e) {[/CODE] [CODE]if (!ispaused) {[/CODE] updategame(); repa[CODE]int();[/CODE] } } private [CODE]void updategame() {[/CODE] // player double prevx = player.x; double prevy = player.y; player.update(); rectangle playerbounds = new rectangle((int) player.x, (int) player.y, player.getwidth(), player.getheight()); // tile ile collision var mi if (gamemap.checkcollision(playerbounds)) { player.x = prevx; player.y = prevy; } // bullets for (int i = bullets.size() - 1; i >= 0; i--) { bullet b = bullets.get(i); b.update(); // ekran disina ciktiysa remove if (!isonscreen(b.x, b.y)) { bullets.remove(i); } } // zombies list<zombie> zombieseffected = [CODE]new arraylist<>();[/CODE] for (int i = zombies.size() - 1; i >= 0; i--) { zombie z = zombies.get(i); z.update(player.x, player.y); [CODE]if (z instanceof spitterzombie) {[/CODE] spitterzombie spitter = (spitterzombie) z; spit spit = spitter.mayspit(player); [CODE]if (spit != null) {[/CODE] spits.add(spit); } } for (int j = bullets.size() - 1; j >= 0; j--) { bullet b = bullets.get(j); if (z.ishitbybullet(b)) { // oncelikle roketatar mi geldi kontrol etmeliyiz if (b.getexplosionradius() > 0) { // eger roketatar ise belli bir mesafe içersinde etkilenecek zombileri kaydetmeliyiz for (int k = zombies.size() - 1; k >= 0; k--) { zombie other = zombies.get(k); double dx = other.x - b.x; double dy = other.y - b.y; double dist = math.sqrt(dx * dx + dy * dy); // burada zombinin mermiden ne kadar uzak oldugunu hesapladık if (dist <= b.getexplosionradius()) { zombieseffected.add(other); score += 10; // eger olduyse arkasinde random sayida mermi bulunduran bir kutu birakmali int ammoamount = 5 + random.next[CODE]int(10);[/CODE] // random sayida mermi dusursun olunce ammodrops.add(new ammodrop(z.x, z.y, ammoamount)); } } } // roketatar degilse [CODE]else {[/CODE] z.takedamage(b.getdamage()); if (!z.isalive()) { zombieseffected.add(z); score += 10; // eger olen zombi asit tukuren ise belli bir cevresindeki zombiler de olmeli // burada roketatar yaparken kullandigin mantiktan ilerle !! [CODE]if(z instanceof spitterzombie){[/CODE] list<zombie> zombieseffectedbyspit = [CODE]new arraylist<>();[/CODE] [CODE]for (zombie other : zombies) {[/CODE] [CODE]if (other != z) {[/CODE] double dx = other.x - z.x; double dy = other.y - z.y; double dist = math.sqrt(dx * dx + dy * dy); [CODE]if (dist < 100) {[/CODE] zombieseffectedbyspit.add(other); } } } [CODE]for (zombie victim : zombieseffectedbyspit) {[/CODE] victim.takedamage(101); if (!zombieseffected.contains(victim)) { zombieseffected.add(victim); } } } // eger olduyse arkasinde random sayida mermi bulunduran bir kutu birakmali int ammoamount = 5 + random.next[CODE]int(10);[/CODE] ammodrops.add(new ammodrop(z.x, z.y, ammoamount)); } } if (!b.canpassthrough()) bullets.remove(j); break; } } if(i < zombies.size()){ if(z.collideswith(player)){ player.takedamage(z.getdamage()); } } if(!player.isalive()){ gameover(); [CODE]return;[/CODE] } } // bos list hatasi olmamasi icin en son listeden cikardik zombies.removeall(zombieseffected); // spits for (int i = spits.size() - 1; i >= 0; i--) { spit s = spits.get(i); s.update(); // ekran disina ciktiysa remove if (!isonscreen(s.x, s.y)) { spits.remove(i); continue; } // oyuncu ile collision oldu mu if (s.collideswith(player)) { // oyuncunun canını azalt player.takedamage(s.getdamage()); spits.remove(i); // oyuncu oldu mu if (!player.isalive()) { gameover(); [CODE]return;[/CODE] } } } // dusen mermileri topla for (int i = ammodrops.size() - 1; i>= 0; i--) { ammodrop drop = ammodrops.get(i); if (!drop.iscollected && drop.collideswith(player)) { drop.iscollected = true; player.getcurrentweapon().addammo(drop.amount); ammodrops.remove(i); } } // dalgadaki zombiler bitti mi if (zombies.isempty()) { wavenumber++; spawnwave(wavenumber); // bittiyse yeni wave spawn } } private boolean isonscreen(double x, double y) { [CODE]return (x >= 0 && x < getwidth() && y >= 0 && y < getheight());[/CODE] } private [CODE]void gameover() {[/CODE] timer.stop(); joptionpane.showmessagedialog(this, ""oyun bitti! toplam skor: "" + score); // oyun bitince tekrar mi baslasin kontrol et !!! startgame(); //system.exit(0); } @override protected [CODE]void paintcomponent(graphics g) {[/CODE] super.pa[CODE]intcomponent(g);[/CODE] // haritayi ciz [CODE]if (gamemap != null) {[/CODE] gamemap.draw(g); } // oyuncu ciz [CODE]if (player != null) {[/CODE] player.draw(g); } // mermileri ciz [CODE]for (bullet b : bullets) {[/CODE] b.draw(g); } [CODE]for (spit s : spits) {[/CODE] s.draw(g); } // zombileri ciz [CODE]for (zombie z : zombies) {[/CODE] z.draw(g); } // zombilerin olunce biraktıkları mermi kutusu [CODE]for (ammodrop drop : ammodrops) {[/CODE] drop.draw(g); } // sol ust koseye bilgiler yazilir g.setcolor(color.pink); if (player != null && player.getcurrentweapon() != null) { g.drawstring( ""silah: "" + player.getcurrentweapon().getname() + "" | şarjör: "" + player.getcurrentweapon().getcurrentmagazine() + ""/"" + player.getcurrentweapon().getmagazinecapacity() + "" | mermi sayısı: "" + player.getcurrentweapon().gettotalammo() + "" | dalga: "" + (wavenumber + 1), 10, 20 ); } // sag ust koseye can ve skor yazilir g.drawstring(""kalan can: "" + player.health + "" | puan: "" + score, getwidth() - 150, 20); } // fileio ile oyun kaydetme, durdurma ve yükleme [CODE]public void savegame() {[/CODE] // dokumasyonda istedigi gibi bir fileda kaydedilen oyunun bilgilerini tutacagız load secilince buradan bigileri okuyacagız try (printwriter pw = new printwriter(new filewriter(""saved.txt""))) { pw.pr[CODE]intln(wavenumber);[/CODE] // hangi dalgadayiz pw.pr[CODE]intln(score);[/CODE] // skor // oyuncu bilgileri pw.println(player.x + "" "" + player.y + "" "" + player.health); // regex "" "" // silah bilgileri pw.println(player.getweapons().indexof(player.getcurrentweapon())); for (weapon w : player.getweapons()) { pw.print(w.getname() + "" ""); pw.print(w.getcurrentmagazine() + "" ""); pw.print(w.gettotalammo() + ""\n""); } // zombie bilgileri pw.println(zombies.size()); [CODE]for (zombie z : zombies) {[/CODE] pw.println(z.tosave()); } showtempmsg("" oyun kaydedildi!""); } [CODE]catch (ioexception ex) {[/CODE] ex.pr[CODE]intstacktrace();[/CODE] } } // yazdigimiz sirayla okuyalim [CODE]public void loadgame() {[/CODE] try (bufferedreader br = new bufferedreader(new filereader(""saved.txt""))) { wavenumber = integer.parseint(br.readline()); score = integer.parseint(br.readline()); // oyuncu bilgileri string[] playerdata = br.readline().split("" ""); player.x = double.parsedouble(playerdata[0]); player.y = double.parsedouble(playerdata[1]); player.health = integer.parse[CODE]int(playerdata[2]);[/CODE] int currentweaponindex = integer.parseint(br.readline()); // silahlar player.getweapons().clear(); list<weapon> loadedweapons = [CODE]new arraylist<>();[/CODE] [CODE]string line;[/CODE] while ((line = br.readline()) != null) { string[] weapondata = line.split("" ""); if (weapondata.length == 1) { break; } [CODE]string wname = weapondata[0];[/CODE] int currmag = integer.parse[CODE]int(weapondata[1]);[/CODE] int totalammo = integer.parse[CODE]int(weapondata[2]);[/CODE] weapon w = createweaponbyname(wname); [CODE]if (w != null) {[/CODE] w.setcurrentmagazine(currmag); w.settotalammo(totalammo); loadedweapons.add(w); } } player.getweapons().addall(loadedweapons); if (!player.getweapons().isempty() && currentweaponindex >= 0 && currentweaponindex < player.getweapons().size()) { player.setcurrentweapon(player.getweapons().get(currentweaponindex)); } // zombiler zombies.clear(); int zombiecount = integer.parse[CODE]int(line);[/CODE] [CODE]for (int i = 0;[/CODE] i < zombiecount; i++) { string zline = br.readline(); zombie z = zombie.fromsave(zline); [CODE]if (z != null) {[/CODE] zombies.add(z); } } showtempmsg("" oyun yüklendi!""); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } private weapon createweaponbyname([CODE]string name) {[/CODE] switch(name) { case ""tabanca"": [CODE]return new pistol();[/CODE] case ""piyade tüfeği"": [CODE]return new assaultrifle();[/CODE] case ""pompalı tüfek"": [CODE]return new shotgun();[/CODE] case ""keskin nişancı tüfeği"": [CODE]return new sniperrifle();[/CODE] case ""roketatar"": [CODE]return new rocketlauncher();[/CODE] default: [CODE]return null;[/CODE] } } // pause ve resume [CODE]public void pausegame() {[/CODE] ispaused = true; } [CODE]public void resumegame() {[/CODE] ispaused = false; } // klavyeden ve mousedan input @override [CODE]public void keypressed(keyevent e) {[/CODE] [CODE]if (player != null) {[/CODE] player.keypresshandler(e.getkeycode()); } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] [CODE]if (player != null) {[/CODE] player.keyreleasehandler(e.getkeycode()); // r ye basildiginda silahlarin mermisi reload if (e.getkeycode() == keyevent.vk_r) { player.reload(); } } } @override [CODE]public void keytyped(keyevent e) {[/CODE]} @override [CODE]public void mouseclicked(mouseevent e) {[/CODE] // sol veya sag tik ile mermi ateslensin if (swingutilities.isleftmousebutton(e) && !ispaused && player != null || swingutilities.isrightmousebutton(e) && !ispaused && player != null) { java.util.list<bullet> newbullets = player.firetoward(e.getx(), e.gety()); bullets.addall([CODE]newbullets);[/CODE] } } @override [CODE]public void mousepressed(mouseevent e) {[/CODE]} @override [CODE]public void mousereleased(mouseevent e) {[/CODE]} @override [CODE]public void mouseentered(mouseevent e) {[/CODE]} @override [CODE]public void mouseexited(mouseevent e) {[/CODE]} @override [CODE]public void mousedragged(mouseevent e) {[/CODE] mousepos = e.getpo[CODE]int();[/CODE] } @override [CODE]public void mousemoved(mouseevent e) {[/CODE] mousepos = e.getpo[CODE]int();[/CODE] } } import java.util.arraylist; import java.util.collections; import java.util.list; import java.util.random; /** piyade tüfeği * fire rate 600 * 1.dalgadan sonra elde edilir */ [CODE]public class assaultrifle extends weapon {[/CODE] private random rand; [CODE]public assaultrifle() {[/CODE] super(""piyade tüfeği"", 30, 600, 600); this.rand = [CODE]new random();[/CODE] } @override [CODE]public list<bullet> fire(double sx, double sy, double tx, double ty) {[/CODE] if (!canfire()) return collections.emptylist(); if (currentmagazine <= 0) return collections.emptylist(); lastfiretime = system.currenttimemillis(); currentmagazine--; double baseangle = math.atan2(ty - sy, tx - sx); // duz ates etme buna -+ 15 eklicez random double spread = math.toradians(15); // aciyi sayiyya cevirdik double offset = (rand.nextdouble() * (spread * 2)) - spread; // -15 derece ve +15 derece arasi bir sayi degeri verecek o yuzden radyan kullandık double angle = baseangle + offset; bullet bullet = [CODE]new bullet(sx, sy, angle, 10, 20, false, false);[/CODE] // damage=8 olsun mu bak list<bullet> bullets = [CODE]new arraylist<>();[/CODE] bullets.add(bullet); [CODE]return bullets;[/CODE] } } import java.awt.color; /* * asit tüküren zombi * can: düşük- hız: yavaş- hasar: orta (uzaktan asit tükürebilir)- özellik: öldürüldüğünde yanındaki birimlere zarar verir */ [CODE]public class spitterzombie extends zombie {[/CODE] private long lastspit = 0; private final long spitrepeat = 3000; // 3 saniyede 1 asit firlatsin [CODE]public spitterzombie(double x, double y) {[/CODE] super(""spitterzombie "", x, y, 35, 0.8, 10, color.yellow); } @override [CODE]public string tosave() {[/CODE] [CODE]return ""spitterzombie "" + x + "" "" + y + "" "" + health;[/CODE] } [CODE]public spit mayspit(player player) {[/CODE] long now = system.currenttimemillis(); [CODE]if (now - lastspit >= spitrepeat) {[/CODE] lastspit = now; double angle = math.atan2(player.y - y, player.x - x); // oyuncu ile arasindaki mesafe icin return new spit(x, y, angle, 3.0, 7); } [CODE]return null;[/CODE] } } import java.awt.color; /* * sürünge zombi * can: düşük- hız: hızlı- hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. */ [CODE]public class crawlerzombie extends zombie {[/CODE] [CODE]public crawlerzombie(double x, double y) {[/CODE] super( ""crawlerzombie "", x, y, 35, 1.6, 10, color.magenta); } @override [CODE]public string tosave() {[/CODE] [CODE]return ""crawlerzombie "" + x + "" "" + y + "" "" + health;[/CODE] } } import java.awt.color; /* * tank zombi * can: yüksek- hız: çok yavaş- hasar: yüksek */ [CODE]public class tankzombie extends zombie {[/CODE] [CODE]public tankzombie(double x, double y) {[/CODE] super(""tankzombie "", x, y, 100, 0.5, 20, color.red); } @override [CODE]public string tosave() {[/CODE] [CODE]return ""tankzombie "" + x + "" "" + y + "" "" + health;[/CODE] } } /* java topdown.game main */ [CODE]public class game {[/CODE] [CODE]public static void main(string[] args) {[/CODE] /*swingutilities.invokelater(() -> { // bu thread safemis gamewindow window = [CODE]new gamewindow();[/CODE] window.setvisible(true); });*/ gamewindow window = [CODE]new gamewindow();[/CODE] window.setvisible(true); } } import java.util.arraylist; import java.util.collections; import java.util.list; /** * roketatar * fire rate 10 */ [CODE]public class rocketlauncher extends weapon {[/CODE] [CODE]public rocketlauncher() {[/CODE] super(""roketatar"", 1, 5, 10); } @override [CODE]public list<bullet> fire(double sx, double sy, double tx, double ty) {[/CODE] if (!canfire()) return collections.emptylist(); if (currentmagazine <= 0) return collections.emptylist(); lastfiretime = system.currenttimemillis(); currentmagazine--; double angle = math.atan2(ty - sy, tx - sx); // yine tek bir mermi gibi gozukur ama etrafindakileri yok eder bullet rocket = [CODE]new bullet(sx, sy, angle, 8, 100, false,false);[/CODE] // rocket is a bullet o yuzden explosionradius kullandık rocket.setexplosionradius(50); // collision oldugunda 50 derece etrafindaki tum zombiler yok olsun list<bullet> bullets = [CODE]new arraylist<>();[/CODE] bullets.add(rocket); [CODE]return bullets;[/CODE] } } import java.awt.*; import java.awt.event.keyevent; import java.util.arraylist; import java.util.list; [CODE]public class player {[/CODE] [CODE]public double x, y;[/CODE] [CODE]public int health;[/CODE] public final double speed = 4.0; // hareket flags private boolean up, down, left, right; // weapons private list<weapon> weapons; private weapon currentweapon; [CODE]public player(double x, double y) {[/CODE] this.x = x; this.y = y; this.health = 100; weapons = [CODE]new arraylist<>();[/CODE] // default olarak tabancası olacak weapon pistol = [CODE]new pistol();[/CODE] weapons.add(pistol); currentweapon = pistol; } [CODE]public void update() {[/CODE] [CODE]if (up) y -= speed;[/CODE] [CODE]if (down) y += speed;[/CODE] [CODE]if (left) x -= speed;[/CODE] [CODE]if (right) x += speed;[/CODE] } [CODE]public void draw(graphics g) {[/CODE] g.setcolor(color.blue); g.fillrect(([CODE]int)x - 15, (int)y - 15, 30, 30);[/CODE] } [CODE]public void keypresshandler(int keycode) {[/CODE] if (keycode == keyevent.vk_w || keycode == keyevent.vk_up) up = true; if (keycode == keyevent.vk_s || keycode == keyevent.vk_down) down = true; if (keycode == keyevent.vk_a || keycode == keyevent.vk_left) left = true; if (keycode == keyevent.vk_d || keycode == keyevent.vk_right) right = true; // sayi tuslari ile silahlar degisimi handle edilir if (keycode >= keyevent.vk_1 && keycode <= keyevent.vk_9) { int idx = keycode - keyevent.vk_1; if (idx >= 0 && idx < weapons.size()) { currentweapon = weapons.get(idx); } } } [CODE]public void keyreleasehandler(int keycode) {[/CODE] if (keycode == keyevent.vk_w || keycode == keyevent.vk_up) up = false; if (keycode == keyevent.vk_s || keycode == keyevent.vk_down) down = false; if (keycode == keyevent.vk_a || keycode == keyevent.vk_left) left = false; if (keycode == keyevent.vk_d || keycode == keyevent.vk_right) right = false; } [CODE]public void reload() {[/CODE] [CODE]if (currentweapon != null) {[/CODE] currentweapon.reload(); } } [CODE]public boolean isalive() {[/CODE] [CODE]return health > 0;[/CODE] } [CODE]public void takedamage(int dmg) {[/CODE] health -= dmg; } [CODE]public weapon getcurrentweapon() {[/CODE] [CODE]return currentweapon;[/CODE] } [CODE]public void setcurrentweapon(weapon w) {[/CODE] currentweapon = w; } [CODE]public void addweapon(weapon w) {[/CODE] [CODE]for (weapon existing : weapons) {[/CODE] if (existing.getclass() == w.get[CODE]class()) {[/CODE] [CODE]return;[/CODE] } } weapons.add(w); } [CODE]public list<weapon> getweapons() {[/CODE] [CODE]return weapons;[/CODE] } /* * mouse yonunda ates edecek bir mermi list dondurur */ [CODE]public list<bullet> firetoward(int targetx, int targety) {[/CODE] [CODE]if (currentweapon == null) return new arraylist<>();[/CODE] return currentweapon.fire(x, y, targetx, targety); } [CODE]public int getwidth() {[/CODE] [CODE]return 30;[/CODE] } [CODE]public int getheight() {[/CODE] [CODE]return 30;[/CODE] } }"
1280995,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]package test;[/CODE] [CODE]public class collatz{[/CODE] [CODE]public static void main(string[] args){[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if (i == 1) return 0;[/CODE] [CODE]else if (i%2==0){[/CODE] [CODE]return 1 + collatz(i/2);[/CODE] } [CODE]else {[/CODE] [CODE]return 1 + collatz(i*3+1);[/CODE] } } } [CODE]package test;[/CODE] [CODE]public class cocktail{[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2}; cocktailsort(arr); //pr[CODE]inter for (int i = 0;[/CODE] i < arr.length; i++){ system.out.pr[CODE]int(arr[i] + "","");[/CODE] } } [CODE]public static void cocktailsort(int[] arr){[/CODE] bubble(arr, 0, arr.length - 1, false); } [CODE]public static void bubble(int[] arr, int start, int end, boolean rightway){[/CODE] rightway = true; [CODE]if (start == end && !isordered(arr) && rightway){[/CODE] rightway = false; bubble(arr, arr.length - 1, 0, rightway); [CODE]return;[/CODE] } [CODE]if (start == end && !isordered(arr) && !rightway){[/CODE] rightway = true; bubble(arr, 0, arr.length, rightway); [CODE]return;[/CODE] } [CODE]else if (start == end && isordered(arr)) {[/CODE] [CODE]return;[/CODE] } [CODE]else if (end > start) {[/CODE] [CODE]if (arr[start] > arr[start + 1]){[/CODE] [CODE]int temp = arr[start + 1];[/CODE] arr[start + 1] = arr[start]; arr[start] = temp; } bubble(arr, start + 1, end, rightway); [CODE]return;[/CODE] } [CODE]else if (start > end) {[/CODE] [CODE]if (arr[start - 1] > arr[start]){[/CODE] [CODE]int temp = arr[start - 1];[/CODE] arr[start - 1] = arr[start]; arr[start] = temp; } bubble(arr, start - 1, end, rightway); [CODE]return;[/CODE] } } [CODE]public static boolean isordered(int[] arr){[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] > arr[i + 1]) return false;[/CODE] } [CODE]return true;[/CODE] } } [CODE]package test;[/CODE] [CODE]public class sayac{[/CODE] [CODE]string s;[/CODE] [CODE]public sayac(string s) {[/CODE] this.s = s; } [CODE]public int say(){[/CODE] if (s.indexof('1') == -1) [CODE]return 0;[/CODE] [CODE]else {[/CODE] s = s.substring(0,s.indexof('1')) + ""0"" + s.substring(s.indexof('1') + 1,s.length()); [CODE]return 1 + say();[/CODE] } } } [CODE]class testing{[/CODE] [CODE]public static void main(string[] args){[/CODE] sayac s1 = [CODE]new sayac(""1001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; import java.util.arraylist; import java.util.arrays; import java.util.random; abstract [CODE]class sarki {[/CODE] sarki(){} [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] sarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" ("" + metalozellik + "")"");[/CODE] } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatci + "" - "" + isim + "" [ozellik: "" + metalozellik + ""]"");[/CODE] } } [CODE]class rocksarki extends sarki {[/CODE] rocksarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } //? [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatci + "" - "" + isim + "" (huzurlu ve nostaljik)"");[/CODE] } } [CODE]class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } // bi tane daha? [CODE]void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + sanatci + "" - "" + isim + "" (hafif ve sakin)"");[/CODE] } } [CODE]interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] //liste sırasında çal [CODE]for (sarki sarki : sarkilistesi){[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } siralicalma(){} } [CODE]class karisikcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] //her şarkı bir kere çalınmak üzere karışık çal random random = [CODE]new random();[/CODE] list<sarki> karisik = [CODE]new arraylist<sarki>(sarkilistesi);[/CODE] while (!karisik.isempty()){ int nextint = random.nextint(karisik.size()); karisik.get(nextint).oynat(); karisik.remove(next[CODE]int);[/CODE] } system.out.pr[CODE]intln();[/CODE] } karisikcalma(){} } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] //liste sırasında çal rocksarki çalarken sesi yükselt, diğerlerinde normale döndür. //ardışık şarkılarda sadece baştakinde işlemi yap, değilse aynı kalsın. boolean sesnasil = false; [CODE]for (sarki sarki : sarkilistesi){[/CODE] [CODE]if(sarki instanceof rocksarki && sesnasil == false){[/CODE] sesnasil = true; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] } [CODE]else if (!(sarki instanceof rocksarki) && sesnasil == true){[/CODE] sesnasil = false; system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] } sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } rockcuozelcalma(){} } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s){[/CODE] //değiştiriyor strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] strateji.cal(sarkilistesi); } } [CODE]public class muziklisey {[/CODE] [CODE]public static void main(string[] args){[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] metalsarki a = [CODE]new metalsarki("""", """", """");[/CODE] a = (metalsarki)sarki; a.gostermetalozellikleri(); } } } } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java [CODE]string sınıfı metotları 4 package kelimesayici;[/CODE] import java.io.file; import java.io.filenotfoundexception; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) throws dosyabulunamadiexception, bosdosyaexception, inputexception, kelimebulunamadiexception{[/CODE] [CODE]string metin = """";[/CODE] arraylist<[CODE]string> kelimeler = new arraylist<>();[/CODE] file metinfile = new file(""metin.txt""); file kelifile = new file(""kelimeler.txt""); scanner scan; [CODE]try {[/CODE] scan = [CODE]new scanner(metinfile);[/CODE] if (!scan.hasnext()) { scan.close(); throw new bosdosyaexception(""hata: metin.txt bos.""); } while (scan.hasnext()) { metin += scan.nextline(); } scan.close(); } [CODE]catch (filenotfoundexception e) {[/CODE] throw new dosyabulunamadiexception(""hata: metin.txt bulunamadi.""); } [CODE]try {[/CODE] scan = [CODE]new scanner(kelifile);[/CODE] if (!scan.hasnext()) { scan.close(); throw new bosdosyaexception(""hata: kelimeler.txt bos.""); } while (scan.hasnext()){ kelimeler.add(scan.next()); } scan.close(); } [CODE]catch (filenotfoundexception e) {[/CODE] throw new dosyabulunamadiexception(""hata: kelimeler.txt bulunamadi.""); } int[] amount = new int[kelimeler.size()]; string removed = metin.replaceall(""\\p{punct}"", "" "").trim().tolowercase(); boolean none = false; [CODE]int nonewhere = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < kelimeler.size(); i++){ if (removed.indexof(kelimeler.get(i)) == -1) { none = true; no[CODE]newhere = i;[/CODE] break; } } [CODE]for (int i = 0;[/CODE] i < kelimeler.size(); i++){ while (removed.indexof(kelimeler.get(i)) != -1) { amount[i]++; removed = removed.substring(0, removed.indexof(kelimeler.get(i))) + removed.substring(removed.indexof(kelimeler.get(i)) + kelimeler.get(i).length(), removed.length()); removed = removed.trim(); } } file sonuc = new file(""sonuc.txt""); [CODE]try {[/CODE] sonuc.create[CODE]newfile();[/CODE] printwriter print = new printwriter(""sonuc.txt""); [CODE]for (int i = 0;[/CODE] i < amount.length; i++){ print.println(kelimeler.get(i) + "" "" + amount[i]); } print.close(); } [CODE]catch (exception e) {[/CODE] system.err.pr[CODE]intln(""hata!"");[/CODE] } if (none) throw new kelimebulunamadiexception(""hata: "" + kelimeler.get(nonewhere) + "" metinde bulunamadi.""); } } [CODE]package kelimesayici;[/CODE] [CODE]public class kelimebulunamadiexception extends exception {[/CODE] kelimebulunamadiexception([CODE]string message) {[/CODE] super(message); } } [CODE]package kelimesayici;[/CODE] [CODE]public class bosdosyaexception extends inputexception {[/CODE] bosdosyaexception([CODE]string message){[/CODE] super(message); } } [CODE]package kelimesayici;[/CODE] import java.io.ioexception; [CODE]public class inputexception extends ioexception {[/CODE] inputexception([CODE]string message){[/CODE] super(message); } } [CODE]package kelimesayici;[/CODE] [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] dosyabulunamadiexception([CODE]string message){[/CODE] super(message); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.arraylist; import java.util.list; [CODE]public class inventory<t> {[/CODE] arraylist<t> items; [CODE]public inventory(){[/CODE] items = [CODE]new arraylist<>();[/CODE] } [CODE]void additem(t item){[/CODE] items.add(item); } [CODE]void removeitem(t item){[/CODE] items.remove(item); } [CODE]void printinventory(){[/CODE] system.out.pr[CODE]int(""["");[/CODE] [CODE]for (int i = 0;[/CODE] i < items.size(); i++){ if (items.get(i) instanceof item) { item a = (item) items.get(i); if (i != items.size()-1) system.out.print(a.getname() + "", ""); else system.out.println(a.getname() + ""]""); } } } t mostvalueableitem(){ [CODE]int value = 0;[/CODE] t valueableitem = null; [CODE]for (t item : items) {[/CODE] [CODE]if (item instanceof item) {[/CODE] item a = (item) item; if (a.getvalue() > value) { value = a.getvalue(); valueableitem = item; } } } [CODE]return valueableitem;[/CODE] } t finditembyname([CODE]string name) {[/CODE] t neededitem = null; [CODE]for (t item : items) {[/CODE] [CODE]if (item instanceof item) {[/CODE] item a = (item) item; if (a.getname().equals(name)) neededitem = item; } } [CODE]return neededitem;[/CODE] } list<t> finditemsbyvalue([CODE]int value) {[/CODE] arraylist<t> valuelist = [CODE]new arraylist<>();[/CODE] [CODE]for (t item : items) {[/CODE] [CODE]if (item instanceof item) {[/CODE] item a = (item) item; if (a.getvalue() > value) { valuelist.add(item); } } } [CODE]return valuelist;[/CODE] } [CODE]int gettotalvalue(){[/CODE] [CODE]int value = 0;[/CODE] [CODE]for (t item : items) {[/CODE] [CODE]if (item instanceof item) {[/CODE] item a = (item) item; value += a.getvalue(); } } [CODE]return value;[/CODE] } list<t> filterbytype([CODE]class<?> type){[/CODE] arraylist<t> typelist = [CODE]new arraylist<>();[/CODE] [CODE]for (t item : items) {[/CODE] if (item.getclass().getname().equals(type.getname())){ typelist.add(item); } } [CODE]return typelist;[/CODE] } [CODE]int gettotalweapondamage(){[/CODE] [CODE]int damage = 0;[/CODE] [CODE]for (t item : items) {[/CODE] [CODE]if (item instanceof weapon) {[/CODE] weapon a = (weapon) item; damage += a.getdamage(); } } [CODE]return damage;[/CODE] } [CODE]void sortbyvalue(){[/CODE] arraylist<t> orderedlist = [CODE]new arraylist<>(items);[/CODE] [CODE]for (int i = 0;[/CODE] i < orderedlist.size(); i++){ if (orderedlist.get(i) instanceof item) { item a = (item) orderedlist.get(i); [CODE]for (int j = 0;[/CODE] j < orderedlist.size(); j++){ if (orderedlist.get(j) instanceof item) { item b = (item) orderedlist.get(j); if (b.getvalue() <= a.getvalue()){ t temp = orderedlist.get(i); orderedlist.set(i, orderedlist.get(j)); orderedlist.set(j, temp); } } } } } items = orderedlist; } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory){[/CODE] [CODE]int value = 0;[/CODE] item valueableitem = null; [CODE]for (int i = 0;[/CODE] i < inventory.items.size(); i++){ if (inventory.items.get(i) instanceof item) { item a = (item) inventory.items.get(i); if (a.getvalue() > value) { value = a.getvalue(); valueableitem = inventory.items.get(i); } } } system.out.println(valueableitem.getname()); } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source){[/CODE] [CODE]for (int i = 0;[/CODE] i< source.items.size(); i++){ destination.additem(source.items.get(i)); } } } [CODE]public class weapon implements item {[/CODE] private [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int damage;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.name = name; this.value = value; this.damage = damage; } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } } [CODE]public interface item {[/CODE] [CODE]public string getname();[/CODE] [CODE]public int getvalue();[/CODE] } [CODE]public class armor implements item {[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense){[/CODE] this.name = name; this.value = value; this.defense = defense; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]public class potion implements item {[/CODE] [CODE]string name;[/CODE] [CODE]int value;[/CODE] [CODE]string effect;[/CODE] [CODE]public potion(string name, int value, string effect){[/CODE] this.name = name; this.value = value; this.effect = effect; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } } [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] inventory<weapon> silahenvanter = [CODE]new inventory<weapon>();[/CODE] silahenvanter.additem([CODE]new weapon(""excalibur"", 1000, 100));[/CODE] silahenvanter.additem([CODE]new weapon(""caliburn"", 999999, 200));[/CODE] silahenvanter.additem([CODE]new weapon(""some sword"", 80, 10));[/CODE] inventory<potion> potenvanter = [CODE]new inventory<potion>();[/CODE] potenvanter.additem([CODE]new potion(""leziz iksir"", 100, ""leziz""));[/CODE] potenvanter.additem([CODE]new potion(""ekşi iksir"", 5, ""çok ekşi""));[/CODE] inventory<armor> zirhenvanter1 = [CODE]new inventory<armor>();[/CODE] inventory<armor> zirhenvanter2 = [CODE]new inventory<armor>();[/CODE] zirhenvanter1.additem([CODE]new armor(""güçlü zırh"", 100, 100));[/CODE] zirhenvanter2.additem([CODE]new armor(""zayıf zırh"", 10, 10));[/CODE] inventory.transferarmor(zirhenvanter2, zirhenvanter1); inventory.pr[CODE]intmostvaluableitem(silahenvanter);[/CODE] silahenvanter.sortbyvalue(); silahenvanter.pr[CODE]intinventory();[/CODE] zirhenvanter2.pr[CODE]intinventory();[/CODE] } } ""recursion"" kavramı nedir, kısaca açıklayınız. kendini çağıran metod tekniği. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case ve tekrar eden case. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. normal metod gibi çağırıyor? hangi açıdan anlamadım. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif yöntemin recursive yöntemden çoğu durumda daha verimli olduğu bilgisinden yola çıkarak iteratif derim. bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? ?? stack nedir, neden overflow olur;[/CODE] overflow olma nedenlerinden bir tanesini açıklayınız. stack jvm hafızasında ayrılan bir bölüm. hafıza aşılırsa overflow olur. bir recursion metodunun base case'inin düzgün çalışmaması sebep olabilir. tail recursion nedir, kısaca açıklayınız. recursive case'in sonda olduğu recursion türü. abstraction kavramını açıklayınız. yazacağımız kod için gerekli olan kavramları, kontekste bağlı değişen kavramlardan ayrıştırmak. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? mümkündür, eğer hourlyemployee bunun alt sınıfı ise. tersi mümkün değil. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier daha yakın. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? çünkü hepsi constructor ile bir instance üretmek için object sınıfına refer ediyor. biz yazmazsak da jvm otomatik hallediyor. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır. her class sadece bir class'ı extend edebilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? instanceof operatörü soldaki ifadenin sağdakinin bir instance'ı (aynı sınıf ve objesi, veya alt sınıflardan biri veya onlardan birinin objesi) mı diye bakar. a b'den derive edilen herhangi bir şey olabilir. metot overriding ve overloading kavramlarını açıklayınız. overriding var olan başka bir metod ile aynı signature ile bir metod yazmaktır, böylece metod alt sınıflarda farklı davranabilir (polymorphism). overloading ise aynı isimde ancak imzaları farklı olan birden fazla metod yazılmasıdır. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? 30 java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? dynamic binding instance metodları için yapılır, static binding ise diğerleri için. java'da [CODE]static, private ve final metotlar neden static bindingle bağlanır;[/CODE] static, private ve final metotların ortak özelliği nedir? objeden bağımsız çalışmaları. overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dynamic binding. dinamik bağlamada jvm'nin görevi nedir? metod call'ının hangi metod bloğunu çağırdığını anlamak. java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? is-a mantığından ötürü. hayvan bir canlıdır ama her canlı hayvan değildir. bundan ötürü implicit şekilde upcast yapmamıza java izin verir. ama tersi söz konusu olmadığı için implicit şekilde yapamayız. java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? [CODE]class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bağlama. [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik bağlama. java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class'ların metodları tanımlanmak zorunda değil, bu işi onu extend eden class'lara bırakabilir. constructor'ları olur ama bu super'i çağırsın diye, o class'dan obje üretemeyiz. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? başına default keyword'ü koyarak default bir mekanizma implement edilebilir. abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. metodun oluşturulmasını erteleyebilmemizi veya başka birine bırakabilmemizi sağlar. inherit eden class'larda polymorphism olmasını sağlar/gerektirir. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract class'larda her metod abstract olacak diye bir kural yok, ancak interface'lerin içeriği %100 abstract'tir. tip olarak kullanamayız. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface bir sıfat gibi işler, bir class'a o sıfatı atfetmemizi sağlar. i̇çi boş bir interface tanımından ibarettir. functional interface ne bilmiyorum. bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? i̇kisi de mümkün. abstract [CODE]class shape {[/CODE] abstract [CODE]void draw();[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""displaying"");[/CODE] } } [CODE]class circle extends shape {[/CODE] [CODE]void draw() {[/CODE] system.out.pr[CODE]intln(""drawing circle"");[/CODE] } } shape c = [CODE]new shape();[/CODE] c.draw(); c.display(); yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? shape'den obje üretemeyiz, çünkü abstract class. circle'dan üretirsek alacağımız sonuç: drawing circle displaying [CODE]interface a {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""a"");[/CODE] } } [CODE]interface b {[/CODE] default [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""b"");[/CODE] } } [CODE]class c implements a, b {[/CODE] [CODE]public void show() {[/CODE] super.show(); } } new c().show(); kod bu halde compile edilebilir mi? yukarıdaki koddaki problem nedir? problemli satırın yeni hali ne olabilir? hata düzeltildikten sonra output? compile edilemez, belirsizlik var. implement ettiğimiz bağımsız iki interface'de aynı signature'e sahip iki metod var. super.show() yerine örneğin eğer a interface'indekini kullanmak istiyorsak a.show() diyebiliriz, bu durumda output a olur. java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. runtime ve java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? override eden metodun override ettiği metod'a göre ya eşit, ya da daha dar bir throwable kapsamına sahip olması, veya direkt throws ifadesinin kaldırılması gerekir. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu her daim işletilen bir kod bloğudur. catch'e girilirse de girilmezse de çalışır. catch'in içinde return edilir ve bloktan çıkılırsa da çalışır. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception sınıfını extend ederek yeni bir exception sınıfı oluşturarak. bunun içinde exception'un bakacağı kondisyonları ve hangi durumda exception fırlatacağını if case'leri ile kontrol edebiliriz. java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caughtfinallyoopsdone41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? unreachable code mevcut. exception bloklarından biri silinmeli. text file ile binary file arasındaki fark nedir? text dosyaları kullanılan text encoding türüne göre karakterleri depolar, yazılan her şey bir karakterdir. binary file'larda her şey kendi tipinde en primitive şekilde saklanır. bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? resource'larımızın boşa harcanmasına. binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? bir şey-able. unuttum kelimeyi. marker interface görevi görüyor, yazdırılabilen objelere vermek istediğimiz bir işaretçi,çünkü sadece bu objeler yazdırılabilir. binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? evet. örneğin randomaccessfile class'ının write metodları ile. buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? isnext() metoduyla. binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? dosya length'ine ulaşıp ulaşmamamız ile. [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] _______ f = new _______(""numbers.bin"", ""____""); f.write[CODE]int(10);[/CODE] f.write[CODE]int(20);[/CODE] int a = f.read[CODE]int();[/CODE] f.seek(_____________); int b = f.read[CODE]int();[/CODE] system.out.pr[CODE]intln(a + b);[/CODE] f.close(); } } boşluklara sırasıyla ne gelmelidir? output? randomaccessfile, randomaccessfile, rw, 5 gelmelidir. output ""30"". [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); ______________ pw = [CODE]new ______________(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] pw.close(); } } boşluklara sırasıyla ne gelmelidir? bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir? printwriter gelmelidir. log.txt'nin sonuna ""new long entry"" ve new line eklenir. what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cc java'da generic kavramı nedir, bu kavramın temel amacı nedir? generic'ler bir nevi bir değişkendir, farklı sınıflara göre istediğimiz sınıf veya metoda farklı behaviour'lar tanımlamamızı sağlar. upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. upperbound için extends, lowerbound için super keyword'ü kullanılır. amaç generic olarak alabildiğimiz sınıfları sınırlamak. örneğin animal almak istiyorum ama bird ve alt sınıfları olamaz. generic bir classın constructorunda type parametresi bulunur mu, neden? bulunmaz. type zaten compile sırasında belirlenir. mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. mygenericclass<object> sınıfı orijinal sınıfın metod ve attribute'larının object için çalışan compile edilmiş hallerini inherit eder. [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. herhangi bir hata yok. swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? c.next, head, gerisini bilmiyorum. [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. ""class newalgorithm extends list<t>"" map ve set veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. set her elemandan bir tane bulunan, yani unique olduğu bir liste türüdür, map ise anahtar değerler kullanılarak birbirlerine bağlı verilerden birine ulaşmamızı sağlayan bir veri yapısıdır. collections interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? elemanlarla alakalı işlevler, ekleme, çıkarma, yer değiştirme, boyutunu alma, içinde belli bir eleman var mı kontrol etme vb. i̇ki objenin equals metodu true dönüyorsa bu iki objenin hash codeleri aynıdır, bunun nedenini açıklayınız; eğer bu sağlanmazsa hangi veri yapıları istenilen şekilde sağlanır? kendi yazdığınız classlarda bunu sağlamak için hangi metotları override etmelisiniz, neden? bir öğrenci kulübü, yılsonu etkinliği için sınırlı kontenjana sahip bir kayıt sistemi oluşturuyor. sistem, öğrenci kayıtlarını ""ilk gelen ilk hizmet alır"" prensibiyle yönetiyor. ancak, bazı öğrenciler kaydını iptal edebiliyor ve boş kalan yerler otomatik olarak sıradaki öğrenciye veriliyor. bu senaryoda, kayıt sırasını ve iptal durumlarını etkin bir şekilde yönetebilmek için hangi veri yapısını tercih edersiniz? neden? fark etmez. fifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue stack ve map lifo, queue ve priority queue lifo. [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 80); scores.put(""alice"", 100); set<string> keys = scores.keyset(); [CODE]int sum = 0;[/CODE] [CODE]for (string key : keys) {[/CODE] sum += scores.get(key); } system.out.println(""number of entries: "" + scores.size()); system.out.pr[CODE]intln(""sum of scores: "" + sum);[/CODE] } } output? number of entries: 3 sum of scores: 275 [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<[CODE]string> list = new arraylist<>();[/CODE] list.add(""apple""); list.add(""banana""); list.add(1, ""cherry""); list.remove(""banana""); list.add(""apple""); system.out.println(list.size()); system.out.println(list.indexof(""apple"") + "" "" + list.lastindexof(""apple"")); } } output? 0 2 ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 60 java gui'leri bağlamında olay güdümlü (event driven) programlamayı tanımlayın. olay güdümlü programlama, kullanıcının verdiği input'lara bağlı olarak karşılaşılabilecek farklı durumların programcı tarafından tasarladığı programlama şeklidir. kullanıcıdan alınan inputa göre tetiklenen olaylar ile çalışır. geleneksel sıralı programlama ile olay güdümlü (event driven) programlama arasındaki temel fark nedir? sıralı programlamada aşama aşama ne olacağı bilinirken, olay güdümlü programlamada bilgisayarın gerçekleştireceği işlemler kullanıcının input'una bağlı değişir. borderlayout yöneticisi, bir konteynerdeki bileşenleri nasıl düzenler? konteynerdaki bölümleri farklı yönlere göre ""border""lara (adı üzerinde) böler. java gui uygulamalarında jpanel'in amacı nedir? frame üzerinde bir panel oluşturabilmek, bu panele ne koyacağımız bize kalmış. temelde container ile beraber frame'i parçalara ayırırken kullandığımız bir eleman. java'daki gui programları neden tipik olarak sonsuz bir olay döngüsü çalıştırır ve bu durum sistem veya uygulama tarafından tetiklenen yeniden çizim (repaint) olaylarıyla nasıl ilişkilidir? programların kullanıcıdan kapatılmaya dair bir input alıncaya dek açık kalması ve çalışması gerektiğinden. bunun repaint ile olan ilişkisi, bu loop'da program içerisinde gerçekleşen değişikliklerin program repaint edilmediği sürece kullanıcı tarafından görülememesi. bu yüzden programın düzenli aralıklarla repaint edilmesi gerekir. bir swing uygulamasında repaint() metodunu çağırmanın etkisi nedir? program görüntüsü tekrardan çizilir ve programda yaşanan değişiklikler ekrana yansır. aşağıdaki kodun çalışmasını izleyin ve düğmeye tıklandığında ne olduğunu belirleyin: [CODE]public class simplegui extends jframe implements actionlistener {[/CODE] [CODE]public simplegui() {[/CODE] setsize(200, 100); setdefaultcloseoperation(jframe.exit_on_close); jbutton button = [CODE]new jbutton(""click me"");[/CODE] button.addactionlistener(this); add(button); setvisible(true); } [CODE]public void actionperformed(actionevent e) {[/CODE] joptionpane.showmessagedialog(this, ""button was clicked!""); system.exit(0); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new simplegui();[/CODE] } } ""button was clicked!"" mesajını gösterir ve sistem kapatılır. aşağıdaki kod parçasını inceleyin: import javax.swing.*; import java.awt.*; [CODE]public class layoutexample {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe frame = [CODE]new jframe(""layout test"");[/CODE] frame.setsize(400, 300); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlayout([CODE]new borderlayout());[/CODE] frame.add(new jlabel(""n""), borderlayout.north); frame.add(new jbutton(""s""), borderlayout.south); frame.add(new jpanel(), borderlayout.center); frame.setvisible(true); } } bu program çalıştığında bileşenlerin nasıl düzenlendiğini açıklayın. n yazan jlabel ekranın orta üstüne, s yazan jbutton ekranın orta altına, ekranın ortasında ise boş bir jpanel yerleştirilir. thread oluşturmanın 2 temel yöntemi nedir? thread oluştururken lambda notasyonunun kullanılabilmesi ne sağlar? runnable'ı implement etmek veya thread sınıfını extend etmek. thread'in gerçekleştireceği fonksiyonun kolay şekilde ifade edilmesini. data race problemi nedir, neden kaynaklanır? nasıl önüne geçilir? thread'lerden hangisinin bir veriye diğerlerinden önce erişip, okuyup, değiştireceğinin bilinememesi. senkronizasyon ile çözülür. dead lock problemi nedir, neden kaynaklanır; bunun önüne geçebilmek için ne yapılabilir? bir thread'in a kilidini alıp b kilidini beklemesi, diğer thread'in b kilidini alıp a kilidini beklemesi. reentrant lock kullanılabilir. bir threadi başlatmak için neden run metodu çağırılmamalı, açıklayınız. peki hangi metot çağrılmalıdır? run metodu çağrılırsa main thread veya çağrıldığı thread'de, herhangi bir metod gibi execute edilir. start metodu çağrılmalıdır. bir thread başka bir thread tarafından nasıl doğru bir şekilde sonlandırılabilir? diğer thread içinde o thread'in stop metodu çağrılır. java'da kaç çeşit thread vardır, farkları açıklayınız. daemon ve normal thread, daemon thread'leri programın çalışması boyunca açık kalır. [CODE]public class bankaccount {[/CODE] private double balance; [CODE]public void deposit(double amount) {[/CODE] balance = balance + amount; ; } [CODE]public void withdraw(double amount) balance = balance - amount ;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] bankaccount account = [CODE]new bankaccount();[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 3; i++) { account.deposit(100); } }); thread t2 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 2; i++) { account.withdraw(100); } }); t1.start(); t2.start(); } } bu kodda bir problem var mı? varsa bu problemi nasıl çözersiniz? (varsa) problemi çözdükten sonra program çalıştığında balance'nin son değeri ne olur? thread'ler senkronize değil. race problemi yaşanır. çözmek için withdraw ve deposit metodlarını synchronized yapabiliriz. son değer 100 olur. [CODE]class threadvisibility {[/CODE] private [CODE]static boolean flag = false;[/CODE] private [CODE]static int value = 0;[/CODE] [CODE]public static void main(string[] args) throws interruptedexception {[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] string name = thread.currentthread().getname(); system.out.pr[CODE]intln(""started"");[/CODE] [CODE]while (!flag) {[/CODE] [CODE]try {[/CODE] thread.sleep(100); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } system.out.pr[CODE]intln(name + value);[/CODE] }); t1.setname(""t2""); t1.start(); thread.sleep(1000); // give t1 time to start value = 11; synchronized (threadvisibility.[CODE]class) {[/CODE] flag = true; } } } output? started t211 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true import java.util.arraylist; [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public string getname(){[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public void setname(string s){[/CODE] name = s; } [CODE]public string gettype(){[/CODE] [CODE]return new string(type);[/CODE] } [CODE]public void settype(string s){[/CODE] type = s; } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int i){[/CODE] [CODE]if (i <= 100 && i >= 0){[/CODE] batterylevel = i; [CODE]if (i > 0) isoperational = true;[/CODE] [CODE]else isoperational = false;[/CODE] } else system.out.println(""that's an invalid amount.""); } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } // yazdım ama pek anlamlı bir metod değil, 100'ken niye false'a çekebileyim örneğin // [CODE]public void setisoperational(boolean bool){[/CODE] // isoperational = bool; //} [CODE]public void charge(){[/CODE] batterylevel = 100; isoperational = true; } [CODE]public robot(){[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; if (batterylevel <= 100 && batterylevel >= 0) this.batterylevel = batterylevel; [CODE]else {[/CODE] system.out.println(""that's an invalid number for the battery level. it will be set to 100%.""); this.batterylevel = 100; } [CODE]if (batterylevel > 0) isoperational = true;[/CODE] [CODE]else isoperational = false;[/CODE] } [CODE]public void printrobot(){[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public string getname(){[/CODE] [CODE]return new string(name);[/CODE] } [CODE]public void setname(string s){[/CODE] name = s; } [CODE]public string getlocation(){[/CODE] [CODE]return new string(location);[/CODE] } [CODE]public void setlocation(string s){[/CODE] location = s; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).charge(); } } [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] name = ""factory1""; location = ""moon""; robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void printfactory(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work(){[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++){ int current = robots.get(i).getbatterylevel(); [CODE]if (current >= 15) current -= 15;[/CODE] [CODE]else current = 0;[/CODE] robots.get(i).setbatterylevel(current); } } } [CODE]public class robottest {[/CODE] [CODE]public static void main(string[] args){[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 24);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class casecombo {[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]string s = ""a1b2c3d4"";[/CODE] casecombo(s, 0); } [CODE]public static void casecombo(string s, int i){[/CODE] [CODE]if (i == 0){[/CODE] system.out.pr[CODE]intln(s);[/CODE] } // string'i alalım. index'deki harf mi diye bakalım. harfse bir büyük yapalım bir küçük yapalım ve ekrana yazdıralım. // sonra index'i bir arttırarak metodu tekrar çağıralım. index == length olunca sadece yazdırsın. if (i == s.length() - 1){ if ((int) s.charat(i) >= 65 && s.charat(i) <= 90){ s = s.substring(0, i) + (char)(s.charat(i) + 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] } else if ((int) s.charat(i) >= 97 && s.charat(i) <= 122){ s = s.substring(0, i) + (char)(s.charat(i) - 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] } } [CODE]else {[/CODE] if ((int) s.charat(i) >= 65 && s.charat(i) <= 90){ casecombo(s, i + 1); s = s.substring(0, i) + (char)(s.charat(i) + 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] casecombo(s, i + 1); } else if ((int) s.charat(i) >= 97 && s.charat(i) <= 122){ casecombo(s, i + 1); s = s.substring(0, i) + (char)(s.charat(i) - 32) + s.substring(i + 1, s.length()); system.out.pr[CODE]intln(s);[/CODE] casecombo(s, i + 1); } [CODE]else {[/CODE] casecombo(s, i + 1); } } [CODE]return;[/CODE] } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]package robotfactory;[/CODE] [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]package robotfactory;[/CODE] [CODE]public abstract class abstractrobot implements withbattery {[/CODE] [CODE]public abstractrobot(){[/CODE]} protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] protected [CODE]int maximumbattery;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.maximumbattery = batteryl[CODE]ife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return new string(modelname);[/CODE] } [CODE]public abstract void performtask();[/CODE] [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = maximumbattery;[/CODE] } } [CODE]package robotfactory;[/CODE] [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] robotfactory.totalrobotcount(); } } [CODE]package robotfactory;[/CODE] [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] "" + ""scanning for threats... armed: "" + isarmed); batteryl[CODE]ife-=10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] "" + ""not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] isarmed = !isarmed; } } [CODE]package robotfactory;[/CODE] [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void performtask(){[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] "" + ""cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife-=10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] "" + ""not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int miktar){[/CODE] cleaningpower+=miktar; } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.cleaningpower = cleaningpower; } } [CODE]package robotfactory;[/CODE] import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private [CODE]static int total;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] total++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] total++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (abstractrobot robot : robots) {[/CODE] [CODE]if (robot instanceof cleaningrobot){[/CODE] cleaningrobot temp = (cleaningrobot) robot; system.out.println(""cleaningrobot - model: "" + temp.getmodelname() + "", battery: "" + temp.getbatterylife() + "", cleaning power: "" + temp.getcleaningpower()); } [CODE]else if (robot instanceof securityrobot){[/CODE] securityrobot temp = (securityrobot) robot; system.out.println(""cleaningrobot - model: "" + temp.getmodelname() + "", battery: "" + temp.getbatterylife() + "", armed: "" + temp.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof cleaningrobot) {[/CODE] cleaningrobot temp = (cleaningrobot) robot; temp.boostcleaningpower(miktar); robot = temp; system.out.println(""cleaningrobot - "" + temp.getmodelname() + "" now has cleaning power: "" + temp.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (abstractrobot robot : robots){[/CODE] [CODE]if (robot instanceof securityrobot) {[/CODE] securityrobot temp = (securityrobot) robot; temp.togglearmedmode(); robot = temp; if (temp.getisarmed()) system.out.println(""securityrobot - "" + temp.getmodelname() + "" is now armed""); else system.out.println(""securityrobot - "" + temp.getmodelname() + "" is now unarmed""); } } } [CODE]public static void totalrobotcount() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + total + "" robot uretildi"");[/CODE] } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 [CODE]package envanter;[/CODE] import java.util.scanner; import java.util.arraylist; import java.io.objectoutputstream; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.inputstream; import java.io.objectinputstream; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] scanner userinput = new scanner(system.in); arraylist<envanterkaydi> esyalar = [CODE]new arraylist<>();[/CODE] [CODE]while(true) {[/CODE] system.out.println(""envanter takip sistemine hoş geldiniz. ne yapmak istersiniz?""); system.out.pr[CODE]intln(""1-) eşya ekleme 2-) eşya çıkarma 3-) stok güncelleme 4-)envanter listeleme 5-) dosyaya kaydetme 6-) dosyadan geri yükleme 7-) çıkış"");[/CODE] int answer = userinput.next[CODE]int();[/CODE] [CODE]if (answer == 7){[/CODE] break; } [CODE]else if (answer == 1) {[/CODE] system.out.pr[CODE]intln(""eklemek istediğiniz eşyanın adı nedir?"");[/CODE] string itemname = userinput.next(); system.out.pr[CODE]intln(""eşyanın stok miktarı?"");[/CODE] [CODE]int stockamount = 0;[/CODE] [CODE]try {[/CODE] stockamount = userinput.next[CODE]int();[/CODE] } [CODE]catch (exception e) {[/CODE] throw new ozellikhatasiexception(""hata: eşya bilgileri hatalı veya eksik.""); } [CODE]if (doesexist(itemname, esyalar) == -1) {[/CODE] esyalar.add([CODE]new envanterkaydi(itemname, stockamount));[/CODE] system.out.println(""eşyanız envantere eklenmiştir.""); system.out.pr[CODE]intln();[/CODE] } [CODE]else {[/CODE] esyalar.get(doesexist(itemname, esyalar)).stokguncelle(stockamount); system.out.println(""eşyanız zaten var olduğu için stok sayısı güncellenmiştir.""); system.out.pr[CODE]intln();[/CODE] } } [CODE]else if (answer == 2) {[/CODE] system.out.pr[CODE]intln(""eşyanızın adı nedir?"");[/CODE] string itemname = userinput.next(); if (doesexist(itemname, esyalar) == -1) throw new esyayokexception(""hata: i̇stenen eşya envanterde mevcut değil.""); [CODE]else {[/CODE] esyalar.remove(doesexist(itemname, esyalar)); system.out.println(""eşya silinmiştir.""); system.out.pr[CODE]intln();[/CODE] } } [CODE]else if (answer == 3) {[/CODE] system.out.println(""stok miktarını güncellemek istediğiniz eşyanın adını girin.""); string itemname = userinput.next(); if (doesexist(itemname, esyalar) == -1) throw new esyayokexception(""hata: i̇stenen eşya envanterde mevcut değil.""); [CODE]else {[/CODE] system.out.println(""miktarı girin.""); int stockamount = userinput.next[CODE]int();[/CODE] if (stockamount < 0) throw new stoknegatifexception(""hata: stok miktarı negatif olamaz.""); [CODE]else {[/CODE] esyalar.get(doesexist(itemname, esyalar)).stokguncelle(stockamount); system.out.println(""stok miktarı güncellenmiştir.""); system.out.pr[CODE]intln();[/CODE] } } } [CODE]else if (answer == 4) {[/CODE] [CODE]for (int i = 0;[/CODE] i < esyalar.size(); i++) { system.out.println(""i̇sim: "" + esyalar.get(i).getisim() + "" stok: "" + esyalar.get(i).getstok()); } system.out.pr[CODE]intln();[/CODE] } [CODE]else if (answer == 5) {[/CODE] objectoutputstream output = new objectoutputstream(new fileoutputstream(""envanter.bin"")); output.writeobject(esyalar); system.out.println(""envanter bilgileri kaydedildi.""); system.out.pr[CODE]intln();[/CODE] output.close(); } [CODE]else if (answer == 6) {[/CODE] boolean isempty = false; [CODE]try {[/CODE] objectinputstream input = new objectinputstream(new fileinputstream(""envanter.bin"")); object aaa = input.readobject(); esyalar = (arraylist<envanterkaydi>) aaa; system.out.pr[CODE]intln();[/CODE] input.close(); } [CODE]catch (exception e) {[/CODE] throw new dosyabulunamadiexception(""hata: envanter dosyası bulunamadı.""); } if (esyalar.isempty()) isempty = true; [CODE]else isempty = false;[/CODE] [CODE]if (isempty) {[/CODE] throw new bosdosyaexception(""hata: envanter dosyası boş.""); } system.out.println(""envanter yüklenildi.""); } } userinput.close(); } [CODE]public static int doesexist(string itemname, arraylist<envanterkaydi> esyalar) {[/CODE] [CODE]for (int i = 0;[/CODE] i < esyalar.size(); i++) { if (esyalar.get(i).getisim().equals(itemname)) [CODE]return i;[/CODE] } [CODE]return -1;[/CODE] } } [CODE]package envanter;[/CODE] [CODE]public class esyayokexception extends exception {[/CODE] [CODE]string message;[/CODE] esyayokexception([CODE]string message){[/CODE] super(message); } } [CODE]package envanter;[/CODE] [CODE]public class ozellikhatasiexception extends exception {[/CODE] [CODE]string message;[/CODE] ozellikhatasiexception([CODE]string message){[/CODE] super(message); } } [CODE]package envanter;[/CODE] import java.io.serializable; [CODE]public class envanterkaydi implements serializable {[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public envanterkaydi(string isim, int stok){[/CODE] this.isim = isim; this.stok = stok; } [CODE]public void stokguncelle(int miktar){[/CODE] stok = miktar; } [CODE]public string getisim() {[/CODE] [CODE]return new string(isim);[/CODE] } [CODE]public int getstok() {[/CODE] [CODE]return stok;[/CODE] } } [CODE]package envanter;[/CODE] [CODE]public class bosdosyaexception extends inputexception {[/CODE] [CODE]string message;[/CODE] bosdosyaexception([CODE]string message){[/CODE] super(message); } } [CODE]package envanter;[/CODE] [CODE]public class stoknegatifexception extends exception {[/CODE] [CODE]string message;[/CODE] stoknegat[CODE]ifexception(string message){[/CODE] super(message); } } [CODE]package envanter;[/CODE] [CODE]public class inputexception extends exception {[/CODE] [CODE]string message;[/CODE] inputexception([CODE]string message) {[/CODE] super(message); } } [CODE]package envanter;[/CODE] [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]string message;[/CODE] dosyabulunamadiexception([CODE]string message){[/CODE] super(message); } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.arrays; import java.util.collection; import java.util.iterator; import java.util.list; [CODE]public class q2 {[/CODE] [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // collection'un elemanları comparable olmalı. iterator<t> iterator = collection.iterator(); t result = iterator.next(); iterator<t> iterator2 = collection.iterator(); while (iterator2.hasnext()) { t next = iterator2.next(); [CODE]if (next instanceof comparable<?>) {[/CODE] [CODE]if (findmax) {[/CODE] if (next.compareto(result) > 0) { result = next; } } [CODE]else {[/CODE] if (next.compareto(result) < 0) { result = next; } } } } [CODE]return result;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) } } import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.list; import java.util.iterator; [CODE]public class q3 {[/CODE] [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] iterator<?> iterator = collection.iterator(); list<t> result = [CODE]new arraylist<>();[/CODE] while (iterator.hasnext()) { t a = (t) iterator.next(); if (a.getclass().equals(type)) { result.add(a); } } [CODE]return result;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] } } import java.util.arraylist; [CODE]public class undoablelist<t> extends arraylist<t> {[/CODE] private t lastadded; @override [CODE]public boolean add(t e) {[/CODE] lastadded = e; return super.add(e); } [CODE]public void undolast() {[/CODE] [CODE]if (indexof(lastadded)!=-1) remove(lastadded);[/CODE] } [CODE]public t getlastadded() {[/CODE] [CODE]return lastadded;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 import gameclasses.gameframe; import gameclasses.gamemanager; import gameclasses.gamethread; import gamedata.scenes.*; [CODE]public class game {[/CODE] [CODE]public static void main(string[] args){[/CODE] gamemanager.frame = [CODE]new gameframe();[/CODE] // i tried to reference gamemanager variables in class definitions bu that sometimes resulted in // passing references while they were still null, breaking the whole thing. so it seems that the best // approach is to only reference them only in methods, to have more control over what's going on. gameframe frame = gamemanager.frame; gamethread.setscene([CODE]new scenes1());[/CODE] gamemanager.runthreads(); // this panel is the main game screen. everything is going to be printed on this. frame.add(gamemanager.panel); frame.setvisible(true); } } [CODE]package gameclasses;[/CODE] import javax.swing.jpanel; import java.awt.color; import java.awt.graphics; import java.util.arraylist; import java.util.collections; import java.util.comparator; [CODE]public class gamethread extends thread {[/CODE] // this is the screen that the graphics thread paints everything on. [CODE]public class gamepanel extends jpanel {[/CODE] { setbackground(color.gray); } arraylist<gamenode> copynodes; [CODE]public void paintcomponent(graphics g) {[/CODE] synchronized (gamemanager.gamenodes) { copynodes = new arraylist<gamenode>(gamemanager.gamenodes); } collections.sort(copynodes, comparator.comparingint(node -> node.drawlayer)); super.pa[CODE]intcomponent(g);[/CODE] if (gamemanager.cameraexists) { [CODE]for (gamenode node : copynodes) {[/CODE] gamemanager.gamecam.render(g, node); } [CODE]for (gamenode node : copynodes) {[/CODE] gamemanager.gamecam.guirender(g, node); } } } } // every setting the thread can work in. [CODE]static public enum threadtype {[/CODE] process, physics, graphics, } // defined in setscene because you can't draw without a scene. threadtype threadtype = threadtype.process; { gamemanager.panel = [CODE]new gamepanel();[/CODE] } [CODE]public gamethread(threadtype threadtype) {[/CODE] this.threadtype = threadtype; } [CODE]public static void setscene(gamescene scene){[/CODE] gamemanager.gamenodes = scene.nodelist(); } // updates the arraylist based on new node addition and removal calls during ends of the loops. [CODE]public static void listupdate() {[/CODE] synchronized (gamemanager.gamenodes) { if (gamemanager.islocked()) { gamemanager.gamenodes.removeall(gamemanager.removenodes); gamemanager.gamenodes.addall(gamemanager.addnodes); gamemanager.gamenodes.trimtosize(); gamemanager.removenodes = [CODE]new arraylist<gamenode>();[/CODE] gamemanager.addnodes = [CODE]new arraylist<gamenode>();[/CODE] gamemanager.updatecall = false; } } } @override [CODE]public void run() {[/CODE] long lasttime = system.nanotime(); final long fpsinnano = 16_640_000; [CODE]while (true) {[/CODE] long currenttime = system.nanotime(); long deltatime = currenttime - lasttime; if (threadtype == threadtype.process) { for (gamenode node : gamemanager.gamenodes) { node.process(); } while (gamemanager.updatecall) { gamemanager.threadlock = true; listupdate(); } gamemanager.threadlock = false; } else if (threadtype == threadtype.physics) { [CODE]if (deltatime >= fpsinnano) {[/CODE] for (gamenode node : gamemanager.gamenodes) { node.physicsprocess(); } lasttime = currenttime; if (gamemanager.threadlock) { gamemanager.physicslocked = true; while (gamemanager.threadlock); } gamemanager.physicslocked = false; } } else if (threadtype == threadtype.graphics) { [CODE]if (deltatime >= fpsinnano) {[/CODE] gamemanager.panel.repa[CODE]int();[/CODE] if (gamemanager.threadlock) { gamemanager.graphicslocked = true; while (gamemanager.threadlock); } gamemanager.graphicslocked = false; } } [CODE]else {[/CODE] [CODE]try {[/CODE] sleep(1); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } } } } [CODE]package gameclasses;[/CODE] import java.awt.color; import javax.swing.jframe; [CODE]public class gameframe extends jframe {[/CODE] [CODE]public gameframe() {[/CODE] super(""tds game that sucks quite a lot""); setdefaultcloseoperation(jframe.exit_on_close); setsize(gamemanager.framewidth, gamemanager.frameheight); setbackground(color.gray); gameinput inputcontroller = [CODE]new gameinput();[/CODE] addkeylistener(inputcontroller); addmousemotionlistener(inputcontroller); addmouselistener(inputcontroller); } } [CODE]package gameclasses;[/CODE] import java.util.arraylist; [CODE]public abstract class gamescene {[/CODE] //this'll refer to another ""subscene"" when needed. which will allow you to use scenes as nodes. // you have to define scenenodes and childscenes in the constructor under classes you extend from this. [CODE]public gamescene(){[/CODE]}; [CODE]public arraylist<gamenode> childnodes = new arraylist<gamenode>();[/CODE] // if it's a node, add it and its childnodes. // returns every node in the scene and the subscene in an array. [CODE]public arraylist<gamenode> nodelist(){[/CODE] arraylist<gamenode> nodelist = [CODE]new arraylist<gamenode>();[/CODE] [CODE]for (gamenode node : childnodes) {[/CODE] if (node.childnodes.size()!= 0) { [CODE]for (int i = 0;[/CODE] i < node.nodelist().size(); i++) { node.nodelist().get(i).parentnode = node; nodelist.add(node.nodelist().get(i)); } } node.parentnode = this; nodelist.add(node); } [CODE]return nodelist;[/CODE] } } [CODE]package gameclasses;[/CODE] import java.util.arraylist; import gameclasses.gamethread.gamepanel; import gameclasses.gamethread.threadtype; import gameclasses.defaultclass.camera2d; // a class that stores static references to pretty much everything needed. [CODE]public class gamemanager {[/CODE] [CODE]public static gameframe frame;[/CODE] // static value so that it can be used by the camera. [CODE]public static gamepanel panel;[/CODE] // the size of the actual frame. [CODE]public static int framewidth = 1280;[/CODE] [CODE]public static int frameheight = 720;[/CODE] // used [CODE]for camera rendering public static int virtualwidth = 1280;[/CODE] [CODE]public static int virtualheight = 720;[/CODE] // finds the game camera. [CODE]public static boolean cameraexists = false;[/CODE] [CODE]public static camera2d gamecam;[/CODE] // debugging tool. [CODE]public static boolean showshapes = false;[/CODE] [CODE]public static boolean ispaused = false;[/CODE] [CODE]public static int gamescore = 0;[/CODE] // game score. // this is all the nodes the game will work with. [CODE]public static arraylist<gamenode> gamenodes = new arraylist<gamenode>();[/CODE] [CODE]public static arraylist<gamenode> addnodes = new arraylist<gamenode>();[/CODE] [CODE]public static arraylist<gamenode> removenodes = new arraylist<gamenode>();[/CODE] [CODE]public static boolean updatecall = false;[/CODE] // calls for an update. [CODE]public static volatile boolean threadlock = false;[/CODE] // tries to lock the threads. // becomes true when the threads are locked. [CODE]public static volatile boolean physicslocked = false;[/CODE] [CODE]public static volatile boolean graphicslocked = false;[/CODE] private [CODE]static boolean cameraexists() {[/CODE] boolean doesit = false; [CODE]for (gamenode camnode : gamenodes) {[/CODE] [CODE]if (camnode instanceof camera2d) {[/CODE] gamecam = (camera2d) camnode; doesit = true; } } [CODE]return doesit;[/CODE] } [CODE]public static synchronized boolean islocked() {[/CODE] [CODE]if (physicslocked && graphicslocked) return true;[/CODE] [CODE]else return false;[/CODE] } [CODE]public static void updateadd(gamenode node) {[/CODE] addnodes.add(node); updatecall = true; } [CODE]public static void updateremove(gamenode node) {[/CODE] removenodes.add(node); updatecall = true; } [CODE]public static gamenode getnode(class<? extends gamenode> nodeclass) {[/CODE] [CODE]for (gamenode node : gamenodes) {[/CODE] if (node.getclass().equals(node[CODE]class)) {[/CODE] [CODE]return node;[/CODE] } } [CODE]return null;[/CODE] } [CODE]public static void runthreads() {[/CODE] gamethread processthread = new gamethread(threadtype.process); gamethread physicsthread = new gamethread(threadtype.physics); gamethread graphicsthread = new gamethread(threadtype.graphics); cameraexists = cameraexists(); processthread.start(); physicsthread.start(); graphicsthread.start(); } } [CODE]package gameclasses;[/CODE] import java.awt.event.keyevent; import java.awt.event.keylistener; import java.awt.event.mousemotionlistener; import java.awt.geom.po[CODE]int2d;[/CODE] import java.awt.event.mouseevent; import java.awt.event.mouselistener; [CODE]public class gameinput implements keylistener, mouselistener, mousemotionlistener {[/CODE] // basically you have to store the key bind, make a boolean for it and add it to the if cases below. // is it a little bothersome? kind of. do i care? no. i got like less than 2 weeks for this. public static int up = keyevent.vk_up; [CODE]public static boolean isup = false;[/CODE] public static int down = keyevent.vk_down; [CODE]public static boolean isdown = false;[/CODE] public static int left = keyevent.vk_left; [CODE]public static boolean isleft = false;[/CODE] public static int right = keyevent.vk_right; [CODE]public static boolean isright = false;[/CODE] public static int reload = keyevent.vk_r; [CODE]public static boolean isreload = false;[/CODE] public static int pause = keyevent.vk_p; [CODE]public static boolean ispause = false;[/CODE] public static int weaponswitch = keyevent.vk_t; [CODE]public static boolean isweaponswitch = false;[/CODE] public static int fire = mouseevent.button1; [CODE]public static boolean isfiring = false;[/CODE] public static int leftclick = mouseevent.button1; [CODE]public static boolean isleftclick = false;[/CODE] [CODE]public static boolean ismousemoved = false;[/CODE] public static point2d cursorposition = new point2d.double(0,0); @override [CODE]public void keypressed(keyevent e) {[/CODE] int pressedkey = e.getkeycode(); [CODE]if (pressedkey == up) {[/CODE] isup = true; } [CODE]else if (pressedkey == down) {[/CODE] isdown = true; } [CODE]else if (pressedkey == left) {[/CODE] isleft = true; } [CODE]else if (pressedkey == right) {[/CODE] isright = true; } [CODE]else if (pressedkey == reload) {[/CODE] isreload = true; } [CODE]else if (pressedkey == pause) {[/CODE] ispause = true; } [CODE]else if (pressedkey == weaponswitch) {[/CODE] isweaponswitch = true; } } @override [CODE]public void keyreleased(keyevent e) {[/CODE] int releasedkey = e.getkeycode(); [CODE]if (releasedkey == up) {[/CODE] isup = false; } [CODE]else if (releasedkey == down) {[/CODE] isdown = false; } [CODE]else if (releasedkey == left) {[/CODE] isleft = false; } [CODE]else if (releasedkey == right) {[/CODE] isright = false; } [CODE]else if (releasedkey == reload) {[/CODE] isreload = false; } [CODE]else if (releasedkey == pause) {[/CODE] ispause = false; } [CODE]else if (releasedkey == weaponswitch) {[/CODE] isweaponswitch = false; } } [CODE]public static point2d getrelativemouse() {[/CODE] double relativex = getcursor().getx() - gamemanager.frame.getwidth()/2; double relativey = getcursor().gety() - gamemanager.frame.getheight()/2; return new point2d.double(relativex, relativey); } // this is to be able to use input booleans dynamically. currently used for creating direction vectors out // of booleans. [CODE]public static boolean getbool(boolean gameinbool) {[/CODE] [CODE]return gameinbool;[/CODE] } // didn't really need this. could be implemented when necessary. @override [CODE]public void keytyped(keyevent e) {[/CODE]} // for getting mouse input. @override [CODE]public void mousemoved(mouseevent e) {[/CODE] cursorposition = new point2d.double(e.getx(), e.gety()); } @override [CODE]public void mousepressed(mouseevent e) {[/CODE] if (e.getbutton() == fire) { isfiring = true; } if (e.getbutton() == leftclick) { isleftclick = true; } } @override [CODE]public void mousereleased(mouseevent e) {[/CODE] if (e.getbutton() == fire) { isfiring = false; } if (e.getbutton() == leftclick) { isleftclick = false; } } @override [CODE]public void mouseclicked(mouseevent e) {[/CODE]} @override [CODE]public void mouseentered(mouseevent e) {[/CODE]} @override [CODE]public void mouseexited(mouseevent e) {[/CODE]} [CODE]public static point2d getcursor() {[/CODE] [CODE]return cursorposition;[/CODE] } @override [CODE]public void mousedragged(mouseevent e) {[/CODE] cursorposition = new point2d.double(e.getx(), e.gety()); } } [CODE]package gameclasses;[/CODE] import java.awt.geom.po[CODE]int2d;[/CODE] import java.util.arraylist; import gameclasses.defaultclass.area2d; import gameclasses.defaultclass.nodeanim; import java.lang.math; [CODE]public abstract class gamenode extends gamescene {[/CODE] public point2d position = new point2d.double(0,0); // position on the game world. protected double scale = 1; // sprite scale. [CODE]public boolean isvisible = true;[/CODE] [CODE]public arraylist<nodeanim> anims = new arraylist<nodeanim>();[/CODE] // if the node needs a visual representation. [CODE]public int currentanim = 0;[/CODE] protected gamescene parentnode = null; [CODE]public int drawlayer = 0;[/CODE] protected boolean guielement = false; // if this is set to be true, it'll be rendered on top, and independent from game position. // custom area2d class as collision. to set values, use the setshape method. protected area2d collisionshape = [CODE]new area2d(this);[/CODE] protected area2d hitboxshape = [CODE]new area2d(this);[/CODE] [CODE]public gamenode() {[/CODE]}; // for spawning nodes at (0,0). [CODE]public gamenode(double x, double y) {[/CODE] position.setlocation(x,y); } [CODE]public gamenode(gamenode node) {[/CODE] parentnode = node; } // for dynamic access to these attributes. [CODE]public double spritewidth() {[/CODE] if (anims.size() != 0 && anims.get(0) != null) return anims.get(0).frame(0).getwidth(); [CODE]else return 0;[/CODE] } [CODE]public double spriteheight() {[/CODE] if (anims.size() != 0 && anims.get(0) != null) return anims.get(0).frame(0).getheight(); [CODE]else return 0;[/CODE] } [CODE]public double getscale() {[/CODE] [CODE]return scale;[/CODE] } // below here are generic methods that can be used by anything that inherits this class. [CODE]public double movetoward(double target, double start, double amount) {[/CODE] double delta = target - start; if (math.abs(delta) <= amount || delta == 0) { [CODE]return target;[/CODE] } double position = start + (math.signum(delta) * math.abs(amount)); [CODE]return position;[/CODE] } [CODE]public gamenode collidingwith() {[/CODE] for (gamenode node : gamemanager.gamenodes) { // skip self check if (!node.collexists() || !(node == this)) { if (collisionshape.areaintersecting(node.collisionshape)) { [CODE]return node;[/CODE] } } } [CODE]return null;[/CODE] } // this is for checking before spawning objects. it runs through addnodes. [CODE]public gamenode ghostcollidingwith() {[/CODE] for (gamenode node : gamemanager.addnodes) { // skip self check if (!node.collexists() || !(node == this)) { if (collisionshape.areaintersecting(node.collisionshape)) { [CODE]return node;[/CODE] } } } [CODE]return null;[/CODE] } [CODE]public gamenode collidingwith(class<? extends gamenode> class1) {[/CODE] for (gamenode node : gamemanager.gamenodes) { // skip self check if (!node.collexists() || !(node == this)) { if (node.getclass().equals(class1) && collisionshape.areaintersecting(node.collisionshape)) { [CODE]return node;[/CODE] } } } [CODE]return null;[/CODE] } [CODE]public gamenode ishitting() {[/CODE] for (gamenode node : gamemanager.gamenodes) { if (!node.hitboxexists() || !(node == this)) { if (hitboxshape.areaintersecting(node.hitboxshape)) { [CODE]return node;[/CODE] } } } [CODE]return null;[/CODE] } // this is for specifically checking if it's getting hit by a certain class. [CODE]public gamenode ishitting(class<? extends gamenode> class1) {[/CODE] for (gamenode node : gamemanager.gamenodes) { if (!node.hitboxexists() || !(node == this)) { if (hitboxshape.areaintersecting(node.hitboxshape) && node.getclass().equals(class1) && hitboxshape.areaintersecting(node.hitboxshape)) { [CODE]return node;[/CODE] } } } [CODE]return null;[/CODE] } [CODE]public boolean collexists() {[/CODE] if (collisionshape != null && collisionshape.areashape != null) [CODE]return true;[/CODE] [CODE]else return false;[/CODE] } [CODE]public area2d getcollision() {[/CODE] [CODE]return collisionshape;[/CODE] } [CODE]public boolean hitboxexists() {[/CODE] if (hitboxshape != null && hitboxshape.areashape != null) [CODE]return true;[/CODE] [CODE]else return false;[/CODE] } [CODE]public area2d gethitbox() {[/CODE] [CODE]return hitboxshape;[/CODE] } [CODE]public synchronized void nodeadd(gamenode node) {[/CODE] gamemanager.updateadd(node); } [CODE]public synchronized void nodedispose(gamenode node) {[/CODE] gamemanager.updateremove(node); } // this is where calculations unrelated to physics will be made. it runs as fast as possible. [CODE]public void process() {[/CODE]} // this is where physics calculations that run in ticks will be handled. [CODE]public void physicsprocess() {[/CODE]} } package gameclasses.default[CODE]class;[/CODE] import gameclasses.gamethread.gamepanel; import gameclasses.defaultclass.gui.guinode; import gameclasses.defaultclass.gui.textnode; import gameclasses.gamenode; import java.awt.graphics; import gameclasses.gamemanager; import java.lang.math; import java.awt.font; // this is a default node created from gamenode in order to process what's on the screen. // can also be used for process calculations just like the average node. [CODE]public class camera2d extends gamenode {[/CODE] // position is inherited. // the inherited scale value is used as zoom. [CODE]public camera2d() {[/CODE] super(); } [CODE]public camera2d(double x, double y) {[/CODE] super(x, y); } [CODE]public void render(graphics g, gamenode node) {[/CODE] gamepanel panel = gamemanager.panel; // analytic geometry basically. the gamemanager sizes are static, while // the getwidth/height commands return the dynamic value. // ([CODE]for panels, the sprite methods always return the dimensions of the image) if (!(node instanceof guinode)) {[/CODE] int x = (int) math.round((-position.getx() + node.position.getx() - (node.spritewidth()*node.getscale())/2 + gamemanager.virtualwidth/2) * panel.getwidth() * scale / gamemanager.virtualwidth); int y = (int) math.round((+position.gety() - node.position.gety() - (node.spriteheight()*node.getscale())/2 + gamemanager.virtualheight/2) * panel.getheight() * scale / gamemanager.virtualheight); int width = (int) math.round(node.spritewidth() * node.getscale() * scale * panel.getwidth() / gamemanager.virtualwidth); int height = (int) math.round(node.spriteheight() * node.getscale() * scale * panel.getheight() / gamemanager.virtualheight); boolean infield = true; if ((x > panel.getwidth() || x + node.spritewidth()*node.getscale() < 0) || (y > panel.getheight() || y + node.spriteheight()*node.getscale() < 0)) infield = false; if (node.anims.size() != 0 && infield && node.isvisible) g.drawimage(node.anims.get(node.currentanim).animatedframe(), x, y, width, height, null); // draws collision shapes if there are any. if (node.collexists() && gamemanager.showshapes) { int collisionx = (int) math.round((-position.getx() + node.position.getx() + node.getcollision().areashape.getx() - (node.getcollision().areashape.getwidth()*node.getscale())/2 + gamemanager.virtualwidth/2) * panel.getwidth() * scale / gamemanager.virtualwidth); int collisiony = (int) math.round((+position.gety() - node.position.gety() - node.getcollision().areashape.gety() - (node.getcollision().areashape.getheight()*node.getscale())/2 + gamemanager.virtualheight/2) * panel.getheight() * scale / gamemanager.virtualheight); int collisionwidth = (int) math.round(node.getcollision().areashape.getwidth() * node.getscale() * scale * panel.getwidth() / gamemanager.virtualwidth); int collisionheight = (int) math.round(node.getcollision().areashape.getheight() * node.getscale() * scale * panel.getheight() / gamemanager.virtualheight); g.drawrect(collisionx, collisiony, collisionwidth, collisionheight); } // draws hitboxes if there are any. if (node.hitboxexists() && gamemanager.showshapes) { int hitboxx = (int) math.round((-position.getx() + node.position.getx() + node.gethitbox().areashape.getx() - (node.gethitbox().areashape.getwidth()*node.getscale())/2 + gamemanager.virtualwidth/2) * panel.getwidth() * scale / gamemanager.virtualwidth); int hitboxy = (int) math.round((+position.gety() - node.position.gety() - node.gethitbox().areashape.gety() - (node.gethitbox().areashape.getheight()*node.getscale())/2 + gamemanager.virtualheight/2) * panel.getheight() * scale / gamemanager.virtualheight); int hitboxwidth = (int) math.round(node.gethitbox().areashape.getwidth() * node.getscale() * scale * panel.getwidth() / gamemanager.virtualwidth); int hitboxheight = (int) math.round(node.gethitbox().areashape.getheight() * node.getscale() * scale * panel.getheight() / gamemanager.virtualheight); g.drawrect(hitboxx, hitboxy, hitboxwidth, hitboxheight); } } } [CODE]public void guirender(graphics g, gamenode node) {[/CODE] gamepanel panel = gamemanager.panel; if (node instanceof guinode && node.isvisible) { int x = (int) math.round((node.position.getx() - (node.spritewidth()*node.getscale())/2 + gamemanager.virtualwidth/2) * panel.getwidth() / gamemanager.virtualwidth); int y = (int) math.round((-node.position.gety() - (node.spriteheight()*node.getscale())/2 + gamemanager.virtualheight/2) * panel.getheight() / gamemanager.virtualheight); int width = (int) math.round(node.spritewidth() * node.getscale() * panel.getwidth() / gamemanager.virtualwidth); int height = (int) math.round(node.spriteheight() * node.getscale() * panel.getheight() / gamemanager.virtualheight); if (node.anims.size() != 0) g.drawimage(node.anims.get(node.currentanim).animatedframe(), x, y, width, height, null); [CODE]if (node instanceof textnode) {[/CODE] textnode nodetext = (textnode) node; if (nodetext.getfont() != null) { double framearea = (double) gamemanager.frame.getheight() * gamemanager.frame.getwidth(); double virtualarea = (double) gamemanager.virtualwidth * gamemanager.virtualheight; double scalefactor = framearea / virtualarea; int fontsize = math.max(1, (int) math.round(nodetext.getfont().getsize() * nodetext.getscale() * scalefactor)); g.setfont(new font(nodetext.getfont().getname(), nodetext.getfont().getstyle(), fontsize)); } g.setcolor(nodetext.getcolor()); g.drawstring(nodetext.gettext(), ([CODE]int) x, (int) y);[/CODE] } } } [CODE]public void follownode(gamenode node) {[/CODE] vector2d diff = new vector2d(node.position.getx() - position.getx(), node.position.gety() - position.gety()); vector2d move = vector2d.zero; double distance = diff.length(); [CODE]if (distance >= 50) {[/CODE] move = diff.normalized().dot(8); } [CODE]else if (distance >= 1) {[/CODE] move = diff.normalized().dot(2); } position.setlocation(position.getx() + move.x, position.gety() + move.y); } } package gameclasses.default[CODE]class;[/CODE] import java.awt.geom.po[CODE]int2d;[/CODE] import java.awt.geom.rectangle2d; import gameclasses.gamenode; [CODE]public class area2d {[/CODE] [CODE]public rectangle2d areashape;[/CODE] [CODE]public gamenode node;[/CODE] // we calculate it as if it is centered on the position variable. // the margin values shift the position of the shape from the center. [CODE]public void setshape(double xmargin, double ymargin, double width, double height) {[/CODE] areashape = new rectangle2d.double(xmargin, ymargin, width, height); } [CODE]public area2d(gamenode node) {[/CODE] this.node = node; } [CODE]public boolean exists() {[/CODE] [CODE]if (areashape == null) return false;[/CODE] [CODE]else return true;[/CODE] } [CODE]public boolean doescontain(point2d point) {[/CODE] [CODE]if (exists()) {[/CODE] double x = node.position.getx() + areashape.getx(); double y = node.position.gety() + areashape.gety(); double width = areashape.getwidth() * node.getscale(); double height = areashape.getheight() * node.getscale(); return point.getx() >= x - width/2 && point.getx() <= x + width/2 && point.gety() >= - y - height/2 && point.gety() <= - y + height/2; } [CODE]else return false;[/CODE] } // does checks to see if the collision/hitboxes are intersecting. aabb collision. [CODE]public boolean areaintersecting(area2d other) {[/CODE] if (exists() && other.exists()) { double x = math.round(node.position.getx() + areashape.getx()); double y = math.round(node.position.gety() + areashape.gety()); double width = math.round(areashape.getwidth() * node.getscale()); double height = math.round(areashape.getheight() * node.getscale()); double otherx = math.round(other.node.position.getx() + other.areashape.getx()); double othery = math.round(other.node.position.gety() + other.areashape.gety()); double otherwidth = math.round(other.areashape.getwidth() * other.node.getscale()); double otherheight = math.round(other.areashape.getheight() * other.node.getscale()); [CODE]return x < otherx + otherwidth && x + width > otherx && y < othery + otherheight && y + height > othery;[/CODE] } [CODE]else return false;[/CODE] } } package gameclasses.default[CODE]class;[/CODE] import java.awt.image.bufferedimage; import java.io.file; import java.util.iterator; import java.util.timertask; import java.util.timer; import javax.imageio.imageio; import javax.imageio.imagereader; import javax.imageio.metadata.iiometadata; import javax.imageio.metadata.iiometadatanode; import javax.imageio.stream.imageinputstream; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.affinetrans[CODE]formop;[/CODE] import java.lang.math; import org.w3c.dom.nodelist; import java.awt.renderingh[CODE]ints;[/CODE] import java.awt.graphics2d; [CODE]public class nodeanim {[/CODE] private bufferedimage[] animation; private bufferedimage[] trans[CODE]formedanim;[/CODE] private [CODE]int currentframe = 0;[/CODE] [CODE]public int speed = 1;[/CODE] // when set to 1, every frame is visible for 0.1 seconds. when set to 0, it doesn't play. [CODE]public boolean flipx = false;[/CODE] [CODE]public boolean flipy = false;[/CODE] private [CODE]int length;[/CODE] [CODE]static timer animtimer = new timer();[/CODE] [CODE]public void runframes() {[/CODE] [CODE]if (speed != 0) {[/CODE] animtimer.scheduleatfixedrate([CODE]new timertask() {[/CODE] @override [CODE]public void run() {[/CODE] currentframe = (currentframe + 1) % length; } }, 0, 100/speed); } } [CODE]public nodeanim(string filepath) {[/CODE] file file = [CODE]new file(filepath);[/CODE] try (imageinputstream stream = imageio.createimageinputstream(file)) { iterator<imagereader> readers = imageio.getimagereaders(stream); string fileformat = readers.next().get[CODE]formatname();[/CODE] if (fileformat.equals(""g[CODE]if"")) {[/CODE] [CODE]try {[/CODE] animation = loadframes(file); transformedanim = animation.clone(); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]else {[/CODE] animation = [CODE]new bufferedimage[1];[/CODE] animation[0] = imageio.read(file); length = 1; transformedanim = animation.clone(); } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } runframes(); } [CODE]public nodeanim(bufferedimage sheet, int tilesize) {[/CODE] this.animation = splitsheet(sheet, tilesize); speed = 0; } [CODE]public bufferedimage frame(int index) {[/CODE] [CODE]return transformedanim[index];[/CODE] } [CODE]public bufferedimage animatedframe() {[/CODE] [CODE]return transformedanim[currentframe];[/CODE] } [CODE]public void setcurrentframe(int index) {[/CODE] currentframe = index; } [CODE]public void transformanim(boolean horizontal, boolean vertical, double radians) {[/CODE] bufferedimage[] transformedanimation = new bufferedimage[animation.length]; transformedanimation = animation.clone(); [CODE]for (int i = 0;[/CODE] i < animation.length; i++) { trans[CODE]formedanimation[i] = flip(transformedanimation[i], horizontal, vertical);[/CODE] } [CODE]if (radians != 0) {[/CODE] [CODE]for (int i = 0;[/CODE] i < animation.length; i++) { trans[CODE]formedanimation[i] = rotate(transformedanimation[i], radians);[/CODE] } } trans[CODE]formedanim = transformedanimation;[/CODE] } // uses affinetransform to flip the image if necessary. [CODE]public static bufferedimage flip(bufferedimage sprite, boolean horizontal, boolean vertical) {[/CODE] affinetrans[CODE]form transform = new affinetransform();[/CODE] int width = sprite.getwidth(); int height = sprite.getheight(); if (horizontal) transform.scale(-1, 1); // flip horizontally if (vertical) transform.scale(1, -1); // flip vertically transform.translate(horizontal ? -width : 0, vertical ? -height : 0); affinetransformop op = new affinetransformop(transform, affinetransformop.type_nearest_neighbor); return op.filter(sprite, null); } // uses affinetransform to rotate the image. [CODE]public static bufferedimage rotate(bufferedimage sprite, double radians) {[/CODE] int width = sprite.getwidth(); int height = sprite.getheight(); double sin = math.abs(math.sin(radians)); double cos = math.abs(math.cos(radians)); int newwidth = (int) math.ceil(width * cos + height * sin); int newheight = (int) math.ceil(width * sin + height * cos); bufferedimage rotatedsprite = new bufferedimage(newwidth, newheight, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2d = rotatedsprite.creategraphics(); g2d.setrenderinghint(renderinghints.key_interpolation, renderinghints.value_[CODE]interpolation_nearest_neighbor);[/CODE] affinetrans[CODE]form transform = new affinetransform();[/CODE] transform.translate((newwidth - width) / 2.0, (newheight - height) / 2.0); transform.rotate(radians, width / 2.0, height / 2.0); // rotate around center g2d.drawimage(sprite, trans[CODE]form, null);[/CODE] g2d.dispose(); [CODE]return rotatedsprite;[/CODE] } //splits a gif file into an array. private bufferedimage[] loadframes(file file) throws exception { imageinputstream stream = imageio.createimageinputstream(file); iterator<imagereader> readers = imageio.getimagereadersby[CODE]formatname(""gif"");[/CODE] if (!readers.hasnext()) throw [CODE]new runtimeexception();[/CODE] imagereader reader = readers.next(); reader.setinput(stream); int numframes = reader.getnumimages(true); int width = reader.getwidth(0); int height = reader.getheight(0); bufferedimage[] frames = [CODE]new bufferedimage[numframes];[/CODE] [CODE]for (int i = 0;[/CODE] i < numframes; i++) { bufferedimage rawframe = reader.read(i); // reads metadata to get the actual offset of the frame, if it's specified in the gif file. iiometadata metadata = reader.getimagemetadata(i); [CODE]int xoffset = 0, yoffset = 0;[/CODE] [CODE]try {[/CODE] string metaformat = metadata.getnativemetadata[CODE]formatname();[/CODE] iiometadatanode root = (iiometadatanode) metadata.getastree(meta[CODE]format);[/CODE] nodelist imagedescriptor = root.getelementsbytagname(""imagedescriptor""); if (imagedescriptor.getlength() > 0) { iiometadatanode descriptor = (iiometadatanode) imagedescriptor.item(0); xoffset = integer.parseint(descriptor.getattribute(""imageleftposition"")); yoffset = integer.parseint(descriptor.getattribute(""imagetopposition"")); } } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } bufferedimage fixedframe = new bufferedimage(width, height, bufferedimage.type_[CODE]int_argb);[/CODE] graphics2d g2d = fixedframe.creategraphics(); g2d.drawimage(rawframe, xoffset, yoffset, null); g2d.dispose(); frames[i] = fixedframe; } length = numframes; [CODE]return frames;[/CODE] } // takes subimages of each sprite sheet, and returns them as an array. private [CODE]static bufferedimage[] splitsheet(bufferedimage spritesheet, int tilesize) {[/CODE] int cols = spritesheet.getwidth() / tilesize; int rows = spritesheet.getheight() / tilesize; bufferedimage[] frames = [CODE]new bufferedimage[cols * rows];[/CODE] [CODE]for (int y = 0;[/CODE] y < rows; y++) { [CODE]for (int x = 0;[/CODE] x < cols; x++) { frames[y * cols + x] = spritesheet.getsubimage(x * tilesize, y * tilesize, tilesize, tilesize); } } [CODE]return frames;[/CODE] } } package gameclasses.default[CODE]class;[/CODE] import java.lang.math; import gameclasses.gameinput; [CODE]public class vector2d {[/CODE] [CODE]public double x = 0;[/CODE] // x direction. [CODE]public double y = 0;[/CODE] // y direction. [CODE]public static vector2d zero = new vector2d(0,0);[/CODE] [CODE]public vector2d (double x, double y) {[/CODE] this.x = x; this.y = y; } // typically for control directions. [CODE]public vector2d (boolean up, boolean down, boolean left, boolean right) {[/CODE] x = - (gameinput.getbool(gameinput.isleft) ? 1 : 0) + (gameinput.getbool(gameinput.isright) ? 1 : 0); y = - (gameinput.getbool(gameinput.isdown) ? 1 : 0) + (gameinput.getbool(gameinput.isup) ? 1 : 0); } [CODE]public double length() {[/CODE] return math.sqrt(x*x + y*y); } [CODE]public vector2d normalized() {[/CODE] [CODE]if (length() > 0) {[/CODE] double [CODE]newx = x/length();[/CODE] double [CODE]newy = y/length();[/CODE] [CODE]return new vector2d(newx, newy);[/CODE] } else return vector2d.zero; } [CODE]public vector2d dot(vector2d vector) {[/CODE] return new vector2d(x * vector.x, y * vector.y); } [CODE]public vector2d dot(double a) {[/CODE] [CODE]return new vector2d(x * a, y * a);[/CODE] } // move toward method for the vector class. made just to make it easier to write controls. [CODE]public vector2d movetoward(vector2d vector, double amount) {[/CODE] double dx = vector.x - x; double dy = vector.y - y; double delta = math.sqrt(dx * dx + dy * dy); [CODE]if (delta <= amount) {[/CODE] [CODE]return vector;[/CODE] } double [CODE]newx = x + dx * (amount / delta);[/CODE] double [CODE]newy = y + dy * (amount / delta);[/CODE] [CODE]return new vector2d(newx, newy);[/CODE] } // utilizes the standard rotation formulas to rotate the vector. [CODE]public vector2d rotate(double radians) {[/CODE] double newx = this.x * math.cos(radians) - this.y * math.sin(radians); double newy = this.x * math.sin(radians) + this.y * math.cos(radians); [CODE]return new vector2d(newx, newy);[/CODE] } } package gameclasses.defaultclass.gui; import gameclasses.gamenode; [CODE]public abstract class guinode extends gamenode {[/CODE] [CODE]public guinode(double x, double y) {[/CODE] super (x, y); guielement = true; } } package gameclasses.defaultclass.gui; import java.awt.font; import java.awt.color; [CODE]public abstract class textnode extends guinode {[/CODE] // create an anonymous class using this. private [CODE]string text;[/CODE] private font font; private color color; [CODE]public textnode(double x, double y) {[/CODE] super(x, y); } [CODE]public color getcolor() {[/CODE] [CODE]return color;[/CODE] } [CODE]public font getfont() {[/CODE] [CODE]return font;[/CODE] } [CODE]public string gettext() {[/CODE] [CODE]return text;[/CODE] } [CODE]public void setcolor(color color) {[/CODE] this.color = color; } [CODE]public void setfont(font font) {[/CODE] this.font = font; } [CODE]public void settext(string text) {[/CODE] this.text = text; } [CODE]public void setscale(double scale) {[/CODE] [CODE]if (font != null) {[/CODE] int newsize = (int) (font.getsize() * scale); // scale the font size this.font = new font(font.getname(), font.getstyle(), [CODE]newsize);[/CODE] } } } package gameclasses.defaultclass.gui; import java.awt.geom.po[CODE]int2d;[/CODE] import gameclasses.gameinput; import gameclasses.gamemanager; import gameclasses.defaultclass.area2d; import gameclasses.defaultclass.nodeanim; [CODE]public abstract class buttonnode extends guinode {[/CODE] // use this for button hitboxes. we don't want to interact with game world nodes. area2d buttonarea = [CODE]new area2d(this);[/CODE] [CODE]public buttonnode(double x, double y, string filepath) {[/CODE] super(x, y); nodeanim button1 = [CODE]new nodeanim(filepath);[/CODE] anims.add(button1); buttonarea.setshape(0, 0, button1.frame(0).getwidth(), button1.frame(0).getheight()); } [CODE]public static boolean hasclicked = false;[/CODE] @override [CODE]public void process() {[/CODE] double mousex = gameinput.getcursor().getx() - gamemanager.frame.getwidth()/2; double mousey = gameinput.getcursor().gety() - gamemanager.frame.getheight()/2; point2d mouserelative = new point2d.double(mousex, mousey); if (buttonarea.doescontain(mouserelative) && gameinput.isleftclick && !hasclicked) { buttonfunc(); hasclicked = true; } if (!gameinput.isleftclick) { hasclicked = false; } } [CODE]public void buttonfunc() {[/CODE]} } package gamedata.scenes; import gameclasses.gameinput; import gameclasses.gamemanager; import gameclasses.defaultclass.gui.buttonnode; import gameclasses.defaultclass.gui.guinode; import gameclasses.gamescene; import gameclasses.gamethread; import gameclasses.defaultclass.nodeanim; import gameclasses.defaultclass.gui.textnode; import java.awt.font; import java.io.file; import java.io.pr[CODE]intwriter;[/CODE] import java.awt.color; import gamedata.nodes.player; import gamedata.nodes.wavemanager; import gamedata.nodes.weapons; import gamedata.nodes.weapons.bullets.bullet; import gamedata.nodes.weapons.gun.pistol; import java.util.scanner; [CODE]public class gui extends gamescene {[/CODE] [CODE]static guinode pausemenu = new guinode(0, 0) {[/CODE] buttonnode newgame = new buttonnode(0, 200, ""gamedata/images/menu/new.png"") { { drawlayer = 1; isvisible = false; } [CODE]public void process() {[/CODE] isvisible = gamemanager.ispaused; super.process(); }; [CODE]public void buttonfunc() {[/CODE] if (gamemanager.ispaused) { gamethread.setscene([CODE]new scenes1());[/CODE] wavemanager.level = 0; wavemanager.zombieamount = 0; wavemanager.isspawning = true; bullet.totalamount = 0; weapons.r[CODE]ifleunlocked = false;[/CODE] weapons.r[CODE]ifleadded = false;[/CODE] weapons.shotgununlocked = false; weapons.shotgunadded = false; weapons.sniperunlocked = false; weapons.sniperadded = false; weapons.rocketunlocked = false; weapons.rocketadded = false; gamemanager.gamescore = 0; gamemanager.gamecam.position.setlocation(0, 0); gamemanager.ispaused = false; } }; }; buttonnode save = new buttonnode(0, 100, ""gamedata/images/menu/save.png"") { file save = new file(""save.sav""); { drawlayer = 1; isvisible = false; } [CODE]public void process() {[/CODE] isvisible = gamemanager.ispaused; super.process(); }; [CODE]public void buttonfunc() {[/CODE] if (gamemanager.ispaused) { [CODE]try {[/CODE] pr[CODE]intwriter writer = new printwriter(save);[/CODE] writer.println(wavemanager.level); writer.println(weapons.r[CODE]ifleunlocked);[/CODE] writer.println(weapons.shotgununlocked); writer.println(weapons.sniperunlocked); writer.println(weapons.rocketunlocked); writer.println(gamemanager.gamescore); writer.println(((player)gamemanager.getnode(player.class)).gethp()); writer.close(); gamemanager.ispaused = false; } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] // failed to save! } } }; }; buttonnode load = new buttonnode(0, 0, ""gamedata/images/menu/loadnt.png"") { nodeanim loadable = new nodeanim(""gamedata/images/menu/load.png""); { anims.add(loadable); drawlayer = 1; isvisible = false; } file save = new file(""save.sav""); [CODE]public void process() {[/CODE] isvisible = gamemanager.ispaused; if (save.exists()) { currentanim = 1; super.process(); } [CODE]else currentanim = 0;[/CODE] }; [CODE]public void buttonfunc() {[/CODE] if (gamemanager.ispaused) { [CODE]try {[/CODE] gamethread.setscene([CODE]new scenes1());[/CODE] scanner reader = [CODE]new scanner(save);[/CODE] wavemanager.level = integer.parseint(reader.nextline()); weapons.rifleunlocked = boolean.parseboolean(reader.nextline()); weapons.shotgununlocked = boolean.parseboolean(reader.nextline()); weapons.sniperunlocked = boolean.parseboolean(reader.nextline()); weapons.rocketunlocked = boolean.parseboolean(reader.nextline()); gamemanager.gamescore = integer.parseint(reader.nextline()); ((player)gamemanager.getnode(player.class)).sethp(integer.parseint(reader.nextline())); reader.close(); wavemanager.zombieamount = 0; wavemanager.isspawning = true; bullet.totalamount = 0; weapons.r[CODE]ifleadded = false;[/CODE] weapons.shotgunadded = false; weapons.sniperadded = false; weapons.rocketadded = false; gamemanager.gamecam.position.setlocation(0, 0); gamemanager.ispaused = false; } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] // failed to load! } } }; }; buttonnode quit = new buttonnode(0, -100, ""gamedata/images/menu/quit.png"") { { drawlayer = 1; isvisible = false; } [CODE]public void process() {[/CODE] isvisible = gamemanager.ispaused; super.process(); }; [CODE]public void buttonfunc() {[/CODE] if (gamemanager.ispaused) { system.exit(0); } }; }; nodeanim tint = new nodeanim(""gamedata/images/menu/paused.png""); { isvisible = false; anims.add(t[CODE]int);[/CODE] childnodes.add([CODE]newgame);[/CODE] childnodes.add(save); childnodes.add(load); childnodes.add(quit); } boolean pausetriggered = false; [CODE]public void process() {[/CODE] isvisible = gamemanager.ispaused; if (gameinput.ispause && !pausetriggered) { gamemanager.ispaused = !gamemanager.ispaused; pausetriggered = true; } if (!gameinput.ispause) { pausetriggered = false; } } }; textnode health = [CODE]new textnode(300, 300){[/CODE] { setfont(new font(font.serif, font.plain, 12)); settext(""health: 0""); setcolor(color.white); scale = 5; } [CODE]public void physicsprocess() {[/CODE] if (((player) gamemanager.getnode(player.class)).gethp() > 0) settext(""health: "" + ((player) gamemanager.getnode(player.class)).gethp()); [CODE]else settext(""health: 0"");[/CODE] }; }; textnode score = [CODE]new textnode(300, 250){[/CODE] { setfont(new font(font.serif, font.plain, 12)); settext(""score: 0""); setcolor(color.white); scale = 5; } [CODE]public void physicsprocess() {[/CODE] settext(""score: "" + gamemanager.gamescore); }; }; textnode weapon = [CODE]new textnode(-600, 300){[/CODE] { setfont(new font(font.serif, font.plain, 12)); settext(""current weapon: 0""); setcolor(color.white); scale = 5; } [CODE]public void physicsprocess() {[/CODE] settext(""current weapon: "" + ((player) gamemanager.getnode(player.class)).getweapons().getcurrentgun().name); }; }; textnode bullets = [CODE]new textnode(-600, 250){[/CODE] { setfont(new font(font.serif, font.plain, 12)); settext(""bullets: 0""); setcolor(color.white); scale = 5; } [CODE]public void physicsprocess() {[/CODE] settext(""bullets: "" + ((player) gamemanager.getnode(player.class)).getweapons().getcurrentgun().getbulletsleft()); }; }; textnode ammo = [CODE]new textnode(-600, 200){[/CODE] { setfont(new font(font.serif, font.plain, 12)); settext(""ammo: 0""); setcolor(color.white); scale = 5; } [CODE]public void physicsprocess() {[/CODE] if (((player) gamemanager.getnode(player.class)).getweapons().getcurrentgun() instanceof pistol) { settext(""ammo: ∞""); } else settext(""ammo: "" + ((player) gamemanager.getnode(player.class)).getweapons().getcurrentgun().getmagazinesleft()); }; }; textnode unlocktext = [CODE]new textnode(0, -200){[/CODE] { setfont(new font(font.serif, font.plain, 12)); settext(""[CODE]new weapon unlocked!"");[/CODE] setcolor(color.white); scale = 4; isvisible = false; } [CODE]int waitcooldown = 0;[/CODE] boolean prevr[CODE]ifle = false, prevshotgun = false, prevsniper = false, prevrocket = false;[/CODE] [CODE]public void physicsprocess() {[/CODE] boolean newunlock = (!prevrifle && weapons.rifleunlocked) || (!prevshotgun && weapons.shotgununlocked) || (!prevsniper && weapons.sniperunlocked) || (!prevrocket && weapons.rocketunlocked); [CODE]if (newunlock) {[/CODE] waitcooldown = 180; isvisible = true; } [CODE]if (waitcooldown > 0) {[/CODE] waitcooldown--; [CODE]if (waitcooldown == 0) {[/CODE] isvisible = false; } } prevrifle = weapons.r[CODE]ifleunlocked;[/CODE] prevshotgun = weapons.shotgununlocked; prevsniper = weapons.sniperunlocked; prevrocket = weapons.rocketunlocked; } }; { childnodes.add(pausemenu); childnodes.add(health); childnodes.add(score); childnodes.add(weapon); childnodes.add(bullets); childnodes.add(ammo); childnodes.add(unlocktext); } } package gamedata.scenes; import gameclasses.gamenode; import gameclasses.gamescene; import gameclasses.defaultclass.camera2d; import gameclasses.defaultclass.nodeanim; import gamedata.nodes.player; import gamedata.nodes.wavemanager; [CODE]public class scenes1 extends gamescene {[/CODE] [CODE]public scenes1() {[/CODE] gamenode map = [CODE]new gamenode(0,0) {[/CODE] nodeanim map = new nodeanim(""gamedata/images/welp.png""); { drawlayer = -1; anims.add(map); } }; gui gui = [CODE]new gui();[/CODE] childnodes.add(map); childnodes.add([CODE]new camera2d());[/CODE] childnodes.add([CODE]new player());[/CODE] childnodes.addall(gui.nodelist()); childnodes.add([CODE]new wavemanager());[/CODE] } } package gamedata.nodes; import gameclasses.gamemanager; import gameclasses.gamenode; import gamedata.nodes.enemies.zombie.acidzombie; import gamedata.nodes.enemies.zombie.crawlingzombie; import gamedata.nodes.enemies.zombie.normalzombie; import gamedata.nodes.enemies.zombie.tankzombie; [CODE]public class wavemanager extends gamenode {[/CODE] [CODE]public final int mapx = 1000;[/CODE] [CODE]public final int mapy = 1000;[/CODE] [CODE]public final int spawnmargin = 200;[/CODE] [CODE]public static int level = 0;[/CODE] [CODE]public static int zombieamount = 0;[/CODE] [CODE]public static boolean isspawning = true;[/CODE] [CODE]public wavemanager() {[/CODE] super(); } @override [CODE]public void process() {[/CODE] if (!gamemanager.ispaused) { spawn(); if (level == 2 && !weapons.r[CODE]ifleadded) {[/CODE] weapons.r[CODE]ifleunlocked = true;[/CODE] } if (level == 4 && !weapons.shotgunadded) { weapons.shotgununlocked = true; } if (level == 6 && !weapons.sniperadded) { weapons.sniperunlocked = true; } if (level == 8 && !weapons.rocketadded) { weapons.rocketunlocked = true; } } } [CODE]public void spawn() {[/CODE] [CODE]if (isspawning && zombieamount == 0) {[/CODE] zombieamount = 20 + level*5; [CODE]int acidamount = 0, tankamount = 0, crawleramount = 0, normalamount = 0;[/CODE] [CODE]if (level >= 6) {[/CODE] acidamount = level*level/10; } [CODE]if (level >= 4) {[/CODE] tankamount = level*level/5 - acidamount; } [CODE]if (level >= 2) {[/CODE] crawleramount = level*level/3 - acidamount - tankamount; } normalamount = zombieamount - acidamount - tankamount - crawleramount; [CODE]while (normalamount != 0) {[/CODE] normalzombie newnormal = new normalzombie(math.random()*mapx*2-mapx, math.random()*mapy*2-mapy); if (newnormal.ghostcollidingwith() == null && newnormal.collidingwith() == null && (newnormal.position.getx() >= spawnmargin || newnormal.position.getx() <= -spawnmargin) && (newnormal.position.gety() >= spawnmargin || newnormal.position.gety() <= -spawnmargin)) { nodeadd([CODE]newnormal);[/CODE] normalamount--; } [CODE]else newnormal = null;[/CODE] } [CODE]while (crawleramount != 0) {[/CODE] crawlingzombie newcrawling = new crawlingzombie(math.random()*mapx*2-mapx, math.random()*mapy*2-mapy); if (newcrawling.ghostcollidingwith() == null && newcrawling.collidingwith() == null && (newcrawling.position.getx() >= spawnmargin || newcrawling.position.getx() <= -spawnmargin) && (newcrawling.position.gety() >= spawnmargin || newcrawling.position.gety() <= -spawnmargin)) { nodeadd([CODE]newcrawling);[/CODE] crawleramount--; } [CODE]else newcrawling = null;[/CODE] } [CODE]while (tankamount != 0) {[/CODE] tankzombie newtank = new tankzombie(math.random()*mapx*2-mapx, math.random()*mapy*2-mapy); if (newtank.ghostcollidingwith() == null && newtank.collidingwith() == null && (newtank.position.getx() >= spawnmargin || newtank.position.getx() <= -spawnmargin) && (newtank.position.gety() >= spawnmargin || newtank.position.gety() <= -spawnmargin)) { nodeadd([CODE]newtank);[/CODE] tankamount--; } [CODE]else newtank = null;[/CODE] } [CODE]while (acidamount != 0) {[/CODE] acidzombie newacid = new acidzombie(math.random()*mapx*2-mapx, math.random()*mapy*2-mapy); if (newacid.ghostcollidingwith() == null && newacid.collidingwith() == null && (newacid.position.getx() >= spawnmargin || newacid.position.getx() <= -spawnmargin) && (newacid.position.gety() >= spawnmargin || newacid.position.gety() <= -spawnmargin)) { nodeadd([CODE]newacid);[/CODE] acidamount--; } [CODE]else newacid = null;[/CODE] } isspawning = false; } [CODE]if (!isspawning && zombieamount == 0) {[/CODE] isspawning = true; [CODE]if (level != 16) level++;[/CODE] } } } package gamedata.nodes; import java.util.arraylist; import gameclasses.gamemanager; import gameclasses.gamenode; import gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.gun.infan[CODE]tryrifle;[/CODE] import gamedata.nodes.weapons.gun.pistol; import gamedata.nodes.weapons.gun.rocketlauncher; import gamedata.nodes.weapons.gun.shotgun; import gamedata.nodes.weapons.gun.sniperr[CODE]ifle;[/CODE] [CODE]public class weapons extends gun {[/CODE] // inventory class for the players weapons. // will only be iterated through when changing weapons, so not in the game loop generally. [CODE]public arraylist<gun> weaponlist = new arraylist<gun>();[/CODE] private [CODE]int currentindex = 0;[/CODE] gun currentgun; [CODE]public infantryrifle rifle = new infantryrifle();[/CODE] [CODE]public static boolean rifleunlocked = false;[/CODE] [CODE]public static boolean rifleadded = false;[/CODE] [CODE]public shotgun shotgun = new shotgun();[/CODE] [CODE]public static boolean shotgununlocked = false;[/CODE] [CODE]public static boolean shotgunadded = false;[/CODE] [CODE]public sniperrifle sniperrifle = new sniperrifle();[/CODE] [CODE]public static boolean sniperunlocked = false;[/CODE] [CODE]public static boolean sniperadded = false;[/CODE] [CODE]public rocketlauncher rocketlauncher = new rocketlauncher();[/CODE] [CODE]public static boolean rocketunlocked = false;[/CODE] [CODE]public static boolean rocketadded = false;[/CODE] { pistol pistol = [CODE]new pistol();[/CODE] //debugr[CODE]ifle debug = new debugrifle();[/CODE] weaponlist.add(pistol); currentgun = weaponlist.get(currentindex); } [CODE]public weapons() {[/CODE] super(); } [CODE]public void swapweapon(int index) {[/CODE] if (weaponlist.size() > 1) { gun temp = weaponlist.get(index); weaponlist.set(index, currentgun); currentgun = temp; currentindex = index; } } [CODE]public gun getcurrentgun() {[/CODE] [CODE]return currentgun;[/CODE] } [CODE]public int getcurrentindex() {[/CODE] [CODE]return currentindex;[/CODE] } @override [CODE]public void process() {[/CODE] if (!gamemanager.ispaused) { currentgun.position.setlocation(((gamenode) parentnode).position); [CODE]if (!rifleadded && rifleunlocked) {[/CODE] weaponlist.add(r[CODE]ifle);[/CODE] r[CODE]ifleadded = true;[/CODE] } [CODE]if (!shotgunadded && shotgununlocked) {[/CODE] weaponlist.add(shotgun); shotgunadded = true; } [CODE]if (!sniperadded && sniperunlocked) {[/CODE] weaponlist.add(sniperr[CODE]ifle);[/CODE] sniperadded = true; } [CODE]if (!rocketadded && rocketunlocked) {[/CODE] weaponlist.add(rocketlauncher); rocketadded = true; } } currentgun.process(); } @override [CODE]public void physicsprocess() {[/CODE] currentgun.physicsprocess(); } } package gamedata.nodes; import gameclasses.gameinput; import gameclasses.gamemanager; import gameclasses.gamenode; import gameclasses.defaultclass.nodeanim; import gameclasses.defaultclass.vector2d; import gamedata.nodes.enemies.zombie.acidzombie; import gamedata.nodes.enemies.zombie.crawlingzombie; import gamedata.nodes.enemies.zombie.normalzombie; import gamedata.nodes.enemies.zombie.tankzombie; import gamedata.nodes.weapons.bullets.acid; import gamedata.nodes.weapons.gun.drops.r[CODE]ifledrop;[/CODE] import gamedata.nodes.weapons.gun.drops.rocketdrop; import gamedata.nodes.weapons.gun.drops.sniperdrop; import gamedata.nodes.weapons.gun.drops.shotgundrop; import gamedata.nodes.enemies.zombie; [CODE]public class player extends gamenode {[/CODE] // character health. [CODE]int hp = 100;[/CODE] boolean isdead = false; public static nodeanim idle = new nodeanim(""gamedata/images/girl.g[CODE]if"");[/CODE] weapons weapons = [CODE]new weapons();[/CODE] { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } scale = 3; drawlayer = 1; collisionshape.setshape(0, -10, 20, 35); hitboxshape.setshape(0, -10, 20, 35); childnodes.add(weapons); } [CODE]public player(){[/CODE] super(); } [CODE]public player(int x, int y){[/CODE] super(x,y); } boolean switchtriggered = false; @override [CODE]public void process() {[/CODE] if (!isdead && !gamemanager.ispaused) { if (gameinput.isweaponswitch && !switchtriggered) { weapons.swapweapon((weapons.getcurrentindex() + 1) % (weapons.weaponlist.size())); switchtriggered = true; } if (!gameinput.isweaponswitch) { switchtriggered = false; } } } [CODE]public int gethp() {[/CODE] [CODE]return hp;[/CODE] } [CODE]public void sethp(int value) {[/CODE] hp = value; } [CODE]public weapons getweapons() {[/CODE] [CODE]return weapons;[/CODE] } protected [CODE]int damagecooldown = 0;[/CODE] protected [CODE]int cooldownlength = 60;[/CODE] @override [CODE]public void physicsprocess() {[/CODE] if (!isdead && !gamemanager.ispaused) { vector2d inputvector = new vector2d(gameinput.isup, gameinput.isdown, gameinput.isleft, gameinput.isright).normalized(); vector2d velocity = vector2d.zero.movetoward(inputvector, 1).dot(8); if (gameinput.getrelativemouse().getx() < 0) { anims.get(currentanim).trans[CODE]formanim(true, false, 0);[/CODE] anims.get(currentanim).speed = 1; } else if (gameinput.getrelativemouse().getx() > 0) { anims.get(currentanim).trans[CODE]formanim(false, false, 0);[/CODE] anims.get(currentanim).speed = 1; } if (velocity.x == 0 && velocity.y == 0) { anims.get(currentanim).setcurrentframe(0); anims.get(currentanim).speed = 0; } position.setlocation(position.getx() + velocity.x, position.gety() + velocity.y); gamemanager.gamecam.follownode(this); if (ishitting(acid.[CODE]class) != null) {[/CODE] hp-=8; } gamenode normaldmg = ishitting(normalzombie.[CODE]class);[/CODE] [CODE]if (normaldmg != null && damagecooldown == 0) {[/CODE] hp-=((zombie) normaldmg).getdamage(); damagecooldown = cooldownlength; } gamenode crawldmg = ishitting(crawlingzombie.[CODE]class);[/CODE] [CODE]if (crawldmg != null && damagecooldown == 0) {[/CODE] hp-=((zombie) crawldmg).getdamage(); damagecooldown = cooldownlength; } gamenode tankdmg = ishitting(tankzombie.[CODE]class);[/CODE] [CODE]if (tankdmg != null && damagecooldown == 0) {[/CODE] hp-=((zombie) tankdmg).getdamage(); damagecooldown = cooldownlength; } gamenode aciddmg = ishitting(acidzombie.[CODE]class);[/CODE] [CODE]if (aciddmg != null && damagecooldown == 0) {[/CODE] hp-=((zombie) aciddmg).getdamage(); damagecooldown = cooldownlength; } [CODE]if (damagecooldown > 0) {[/CODE] damagecooldown--; } if (collidingwith(rifledrop.[CODE]class) != null) {[/CODE] weapons.rifle.addmagazine(); } if (collidingwith(shotgundrop.[CODE]class) != null) {[/CODE] weapons.shotgun.addmagazine(); } if (collidingwith(sniperdrop.[CODE]class) != null) {[/CODE] weapons.sniperrifle.addmagazine(); } if (collidingwith(rocketdrop.[CODE]class) != null) {[/CODE] weapons.rocketlauncher.addmagazine(); } [CODE]if (hp <= 0) {[/CODE] isdead = true; nodedispose(weapons); } } } } package gamedata.nodes.other; import gameclasses.gamenode; import gameclasses.defaultclass.nodeanim; [CODE]public class acidexplosion extends gamenode {[/CODE] public static nodeanim explode = new nodeanim(""gamedata/images/acidexplosion.g[CODE]if"");[/CODE] { [CODE]try {[/CODE] anims.add(explode); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } hitboxshape.setshape(0, 0, explode.frame(0).getwidth(), explode.frame(0).getheight()); scale = 0.5; } [CODE]public acidexplosion(double x, double y) {[/CODE] super(x, y); } @override [CODE]public void process() {[/CODE]} [CODE]int counter = 100;[/CODE] @override [CODE]public void physicsprocess() {[/CODE] counter--; [CODE]if(counter == 0) nodedispose(this);[/CODE] } } package gamedata.nodes.other; import gameclasses.gamenode; import gameclasses.defaultclass.nodeanim; [CODE]public class explosion extends gamenode {[/CODE] public static nodeanim explode = new nodeanim(""gamedata/images/explosion.g[CODE]if"");[/CODE] { [CODE]try {[/CODE] anims.add(explode); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } hitboxshape.setshape(0, 0, explode.frame(0).getwidth(), explode.frame(0).getheight()); scale = 1; } [CODE]public explosion(double x, double y) {[/CODE] super(x, y); } @override [CODE]public void process() {[/CODE]} [CODE]int counter = 100;[/CODE] @override [CODE]public void physicsprocess() {[/CODE] counter--; [CODE]if(counter == 0) nodedispose(this);[/CODE] } } package gamedata.nodes.enemies; import gameclasses.gamemanager; import gameclasses.gamenode; import gameclasses.defaultclass.vector2d; import gamedata.nodes.player; import gamedata.nodes.wavemanager; import gamedata.nodes.weapons; import gamedata.nodes.other.explosion; import gamedata.nodes.weapons.bullets.bullet; import gamedata.nodes.weapons.bullets.rocket; import gamedata.nodes.weapons.bullets.sniperbullet; import gamedata.nodes.weapons.gun.drops.r[CODE]ifledrop;[/CODE] import gamedata.nodes.weapons.gun.drops.rocketdrop; import gamedata.nodes.weapons.gun.drops.shotgundrop; import gamedata.nodes.weapons.gun.drops.sniperdrop; import java.awt.geom.po[CODE]int2d;[/CODE] [CODE]public abstract class zombie extends gamenode {[/CODE] [CODE]public static gamenode playerref;[/CODE] { drawlayer = 1; } protected enum amount { low, medium, high } [CODE]public enum state {[/CODE] idle, walk, attack, die } protected [CODE]int health;[/CODE] protected [CODE]int damage;[/CODE] protected double speed; protected state state = state.idle; protected [CODE]int zombiescore = 20;[/CODE] [CODE]public zombie() {[/CODE] super(); } [CODE]public zombie(double x, double y) {[/CODE] super(x, y); } [CODE]public zombie(double x, double y, amount healthamount, amount speedamount, amount damageamount) {[/CODE] super(x, y); switch (healthamount) { case low: health = 20; break; case medium: health = 40; break; case high: health = 80; break; } switch (speedamount) { case low: speed = 1.5; break; case medium: speed = 3; break; case high: speed = 4.5; break; } switch (damageamount) { case low: damage = 7; break; case medium: damage = 16; break; case high: damage = 25; break; } } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { playerref = gamemanager.getnode(player.[CODE]class);[/CODE] [CODE]if (playerref!= null) zombiestate();[/CODE] } } [CODE]public void zombiestate() {[/CODE] takedamage(); switch (state) { case idle: idle(); break; case walk: walk(); break; case attack: attack(); break; case die: die(); break; } } protected double playermargin = 0.5; [CODE]public void idle() {[/CODE] if (position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*playermargin) { state = state.walk; } else state = state.attack; } [CODE]public void walk() {[/CODE] if (position.distance(playerref.position) <= (playerref.spritewidth()*playerref.getscale()/2)*playermargin) { state = state.idle; } [CODE]else {[/CODE] vector2d playervector = new vector2d(playerref.position.getx() - position.getx(), playerref.position.gety() - position.gety()).normalized(); vector2d velocity = vector2d.zero.movetoward(playervector, 1).normalized().dot(speed); point2d previousposition = new point2d.double(position.getx(), position.gety()); position.setlocation(position.getx() + velocity.x, position.gety() + velocity.y); [CODE]if (collidingwith() instanceof zombie) {[/CODE] position = previousposition; } } } [CODE]int attackcooldown = 120;[/CODE] [CODE]public void attack() {[/CODE] if (position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*playermargin) { state = state.idle; } [CODE]else {[/CODE] [CODE]if (attackcooldown == 120) {[/CODE] attackcooldown--; } [CODE]else if (attackcooldown <= 0) attackcooldown = 120;[/CODE] [CODE]else attackcooldown--;[/CODE] } } [CODE]public void die() {[/CODE] nodedispose(this); wavemanager.zombieamount--; gamemanager.gamescore+=zombiescore; double droprate = math.random() * 100; if (weapons.rocketunlocked && droprate >= 90) { nodeadd(new rocketdrop(position.getx(), position.gety())); } else if (weapons.sniperunlocked && droprate >= 75 && droprate <= 95) { nodeadd(new sniperdrop(position.getx(), position.gety())); } else if (weapons.shotgununlocked && droprate >= 60 && droprate <= 75) { nodeadd(new shotgundrop(position.getx(), position.gety())); } else if (weapons.r[CODE]ifleunlocked && droprate >= 45 && droprate <= 60) {[/CODE] nodeadd(new rifledrop(position.getx(), position.gety())); } } [CODE]public void takedamage() {[/CODE] [CODE]if (health <= 0) {[/CODE] state = state.die; [CODE]return;[/CODE] } if ((ishitting(bullet.class)!= null || ishitting(rocket.class) != null || ishitting(sniperbullet.class) != null || ishitting(explosion.class)!= null) && state != state.die) { health = health - 15; } } } package gamedata.nodes.enemies.zombie; import gameclasses.defaultclass.nodeanim; import gameclasses.defaultclass.vector2d; import gamedata.nodes.enemies.zombie; import java.awt.geom.po[CODE]int2d;[/CODE] [CODE]public class crawlingzombie extends zombie {[/CODE] public static nodeanim idle = new nodeanim(""gamedata/images/crawlingzombie.g[CODE]if"");[/CODE] { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } scale = 0.2; hitboxshape.setshape(-10, -5, 300, 500); collisionshape.setshape(-10, -5, 300, 500); zombiescore = 30; } [CODE]public crawlingzombie(double x, double y) {[/CODE] super(x, y, amount.low, amount.high, amount.medium); } @override [CODE]public void physicsprocess() {[/CODE]super.physicsprocess();} @override [CODE]public void zombiestate() {[/CODE] takedamage(); switch (state) { case idle: idle(); break; case walk: walk(); break; case attack: [CODE]if (islunging) {[/CODE]lunge(); break;} attack(); break; case die: die(); break; } } @override [CODE]public void idle() {[/CODE] if (position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*3) { state = state.walk; } else state = state.attack; } @override [CODE]public void walk() {[/CODE] if (position.distance(playerref.position) <= (playerref.spritewidth()*playerref.getscale()/2)*3) { state = state.idle; } [CODE]else {[/CODE] vector2d playervector = new vector2d(playerref.position.getx() - position.getx(), playerref.position.gety() - position.gety()).normalized(); vector2d velocity = vector2d.zero.movetoward(playervector, 1).normalized().dot(speed); point2d previousposition = new point2d.double(position.getx(), position.gety()); position.setlocation(position.getx() + velocity.x, position.gety() + velocity.y); [CODE]if (collidingwith() instanceof zombie) {[/CODE] position = previousposition; } } } [CODE]int attackcooldown = 120;[/CODE] boolean islunging = false; po[CODE]int2d lastposition = position;[/CODE] @override [CODE]public void attack() {[/CODE] if (position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*3) { state = state.idle; } [CODE]else if (attackcooldown == 120) {[/CODE] if (position.distance(playerref.position) <= (playerref.spritewidth()*playerref.getscale()/2)*3 && position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*playermargin) { lastposition = new point2d.double(playerref.position.getx(), playerref.position.gety()); attackcooldown--; islunging = true; } else if (position.distance(playerref.position) <= (playerref.spritewidth()*playerref.getscale()/2)*playermargin) { attackcooldown--; } } [CODE]else if (attackcooldown <= 0) attackcooldown = 120;[/CODE] [CODE]else attackcooldown--;[/CODE] } [CODE]public void lunge() {[/CODE] double distance = position.distance(lastposition); [CODE]if (distance <= 2) {[/CODE] islunging = false; state = state.idle; attackcooldown--; [CODE]return;[/CODE] } double step = math.min(speed * 3, distance); vector2d jumpvector = new vector2d(lastposition.getx() - position.getx(), lastposition.gety() - position.gety()).normalized().dot(step); point2d previousposition = new point2d.double(position.getx(), position.gety()); position.setlocation(position.getx() + jumpvector.x, position.gety() + jumpvector.y); [CODE]if (collidingwith() instanceof zombie) {[/CODE] position = previousposition; state = state.idle; islunging = false; attackcooldown--; } } } package gamedata.nodes.enemies.zombie; import gameclasses.gamemanager; import gameclasses.defaultclass.nodeanim; import gameclasses.defaultclass.vector2d; import gamedata.nodes.wavemanager; import gamedata.nodes.weapons; import gamedata.nodes.enemies.zombie; import gamedata.nodes.other.acidexplosion; import gamedata.nodes.weapons.bullets.acid; import gamedata.nodes.weapons.gun.drops.r[CODE]ifledrop;[/CODE] import gamedata.nodes.weapons.gun.drops.rocketdrop; import gamedata.nodes.weapons.gun.drops.shotgundrop; import gamedata.nodes.weapons.gun.drops.sniperdrop; import java.awt.geom.po[CODE]int2d;[/CODE] [CODE]public class acidzombie extends zombie {[/CODE] public static nodeanim idle = new nodeanim(""gamedata/images/acidzombie.g[CODE]if"");[/CODE] { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } scale = 0.2; hitboxshape.setshape(-10, -5, 300, 500); collisionshape.setshape(-10, -5, 300, 500); zombiescore = 50; } [CODE]public acidzombie(double x, double y) {[/CODE] super(x, y, amount.low, amount.low, amount.medium); } @override [CODE]public void physicsprocess() {[/CODE]super.physicsprocess();} @override [CODE]public void idle() {[/CODE] if (position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*playerdistance) { state = state.walk; } else state = state.attack; } double playerdistance = 6; @override [CODE]public void walk() {[/CODE] if (position.distance(playerref.position) <= (playerref.spritewidth()*playerref.getscale()/2)*playerdistance) { state = state.idle; } [CODE]else {[/CODE] vector2d playervector = new vector2d(playerref.position.getx() - position.getx(), playerref.position.gety() - position.gety()).normalized(); vector2d velocity = vector2d.zero.movetoward(playervector, 1).normalized().dot(speed); point2d previousposition = new point2d.double(position.getx(), position.gety()); position.setlocation(position.getx() + velocity.x, position.gety() + velocity.y); [CODE]if (collidingwith() instanceof zombie) {[/CODE] position = previousposition; } } } [CODE]int attackcooldown = 120;[/CODE] @override [CODE]public void attack() {[/CODE] if (position.distance(playerref.position) >= (playerref.spritewidth()*playerref.getscale()/2)*playerdistance) { state = state.idle; } [CODE]else {[/CODE] [CODE]if (attackcooldown == 120) {[/CODE] nodeadd(new acid(position.getx(), position.gety(), playerref)); attackcooldown--; } [CODE]else if (attackcooldown <= 0) attackcooldown = 120;[/CODE] [CODE]else attackcooldown--;[/CODE] } } @override [CODE]public void die() {[/CODE] nodeadd(new acidexplosion(position.getx(), position.gety())); nodedispose(this); wavemanager.zombieamount--; gamemanager.gamescore += zombiescore; double droprate = math.random() * 100; if (weapons.rocketunlocked && droprate >= 90) { nodeadd(new rocketdrop(position.getx(), position.gety())); } else if (weapons.sniperunlocked && droprate >= 75 && droprate <= 95) { nodeadd(new sniperdrop(position.getx(), position.gety())); } else if (weapons.shotgununlocked && droprate >= 60 && droprate <= 75) { nodeadd(new shotgundrop(position.getx(), position.gety())); } else if (weapons.r[CODE]ifleunlocked && droprate >= 45 && droprate <= 60) {[/CODE] nodeadd(new rifledrop(position.getx(), position.gety())); } } } package gamedata.nodes.enemies.zombie; import gameclasses.defaultclass.nodeanim; import gamedata.nodes.enemies.zombie; [CODE]public class normalzombie extends zombie {[/CODE] // if you need to keep the order for which zombie this is, use id logic. // use the static numerator from earlier, but this time equate it to a class variable too, // so that it works as an id. public static nodeanim idle = new nodeanim(""gamedata/images/zombie.g[CODE]if"");[/CODE] { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } scale = 0.2; hitboxshape.setshape(-10, -5, 300, 500); collisionshape.setshape(-10, -5, 300, 500); } [CODE]public normalzombie(double x, double y) {[/CODE] super(x, y, amount.medium, amount.low, amount.medium); } @override [CODE]public void physicsprocess() {[/CODE]super.physicsprocess();} } package gamedata.nodes.enemies.zombie; import gameclasses.defaultclass.nodeanim; import gamedata.nodes.enemies.zombie; [CODE]public class tankzombie extends zombie {[/CODE] public static nodeanim idle = new nodeanim(""gamedata/images/tankzombie.g[CODE]if"");[/CODE] { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } scale = 0.4; hitboxshape.setshape(-10, -5, 300, 500); collisionshape.setshape(-10, -5, 300, 500); zombiescore = 40; } [CODE]public tankzombie(double x, double y) {[/CODE] super(x, y, amount.high, amount.low, amount.high); } @override [CODE]public void physicsprocess() {[/CODE]super.physicsprocess();} } package gamedata.nodes.weapons; import gameclasses.gameinput; import gameclasses.gamemanager; import gameclasses.gamenode; import gamedata.nodes.weapons.bullets.bullet; [CODE]public abstract class gun extends gamenode {[/CODE] [CODE]public string name = ""gun"";[/CODE] protected double firespeed; // bullets per sec protected [CODE]int magazine;[/CODE] protected [CODE]int bulletsleft;[/CODE] protected [CODE]int magazinesleft;[/CODE] protected boolean reloadtriggered = false; protected double recoilangle = 0; [CODE]public double getfirespeed() {[/CODE] [CODE]return firespeed;[/CODE] } [CODE]public int getmagazine() {[/CODE] [CODE]return magazine;[/CODE] } [CODE]public gun() {[/CODE] super(); } [CODE]public gun (int magazine, double firespeed) {[/CODE] this.firespeed = firespeed; this.magazine = magazine; bulletsleft = magazine; } @override [CODE]public void process() {[/CODE] if (!gamemanager.ispaused) { if (gameinput.isreload && !reloadtriggered) { reload(); reloadtriggered = true; } if (!gameinput.isreload) { reloadtriggered = false; } } } protected [CODE]int bulletcooldown = 0;[/CODE] // counter [CODE]for bullet cooldown @override public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { final [CODE]int cooldownlength = (int) (60/firespeed);[/CODE] if (gameinput.isfiring) { [CODE]if (bulletcooldown <= 0 && bulletsleft > 0) {[/CODE] nodeadd(new bullet(position.getx(), position.gety(), recoilangle/2, true)); bulletsleft--; bulletcooldown = cooldownlength; } } [CODE]if (bulletcooldown > 0) {[/CODE] bulletcooldown--; } } } [CODE]public int getbulletsleft() {[/CODE] [CODE]return bulletsleft;[/CODE] } [CODE]public int getmagazinesleft() {[/CODE] [CODE]return magazinesleft;[/CODE] } [CODE]public void addmagazine() {[/CODE] magazinesleft++; } protected [CODE]void reload() {[/CODE] [CODE]if (magazinesleft > 0) {[/CODE] bulletsleft = magazine; magazinesleft--; } } } package gamedata.nodes.weapons.bullets; import gameclasses.gameinput; import gameclasses.gamemanager; import gameclasses.gamenode; import gameclasses.defaultclass.nodeanim; import gameclasses.defaultclass.vector2d; import gamedata.nodes.enemies.zombie.crawlingzombie; import gamedata.nodes.enemies.zombie.normalzombie; import gamedata.nodes.enemies.zombie.tankzombie; import gamedata.nodes.enemies.zombie.acidzombie; [CODE]public class bullet extends gamenode {[/CODE] [CODE]public static int totalamount = 0;[/CODE] protected final [CODE]int maxbullets = 60;[/CODE] // max amount of projectiles that can be on screen. vector2d direction = vector2d.zero; public static nodeanim idle = new nodeanim(""gamedata/images/bullet.png""); { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } hitboxshape.setshape(0, 0, idle.animatedframe().getwidth(), idle.animatedframe().getwidth()); scale = 1; } [CODE]public bullet(){[/CODE] super(); totalamount++; } [CODE]public bullet(double x, double y, double recoilradians, boolean random) {[/CODE] super(x,y); double angle1 = recoilradians; [CODE]if (recoilradians != 0 && random) {[/CODE] int sign = math.random() < 0.5 ? -1 : 1; angle1 = recoilradians * math.random() * sign; } totalamount++; double mousex = gameinput.getcursor().getx() - gamemanager.frame.getwidth()/2; double mousey = gameinput.getcursor().gety() - gamemanager.frame.getheight()/2; direction = new vector2d(mousex, mousey).rotate(angle1).normalized(); } @override [CODE]public void process() {[/CODE]} final [CODE]int speed = 24;[/CODE] @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { vector2d velocity = direction.dot(speed); if (totalamount >= maxbullets || ishitting(normalzombie.class) != null || ishitting(crawlingzombie.class) != null || ishitting(tankzombie.class)!= null || ishitting(acidzombie.[CODE]class) != null) {[/CODE] totalamount--; nodedispose(this); } position.setlocation(position.getx() + velocity.x, position.gety() - velocity.y); } } } package gamedata.nodes.weapons.bullets; import gameclasses.gamemanager; import gameclasses.gamenode; import gameclasses.defaultclass.nodeanim; import gameclasses.defaultclass.vector2d; import gamedata.nodes.player; [CODE]public class acid extends gamenode {[/CODE] vector2d direction = vector2d.zero; public static nodeanim idle = new nodeanim(""gamedata/images/acid.png""); { [CODE]try {[/CODE] anims.add(idle); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } hitboxshape.setshape(0, 0, idle.animatedframe().getwidth(), idle.animatedframe().getwidth()); scale = 1; } [CODE]public acid(){[/CODE] super(); bullet.totalamount++; } // projectile thrown at node. [CODE]public acid(double x, double y, gamenode node) {[/CODE] super(x,y); bullet.totalamount++; direction = new vector2d(node.position.getx() - position.getx(), - node.position.gety() + position.gety()).normalized(); } @override [CODE]public void process() {[/CODE]} final [CODE]int speed = 24;[/CODE] @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { vector2d velocity = direction.dot(speed); position.setlocation(position.getx() + velocity.x, position.gety() - velocity.y); if (bullet.totalamount >= 60 || ishitting(player.[CODE]class) != null) {[/CODE] bullet.totalamount--; nodedispose(this); } } } } package gamedata.nodes.weapons.bullets; import gameclasses.gamemanager; import gameclasses.defaultclass.vector2d; [CODE]public class sniperbullet extends bullet {[/CODE] [CODE]public sniperbullet() {[/CODE] super(); } [CODE]public sniperbullet(double x, double y) {[/CODE] super(x, y, 0, false); } @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { vector2d velocity = direction.dot(speed); [CODE]if (totalamount >= maxbullets) {[/CODE] totalamount--; nodedispose(this); } position.setlocation(position.getx() + velocity.x, position.gety() - velocity.y); } } } package gamedata.nodes.weapons.bullets; import gameclasses.gamemanager; import gameclasses.defaultclass.vector2d; import gamedata.nodes.enemies.zombie.acidzombie; import gamedata.nodes.enemies.zombie.crawlingzombie; import gamedata.nodes.enemies.zombie.normalzombie; import gamedata.nodes.enemies.zombie.tankzombie; import gamedata.nodes.other.explosion; [CODE]public class rocket extends bullet {[/CODE] [CODE]public rocket() {[/CODE] super(); } [CODE]public rocket(double x, double y) {[/CODE] super(x, y, 0, false); } @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { vector2d velocity = direction.dot(speed); if (totalamount >= maxbullets || ishitting(normalzombie.class) != null || ishitting(crawlingzombie.class) != null || ishitting(tankzombie.class)!= null || ishitting(acidzombie.[CODE]class) != null) {[/CODE] totalamount--; nodeadd(new explosion(position.getx(), position.gety())); nodedispose(this); } position.setlocation(position.getx() + velocity.x, position.gety() - velocity.y); } } } package gamedata.nodes.weapons.gun; import gameclasses.gameinput; import gameclasses.gamemanager; import gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.bullets.bullet; [CODE]public class shotgun extends gun {[/CODE] // the project manual says that the shotgun shoots 9 bullets in a 45 degrees range, each // bullets velocity vector seperated 5 degrees apart. that isn't mathematically possible. // if you split the 45 degrees range into 5 degree sections, you get 9 sections, but 10 lines. // therefore i'll split the 45 degree range into 8 sections instead. [CODE]public shotgun() {[/CODE] super(5, 1); name = ""shotgun""; } @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { final [CODE]int cooldownlength = (int) (60/firespeed);[/CODE] if (gameinput.isfiring) { if (super.bulletcooldown <= 0 && bulletsleft > 0) { nodeadd(new bullet(position.getx(), position.gety(), math.pi/8, false)); nodeadd(new bullet(position.getx(), position.gety(), 3*math.pi/32, false)); nodeadd(new bullet(position.getx(), position.gety(), math.pi/16, false)); nodeadd(new bullet(position.getx(), position.gety(), math.pi/32, false)); nodeadd(new bullet(position.getx(), position.gety(), 0, false)); nodeadd(new bullet(position.getx(), position.gety(), -math.pi/32, false)); nodeadd(new bullet(position.getx(), position.gety(), -math.pi/16, false)); nodeadd(new bullet(position.getx(), position.gety(), -3*math.pi/32, false)); nodeadd(new bullet(position.getx(), position.gety(), -math.pi/8, false)); bulletsleft--; bulletcooldown = cooldownlength; } } if (gameinput.isreload && !reloadtriggered) { reload(); reloadtriggered = true; } if (!gameinput.isreload) { reloadtriggered = false; } [CODE]if (bulletcooldown > 0) {[/CODE] bulletcooldown--; } } } } package gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.gun; [CODE]public class infantryrifle extends gun {[/CODE] [CODE]public infantryrifle() {[/CODE] super(30, 5); super.recoilangle = math.pi/6; name = ""infan[CODE]try rifle"";[/CODE] } } package gamedata.nodes.weapons.gun; import gameclasses.gameinput; import gameclasses.gamemanager; import gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.bullets.sniperbullet; [CODE]public class sniperrifle extends gun {[/CODE] [CODE]public sniperrifle(){[/CODE] super(5, 0.5); name = ""sniper r[CODE]ifle"";[/CODE] } [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { final [CODE]int cooldownlength = (int) (60/firespeed);[/CODE] if (gameinput.isfiring) { [CODE]if (bulletcooldown <= 0 && bulletsleft > 0) {[/CODE] nodeadd(new sniperbullet(position.getx(), position.gety())); bulletsleft--; bulletcooldown = cooldownlength; } } if (gameinput.isreload && !reloadtriggered) { reload(); reloadtriggered = true; } if (!gameinput.isreload) { reloadtriggered = false; } [CODE]if (bulletcooldown > 0) {[/CODE] bulletcooldown--; } } } } package gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.gun; [CODE]public class debugrifle extends gun {[/CODE] [CODE]public debugrifle(){[/CODE] super(3000000, 10); name = ""debug r[CODE]ifle"";[/CODE] } } package gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.gun; [CODE]public class pistol extends gun {[/CODE] [CODE]public pistol() {[/CODE] super(12, 2); name = ""pistol""; } // makes it infinitely reload. @override protected [CODE]void reload() {[/CODE] super.magazinesleft++; super.reload(); } } package gamedata.nodes.weapons.gun; import gameclasses.gameinput; import gameclasses.gamemanager; import gamedata.nodes.weapons.gun; import gamedata.nodes.weapons.bullets.rocket; [CODE]public class rocketlauncher extends gun {[/CODE] [CODE]public rocketlauncher() {[/CODE] super(1, (1.00/6.00)); name = ""rocket launcher""; } @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { final [CODE]int cooldownlength = (int) (60/firespeed);[/CODE] if (gameinput.isfiring) { [CODE]if (bulletcooldown <= 0 && bulletsleft > 0) {[/CODE] nodeadd(new rocket(position.getx(), position.gety())); bulletsleft--; bulletcooldown = cooldownlength; } } if (gameinput.isreload && !reloadtriggered) { reload(); reloadtriggered = true; } if (!gameinput.isreload) { reloadtriggered = false; } [CODE]if (bulletcooldown > 0) {[/CODE] bulletcooldown--; } } } } package gamedata.nodes.weapons.gun.drops; import gameclasses.defaultclass.nodeanim; [CODE]public class rocketdrop extends drop {[/CODE] public static nodeanim dropsprite = new nodeanim(""gamedata/images/rocketdrop.png""); { [CODE]try {[/CODE] anims.add(dropsprite); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } collisionshape.setshape(0, 0, dropsprite.frame(0).getwidth(), dropsprite.frame(0).getheight()); } [CODE]public rocketdrop(double x, double y) {[/CODE] super(x,y); } } package gamedata.nodes.weapons.gun.drops; import gameclasses.defaultclass.nodeanim; [CODE]public class sniperdrop extends drop {[/CODE] public static nodeanim dropsprite = new nodeanim(""gamedata/images/sniperdrop.png""); { [CODE]try {[/CODE] anims.add(dropsprite); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } collisionshape.setshape(0, 0, dropsprite.frame(0).getwidth(), dropsprite.frame(0).getheight()); } [CODE]public sniperdrop(double x, double y) {[/CODE] super(x,y); } } package gamedata.nodes.weapons.gun.drops; import gameclasses.gamemanager; import gameclasses.gamenode; import gamedata.nodes.player; [CODE]public class drop extends gamenode {[/CODE] [CODE]public drop(double x, double y) {[/CODE] super(x,y); } [CODE]int dropwait = 600;[/CODE] @override [CODE]public void physicsprocess() {[/CODE] if (!gamemanager.ispaused) { if (dropwait <= 0 || collidingwith(player.[CODE]class)!= null) nodedispose(this);[/CODE] dropwait--; } } } package gamedata.nodes.weapons.gun.drops; import gameclasses.defaultclass.nodeanim; [CODE]public class rifledrop extends drop {[/CODE] public static nodeanim dropsprite = new nodeanim(""gamedata/images/rifledrop.png""); { [CODE]try {[/CODE] anims.add(dropsprite); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } collisionshape.setshape(0, 0, dropsprite.frame(0).getwidth(), dropsprite.frame(0).getheight()); } [CODE]public rifledrop(double x, double y) {[/CODE] super(x,y); } } package gamedata.nodes.weapons.gun.drops; import gameclasses.defaultclass.nodeanim; [CODE]public class shotgundrop extends drop {[/CODE] public static nodeanim dropsprite = new nodeanim(""gamedata/images/shotgundrop.png""); { [CODE]try {[/CODE] anims.add(dropsprite); } [CODE]catch (exception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } collisionshape.setshape(0, 0, dropsprite.frame(0).getwidth(), dropsprite.frame(0).getheight()); } [CODE]public shotgundrop(double x, double y) {[/CODE] super(x,y); } }"
2051651,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab1q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(s2.say()); } } [CODE]class sayac{[/CODE] [CODE]string str;[/CODE] sayac([CODE]string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] [CODE]return stringcounter(str, 0);[/CODE] } private [CODE]int stringcounter(string str, int i){[/CODE] if(i >= str.length()){ [CODE]return 0;[/CODE] } else if(str.charat(i) == '1'){ [CODE]return 1 + stringcounter(str, i + 1);[/CODE] } [CODE]else return stringcounter(str, i + 1);[/CODE] } } [CODE]public class lab1q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE]3, 1, 7, 5, 6, 0, 4}; cocktailsort(arr); } [CODE]public static void cocktailsort(int[] arr){[/CODE] [CODE]for(int i = 0;[/CODE] i < arr.length; i++){ sort[CODE]forward(arr, 0);[/CODE] sortbackward(arr, arr.length-1); } [CODE]for(int i = 0;[/CODE] i < arr.length; i++){ system.out.pr[CODE]intln(arr[i]);[/CODE] } } [CODE]public static int[] swap(int i, int j, int[] arr){[/CODE] [CODE]int temp = 0;[/CODE] temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; [CODE]return arr;[/CODE] } [CODE]public static int[] sortforward(int[] arr, int i){[/CODE] if(i >= arr.length-1){ [CODE]return arr;[/CODE] } [CODE]else if(arr[i] > arr[i+1]){[/CODE] swap(i, i+1, arr); [CODE]return sortforward(arr, i + 1);[/CODE] } [CODE]else{[/CODE] [CODE]return sortforward(arr, i + 1);[/CODE] } } [CODE]public static int[] sortbackward(int[] arr, int i){[/CODE] [CODE]if(i <= 0){[/CODE] [CODE]return arr;[/CODE] } [CODE]else if(arr[i] < arr[i-1]){[/CODE] swap(i, i+1, arr); [CODE]return sortforward(arr, i + 1);[/CODE] } [CODE]else{[/CODE] [CODE]return sortforward(arr, i + 1);[/CODE] } } } [CODE]class lab1q1{[/CODE] [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } [CODE]public static int collatz(int i){[/CODE] [CODE]if(i <= 1){[/CODE] [CODE]return 0;[/CODE] } [CODE]else if(i % 2 == 0){[/CODE] [CODE]return 1 + collatz(i / 2);[/CODE] } [CODE]else{[/CODE] [CODE]return 1 + collatz(3*i + 1);[/CODE] } } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar{[/CODE] calmastratejisi calmastratejisi; [CODE]void setstrateji(calmastratejisi s){[/CODE] this.calmastratejisi = s; } [CODE]void muzikcal(list<sarki> sarkilistesi){[/CODE] calmastratejisi.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args){[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln();[/CODE] // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki.gettype().equals(""metal"")){ metalsarki m = (metalsarki) sarki; m.gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki {[/CODE] klasiksarki([CODE]string sanatçi, string isim){[/CODE] this.isim = isim; this.sanatçi = sanatçi; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[klasi̇k] "" + sanatçi + "" - "" + isim + ""(hafif ve sakin)"");[/CODE] } @override [CODE]string gettype(){[/CODE] [CODE]return ""klasik"";[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik){[/CODE] this.isim = isim; this.sanatçi = sanatci; this.metalozellik = metalozellik; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[metal] "" + sanatçi + "" - "" + isim + "" "" + metalozellik);[/CODE] } [CODE]void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(sanatçi + "" - "" + isim + "" - metal özelik: "" + metalozellik);[/CODE] } @override [CODE]string gettype(){[/CODE] [CODE]return ""metal"";[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] rocksarki([CODE]string sanatçi, string isim){[/CODE] this.isim = isim; this.sanatçi = sanatçi; } @override [CODE]void oynat() {[/CODE] system.out.pr[CODE]intln(""[rock] "" + sanatçi + "" - "" + isim + ""(huzurlu ve nostaljik)"");[/CODE] } @override [CODE]string gettype(){[/CODE] [CODE]return ""rock"";[/CODE] } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { sarkilistesi.get(sarkilistesi.size()-i-1).oynat(); } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatçi;[/CODE] abstract [CODE]void oynat();[/CODE] abstract [CODE]string gettype();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] [CODE]int volume = 50;[/CODE] [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if(sarki.gettype().equals(""rock"")){ if(volume < 100) system.out.println("" (volume is increased.)""); volume = 100; } [CODE]else{[/CODE] [CODE]if(volume == 100){[/CODE] volume = 50; system.out.println("" (volume is decreased.)""); } } sarki.oynat(); } } } import java.util.list; [CODE]public interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } metin karşılaştırıcı bil 211 - lab 3 20 şubat 2025 1 giriş bulaboratuvarda fileio ve exceptions kullanarakbir metinkarşılaştırıcı geliştireceğiz. metinkarşılaştırıcı , verilen iki metin dosyasını karşılaştırarak ikinci metnin yalnızca yeni satırlar eklenerek oluşturulup oluştu- rulmadığını kontrol edecek ve gerektiğinde hangi satırdan sonra hangi eklemelerin yapıldığını belirleyecektir. 2 genel program program, çalıştırılırken komut satırından iki dosya adı alacaktır: - orijinal metin dosyası (ilk argüman) - değiştirilmiş metin dosyası (ikinci argüman) program şu şekilde çalıştırmalıdır (burada köşeli parantezler yerine dosyaların asıl adı gelmeli): java metinkarsilastirici [orijinal.txt] [degistirilmis.txt] program, ilk argümanda verilen dosyayı orijinal metin, ikinci argümandaki dosyayı değiştirilmiş metin olarak kabul edecek ve yalnızca yeni satırlar eklenerek oluşturulup oluşturulmadığını kontrol edecektir. eğer mümkünse, hangi satırdan sonra hangi eklemelerin yapıldığını tespit ederek bir çıktı dosyasına yazacaktır: -farklar.txt – yeni satırların hangi satırdan sonra eklendiğini gösteren çıktı dosyası. eğer dosya adları eksikse veya hatalı formatta verilmişse, program özel bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosyaokumaveyazmaişlemleriiçinjava’nın java.io paketindekisınıflarıkullanacaktır(örn., buf- ferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. program, aşağıdaki olası dosya hatalarını atmalı ve stderr’e belirlenen hata mesajlarını yazmalıdır: - dosya bulunamıyorsa: ""hata: [dosya adı] bulunamadı."" - dosya boşsa: ""hata: [dosya adı] boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: 1 - yanlisargumanexception (extends inputexception): argümanlar eksik ya da fazlaysa atılacak hata. burada[argümanlar] yerine programın çalıştırıldığı argüman listesi yazılmalıdır. - hata mesajı: ""hata: hatalı argüman kullanımı: [argümanlar]. program argüman olarak 2 dosya ismi almalı."" - dosyabulunamadiexception (extends inputexception): dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" - bosdosyaexception (extends inputexception): dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 geçersiz değişiklik hatası (gecersizdegisiklikexception class) eğerdegistirilmis.txt dosyası,orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulamıy- orsa, program gecersizdegisiklikexception hatasını atmalıdır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: hata: [degistirilmis.txt] dosyası, [orijinal.txt] dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. 5 dosya formatları 5.1 girdi dosyaları 5.1.1orijinal.txt vedegistirilmis.txt formatı bu dosyalar, her satırın ayrı bir metin satırı olduğu düz metin formatında olmalıdır. örnek i̇çerik ( orijinal.txt ): merhaba dünya. bu bir test dosyasıdır. son satır budur. örnek i̇çerik ( degistirilmis.txt ): merhaba dünya. bu bir test dosyasıdır. eklenen yeni bir satır. son satır budur. yeni bir satır daha eklendi. 5.2 çıktı dosyası 5.2.1farklar.txt formatı farklar.txt dosyası, hangi satırdan sonra hangi yeni satırın eklendiğini gösterecek şekilde yapılandırıl- malıdır: örnek çıktı ( farklar.txt ): 2 -> eklenen yeni bir satır. 4 -> yeni bir satır daha eklendi. burada ‘2 ->‘ ifadesi, ""2. satırdan sonra eklenmiştir"" anlamına gelir. eğer aynı yere birden fazla satır eklenmişse aynı sayıyı tekrar ederek eklenme sırasında yazılmalı. 5.3 özel hata durumları ve çıktıları eğerdegistirilmis.txt ,orijinal.txt üzerine sadece yeni satırlar eklenerek oluşturulmamışsa stderr’e şu mesaj yazılmalıdır: hata: degistirilmis.txt dosyası, orijinal.txt dosyasına yalnızca yeni satırlar eklenerek oluşturulmamış. eğer dosya adları eksikse veya hatalıysa, stderr’e şu mesaj yazılmalıdır: hata: geçersiz dosya adı. 2 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterleri temsil eden bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regexp) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 3 import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) throws bosdosyaexception, kelimebulunamadiexception, dosyabulunamadiexception{[/CODE] scanner scanner; scanner textscanner; arraylist<[CODE]string> words = new arraylist<>();[/CODE] arraylist<[CODE]string> text = new arraylist<>();[/CODE] [CODE]int index = 0;[/CODE] [CODE]int count = 0;[/CODE] [CODE]try{[/CODE] fileinputstream kelimeler = new fileinputstream(""kelimeler.txt""); scanner = [CODE]new scanner(kelimeler);[/CODE] if(!scanner.hasnext()){ throw [CODE]new bosdosyaexception();[/CODE] } while(scanner.hasnext()){ string removed = scanner.next().replaceall(""\\p{punct}"", """"); words.add(removed); } } [CODE]catch(filenotfoundexception e){[/CODE] system.err.println(""kelimeler.txt bulunamadı.""); } int[] wordcount = new int[words.size()]; [CODE]try{[/CODE] fileinputstream metin = new fileinputstream(""metin.txt""); textscanner = [CODE]new scanner(metin);[/CODE] if(!textscanner.hasnext()){ throw [CODE]new bosdosyaexception();[/CODE] } while(textscanner.hasnext()){ string removed2 = textscanner.next().replaceall(""\\p{punct}"", """"); text.add(removed2); } } [CODE]catch(filenotfoundexception e){[/CODE] system.err.println(""metin.txt bulunamadı.""); } [CODE]try{[/CODE] fileoutputstream sonuc = new fileoutputstream(""sounc.txt""); pr[CODE]intwriter writer = new printwriter(sonuc);[/CODE] [CODE]for (string word : words) {[/CODE] [CODE]for (string txt : text) {[/CODE] if(word.equals(txt)){ count++; wordcount[index]++; } } [CODE]if(count > 0){[/CODE] writer.write(word + "": "" + count + ""\n""); } index++; count = 0; } writer.close(); [CODE]for(int i = 0;[/CODE] i < wordcount.length; i++){ [CODE]if(wordcount[i] == 0){[/CODE] system.err.println(words.get(i) + "" metinde bulunamadı.""); throw [CODE]new kelimebulunamadiexception();[/CODE] } } } [CODE]catch(filenotfoundexception g){[/CODE] system.err.println(""sounc.txt bulunamadı""); throw [CODE]new dosyabulunamadiexception();[/CODE] } } } [CODE]public class kelimebulunamadiexception extends exception{[/CODE] } [CODE]public class bosdosyaexception extends inputexception {[/CODE] } [CODE]public class inputexception extends exception {[/CODE] } [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] dosyabulunamadiexception(){ super(); } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. methodun kendi içinde kendisini çağırmasıdır. recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. base case recursive methodun her çağrıldığında kontrol ettigi bir şarttır. i̇stenilen sonuca ulaşıp ulaşılmadıgını kontrol eder ve ulaşılmışsa çıkar bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? method her çağrıldığında artan bir sayaç koyardım, her seferinde stringin son harfini alıp return'e eklerdim. sayaç string uzunluğuna eşit oldugunda çıkardım. recursive bir metotta base case olmazsa ne olur? metod surekli kendini çağırarak belleği doldurur. stack overflow recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. çağırılan metod diğer metotların ust katmanına ksydedilir ve bu şekilde ilerler fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. fibonacci dizisinde sadece son 2 sayıyı kullanırız, recursive metot surekli tamamını tekrar eder tail recursion nedir, kısaca açıklayınız. bilmiyorum java'da 'method binding' kavramı ne anlama gelir, çeşitleri nelerdir? ? hangi tür metotlarda [CODE]static hangi durumlarda dynamic binding yapılır, static binding yapılan metotların modifierleri nelerdir? ? dinamik bağlamada jvm'nin görevi nedir? ? java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? ? java'da down casting explicit şekilde yapılır, bunun nedeni nedir;[/CODE] implicit şekilde yaparsak ne olur? ? java'da method overriding yapılırken access modifierleri ile ilgili bir kısıt var mıdır, mesela protected bir metot public bir şekilde override edilebilir mi? bunun polimorfizm ile ilişkisini açıklayınız. ? [CODE]class animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""animal sound"");[/CODE] } } [CODE]class dog extends animal {[/CODE] [CODE]void makesound() {[/CODE] system.out.pr[CODE]intln(""bark"");[/CODE] } } [CODE]class cat extends animal {[/CODE] [CODE]void makesound(){[/CODE] system.out.pr[CODE]intln(""meov"");[/CODE] } } [CODE]public class testsound {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal[] animals = {[CODE]new dog(), new cat()}[/CODE]; for (animal animal : animals) animal.makesound(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? bark, meow. dinamik [CODE]class parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""parent display"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""child display"");[/CODE] } [CODE]void special() {[/CODE] system.out.pr[CODE]intln(""child special"");[/CODE] } } [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.display(); p.special(); } } kodda bir yanlışlık görüyor musunuz, varsa nerede? (eğer varsa yanlış satır silindikten sonra) output? burada static binding mi dinamik binding mi gözlemlemektesiniz? yanlış yok. dinamik binding. output: child display /n child special java'da abstract class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract class olarak kullanılabilen fakat concrete classın aksine tip obje oluşturulamayan ve içinde implement edilmemiş metodlar bulunan bir tur class dır. constructorları olabiliri. abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? hayır abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. -i̇mplement edilmemişlerdir -tip olarak kullanılabilir -uzerinden obje oluşturalamaz -altındaki classlarda olmasını istedigimiz ama nasıl yapılacağı serbest bıraktıgımız durumlarda kullanılır. abstract [CODE]class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? i̇nterface metodlarının tamamı abstract'dır, bir class birden fazla interface implement edebilir ama birden fazla abstract class extend edemez. i̇kisi de tip olarak kullanılabilir. marker interface ve functional interface kavramları nedir, nasıl kullanılır? marker interface içinde metod olmayan interface'dir. functional interface içinde tek bir metod olan interfacelerdir bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet, evet. abstract [CODE]class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? animal abstract class olduğu için uzerinden obje oluşurulamaz. animal a = [CODE]new dog(""buddy"");[/CODE] olmalıydı. output : animal: buddy, woof. [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? default metod override edilemez. duck classında move metodu olmamalıydı. output: flying. yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. 3 çeşit hata vardır: compile error, örnek: syntax hataları. runtine exception örnek: 0 a bölme. logical error: algoritmada yapılan hatalar exception handlingin amacı nedir? program akışında beklenmedik durumlarla karşılaşıldıgında bunları düzeltmek ya da bunlara özel işlemler yapmak exception handlingde finally bloğunun amacı nedir? ondan önceki bloklardan hangisine girdiginden bağımsız olarak her zaman çalışmasını istedigimiz kod için vardır. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? handle edilmiş exceptionlar checked, handle edilmemiş olanlar unchecked java'da kendi exceptionunuzu nasıl tanımlarsınız? exception classını inherit eden yeni bir class yazarak java'da error ve exception arasındaki fark nedir, açıklayınız error kod yaxarkwn veya kodun mantıgında yapılan bir hatadır. exception program akışında karşılaşılan beklenmeyen durumlardır java'da bazen [CODE]catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? exceptiona özel işlemleri yapmak ama yine de programı durdurup kullanıcıya bildirmek için 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? bilmiyorum static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez. hatanın kaynağı e referansının hem exception hem de arrayindexoutofboundsexception objesi icin kullanılması. duzeltmek için e'lerden birinin ismi değiştirilebilir [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught. finally oops done 41 text file ile binary file arasındaki fark nedir? text file'da karakterler kaydedilir. binary file da byte degerleri kaydedilir bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? program beklenmedik bir şekilde kapatılırsa son bufferda kalan verilerin kaybedilmesine neden olabilir. binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? serializable interface. bu interface'in metodu yoktur, marker interface'dir binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? yazılır, bunların byte degerleri yazılır ama okunurken anlaşılması icin ek bilgi gerekebilir buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? scanner için hasnext() metodu. buffered reader icin has() metodu. binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? length-1 degerine ulaşıldıgında anlaşılır [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] randomaccessfile raf = new randomaccessfile(""numbers.bin"", ""rw""); raf.write[CODE]int(10);[/CODE] raf.write[CODE]int(20);[/CODE] raf.seek(0); int a = raf.read[CODE]int();[/CODE] raf.seek(7); byte b = raf.readbyte(); system.out.pr[CODE]intln(a + "" "" + b);[/CODE] raf.close(); } } output? 10 0 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] [CODE]try{[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); pr[CODE]intwriter pw = new printwriter(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]catch(exception e){[/CODE] system.err(""oopps!""); } } } bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir, açıklayınız. log.txt dosyasının sonuna new log entry yazısı eklenir. what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cb java'da generic kavramı nedir, bu kavramın temel amacı nedir? kullanılacak değişken turkerinin compile zamanında belirmenmesini sağlayan java kavramıdır. amacı esnek kod yazabilmektir upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. upper bound - ? extends t lower bound - ? super t generic bir classın constructorunda type parametresi bulunur mu, neden? bulunmaz, type parametresi class yazılırken verilmistir mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. yoktur, farklı sın[CODE]ıflar class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. geberic tip t ile obje oluşturulamaz swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? bilmiyorum [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. <t> sırala(list<t> liste) ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 20-50 4. sütun option 1 java gui uygulamalarında olayları yönetmek için bir programcının yapması gereken iki temel görev nedir? bilmiyorum neden gui uygulamalarında system.exit(0) sıklıkla gerekli olurken, konsol uygulamalarında bu durum geçerli değildir? gui uygulamalarında sürekli bir loop vardır ve kod normaldeki gibi sırayla işlenip sona gelince bitirilmez bu yuzden çıkmak için manuel olarak programı kapatmak gerekir gui tasarımında düzen yöneticilerinin (layout managers) amacı nedir ve bu yöneticiler geliştiricilere nasıl yardımcı olur? frame'e ya da panel'e eklenen componentlerin nasıl yerleştirileceğini yonetir ve bunalrı otomatik olarak yaparak zamandan ve efordam tasaruf saglar jframe'de setdefaultcloseoperation metodunun işlevini açıklayın. sağ ustteki çarpı tuşuna basıldıgında yapılacak işlemi ayarlamak icin kullanılır flowlayout ve gridlayout, bileşenleri düzenlemede nasıl farklılık gösterirler? flowlayout için componentler sırayla(frame'e eklenme sırası) dizilir, alan dolduysa alta geçilir. aşağıdaki kodun çalışmasını izleyin ve jframe'de neyin görüntüleneceğini belirleyin: jframe frame = [CODE]new jframe(""test"");[/CODE] frame.setsize(300, 200); frame.setlayout([CODE]new borderlayout());[/CODE] jbutton northbutton = [CODE]new jbutton(""north"");[/CODE] jbutton centerbutton = [CODE]new jbutton(""center"");[/CODE] frame.add(northbutton, borderlayout.north); frame.add(centerbutton, borderlayout.center); northbutton.setvisible(false); frame.setvisible(true); ekran ortadan ikiye bölünür, yukarda north button olur ama visible olmadığı için onun yerine beyaz bir boşluk olur. altta uzerinde center yazan bur buton olur aşağıdaki kod parçasını göz önünde bulundurun: import javax.swing.*; import java.awt.event.*; [CODE]public class testframe extends jframe {[/CODE] [CODE]public testframe() {[/CODE] settitle(""test""); setsize(300, 200); jbutton btn = [CODE]new jbutton(""exit"");[/CODE] btn.addactionlistener([CODE]new actionlistener() {[/CODE] [CODE]public void actionperformed(actionevent e) {[/CODE] system.out.pr[CODE]intln(""button clicked"");[/CODE] system.exit(0); } }); add(btn); setdefaultcloseoperation(jframe.exit_on_close); setvisible(true); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new testframe();[/CODE] } } kullanıcı ""exit"" düğmesine tıkladığında olaylar sırası nasıldır? bir frame açılır uzerinde tıklandıgında programı kapatan bir buton olur kahve sipariş sistemi bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir kahve sipariş sistemi geliştire- ceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: eklenti arayüzü (coffeeaddon). kahveye eklenen tüm bileşenleri tanımlar. soyut kahve sınıfı (basecoffee). ortak kahve özelliklerini içerir. özel kahve sınıfları (espresso, latte, americano). farklı kahve türlerini temsil eder. eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot). kahveye eklenebilecek bileşenleri içerir. kahve makinesi sınıfı (coffeemachine). kahve yapımı ve özelliklerin eklenmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 coffeeaddon arayüzü metotlar: - double getcost() eklentinin kahveye eklediği fiyatı döner. - string getname() eklentinin adını döner. 3.2 eklenti sınıfları (milk, chocolate, vanillasyrup, doubleshot) her bir eklenti coffeeaddon arayüzünü uygular. eklenti sınıflarının arayüz fonksiyonlarında döneceği değer- ler aşağıdaki tabloda verilmiştir. table 1: eklentiler ve fiyatları fiyat (tl) 5 7 6 10 eklenti milk chocolate vanillasyrup doubleshot 3.3 basecoffee sınıfı (soyut sınıf ) değişkenler: - addons (protected arraylist<coffeeaddon>) kahveye eklenen eklentileri saklar. metotlar: - public void addaddon(coffeeaddon addon) kahveye eklenti ekler. - public abstract double calculateprice() soyut metod. kahvenin toplam fiyatını gösterir (taban fiyat ve eklentiler). 1 table 2: kahve türleri ve fiyatları kahve türü baz fiyat (tl) espresso latte americano 40 50 45 3.4 espresso sınıfı - basecoffee sınıfını geliştirir (extend) değişkenler: - isheated (private bool) fincan ısıtılma durumunu belirtir. i̇lk değeri her zaman false olmalı. eğer isheated doğru ise calculateprice fonksiyonunda sipariş yazılırken kahve ismi ""espresso (sıcak fincan)"" olarak belirtilir. metotlar: - public void heatcup() isheated değişkenini true yapar. 3.5 latte sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.6 americano sınıfı - basecoffee sınıfını geliştirir (extend) basecoffee’nın metodları ve değişkenleri dışında bir şey gerçeklemez. 3.7 coffee machine sınıfı metotlar: - public void addaddontocoffee(basecoffee coffee, coffeeaddon adddon) kahveye eklenti ekler. kahveye eklenemeyen bir eklenti seçildiğinde kahveye eklentiyi eklemeden ekrana ""[uyari] kahveismi tipi kahveye eklentiadi eklenemez"" yazdırır (kahveismi ve eklentiadi yerine kahve sınıfının ve eklentinin ismi yazdırılmalı, ana program kısmında örnek mevcut). - public void makecoffee(basecoffee coffee) kahvenin özelliklerini ve toplam fiyatını ekrana yazdırır (gösterim formatı ana program bölümünde mevcut). - public void heatespressocup(basecoffee coffee) eğer kahve espresso sınıfındansa ekrana ""espresso kahve fincanı ısıtıldı"" yazdırır ve kahvenin heatcup fonksiyonunu çağırır. diğer kahve türleri için ""[uyari] yalnızca espresso kahve fincanları ısıtılabilir"" yazdırır. - ??? bu fonksiyon tüm farklı coffeemachine’ler tarafından üretilmiş kahve sayısını ekrana ""tum fabrikalar kahve makineleri toplam toplamkahveuretimi kahve uretildi"" yazdırır (toplamkahveuretimi yerine toplam üretilen kahve sayısı yazılmalıdır). bu fonksiyonu tamamlamak için coffeemachine sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yap- mayın. table 3: kahve türlerine eklenebilen özellikler kahve türü espresso latte americano eklenebilen özellikler doubleshot, chocolate milk, vanillasyrup, chocolate milk, vanillasyrup 2 4 ana program (main sın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] coffeemachine machine = [CODE]new coffeemachine();[/CODE] basecoffee espresso = [CODE]new espresso();[/CODE] machine.addaddontocoffee(espresso, [CODE]new doubleshot());[/CODE] machine.addaddontocoffee(espresso, [CODE]new milk());[/CODE] machine.heatespressocup(espresso); machine.makecoffee(espresso); basecoffee latte = [CODE]new latte();[/CODE] machine.addaddontocoffee(latte, [CODE]new milk());[/CODE] machine.addaddontocoffee(latte, [CODE]new vanillasyrup());[/CODE] machine.makecoffee(latte); // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz. coffemachine anothermachine = [CODE]new coffemachine();[/CODE] basecoffee americano = [CODE]new americano();[/CODE] anothermachine.heatespressocup(americano); anothermachine.makecoffee(americano); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada coffeemachine sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği [uyari] espresso tipi kahveye milk eklenemez espresso kahve fincanı ısıtıldı sipariş: espresso (sıcak fincan) + double shot toplam fiyat: 50tl sipariş: latte + milk + vanilla syrup toplam fiyat: 61tl [uyari] yalnızca espresso kahve fincanları ısıtılabilir sipariş: americano toplam fiyat: 45tl tum kahve makineleri tarafindan toplam 3 kahve uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara_sube1 şeklinde isimlendirin (örn., johnnash_181101014_sube1.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 3 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]string type;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife, string type){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] this.type = type; } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args){[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln();[/CODE] system.out.println(""tüm fabrikalar tarafından toplam "" + robotfactory.totalrobots + "" robot üretildi.""); } } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public securityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife, ""security robot"");[/CODE] this.isarmed = isarmed; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(modelname + "" scanning for threats... armed "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(modelname + "" not enough battery to scan threats.""); } } [CODE]public void togglearmedmode(){[/CODE] [CODE]if(isarmed == true){[/CODE] isarmed = false; } [CODE]else{[/CODE] isarmed = true; } } [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife, ""cleaning robot"");[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batteryl[CODE]ife = 100;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(modelname + "" cleaning in progress... "" + ""cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.pr[CODE]intln(modelname + "" not enough battery to clean"");[/CODE] } } [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int x){[/CODE] cleaningpower += x; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] private arraylist<securityrobot> securityrobots = [CODE]new arraylist<>();[/CODE] private arraylist<cleaningrobot> cleaningrobots = [CODE]new arraylist<>();[/CODE] [CODE]static int totalrobots;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] cleaningrobots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobots += 1; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] securityrobots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobots += 1; } [CODE]public void performalltasks(){[/CODE] [CODE]for (abstractrobot abstractrobot : robots) {[/CODE] abstractrobot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (cleaningrobot c : cleaningrobots) {[/CODE] system.out.println(""cleaning robot - model: "" + c.getmodelname() + "", battery: "" + c.getbatterylife() + "", cleaning power: "" + c.getcleaningpower()); } [CODE]for (securityrobot s : securityrobots) {[/CODE] system.out.println(""security robot - model: "" + s.getmodelname() + "", battery: "" + s.getbatterylife() + "", armed: "" + s.getisarmed()); } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] [CODE]for (cleaningrobot c : cleaningrobots){[/CODE] c.setcleaningpower(miktar); system.out.println(""cleaning robot - "" + c.getmodelname() + "" now has cleaning power "" + c.getcleaningpower()); } } [CODE]public void togglesecurityrobotsmode(){[/CODE] [CODE]for (securityrobot s : securityrobots) {[/CODE] s.togglearmedmode(); if(s.getisarmed() == true){ system.out.println(""security robot - "" + s.getmodelname() + "" is now armed.""); } [CODE]else{[/CODE] system.out.println(""security robot - "" + s.getmodelname() + "" is now unarmed.""); } } } }"
4779274,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab221301009 {[/CODE] // test için main [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(""\n"" + collatz(5));[/CODE] [CODE]int[] arr = {[/CODE]5,4,1,2,6,7,1,3,9,11,2,1,-3}; //kontrol etmek için karışık yaptım [CODE]for(int i=0;[/CODE] i<arr.length; i++) system.out.pr[CODE]int(arr[i] + "" "");[/CODE] cocktailsort(arr); // fonk call system.out.pr[CODE]int(""\n yeni hali :"");[/CODE] [CODE]for(int i=0;[/CODE] i<arr.length; i++) system.out.pr[CODE]int(arr[i] + "" "");[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] system.out.println(""\n"" + s1.say() +"" ve ""+ s2.say()); } // soru 1 collatz [CODE]public static int collatz(int i) {[/CODE] [CODE]int mod = i % 2;[/CODE] system.out.pr[CODE]int(i + "" -> "");[/CODE] // adımları yazmak için [CODE]if (i == 1) return 0;[/CODE] [CODE]else{[/CODE] [CODE]if(mod == 1) return 1 + collatz((i*3)+1);[/CODE] [CODE]else return 1 + collatz(i / 2);[/CODE] } } // soru 2 cocktail shaker sort [CODE]public static void cocktailsort(int[] arr) {[/CODE] if (arr.length != 0) karsilastir(arr,0, 1, 1); else system.out.pr[CODE]intln(""olmaz"");[/CODE] } [CODE]static void karsilastir (int[] arr, int index, int yon, int iteras) {[/CODE] boolean kucukmu = arr [index] <= arr [index + yon]; //iterasyon bittiyse boş dön bitir if (iteras == arr.length) [CODE]return;[/CODE] // yöne göre küçük mü büyük mü olması değişmesini etkiliyordu o yüzden böyle [CODE]if (kucukmu == false && yon == 1 || kucukmu == true && yon == -1) {[/CODE] [CODE]int temp = arr [index];[/CODE] arr [index] = arr [index + yon]; arr [index + yon] = temp; } // burada tamamen sınırlara gelince yön değişmesi ve iterasyon artması için falan // ayrı ayrı çağırdım daha kısa yapılabilirdi if (index == arr.length - 2 && yon == 1) karsilastir(arr, arr.length - 2, -1, iteras + 1); [CODE]else if (index == 1 && yon == -1) karsilastir(arr, 1, 1, iteras + 1);[/CODE] [CODE]else karsilastir(arr, index + yon , yon, iteras);[/CODE] } } //soru 3 [CODE]class sayac {[/CODE] [CODE]string str;[/CODE] sayac([CODE]string str) {[/CODE] this.str = str; } //[CODE]stringi alan bi helper lazımdı her şeyi onda yaptım aslında public int sayhelp(string str) {[/CODE] if (str.length() == 0) [CODE]return 0;[/CODE] else if (str.charat(0) == '1') return 1 + sayhelp(str.sub[CODE]string(1));[/CODE] else return 0 + sayhelp(str.sub[CODE]string(1));[/CODE] } [CODE]public int say() {[/CODE] [CODE]return(sayhelp(str));[/CODE] } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.sql.time; import java.util.arrays; import java.util.collections; import java.util.list; [CODE]public class lab2_221301009 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if(sarki instanceof metalsarki) {[/CODE] ((metalsarki)sarki).gostermetalozellikleri(); } } } } abstract [CODE]class sarki {[/CODE] [CODE]string isim, sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } [CODE]class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] metalsarki([CODE]string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] system.out.println(""[metal] ""+this.sanatci+"" - ""+this.isim+"" (""+this.metalozellik+"")""); } [CODE]void gostermetalozellikleri() {[/CODE] system.out.println(this.sanatci+"" - ""+this.isim+"" [ozellik: ""+this.metalozellik+""]""); } } [CODE]class rocksarki extends sarki {[/CODE] [CODE]string rockozellik = ""huzurlu ve nostaljik"";[/CODE] rocksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[rock] ""+this.sanatci+"" - ""+this.isim+"" (""+this.rockozellik+"")""); } } [CODE]class klasiksarki extends sarki {[/CODE] [CODE]string klasikozellik = ""hafif ve sakin"";[/CODE] klasiksarki([CODE]string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] system.out.println(""[klasik] ""+this.sanatci+"" - ""+this.isim+"" (""+this.klasikozellik+"")""); } } [CODE]interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } [CODE]class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] collections.shuffle(sarkilistesi); [CODE]for (sarki sarki : sarkilistesi) {[/CODE] sarki.oynat(); } system.out.pr[CODE]intln();[/CODE] } } [CODE]class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] boolean yuksekmi = false; [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof rocksarki && yuksekmi == false) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] yuksekmi = true; } [CODE]else if (!(sarki instanceof rocksarki) && yuksekmi == true) {[/CODE] system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] yuksekmi = false; } sarki.oynat(); } } } [CODE]class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 4 // vaktim yetmediğinden classları ayrı dosyaya alamadım kusura bakmayın. import java.io.bufferedreader; import java.io.file; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.filereader; import java.io.ioexception; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class lab3 {[/CODE] //stderrora yazdiran tüm exceptionları mainden de throw ettim alt satırda. [CODE]public static void main(string[] args) throws ioexception, dosyabulunamadiexception, bosdosyaexception{[/CODE] arraylist<[CODE]string> kelimelerdizisi = new arraylist<string>();[/CODE] [CODE]try {[/CODE] bufferedreader in = new bufferedreader(new filereader(""c:\\users\\meren\\desktop\\muhammederenöner_221301009\\kelimeler.txt"")); [CODE]string word;[/CODE] [CODE]int i;[/CODE] [CODE]for(i=0;[/CODE](word = in.readline()) != null;i++) { kelimelerdizisi.add(word); } in.close(); [CODE]if (i==0) {[/CODE] //direkt ilk iterasyonda null çıktıysa boş dosya hatası fırlat throw new bosdosyaexception(""hata: kelimeler.txt boş""); } //üst noktada kelimeler okundu ve arraylistine alındı. bufferedreader metin = new bufferedreader(new filereader(""c:\\users\\meren\\desktop\\muhammederenöner_221301009\\metin.txt"")); arraylist<[CODE]string> linedizi = new arraylist<>();[/CODE] [CODE]int j;[/CODE] [CODE]for(j=0;[/CODE](word = metin.readline()) != null;j++) { kelimelerdizisi.add(word); } [CODE]if (j==0) {[/CODE] //direkt ilk iterasyonda null çıktıysa boş dosya hatası fırlat throw new bosdosyaexception(""hata: metin.txt boş""); } metin.close(); //burada da cümleler metinden alındı arraylistlere. arraylist<[CODE]integer> tekrarsayilari = new arraylist<>();[/CODE] //alttaki nested forları açıklıyorum: //her bi kelime için alınan her satırı tarar, contains ise arttırıp kalan kısımda contains mi diye bakar, tekrar artar. [CODE]for (string kelime : kelimelerdizisi) {[/CODE] [CODE]int tekrar=0;[/CODE] [CODE]for (string dizin : linedizi) {[/CODE] if(dizin.contains(kelime)) { [CODE]int index = 0;[/CODE] while(index < dizin.length()) { index = dizin.indexof(kelime, index+kelime.length()); tekrar++; } } } tekrarsayilari.add(tekrar); } //üst kısım sanırım eksik, doğru hesapladiğini varsayarak yazdırma aşamasına geçiyorum fileoutputstream sonuc = new fileoutputstream(""c:\\users\\meren\\desktop\\muhammederenöner_221301009\\sonuc.txt"", true); pr[CODE]intwriter yaz = new printwriter(sonuc);[/CODE] //i kelime sayısını tutuyordu, o yüzden üst sınır. [CODE]for(int kelimeno=0;[/CODE] kelimeno<i; kelimeno++) { //eğer total 0 ise hata fırlat if(tekrarsayilari.get(kelimeno) == 0) { throw new kelimebulunamadiexception(""hata: ""+ kelimelerdizisi.get(kelimeno) + "" metinde bulunamadı."") } yaz.println(kelimelerdizisi.get(kelimeno) + "" "" + tekrarsayilari.get(kelimeno)); // her bir kelime ve karşılık geldiği tekrar sayısını dosyaya yazdır. } } [CODE]catch(kelimebulunamadiexception k) {[/CODE] system.out.println(k.getmessage()); } [CODE]catch(filenotfoundexception e) {[/CODE] //dosya bulunmadıysa zaten zorunlu olarak filenotfound fırlatıldı, ben de onu tutup bunu attım throw new dosyabulunamadiexception(""hata: kelimeler.txt//metin.txt bulunamadı.""); //zamanım kalmadığı için aynı [CODE]try bloğunda ikisini de çektim ondan hata mesajı birlesik oldu :( }[/CODE] } } //exception [CODE]classlarımda extra tanımlanacak bir şey yoktu sanırsam class inputexception extends exception {[/CODE] [CODE]public inputexception(string mesaj) {[/CODE] super(mesaj); } } [CODE]class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]public dosyabulunamadiexception(string mesaj) {[/CODE] super(mesaj); } } [CODE]class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception(string mesaj) {[/CODE] super(mesaj); } } [CODE]class kelimebulunamadiexception extends exception {[/CODE] [CODE]public kelimebulunamadiexception(string mesaj) {[/CODE] super(mesaj); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.arraylist; import java.util.list; [CODE]public class inventory <t extends item> {[/CODE] private arraylist<t> itemlist = [CODE]new arraylist<>();[/CODE] [CODE]void additem(t item) {[/CODE] itemlist.add(item); } [CODE]void removeitem(t item) {[/CODE] itemlist.remove(item); } [CODE]void printinventory() {[/CODE] [CODE]for (t env : itemlist) {[/CODE] system.out.println(env.to[CODE]string());[/CODE] } } t mostvaluableitem() { [CODE]int valuetemp = 0;[/CODE] t ttemp = null; [CODE]for (t env : itemlist) {[/CODE] if (env.getvalue() >= valuetemp) { ttemp = env; valuetemp = env.getvalue(); } } [CODE]return ttemp;[/CODE] } t finditembyname([CODE]string name) {[/CODE] t ttemp = null; [CODE]for (t env : itemlist) {[/CODE] if(env.getname().equals(name)) ttemp = env; } [CODE]return ttemp;[/CODE] } list<t> finditemsbyvalue([CODE]int value) {[/CODE] list<t> thatlist = [CODE]new arraylist<>();[/CODE] [CODE]for(t env : itemlist) {[/CODE] if(env.getvalue() > value) thatlist.add(env); } [CODE]return thatlist;[/CODE] } [CODE]int gettotalvalue() {[/CODE] [CODE]int total = 0;[/CODE] for(t env : itemlist) total += env.getvalue(); [CODE]return total;[/CODE] } list<t> filterbytype([CODE]class<?> type) {[/CODE] list<t> thatlist = [CODE]new arraylist<>();[/CODE] [CODE]for (t env : itemlist) {[/CODE] //isinstance kullanmayı tercih ettim class getname falan da olur if (type.isinstance(env)) { thatlist.add(env); } } [CODE]return thatlist;[/CODE] } [CODE]int gettotalweapondamage() {[/CODE] [CODE]int damage = 0;[/CODE] [CODE]for (t env : itemlist) {[/CODE] if (env instanceof weapon) damage += env.getdamage(); } [CODE]return damage;[/CODE] } [CODE]void sortbyvalue() {[/CODE] [CODE]for(int i=0;[/CODE] i<itemlist.size()-1; i++) { [CODE]int index=i;[/CODE] t temp= null; [CODE]int maxvalue = 0;[/CODE] [CODE]for(int j=i;[/CODE] j<itemlist.size(); j++) { if(itemlist.get(j).getvalue() >= maxvalue) { maxvalue = itemlist.get(j).getvalue(); index = j; } } temp = itemlist.get(index); itemlist.set(index, itemlist.get(i)); itemlist.set(i, temp); } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory) {[/CODE] system.out.println(""envanterdeki en degerli item:"" + (inventory.mostvaluableitem().getname())); } [CODE]public static void transferarmor(inventory<? super armor> destionation, inventory<armor> source) {[/CODE] list<armor> totransfer = source.filterbytype(armor.[CODE]class);[/CODE] [CODE]for (armor armor : totransfer) {[/CODE] destionation.additem(armor); source.removeitem(armor); } } } [CODE]public class weapon implements item {[/CODE] private [CODE]int damage;[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] @override [CODE]public string tostring() {[/CODE] [CODE]return name + "" "" + value + "" damage:"" + damage;[/CODE] } [CODE]public weapon(string string, int value, int damage) {[/CODE] this.name = [CODE]string;[/CODE] this.damage = damage; this.value = value; } @override [CODE]public string getname() {[/CODE] return this.name; } @override [CODE]public int getvalue() {[/CODE] return this.value; } @override [CODE]public int getdamage() {[/CODE] return this.damage; } } [CODE]public interface item {[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] default [CODE]int getdamage() {[/CODE] system.out.pr[CODE]intln(""inventory'de t type'ında bulunabilmesi icin"");[/CODE] //zaten buraya girmez ama inventory [CODE]classı item extendli olduğu için bu gerekiyodu return 0;[/CODE] } } [CODE]public class armor implements item {[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int defense;[/CODE] @override [CODE]public string tostring() {[/CODE] [CODE]return name + "" "" + value + "" defense:"" + defense;[/CODE] } [CODE]public armor(string name, int value, int defense) {[/CODE] this.name = name; this.value = value; this.defense = defense; } @override [CODE]public string getname() {[/CODE] return this.name; } @override [CODE]public int getvalue() {[/CODE] return this.value; } } [CODE]public class potion implements item{[/CODE] private [CODE]string effect;[/CODE] @override [CODE]public string tostring() {[/CODE] [CODE]return name + "" "" + value + "" effect:"" + effect;[/CODE] } [CODE]public potion(string name, int value, string effect) {[/CODE] this.effect = effect; this.value = value; this.name = name; } private [CODE]int value;[/CODE] private [CODE]string name;[/CODE] @override [CODE]public string getname() {[/CODE] return this.name; } @override [CODE]public int getvalue() {[/CODE] return this.value; } } [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] inventory<item> iteminventory = [CODE]new inventory<>();[/CODE] iteminventory.additem([CODE]new weapon(""biweapon"", 150, 30));[/CODE] iteminventory.additem([CODE]new armor(""zirh"", 350, 500));[/CODE] iteminventory.additem([CODE]new armor(""zirh ikinci"", 400, 600));[/CODE] iteminventory.additem([CODE]new potion(""ilac"", 310, ""healing""));[/CODE] iteminventory.sortbyvalue(); iteminventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln("""");[/CODE] inventory<weapon> envanter = [CODE]new inventory<>();[/CODE] envanter.additem([CODE]new weapon(""kilic"", 1560, 90));[/CODE] envanter.additem([CODE]new weapon(""bicak"", 1500, 70));[/CODE] envanter.additem([CODE]new weapon(""silah"",2500 , 150));[/CODE] inventory.pr[CODE]intmostvaluableitem(envanter);[/CODE] inventory<armor> arminventory = [CODE]new inventory<>();[/CODE] arminventory.additem([CODE]new armor(""öz-zirh"", 290, 500));[/CODE] arminventory.additem([CODE]new armor(""öz-zirh ikinci"", 900, 600));[/CODE] envanter.sortbyvalue(); envanter.pr[CODE]intinventory();[/CODE] system.out.println(""total value: "" + envanter.gettotalvalue()); inventory.transferarmor(iteminventory, arminventory); system.out.pr[CODE]intln(""\narmordan aktarma yapildi, item inventory son hali:"");[/CODE] iteminventory.pr[CODE]intinventory();[/CODE] iteminventory.sortbyvalue(); system.out.pr[CODE]intln(""\n\nitem inventory tekrar sort edildi son hali:"");[/CODE] iteminventory.pr[CODE]intinventory();[/CODE] } } recursion nedir? recursive bir metodun temel kısımları nelerdir, bu kısımları kısaca açıklayınız. recursive (özyineleme) bir metodun kendini tekrar çağırması - tetiklemesi diyebiliriz, base kısmı vardı recursive bir metotta base case ne demektir, neden gereklidir; kısaca açıklayınız. en küçük durum için gerekliydi, bu fonksiyonun yani metodun kendini sürekli çağırarak çalışmasının bi noktada durmasını sağlayan kısım. yani baz kısmında tekrar çağırmayız bir stringi ters çeviren bir recursive metodu nasıl yazardınız, base case ne olurdu? her bi iterasyonda bir önceki elemana giden yani sondan başlayarak yazdıran bi fonksiyonumuz olurdu, base case ise ilk eleman (fonksiyonun eleman girdisi n ise base n ==0 koşulu olabilir) recursive bir metotta base case olmazsa ne olur? sonsuza kadar gidebilir bence anlamli sonuç olmaz, baz ile en son durumda recursiveı durdurmayı amaçlıyoruz çünkü while yazıp koşul yazmamak gibi bi şey olur recursive bir metot kendisini çağırdığında stack'te neler olur, kısaca açıklayınız. stackte tüm çağrılan fonksiyonların girdileri birikir üst üste. aynı fonk ne kadar çağrıldıysa fibonacci sayılarını recursive bir metotla hesaplamak neden verimsiz olur, kısaca açıklayınız. recursive genel verimsiz ve fibonacci de çok fazla stack depolaması gerektirir bence tail recursion nedir, kısaca açıklayınız. unuttum abstraction kavramını açıklayınız. soyutlama, ""is a"" ilişkilerinde temel olan özellikleri bir kenarda soyut bi biçimde tutma diyebiliriz bence dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mümkün, zaten hourlyemployee is an employee mantığıyla bakınca dönüş tipi değişmio protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? no modifier dediğimiz default mu eğer öyleyde no modifier daha yakın. protected subclas falan da alıo java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? e çünkü alt sınıftan bi nesne tanımladığımızda bunun atasındaki instance variablelerinr de atama yapmamız gerekecek. atasının atası bu zincir ne kdr var, ne kadar instamce var değer atamak için bunları bilmediğimizden her cınstructor atasına referans verirse zincirleme her şey atanabilir java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır olmaz aynı isimli metotlar falan sıkıntı java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b nin subclassı demek oluo, ata oğul ilişkisinin kontrolü metot overriding ve overloading kavramlarını açıklayınız. overriding: aynı imza (isim ve değişkrbler) ; overloading: aynı metot ismi ama variablrlrr farklı yani aslında bambaşka bi fonksiyon compiler için bence [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? hocam derived objesi açmışız hani derivedin consrructorunda super varsa o base() çalıştırır o da pr[CODE]int();[/CODE] çağırır. o da base nin kendi pr[CODE]intine gider o da ""base"" çıktısı verir cevap base bence class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? bence 10. bence zaten c.getvalue direkt parentteki getvalue gider gibi hissettim java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? comp sırasında kodun gidişine göre anlamı değişmeyen bindingler en başta static olarak yapılır, override falan varsa dynamic çünkü hangisine bind etmeli falan java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? üçünü de artık override edemezsin, bu yüzden static bindingle direkt net olarak o bağlanır overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? overriding varsa dynamic, overloading zaten bambaşka bi methot tanımı anlamına geldiğinden static bindingi bozmaz dinamik bağlamada jvm'nin görevi nedir? runtime sırasında bağlamı belirlemek ?? yani override var ve en yakın overrideya bağlıyor kısaca açıklamaya çalıştım java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? biri diğerini kapsıyo olduğundan upcasting implicit halde olabilir ama downcasting için aynısını diyemeyiz yapılamaz java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? e hepsini runtime da belirlemesi bence zaman karmaşıklığını arttırırdı, jvm nin o anda bununla upraşmasına gerek yok bazı bindingler net şekilde başta yapılabilecekken class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? child yazar, override olduğundan comp başında binding olmaz yani dinamik bağlama [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? productbook çıktısı verir , iki bağlama tipi de var arryin ilk itemi direkt product diğeri ise book olduğu içib ama belki java'da abstract [CODE]class nedir, concrete bir classtan farkı nedir? abstract classların veya interfacelerin constructoru olabilir mi? abstract classlar soyuttur, metotu yaratır tanım içermez alt classlar için yapı sağlar;[/CODE] constructor olabilir abstract bir metot abstract bir classta implement edilebilir mi, evet ise nasıl? implement dediğimiz interface ile alakalı değil mi abstract metot/classların 3 temel özelliğini (veya bize sağladığı yetenekleri) yazınız. s[CODE]ıfatlardan bahsedebilir hale geliriz, soyutlama işte yani nesnesel programlama yapabilmek için nesneyi koda soyut aktardığımız hal abstract class ile interfaceler arasındaki fark nedir? abstract classlar ve interfaceler tip olarak kullanılabilir mi? yani 'myabstractclass obj1;[/CODE]' veya 'my[CODE]interface obj2;[/CODE]' şeklindeki declarationlar mümkün müdür? abstract [CODE]classın abstract olmayan metotları olabilir interface tamamen soyut, tip olabilirler aynı zamanda marker interface ve functional interface kavramları nedir, nasıl kullanılır? ilk kez duyuyırum bir class birden çok interfaceyi implement edebilir mi? bir interface başka bir interfaceyi implement edebilir mi? evet birden çok eder;[/CODE] ama bir [CODE]interface diğerini extend eder abstract class animal {[/CODE] [CODE]string name;[/CODE] animal([CODE]string name) {[/CODE] this.name = name; } abstract [CODE]void sound();[/CODE] [CODE]void printname() {[/CODE] system.out.pr[CODE]intln(""animal: "" + name);[/CODE] } } [CODE]class dog extends animal {[/CODE] dog([CODE]string name) {[/CODE] super(name); } [CODE]void sound() {[/CODE] system.out.pr[CODE]intln(""woof"");[/CODE] } } [CODE]public class testanimals {[/CODE] [CODE]public static void main(string[] args) {[/CODE] animal a = [CODE]new animal(""buddy"");[/CODE] a.pr[CODE]intname();[/CODE] a.sound(); } } yukarıdaki kodda hata nerededir, bu hatayı nasıl düzeltirsiniz? hatayı düzelttikten sonra output? hata animal a variablesinin yine animal tipinde bir objeyi tutuyo olması. bu durumda a.sound abstract kalmış bi function olarak kalır, dogtaki sounda zaten inemez ama bence hata da verir. onu dğzeltirsek de çıktı animal:buddy /n woof olr. [CODE]interface flyable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""flying"");[/CODE] } } [CODE]interface swimmable {[/CODE] default [CODE]void move() {[/CODE] system.out.pr[CODE]intln(""swimming"");[/CODE] } } [CODE]class duck implements flyable, swimmable {[/CODE] [CODE]public void move() {[/CODE] super.move(); } } [CODE]public class testduck {[/CODE] [CODE]public static void main(string[] args) {[/CODE] duck d = [CODE]new duck();[/CODE] d.move(); } } kod bu haliyle compile edilebilir mi? koddaki hata nedir, nasıl düzeltilir? yeni haliyle output? bence interfacenin içinde de metot içi tanım yapamıyoz zaten ikisi ayrı ayrı yapabilseydi aynı anda implement edemezdik bence, o iç tanım duck classı içinde yapılmalı ve yazdırılmalı. bu haliyle output doğrudan swimming ya da flying biz ne dersek artık sonuçta ikisini de yapabilir, ne durumda olduğuna bağlı bi metot yazılır yazılım geliştirirken genelde kaç çeşit hata ile karşılaşılır, her tür için birer örnek veriniz. error ve exception olarak ayrılır, compile error ve runtime error olaeak ayrılır exception handlingin amacı nedir? oluşacak muhtemel hatalara doğru müdahele etmek, hatalardaki kontrolle kodu tam anlamıyla yönetebilmiş olmak exception handlingde finally bloğunun amacı nedir? eğer hata alındıktan (ya da almadıktan) sonra kesiblikle yapılması gereken bir şey varsa bu blokta bunlar gerçekleşir mesela bi dosyayı bi scanneri kapatmak. java'da 'checked' ve 'unchecked' exceptionların farkı nedir? checked, compile esnasında kontrol edilmesi gereken exceptionlarken unchecked ler runtime esnasında oluşabilme ihtimali serbest olan exceptionlardır java'da kendi exceptionunuzu nasıl tanımlarsınız? exception [CODE]classına bi oğul class tanımlayarak (exceptiın ile extend ederek) sonra constructoru, gerekiyorsa hata mrsajını vs tanımlarım java'da error ve exception arasındaki fark nedir, açıklayınız errorlar geri dönülemez sistem hataları olarak nitelendirilir, exception ise coder tarafından handle edilebilecek kusurlardır java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? metod, bu hatayla ilgili kendi düzeltmelerini yaptıktan sonra bir öncesinde çağrıldığı metodda da düzeltmeler gerekiyorsa üst metodun da catch edebilmesi için tekrar fırlatılır 'throws' declarationunun metot overriding yaparken kısıtları nelerdir? override ederken ana metodda fırlatılan hata türü veya o türün oğul hataları fırkatılabilir, ata exceptionlar override metodda throw edemez static void printindex(int[] arr, int index){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(arr[index]);[/CODE] } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""exception caught"");[/CODE] } [CODE]catch(arrayindexoutofboundsexception e){[/CODE] system.out.pr[CODE]intln(""array exception caught"");[/CODE] } } //psvm pr[CODE]intindex({[/CODE]1, 2, 3, 4, 5}, 5); kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenir ama hata var. catchlerin sırası yanlış. bu durumda exception caught çalışır. ama daha özelinde çalışması gereken alttaki catchtir. derlenir ama mantığı yanlış [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally done -1 text file ile binary file arasındaki fark nedir? text file dönüştürülmüş insanın açıp okuyabildiği iken binary file tüm verileri olduğu gibi bitler halinde yazar okunamaz göz ile bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? veri kaybına sebep olabilir, vatelite özelliğini tetikler binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? serializable interfacesini implement etmeli, functionaldı binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? yazılsa da hepsi binary şekilde yazılır, objectinputstream ile yazdırırız buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? eof vardı bitane, buffered olanda eksi 1 alıyor değer scannerde de has next line vs. var boolean binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? eof 😜 [CODE]public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] _______ f = new _______(""numbers.bin"", ""____""); f.write[CODE]int(10);[/CODE] f.write[CODE]int(20);[/CODE] int a = f.read[CODE]int();[/CODE] f.seek(_____________); int b = f.read[CODE]int();[/CODE] system.out.pr[CODE]intln(a + b);[/CODE] f.close(); } } boşluklara sırasıyla ne gelmelidir? output? objectinputstream f = new objectinputstream .... true gelmeli f.seek de 8 falan olmalı heehalde output 30 [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); ______________ pw = [CODE]new ______________(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] pw.close(); } } boşluklara sırasıyla ne gelmelidir? bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir? printwriter gelmesi gerekmio mu ikisine ya what grade (a, b, c, d, or f) do you expect to earn by the end of this course? bb java'da generic kavramı nedir, bu kavramın temel amacı nedir? class ve metotların typee göre esnetilebilmesini sağlayan yapıdır, amaç classın belirli birden faza obje türüne uyumlu hale getirilmesi bir wildcard'ı ne zaman sınırlamaya ihtiyaç duyarsınız, sınırlandığı ve sınırlanmadığı durumlar için birer örnek veriniz. boundları hangi keywordlerle ifade edersiniz? eğer o classta her objede olmayan belirli objelerin sahip olduğu metotlar varsa. boundlar ? * fasa fiso jenerik olmayan bir class jenerik bir metot içerebilir mi? açıklayınız. evet içerebilir metotun jeneriği kendisiyle alakalıdır mygenericclass<integer> ve mygenericclass<number> classları arasında kalıtım(child-parent) ilişkisi nasıldır, açıklayınız. child parent ilişkisi yoktur biri diğerini tam olrk kapsamıyor çünki [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. bence hata yok [CODE]public _____________ {[/CODE] double sum = 0.0; [CODE]for (t item : list) {[/CODE] sum += item.doublevalue(); } return sum / list.size(); } [CODE]public static void main(string[] args) {[/CODE] list<integer> integers = arrays.aslist(1, 2, 3, 4); list<double> doubles = arrays.aslist(1.5, 2.5, 3.5); main m = [CODE]new main();[/CODE] system.out.pr[CODE]intln(average(integers));[/CODE] system.out.pr[CODE]intln(average(doubles));[/CODE] } yukarıda boşluk bırakılan yeri doldurun. not: metodun jenerik olduğuna, çağırılma biçimine ve jenerik tipine dikkat edin! boşluğu doldurduktan sonra programın çıktısı ne olur? <t extends number> average(list<t> list) (üstteki boşluk) çıktı: 2.5 2.5 aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve hepsini 1 defa sağa kaydıran metodu nasıl yazardınız, stratejiniz ne olurdu? peki ya n defa sağa kaydırma işlemini nasıl yapardınız? n defa kaydırma çözümünüz sizce optimal olan çözüm mü, neden? örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> a -> b ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node rotate(node head){[/CODE]...} son nodea giderdim forla onu tutardım, sonra onun nextini heade bağlarım, ondan bir öncekinin nextini null yaparım. n kadar kaydırma,(n mod total node sayısı) kadar kaydırmakla aynıdır. onu bulup o kadar kaydırılırdı arraylist ve linkedlist veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. arraylist direkt array oluşturur genişletir linked list birbirine bağlı esnek collections interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? herangi bi collectionun yapması gerekenler işte eleman ekleme silme vs vs kendi yazdığınız bir classta veri yapilarını istenilen şekilde (mesela hashset'te duplicate objelerin olmamasi) kullanabilmek için object classının hangi metotlarını override etmek gerekir, neden? equals, tostring belki ne bilm bir dijital kütüphane uygulaması geliştiriyorsunuz. bu uygulamada, öğrenciler araştırma projeleri için kaynak ekliyor ve sistem, en son eklenen kaynağı ilk olarak görüntülemek üzere tasarlanıyor. öğrenciler, ekledikleri kaynakların boyut sırasına göre tekrar gözden geçebilmek istiyorlar. bu durumda, hangi veri yapısını tercih edersiniz? neden? stack veri yapısını twrcih ederdim çünkü lifo. fifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue fifo firs in first out ilk giren ilk çıkar. stack lifo queue fifo map lifo priorityqueue ikisi de deil. [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) {[/CODE] stack<[CODE]integer> stack = new stack<>();[/CODE] stack.push(10); stack.push(20); stack.push(30); system.out.println(stack.pop()); system.out.println(stack.peek()); system.out.println(stack.pop()); } } output? 30 10 [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 85); scores.put(""charlie"", 90); scores.put(""alice"", 100); system.out.println(scores.get(""alice"")); system.out.println(scores.size()); } } output? 95 4 ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 60🥀 4. sütun option 1 java gui uygulamalarında olayları yönetmek için bir programcının yapması gereken iki temel görev nedir? listener eklemek neden gui uygulamalarında system.exit(0) sıklıkla gerekli olurken, konsol uygulamalarında bu durum geçerli değildir? guide pencere açık kalabilio kapansa da gui tasarımında düzen yöneticilerinin (layout managers) amacı nedir ve bu yöneticiler geliştiricilere nasıl yardımcı olur? e o sayede design yapılır jframe'de setdefaultcloseoperation metodunun işlevini açıklayın. metotla close tuşuna basınca nolması gerektiği ayarlanır flowlayout ve gridlayout, bileşenleri düzenlemede nasıl farklılık gösterirler? bilmiyom aşağıdaki kodun çalışmasını izleyin ve jframe'de neyin görüntüleneceğini belirleyin: jframe frame = [CODE]new jframe(""test"");[/CODE] frame.setsize(300, 200); frame.setlayout([CODE]new borderlayout());[/CODE] jbutton northbutton = [CODE]new jbutton(""north"");[/CODE] jbutton centerbutton = [CODE]new jbutton(""center"");[/CODE] frame.add(northbutton, borderlayout.north); frame.add(centerbutton, borderlayout.center); northbutton.setvisible(false); frame.setvisible(true); centerbutton görülebilir bilmiom. aşağıdaki kod parçasını göz önünde bulundurun: import javax.swing.*; import java.awt.event.*; [CODE]public class testframe extends jframe {[/CODE] [CODE]public testframe() {[/CODE] settitle(""test""); setsize(300, 200); jbutton btn = [CODE]new jbutton(""exit"");[/CODE] btn.addactionlistener([CODE]new actionlistener() {[/CODE] [CODE]public void actionperformed(actionevent e) {[/CODE] system.out.pr[CODE]intln(""button clicked"");[/CODE] system.exit(0); } }); add(btn); setdefaultcloseoperation(jframe.exit_on_close); setvisible(true); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new testframe();[/CODE] } } kullanıcı ""exit"" düğmesine tıkladığında olaylar sırası nasıldır? çıkar bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class quiz1q1_221301009 {[/CODE] [CODE]public static void main(string [] args) {[/CODE] [CODE]string hey = ""a1b2"";[/CODE] combination(hey); } // a: 65 a: 97 [CODE]static void combination(string str) {[/CODE] [CODE]int numofletters=0;[/CODE] [CODE]int[] indexes = new int[10];[/CODE] [CODE]int y=0;[/CODE] [CODE]for(int i=0;[/CODE] i<str.length(); i++) { if(str.charat(i) >= 65 && str.charat(i) <= 97) { numofletters++; indexes[y] = i; y++; } } //amacım letter olan kaç tane char olduğunu ve bu charların indexlerini bulup recrsn fonksiyona götürmek system.out.pr[CODE]int(""["" + combination_rec(str, 2^numofletters - 1, indexes) + ""]"");[/CODE] } //bu fonksiyonda da amacım harf sayısının 2 üzerili hali yani //toplam kombinasoyn sayısını buraya aktardıktan sonra //her bi kombinasyonu booleanlı bi hale dönüşütürerek //büyütüp küçülmeyi ayarlamayı sağlamaktı //mesela 2 karakter varsa numofletters=3 ile başlayacak //3 : 11 ile ikisini de değişicek sonra 2 : 10 sonra 1: 01 sonra 0: 00 ile //tüm olası büyütme küçültmeleri yapmaktı ama olmadı //bi de 3 harf ile sınırlandırdım malsef döngü ile total harf sayısı //yapılabilirdi ama sürem yetmedi [CODE]static string combination_rec(string str, int numofletters, int[] index) {[/CODE] [CODE]if(numofletters == 0) return """";[/CODE] [CODE]else return ""c"";[/CODE] [CODE]string word = """";[/CODE] boolean [] comb = [CODE]new boolean[3];[/CODE] comb[0] = (numofletters%2 == 1)? true:false; comb[1] = ((numofletters/2)%2 == 1)? true:false; comb[2] = ((numofletters/4)%2 == 1)? true:false; // bu comb değerleri bu iterasyonda hangi harfin değişmesi hangisinin // aynı kalması gerektiğini belirler [CODE]int y=0;[/CODE] char c; [CODE]for(int ind=0;[/CODE] ind<str.length(); ind++){ [CODE]if(ind == index[0] || ind == index[1] || ind == index[2]){[/CODE] [CODE]if(comb[y] == true) {[/CODE] if(str.charat(ind) < 97) c=str.charat(ind) + 32; else c=str.charat(ind) - 32; // true ise değiş. } else c = str.charat(ind); //false ise aynı kal } else c = str.charat(ind); //harf değilse değişme ve word değişkenine bu charı al word = word + c; } // wordu ekrana yazdır diğer word için iterasyonu 1 azalt. [CODE]return ""\"""" + word + ""\"""" + combination_rec(str, numofletters-1, index);[/CODE] } } import java.util.arraylist; [CODE]public class quiz1q2_221301009 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] private boolean isoperational; [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int newbat) {[/CODE] this.batterylevel = [CODE]newbat;[/CODE] } [CODE]public boolean getoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setoperational(boolean newboolean) {[/CODE] this.isoperational = [CODE]newboolean;[/CODE] } [CODE]public void charge() {[/CODE] batterylevel = 100; isoperational = true; } robot() { name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } robot([CODE]string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; isoperational = (batterylevel>0) ? true:false; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: %"" + batterylevel + "" is operational: "" + isoperational);[/CODE] } } [CODE]class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<robot>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getloc() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setloc(string loc) {[/CODE] this.location = loc; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for(i=0;[/CODE] i<robots.size(); i++) { robots.get(i).charge(); } } [CODE]public void printfactory() {[/CODE] system.out.println(""factory name: "" + this.name + "" location: "" + this.location + ""\nrobots operating here:""); [CODE]for(int i=0;[/CODE] i<robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge() {[/CODE] batteryl[CODE]ife=100;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]int(""\n"");[/CODE] //static method yazdım ??? sorusu için robotfactory.toplamroboturetimi(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife < 10) {[/CODE] system.out.println(""[""+modelname+ ""] not enough battery to scan threats...""); } [CODE]else{[/CODE] system.out.println(""[""+modelname+ ""] scanning for threats... armed: ""+ isarmed); batteryl[CODE]ife -= 10;[/CODE] } } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } // gerekiyordu [CODE]public boolean getarmed() {[/CODE] [CODE]return isarmed;[/CODE] } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] //gerekiyodu:) [CODE]public int getcleaning() {[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaning(int miktar) {[/CODE] cleaningpower += miktar; } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } [CODE]public void performtask() {[/CODE] [CODE]if(batterylife < 10) {[/CODE] system.out.println(""[""+modelname+ ""] not enough battery to clean...""); } [CODE]else{[/CODE] system.out.println(""[""+modelname+ ""] cleaning in progress... cleaning power: ""+ cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } } [CODE]public void boostcleaningpower() {[/CODE] cleaningpower++; //?? arttırır yazmış anlamadım 1 tane artsın } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]static int toplam = 0;[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] abstractrobot [CODE]newrob = new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add([CODE]newrob);[/CODE] toplam++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] abstractrobot [CODE]newrob = new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add([CODE]newrob);[/CODE] toplam++; } [CODE]public void performalltasks() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]string type = (robot instanceof cleaningrobot) ? ""cleaningrobot"" : ""securityrobot"";[/CODE] string info = (robot instanceof cleaningrobot) ? ""cleaning power: "" + ((cleaningrobot)robot).getcleaning() : ""armed: "" + ((securityrobot)robot).getarmed(); system.out.println(type+ "" - model: ""+ robot.getmodelname()+ "", battery: ""+ robot.getbatteryl[CODE]ife()+"", ""+info);[/CODE] } } //bunun için de ister istemez setter gerekiyor, ilgili yerde oluşturdum. [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof cleaningrobot) {[/CODE] ((cleaningrobot)robot).setcleaning(miktar); system.out.println(""cleaningrobot - "" + robot.getmodelname() + "" now has cleaning power: "" + ((cleaningrobot)robot).getcleaning()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for(abstractrobot robot: robots) {[/CODE] [CODE]if(robot instanceof securityrobot) {[/CODE] ((securityrobot)robot).togglearmedmode(); string type = ((securityrobot)robot).getarmed() == true ? ""armed"": ""unarmed""; system.out.println(""securityrobot - "" + robot.getmodelname() + "" is now "" + type); } } } //??? sorusu //[CODE]static int toplam ile class içinde herhangi bi objede herhangi bi robot oluşumunda saymayı sağladım public static int toplamroboturetimi() {[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam ""+ toplam + "" robot uretildi"");[/CODE] [CODE]return toplam;[/CODE] } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 import java.io.bufferedreader; import java.io.file; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.filereader; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; //exception [CODE]classları class stoknegatifexception extends exception {[/CODE] [CODE]public stoknegatifexception() {[/CODE] super(""hata: stok miktarı negatif olamaz.""); } } [CODE]class esyayokexception extends exception {[/CODE] [CODE]public esyayokexception() {[/CODE] super(""hata: i̇stenen eşya envanterde mevcut değil.""); } } [CODE]class ozellikhatasiexception extends exception {[/CODE] [CODE]public ozellikhatasiexception() {[/CODE] super(""hata: eşya bilgileri hatalı veya eksik.""); } } [CODE]class dosyabulunamadiexception extends exception {[/CODE] [CODE]public dosyabulunamadiexception() {[/CODE] super(""hata: envanter dosyası bulunamadı.""); } } [CODE]class bosdosyaexception extends exception {[/CODE] [CODE]public bosdosyaexception() {[/CODE] super(""hata: envanter dosyası boş.""); } } [CODE]public class quiz3_221301009 {[/CODE] [CODE]public static void main (string[] args) throws dosyabulunamadiexception {[/CODE] arraylist<envanterkaydi> envanter = [CODE]new arraylist<>();[/CODE] boolean bitti_mi = false; scanner secimal = new scanner(system.in); [CODE]while(!bitti_mi) {[/CODE] system.out.pr[CODE]intln(""termi̇nal\n""+ ""1-eşya ekle\n""+ ""2-eşya çıkar\n""+ ""3-stok güncelle\n""+ ""4-envanter listele\n""+ ""5-dosyaya kaydet\n""+ ""6-dosyadan geri yükle\n""+ ""7-çıkış\n""+ ""seçiminiz:"" );[/CODE] int sec = secimal.next[CODE]int();[/CODE] secimal.nextline(); [CODE]string hedefesya;[/CODE] boolean var_mi = false; [CODE]int index = -1;[/CODE] switch(sec) { case 1: [CODE]string esyaname;[/CODE] [CODE]int stok;[/CODE] system.out.pr[CODE]int(""eşya adı giriniz:"");[/CODE] esyaname = secimal.nextline(); system.out.pr[CODE]int(esyaname + "" başlangıç stoğu"");[/CODE] stok = secimal.next[CODE]int();[/CODE] [CODE]try {[/CODE] [CODE]if (stok < 0) throw new ozellikhatasiexception();[/CODE] boolean mevcut_kayit = false; [CODE]for(envanterkaydi env : envanter) {[/CODE] if(env.getisim().equals(esyaname)) { env.stokguncelle(stok); mevcut_kayit = true; } } [CODE]if(mevcut_kayit == false) {[/CODE] envanterkaydi yeni = [CODE]new envanterkaydi(esyaname, stok);[/CODE] envanter.add(yeni); } } [CODE]catch (ozellikhatasiexception | stoknegatifexception e) {[/CODE] system.err.println(e.getmessage()); } break; case 2: system.out.pr[CODE]int(""silinecek eşya ismi:"");[/CODE] hedefesya = secimal.nextline(); var_mi = false; [CODE]for (envanterkaydi env : envanter) {[/CODE] system.out.println(env.getisim() + ""?""); if(hedefesya.equals(env.getisim())) { var_mi = true; index = envanter.indexof(env); } } [CODE]try {[/CODE] [CODE]if (var_mi == false) throw new esyayokexception();[/CODE] envanter.remove(index); } [CODE]catch (esyayokexception e) {[/CODE] system.err.println(e.getmessage()); } break; case 3: system.out.pr[CODE]int(""güncellenecek eşya:"");[/CODE] hedefesya = secimal.nextline(); system.out.pr[CODE]int(""yeni stok:"");[/CODE] stok = secimal.next[CODE]int();[/CODE] var_mi = false; [CODE]for (envanterkaydi env : envanter) {[/CODE] if(hedefesya.equals(env.getisim())) { var_mi = true; index = envanter.indexof(env); } } [CODE]try {[/CODE] [CODE]if (index == -1) throw new esyayokexception();[/CODE] else envanter.get(index).stokguncelle(stok); } [CODE]catch (esyayokexception | stoknegatifexception e) {[/CODE] system.err.println(e.getmessage()); } break; case 4: [CODE]for (envanterkaydi env : envanter) {[/CODE] system.out.println(env.getisim() + "" isimli eşya stoğu: "" + env.getstok()); } break; case 5: try (printwriter yazici = new printwriter(new fileoutputstream(""envanterlist.txt""))) { [CODE]for (envanterkaydi env : envanter) {[/CODE] yazici.println(env.getisim() + "","" + env.getstok()); } system.out.pr[CODE]intln(""dosyaya kaydedildi"");[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } break; case 6: [CODE]try {[/CODE] file dosya = new file (""envanterlist.txt""); if (!dosya.exists()) throw [CODE]new dosyabulunamadiexception();[/CODE] [CODE]string dizi;[/CODE] scanner oku = [CODE]new scanner(dosya);[/CODE] if (!oku.hasnextline()) throw [CODE]new bosdosyaexception();[/CODE] while (oku.hasnextline()) { dizi = oku.nextline(); system.out.pr[CODE]intln(dizi);[/CODE] } } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (bosdosyaexception e) {[/CODE] system.err.println(e.getmessage()); } case 7: bitti_mi = true; break; } } } } [CODE]class envanterkaydi {[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public envanterkaydi(string isim, int stok) throws ozellikhatasiexception{[/CODE] this.isim = isim; [CODE]if(stok<0) throw new ozellikhatasiexception();[/CODE] this.stok = stok; } [CODE]public void stokguncelle(int miktar) throws stoknegatifexception {[/CODE] if (miktar>=0) this.stok = miktar; [CODE]else throw new stoknegatifexception();[/CODE] } [CODE]public string getisim() {[/CODE] return this.isim; } [CODE]public int getstok() {[/CODE] [CODE]return stok;[/CODE] } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.arrays; import java.util.collection; import java.util.list; [CODE]public class question2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) //ben ekledim. list<string> isimler = arrays.aslist(""eren"",""semra"",""bülent"",""nebi"",""ico"",""resat""); system.out.pr[CODE]intln(""\nkendi deneme listem\nisimler listesinde minimum: ""+findextreme(isimler, false));[/CODE] system.out.pr[CODE]intln(""isimler listesinde maximum: ""+findextreme(isimler, true));[/CODE] } [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] t answer = null; [CODE]for(t any:collection) {[/CODE] [CODE]if(answer==null) answer = any;[/CODE] if (any.compareto(answer) < 0 && !findmax || any.compareto(answer) > 0 && findmax) { answer = any; } } [CODE]return answer;[/CODE] } } import java.util.arraylist; [CODE]public class question1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); system.out.println(""son eklenen: ""+list.getlastadded()); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] } } [CODE]class undoablelist<t> extends arraylist<t>{[/CODE] [CODE]public void undolast() {[/CODE] [CODE]try{[/CODE] this.remove(this.size()-1); } [CODE]catch (exception e) {[/CODE] } } [CODE]public t getlastadded() {[/CODE] return this.get(this.size()-1); } } import java.util.arraylist; import java.util.arrays; import java.util.collection; import java.util.list; [CODE]public class question3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(""qui̇z dosyasindaki̇ çikti\n""+filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] list<number> karisik = arrays.aslist(1,(2.3),(3.8),5,-1,(0.6)); system.out.println(""\nbeni̇m yazdığım deneme çıktısı\nonly integers: ""+ filterbytype(karisik, integer.[CODE]class));[/CODE] system.out.println(""only doubles: ""+ filterbytype(karisik, double.[CODE]class));[/CODE] } [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] list<t> [CODE]newlist = new arraylist<>();[/CODE] //""?"""" yerine ne kullandığımızı unuttuğum için collectionu direkt //object üzerinden döndürdüm sanki başka bişi yapıyoduk da //bu haliyle doğru çalışıyo ama type safety uyarısı veriyor sadece [CODE]for(object any : collection) {[/CODE] if(any.get[CODE]class() == type) {[/CODE] newlist.add((t)any); } } [CODE]return newlist;[/CODE] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 import java.io.serializable; [CODE]public class gamesave implements serializable{[/CODE] //bu [CODE]classtan açılacak obje ile oyunda kaydedilmesi gereken her şey alıncak //sonra dosyaya yazdırılcak //kameranın konumu public camera camera;[/CODE] [CODE]public player player;[/CODE] //main-[CODE]static player (entities içinde var ama tek başına da çok kullandım kolaylık sağladığından) public double playerhealth;[/CODE] [CODE]public int playerscore;[/CODE] //dalga boolean değerleri [CODE]public boolean[] dalga;[/CODE] //handler [CODE]public handler handler;[/CODE] //hangi turda, turun hangi spawner indisinde kaldık [CODE]public int tour, zombieindex;[/CODE] //silahla alakalı bilgiler [CODE]public guntype guntype;[/CODE] //dosyadan okurken type'a göre hızlıca silahı mod[CODE]ifiye edeceğiz }[/CODE] import java.awt.rectangle; import java.util.arraylist; import java.util.list; [CODE]public abstract class zombie extends gameobject {[/CODE] protected handler handler; protected gameobject player; protected [CODE]int health;[/CODE] protected [CODE]int attack;[/CODE] protected long shoottime=0; protected long jumptime=0; protected boolean isjumping = false; [CODE]public zombie(int x, int y, entitytype type, handler handler) {[/CODE] super(x, y, type); this.handler = handler; this.player = getplayer(); } private gameobject getplayer() { [CODE]for (int i=0;[/CODE] i < handler.entities.size(); i++) { gameobject tempgameobject = handler.entities.get(i); if (tempgameobject.gettype() == entitytype.player) { [CODE]return tempgameobject;[/CODE] } } [CODE]return null;[/CODE] } @override [CODE]public void tick() {[/CODE] [CODE]if (player != null) {[/CODE] [CODE]if (health <= 0) {[/CODE] //asit tüküren zombi ölünce etraftaki zombilerin //canını 2 azaltır - duvarları siler //oyuncu canını da 50 azaltır eğer o alandaysa [CODE]if(this instanceof zombieasitli){[/CODE] rectangle etkialani = new rectangle( this.getx()-60, this.gety()-60, 120, 120 ); double random = math.random(); if(random < 0.25 && player.gun.type != guntype.tabanca) { handler.addentity(new yedeksarjor(this.getx(), this.gety(), entitytype.yedeksarjor)); } list<gameobject> silinecekler = [CODE]new arraylist<>();[/CODE] silinecekler.add(this); [CODE]for(int j=0;[/CODE] j<handler.entities.size(); j++) { gameobject temp = handler.entities.get(j); if(temp instanceof zombie && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] ((zombie)temp).sethealth(((zombie)temp).gethealth() - 3); } else if(temp instanceof player && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] player.sethealth(player.gethealth() - 30); } else if(temp.gettype() == entitytype.block && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] silinecekler.add(temp); } } [CODE]for(gameobject sil : silinecekler) {[/CODE] handler.removeentity(sil); if(sil instanceof zombie) player.setscore(player.getscore() + 5); } handler.addentity(new bombeffect(this.getx() - 60, this.gety() - 60, entitytype.asitlizombiefekt , 120, 120, 60, handler)); } [CODE]else {[/CODE] double random = math.random(); if(random < 0.25 && player.gun.type != guntype.tabanca) { handler.addentity(new yedeksarjor(this.x, this.y, entitytype.yedeksarjor)); } handler.removeentity(this); player.setscore(player.getscore() + 5); } } int playerx = player.getx(); int playery = player.gety(); collision.checksomecollision(this, handler); double d[CODE]iffx = playerx - x;[/CODE] double d[CODE]iffy = playery - y;[/CODE] double distance = math.sqrt(d[CODE]iffx * diffx + diffy * diffy);[/CODE] //asit tüküren zombinin asit tükürmesi [CODE]if(this instanceof zombieasitli) {[/CODE] long currenttime = system.currenttimemillis(); [CODE]if(currenttime - shoottime > 1000) {[/CODE] shoottime = system.currenttimemillis(); handler.addentity(new acyd(this.getx(), this.gety(), entitytype.asit, handler, ((player)player))); } } //sürünge zombiler 230 mesafeden sonra oyuncunun sırtına atlar //sonra kaçabiliriz, bir süre sonra tekrar atlar long currenttime = system.currenttimemillis(); [CODE]if (this instanceof zombiesurunge && distance <= 230 && distance >= 30) {[/CODE] [CODE]if (!isjumping && currenttime - jumptime > 3500) {[/CODE] //3,5 saniye yeniden atlamak için güç toplar jumptime = currenttime; isjumping = true; } [CODE]if (isjumping && currenttime - jumptime < 400) {[/CODE] speed_x = (int) ((diffx / distance) * getspeed() * 3.75); speed_y = (int) ((diffy / distance) * getspeed() * 3.75); } [CODE]else if (isjumping) {[/CODE] isjumping = false; jumptime = currenttime; } } [CODE]else {[/CODE] speed_x = ([CODE]int) ((diffx / distance) * getspeed());[/CODE] speed_y = ([CODE]int) ((diffy / distance) * getspeed());[/CODE] } x += speed_x; y += speed_y; } } protected abstract double getspeed(); [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(int health) {[/CODE] this.health = health; } [CODE]public int getattack() {[/CODE] [CODE]return attack;[/CODE] } [CODE]public void setattack(int attack) {[/CODE] this.attack = attack; } } import java.awt.graphics; import java.awt.rectangle; import java.awt.color; [CODE]public class zombietank extends zombie{[/CODE] [CODE]public zombietank(int x, int y, entitytype type, handler handler) {[/CODE] super(x, y, type, handler); health = 5; attack = 4; } @override protected double getspeed() { return 2.0; } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(70,70,40,230));[/CODE] g.fillrect(x, y, 40, 40); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x,y,40,40);[/CODE] } } import java.awt.graphics; import java.awt.rectangle; import java.awt.color; [CODE]public class zombiesurunge extends zombie{[/CODE] [CODE]public zombiesurunge(int x, int y, entitytype type, handler handler) {[/CODE] super(x, y, type, handler); health = 2; attack = 2; } @override protected double getspeed() { return 4.0; } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(158,0,3,230));[/CODE] g.filloval(x, y, 32, 32); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x,y,32,32);[/CODE] } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class bombeffect extends gameobject {[/CODE] private [CODE]int duration;[/CODE] private handler handler; [CODE]public bombeffect(int x, int y, entitytype type, int width, int height, int duration, handler handler) {[/CODE] super(x, y, type); this.width = width; this.height = height; this.duration = duration; this.handler = handler; } @override [CODE]public void tick() {[/CODE] duration--; [CODE]if (duration <= 0) {[/CODE] handler.removeentity(this); } } @override [CODE]public void render(graphics g) {[/CODE] if(type == entitytype.asitlizombiefekt) g.setcolor([CODE]new color(0, 255, 0, 80));[/CODE] else if(type == entitytype.roketatarefekt) g.setcolor([CODE]new color(255, 80, 30, 80));[/CODE] g.fillrect(x, y, width, height); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, width, height);[/CODE] } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class bullet extends gameobject {[/CODE] private handler handler; private double bulletspeed; private double angle; [CODE]public bullet(int x, int y, entitytype type, handler handler, double angle) {[/CODE] super(x, y, type); this.handler = handler; this.angle = angle; this.bulletspeed = player.gun.speed; } @override [CODE]public void tick() {[/CODE] x += bulletspeed * math.cos(angle); y += bulletspeed * math.sin(angle); [CODE]for(int i = 0;[/CODE] i<handler.entities.size(); i++) { gameobject anyobject = handler.entities.get(i); [CODE]if(anyobject instanceof block) {[/CODE] if(getbounds().intersects(anyobject.getbounds())){ handler.removeentity(this); if(player.gun.type == guntype.roketatar) { rectangle etkialani = new rectangle( anyobject.getx()-75, anyobject.gety()-75, 150, 150 ); [CODE]for(int j=0;[/CODE] j<handler.entities.size(); j++) { gameobject temp = handler.entities.get(j); if(temp instanceof zombie && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] ((zombie)temp).sethealth(((zombie)temp).gethealth() - 3); } else if(temp.gettype() == entitytype.block && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] handler.removeentity(temp); } } handler.addentity(new bombeffect(anyobject.getx()-75, anyobject.gety()-75, entitytype.roketatarefekt, 150, 150, 60, handler)); } } } } } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor(color.black); g.filloval(x, y, 8, 8); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 8,8);[/CODE] } } import java.awt.graphics; import java.awt.rectangle; import java.awt.color; [CODE]public class yedeksarjor extends gameobject{[/CODE] [CODE]public yedeksarjor(int x, int y, entitytype type) {[/CODE] super(x, y, type); } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(79,158,138,200));[/CODE] g.fillrect(x, y, 20, 30); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x,y,20,30);[/CODE] } @override [CODE]public void tick() {[/CODE] //boş hareketsiz çünkü } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class zombieasitli extends zombie {[/CODE] [CODE]public zombieasitli(int x, int y, entitytype type, handler handler) {[/CODE] super(x, y, type, handler); health = 2; attack = 2; } @override protected double getspeed() { return 3.0; } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(39,100,42,230));[/CODE] g.filloval(x, y, 32, 32); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x,y,32,32);[/CODE] } } [CODE]public enum guntype{[/CODE] tabanca, piyade, pompali, keskinnisanci, roketatar } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class block extends gameobject{[/CODE] [CODE]int width = 32;[/CODE] [CODE]int height = 32;[/CODE] [CODE]public block(int x, int y, entitytype type) {[/CODE] super(x, y, type); } @override [CODE]public void tick() {[/CODE] //boş } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(123, 98, 145,205));[/CODE] g.fillrect(x, y, 32, 32); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 32,32);[/CODE] } } import java.awt.rectangle; [CODE]public class collision {[/CODE] [CODE]public static void checksomecollision(gameobject entity, handler handler) {[/CODE] [CODE]if(!(entity instanceof player || entity instanceof zombie)) return;[/CODE] [CODE]for (int i = 0;[/CODE] i < handler.entities.size(); i++) { gameobject anyobject = handler.entities.get(i); if (anyobject.gettype() == entitytype.block || anyobject.gettype() == entitytype.kirilmazblock) { rectangle blockbounds = anyobject.getbounds(); rectangle entitybounds = entity.getbounds(); boolean yataycollision = false; rectangle nextybounds = new rectangle( entitybounds.x, entitybounds.y + (int)entity.getspeed_y(), entitybounds.width, entitybounds.height ); rectangle nextxbounds = new rectangle( entitybounds.x + (int)entity.getspeed_x(), entitybounds.y, entitybounds.width, entitybounds.height ); if (nextybounds.[CODE]intersects(blockbounds)) {[/CODE] yataycollision = true; //çarpışmaların karışmaması için if (entity.getspeed_y() > 0) { entity.sety(blockbounds.y - entitybounds.height - 5); } else if (entity.getspeed_y() < 0) { entity.sety(blockbounds.y + blockbounds.height + 5); } entity.setspeed_y(0); } [CODE]if (!yataycollision) {[/CODE] if (nextxbounds.[CODE]intersects(blockbounds)) {[/CODE] if (entity.getspeed_x() > 0) { entity.setx(blockbounds.x - entitybounds.width - 5); } else if (entity.getspeed_x() < 0) { entity.setx(blockbounds.x + blockbounds.width + 5); } entity.setspeed_x(0); } } } if (anyobject.gettype() == entitytype.bullet && entity instanceof zombie) { zombie tempzombie = (zombie)entity; if(entity.getbounds().intersects(anyobject.getbounds())) { //keskin nişancı için mermi yok edilmez, //merminin değdiği zombiler büyük hasar alır hepsi direkt ölür //mermi aynı güçte ilerler varsayımı if(player.gun.type != guntype.keskinnisanci) { handler.removeentity(anyobject); player.setscore(player.getscore() + 5); } [CODE]else{[/CODE] ((zombie)entity).sethealth(((zombie)entity).gethealth() - 5); player.setscore(player.getscore() + 5); } if(player.gun.type == guntype.roketatar) { tempzombie.sethealth(tempzombie.gethealth() -3); player.setscore(player.getscore() + 3); //mermi kimin kafasına geldiyse ona 3 hasar //patlamanın etki edeceği alan rectangle etkialani = new rectangle( anyobject.getx()-100, anyobject.gety()-100, 200, 200 ); [CODE]for(int j=0;[/CODE] j<handler.entities.size(); j++) { gameobject temp = handler.entities.get(j); if(temp instanceof zombie && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] ((zombie)temp).sethealth(((zombie)temp).gethealth() - 2); //alandaki her zombiye ikişer hasar player.setscore(player.getscore() + 2); } else if(temp.gettype() == entitytype.block && temp.getbounds().[CODE]intersects(etkialani)) {[/CODE] handler.removeentity(temp); } } handler.addentity(new bombeffect(anyobject.getx()-100, anyobject.gety()-100, entitytype.roketatarefekt, 200, 200, 60, handler)); } [CODE]else {[/CODE] tempzombie.sethealth(tempzombie.gethealth() - 1); player.setscore(player.getscore() + 1); } } } if (anyobject.gettype() == entitytype.asit && entity instanceof player) { if(entity.getbounds().intersects(anyobject.getbounds())) { handler.removeentity(anyobject); player.sethealth(player.gethealth() - 8); } } [CODE]if (entity instanceof player && anyobject instanceof zombie) {[/CODE] if(entity.getbounds().intersects(anyobject.getbounds())) { player.sethealth(player.gethealth() - 0.01 * ((zombie)anyobject).getattack()); } } if (anyobject.gettype() == entitytype.yedeksarjor && entity instanceof player) { if(entity.getbounds().intersects(anyobject.getbounds())) { player.gun.yedeksarjor++; handler.removeentity(anyobject); } } } } } import java.awt.event.keyadapter; import java.awt.event.keyevent; [CODE]public class keyboardinput extends keyadapter{[/CODE] handler handler; [CODE]static long reloadcurrenttime;[/CODE] [CODE]public keyboardinput(handler handler) {[/CODE] this.handler = handler; } [CODE]public void keypressed(keyevent e) {[/CODE] int key = e.getkeycode(); if(key == keyevent.vk_r) { reloadcurrenttime = system.currenttimemillis(); handler.fillthemagazine(); } if(key == keyevent.vk_w) handler.setup(true); if(key == keyevent.vk_a) handler.setleft(true); if(key == keyevent.vk_d) handler.setright(true); if(key == keyevent.vk_s) handler.setdown(true); } [CODE]public void keyreleased(keyevent e) {[/CODE] int key = e.getkeycode(); [CODE]for(int i=0;[/CODE] i < handler.entities.size() ; i++) { gameobject temp = handler.entities.get(i); if (temp.gettype() == entitytype.player) { if(key == keyevent.vk_w) handler.setup(false); if(key == keyevent.vk_a) handler.setleft(false); if(key == keyevent.vk_d) handler.setright(false); if(key == keyevent.vk_s) handler.setdown(false); } } } } import java.util.linkedlist; import java.awt.graphics; import java.io.serializable; [CODE]public class handler implements serializable{[/CODE] linkedlist<gameobject> entities = [CODE]new linkedlist<gameobject>();[/CODE] private boolean up = false, down = false, right = false, left = false; [CODE]public void fillthemagazine() {[/CODE] if(player.gun.yedeksarjor <= 0 && player.gun.type != guntype.tabanca) { mouseinput.isreloading = false; [CODE]return;[/CODE] } mouseinput.isreloading = true; player.setmagazine(player.getmax_magazine()); player.gun.yedeksarjor--; } [CODE]public void tick() {[/CODE] [CODE]for(int i=0;[/CODE] i<entities.size(); i++) { entities.get(i).tick(); } } [CODE]public void render(graphics g) {[/CODE] [CODE]for(int i=0;[/CODE] i<entities.size(); i++) { entities.get(i).render(g); } } [CODE]public void addentity(gameobject newobj) {[/CODE] entities.add([CODE]newobj);[/CODE] } [CODE]public void removeentity(gameobject entity) {[/CODE] entities.remove(entity); } [CODE]public boolean isup() {[/CODE] [CODE]return up;[/CODE] } [CODE]public void setup(boolean set) {[/CODE] this.up = set; } [CODE]public boolean isdown() {[/CODE] [CODE]return down;[/CODE] } [CODE]public void setdown(boolean set) {[/CODE] this.down = set; } [CODE]public boolean isright() {[/CODE] [CODE]return right;[/CODE] } [CODE]public void setright(boolean set) {[/CODE] this.right = set; } [CODE]public boolean isleft() {[/CODE] [CODE]return left;[/CODE] } [CODE]public void setleft(boolean set) {[/CODE] this.left = set; } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class zombienormal extends zombie{[/CODE] [CODE]public zombienormal(int x, int y, entitytype type, handler handler) {[/CODE] super(x, y, type, handler); health = 3; attack = 2; //orta sağlık orta hasar } @override protected double getspeed() { return 3.0; } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(76,92,75,230));[/CODE] g.filloval(x, y, 32, 32); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x,y,32,32);[/CODE] } } import java.awt.image.bufferedimage; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class bufferedimageloader {[/CODE] private bufferedimage image; [CODE]public bufferedimage loadimage(string path) {[/CODE] [CODE]try {[/CODE] image = imageio.read(getclass().getresource(path)); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } } import javax.sound.sampled.*; import java.io.bufferedinputstream; import java.io.ioexception; import java.io.inputstream; //sesi çekebilmek için internetten fazlasıyla yararlandım. [CODE]public class soundplayer {[/CODE] private clip clip; [CODE]public soundplayer(string filepath) {[/CODE] [CODE]try {[/CODE] inputstream audiosrc = getclass().getresourceasstream(filepath); [CODE]if (audiosrc == null) {[/CODE] throw [CODE]new illegalargumentexception(""ses dosyası bulunamadı!"");[/CODE] } audioinputstream audiostream = audiosystem.getaudioinputstream([CODE]new bufferedinputstream(audiosrc));[/CODE] clip = audiosystem.getclip(); clip.open(audiostream); } [CODE]catch (unsupportedaudiofileexception | ioexception | lineunavailableexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void play() {[/CODE] [CODE]if (clip != null) {[/CODE] clip.setframeposition(0); clip.start(); } } [CODE]public void loop() {[/CODE] [CODE]if (clip != null) {[/CODE] clip.loop(clip.loop_continuously); } } [CODE]public void stop() {[/CODE] [CODE]if (clip != null) {[/CODE] clip.stop(); } } } import java.awt.color; import java.awt.graphics; import java.awt.graphics2d; import java.awt.image.bufferstrategy; import java.awt.image.bufferedimage; import java.io.fileinputstream; import java.io.ioexception; import java.io.objectinputstream; import javax.swing.joptionpane; import java.awt.font; import java.awt.canvas; [CODE]public class game extends canvas implements runnable{[/CODE] [CODE]public boolean isrunning = false;[/CODE] [CODE]public thread thread;[/CODE] private handler handler; private camera camera; private bufferedimage map = null; [CODE]public static player player;[/CODE] [CODE]public keyboardinput ki;[/CODE] [CODE]public mouseinput mi;[/CODE] [CODE]public boolean issong = false;[/CODE] private boolean [] dalga = [CODE]new boolean[12];[/CODE] [CODE]public static boolean dalgabittiyazisi;[/CODE] [CODE]public static int tour = 0;[/CODE] [CODE]public static int zombieindex = 0;[/CODE] public player.gun silah; [CODE]public game() {[/CODE] soundplayer thedinermusic = new soundplayer(""/res/thedinermusic.wav""); thedinermusic.loop(); issong = true; handler = [CODE]new handler();[/CODE] camera = [CODE]new camera(0, 0);[/CODE] [CODE]new window(1000, 563, ""thediner"", this, thread, thedinermusic);[/CODE] bufferedimageloader loader = [CODE]new bufferedimageloader();[/CODE] map = loader.loadimage(""/res/thediner_map.png""); loadmap(map); start(); player = new player(100, 100, entitytype.player, handler); handler.addentity(player); silah = new player.gun(); ki = [CODE]new keyboardinput(handler);[/CODE] mi = [CODE]new mouseinput(handler, camera, this, player);[/CODE] //load esnasında bunların silinebilmesi için ki mi olarak tuttum this.addkeylistener(ki); this.addmouselistener(mi); this.addmousemotionlistener(mi); [CODE]for (;[/CODE] tour < 12; tour++) { dalga[tour] = true; if (tour == 0) player.gun.setgun(guntype.tabanca); [CODE]else if (tour == 1) {[/CODE] //nedenini bilmediğim bi şekilde silahı piyade olarak set etmeme rağmen //ilk mermi atışlarında hız güncellenmiyodu //senkronize etmeyle alakalı bir şeydi ama bulamadım problemimi //bu yüzden bu kısımda manuel olarak atış hızını da güncelledim ve düzeldi //diğer silah geçişlerde hiçbir sıkıntı yok bu geçişte neden oldu bilmiyorum.. mouseinput.magazine_period = 60*1000/600; player.gun.setgun(guntype.piyade); } else if (tour == 3) player.gun.setgun(guntype.pompali); else if (tour == 5) player.gun.setgun(guntype.keskinnisanci); else if (tour == 10) player.gun.setgun(guntype.roketatar); int zombiecount = 8 + (int) (tour * 1.1); //zombi sayısı artsın int sleeptime = math.max(600, 1200 - (tour * 60)); //sleeping düşsün [CODE]for (;[/CODE] zombieindex< zombiecount; zombieindex++) { [CODE]try {[/CODE] thread.sleep(sleeptime); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]if (zombieindex%4 == 3) {[/CODE] handler.addentity(new zombiesurunge(1080, 300, entitytype.surungezombi, handler)); } [CODE]else if (zombieindex%4 == 1) {[/CODE] handler.addentity(new zombieasitli(600, 550, entitytype.asittukurenzombi, handler)); if (tour >= 3) handler.addentity(new zombietank(600, 350, entitytype.tankzombi, handler)); } [CODE]else if (zombieindex%4 == 0){[/CODE] handler.addentity(new zombienormal(530, 548, entitytype.normalzombi, handler)); } [CODE]else {[/CODE] if(tour>4 && tour%16 == 1) handler.addentity(new zombieasitli(1200, 850, entitytype.asittukurenzombi, handler)); else if(tour>4 && tour%16 == 3) handler.addentity(new zombiesurunge(1200, 850, entitytype.surungezombi, handler)); } [CODE]if (tour >= 3 && zombieindex%16 == 4) {[/CODE] //tank zombiler daha da gelmeye başlasın handler.addentity(new zombietank(650, 360-(tour*6), entitytype.tankzombi, handler)); } } [CODE]while (dalga[tour]) {[/CODE] [CODE]try {[/CODE] thread.sleep(1000); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } boolean zombivarmi = false; [CODE]for (int i = 0;[/CODE] i<handler.entities.size();i++) { gameobject e = handler.entities.get(i); [CODE]if (e instanceof zombie) {[/CODE] zombivarmi = true; break; } } [CODE]if (!zombivarmi) {[/CODE] [CODE]if (dalga[11] == true){[/CODE] joptionpane.showmessagedialog(null, ""12 turu da başarıyla tamamladın! toplam skor: "" + player.getscore(), ""you ate"", joptionpane.plain_message); system.exit(0); } break; } } zombieindex = 0; dalgabittiyazisi = true; [CODE]try {[/CODE] thread.sleep(3000); //3 sn ara } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } dalga[tour] = false; dalgabittiyazisi = false; } } [CODE]public void resumegame() {[/CODE] isrunning = true; } [CODE]void start() {[/CODE] isrunning = true; thread = [CODE]new thread(this);[/CODE] thread.start(); } private [CODE]void stop() {[/CODE] isrunning = false; [CODE]try {[/CODE] thread.join(); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } @override [CODE]public void run() {[/CODE] handler.setdown(false); handler.setleft(false); handler.setright(false); handler.setup(false); this.requestfocus(); long lasttime = system.nanotime(); [CODE]int fps = 60;[/CODE] double ns = 1000000000 / (double)fps; double delta = 0; long timer = system.currenttimemillis(); @suppresswarnings(""unused"") [CODE]int frames = 0;[/CODE] [CODE]while(isrunning) {[/CODE] long now = system.nanotime(); delta += (now - lasttime) / ns; lasttime = now; [CODE]while(delta >= 1) {[/CODE] tick(); delta--; } render(); frames++; if(system.currenttimemillis() - timer > 1000) { timer += 1000; frames = 0; } } stop(); } [CODE]public void tick() {[/CODE] camera.tick(player); //kamera kayması handler.tick(); //tüm varlıklar için tick } [CODE]public void render() {[/CODE] bufferstrategy bs = this.getbufferstrategy(); [CODE]if (bs == null) {[/CODE] this.createbufferstrategy(3); [CODE]return;[/CODE] } graphics g = bs.getdrawgraphics(); graphics2d g2d = (graphics2d) g; //draw draaw draaw g.setcolor([CODE]new color(225, 225, 235, 240));[/CODE] g.fillrect(0, 0, 1000, 563); g2d.translate(-camera.getx(), -camera.gety()); handler.render(g); g2d.translate(camera.getx(), camera.gety()); string healthtext = ""toplam kalan can: "" + string.format(""%.1f"", player.gethealth()); string scoretext = ""toplam skor: "" + player.getscore(); [CODE]string yedektext = ""yedek şarjörün: "";[/CODE] string reloadingwarntext = ""şarjör deği̇şti̇ri̇li̇yor...""; [CODE]string dalgawarn = ""zombi dalga"";[/CODE] [CODE]string dalgabittiwarn = ""tebrikler, sonraki dalga için hazırlan!"";[/CODE] g.setcolor(color.black); g.setfont(new font(""arial"", font.bold, 18)); [CODE]int padding = 10;[/CODE] g.drawstring(healthtext, getwidth() - g.getfontmetrics().[CODE]stringwidth(healthtext) - padding, 20);[/CODE] g.drawstring(scoretext, getwidth() - g.getfontmetrics().[CODE]stringwidth(scoretext) - padding, 50);[/CODE] g.drawstring(""elindeki silah: "" + player.gun.type.tostring() + "" /// şarjör: "" + player.getmagazine(), padding, 20); if(player.gun.type == guntype.tabanca) { g.draw[CODE]string(yedektext + ""sınırsız!"", padding, 50);[/CODE] } [CODE]else {[/CODE] g.drawstring(yedektext + + player.gun.yedeksarjor + "" adet"", padding, 50); } //şarjör değiştirme yazısı ayarları long currenttime = system.currenttimemillis(); if (currenttime - keyboardinput.reloadcurrenttime < 1000) mouseinput.isreloading = true; else mouseinput.isreloading = false; if(mouseinput.isreloading && (player.gun.yedeksarjor > 0 || player.gun.type == guntype.tabanca)) g.draw[CODE]string(reloadingwarntext, padding, 80);[/CODE] else if(player.gun.yedeksarjor <= 0 && player.gun.type != guntype.tabanca) g.drawstring(""reload yapılamaz..."", padding, 80); //ateş için hazırlanma süresi uyarısı //piyade ve tabanca için yazmasını istemedim, hızlılar zaten if (currenttime - mouseinput.lastshottime < mouseinput.magazine_period) mouseinput.istime = true; else mouseinput.istime = false; if (mouseinput.istime /*&& player.gun.type != guntype.piyade && player.gun.type != guntype.tabanca*/) g.drawstring(""ateş etmek için "" + (mouseinput.magazine_period - (double)(currenttime - mouseinput.lastshottime))/1000+ "" saniye daha bekle. "", padding, 100); g.setfont(new font(""arial"", font.bold | font.italic, 21)); padding = 450; [CODE]for(int i=0;[/CODE]i<dalga.length;i++) { [CODE]if(dalgabittiyazisi) {[/CODE] g.drawstring(dalgabittiwarn, getwidth() - g.getfontmetrics().[CODE]stringwidth(scoretext) - padding + 20, 30);[/CODE] [CODE]if(dalga[0] || dalga[2] || dalga[4] || dalga[9]) {[/CODE] g.drawstring(""kullandığın silah güncellendi."", getwidth() - g.getfontmetrics().[CODE]stringwidth(scoretext) - padding + 20, 60);[/CODE] } } [CODE]else if(dalga[i]) {[/CODE] g.drawstring(dalgawarn+"" ""+(i+1), getwidth() - g.getfontmetrics().[CODE]stringwidth(scoretext) - padding + 60, 30);[/CODE] } } //draw drawwwwwwwwww biti g.dispose(); bs.show(); } private [CODE]void loadmap(bufferedimage image) {[/CODE] int weight = image.getwidth(); int height = image.getheight(); [CODE]for(int w=0;[/CODE] w<weight; w++) { [CODE]for(int h=0;[/CODE] h<height; h++) { int pixel = image.getrgb(w, h); [CODE]int red = (pixel >> 16) & 0xff;[/CODE] [CODE]int green = (pixel >> 8) & 0xff;[/CODE] [CODE]int blue = (pixel) & 0xff;[/CODE] if(red == 255 && green == 0 && blue == 0) handler.addentity(new block(w*32, h*32, entitytype.block)); [CODE]if(red == 255 && green == 100 && blue == 0) {[/CODE] handler.addentity(new block(w*32, h*32, entitytype.kirilmazblock)); } } } } [CODE]public static void main(string[] args) {[/CODE] [CODE]new game();[/CODE] } [CODE]void readdatastosave(gamesave newsave) {[/CODE] newsave.player = game.player; newsave.camera = camera; newsave.playerhealth = player.gethealth(); newsave.playerscore = player.getscore(); newsave.dalga = dalga; newsave.handler = handler; newsave.tour = game.tour; newsave.zombieindex = game.zombieindex; newsave.guntype = player.gun.type; } gamesave saveddatastoimply() { try (objectinputstream ois = new objectinputstream(new fileinputstream(""oyunkaydi.ser""))) { return (gamesave) ois.readobject(); } [CODE]catch (classnotfoundexception e) {[/CODE] system.out.println(""kaydedilmis dosya yok.""); [CODE]return null;[/CODE] } [CODE]catch (ioexception e) {[/CODE] e.getmessage(); [CODE]return null;[/CODE] } } [CODE]void updatedatas(gamesave kayitli) {[/CODE] game.player = kayitli.player; [CODE]try{[/CODE] player.loadplayericon(); } [CODE]catch (exception e) {[/CODE] system.out.pr[CODE]intln(""player görüntüsü yüklenemedi, kırmızı kutu olarak devam et"");[/CODE] } camera = kayitli.camera; player.sethealth(kayitli.playerhealth); player.setscore(kayitli.playerscore); dalga = kayitli.dalga; handler = kayitli.handler; handler.setdown(false); handler.setleft(false); handler.setright(false); handler.setup(false); //gereksiz hareketleri önlemesi için handlerdaki değerleri false ladık. this.removekeylistener(ki); this.removemouselistener(mi); this.removemousemotionlistener(mi); //tüm listenerleri silip yeni handler ve player için tekrardan ekliyorum ki = [CODE]new keyboardinput(handler);[/CODE] mi = [CODE]new mouseinput(handler, camera, this, player);[/CODE] this.addkeylistener(ki); this.addmouselistener(mi); this.addmousemotionlistener(mi); game.tour = kayitli.tour; game.zombieindex = kayitli.zombieindex; player.gun.setgun(kayitli.guntype); } } //açiklama //bullet atma kontrolü üzerinde gerçekten çok uzun zaman uğraştım //basılı tutarak atmayı düzeltsem başka bir şey bozuluyordu vs.. //o yüzden mouseinput dosyasında çok fazla dışarıdan kaynak kullandım, timer component vs şahsen doğrudan yaptığım şeyler değil. import java.awt.*; import java.awt.event.mouseadapter; import java.awt.event.mouseevent; import java.io.serializable; import java.util.random; import java.util.timer; import java.util.timertask; [CODE]public class mouseinput extends mouseadapter implements serializable{[/CODE] private handler handler; private boolean ispressed = false; private timer timer; private camera camera; private timertask shoottask; [CODE]public static long lastshottime = 0;[/CODE] private component gamecomponent; private player player; [CODE]public static long magazine_period;[/CODE] [CODE]public static boolean isreloading;[/CODE] [CODE]public static boolean istime;[/CODE] //bunlar ekrana yazdırılması gerekecek şeyler için statikler [CODE]public mouseinput(handler handler, camera camera, component gamecomponent, player player) {[/CODE] this.handler = handler; this.gamecomponent = gamecomponent; this.player = player; this.camera = camera; timer = null; } [CODE]public void mousepressed(mouseevent e) {[/CODE] ispressed = true; startshooting(); } [CODE]public void mousereleased(mouseevent e) {[/CODE] ispressed = false; stopshooting(); } private [CODE]void shoot() {[/CODE] mouseinput.magazine_period = 60 * 1000 / player.getfire(); long currenttime = system.currenttimemillis(); long seconds = currenttime - lastshottime; mouseinput.istime = seconds < magazine_period; if (!ispressed || mouseinput.istime|| isreloading || player.getmagazine() <= 0) { [CODE]return;[/CODE] } lastshottime = currenttime; //mouse konumunu net alabilmek için point p = gamecomponent.getmouseposition(); [CODE]if (p == null) return;[/CODE] int mouse_x = (int) (p.x + camera.getx()); int mouse_y = (int) (p.y + camera.gety()); double angle = math.atan2(mouse_y - player.gety(), mouse_x - player.getx()); //tabanca keskin nişancı ve roketatar için yalnızca mermi atımı/güncellemesi //delme olayını colissionda bullet yok etmede halledicem keskin nişanc için //patlama olayı da aynı şekilde. //piyade için sapmaya göre angle güncellenir if(player.gun.type == guntype.piyade) { random random = [CODE]new random();[/CODE] double max = 30.0; double sapma = math.toradians((random.nextdouble()* 2 * max)-max); angle += sapma; handler.addentity(new bullet(player.getx() + 16, player.gety() + 24, entitytype.bullet, handler, angle)); player.setmagazine(player.getmagazine()-1); } else if(player.gun.type == guntype.tabanca || player.gun.type == guntype.keskinnisanci || player.gun.type == guntype.roketatar) { handler.addentity(new bullet(player.getx() + 16, player.gety() + 24, entitytype.bullet, handler, angle)); player.setmagazine(player.getmagazine()-1); } //pompalı için 9 tane aralıklı atar else if(player.gun.type == guntype.pompali) { double anglefark = math.toradians(45) / 8; //5 derece [CODE]for (int i = 0;[/CODE] i < 9; i++) { double bulletangle = angle - math.toradians(22.5) + (i * anglefark); handler.addentity(new bullet(player.getx() + 16, player.gety() + 24, entitytype.bullet, handler, bulletangle)); } player.setmagazine(player.getmagazine()-1); } } //herhangi bi press durumunda timer başlatılır, bu sayede tek tık ve basılı tutma için de mermi atımı //optimize edilmiş olur private [CODE]void startshooting() {[/CODE] [CODE]if (timer == null) {[/CODE] timer = [CODE]new timer();[/CODE] shoottask = [CODE]new timertask() {[/CODE] @override [CODE]public void run() {[/CODE] shoot(); } }; timer.scheduleatfixedrate(shoottask, 0, magazine_period+15); } } private [CODE]void stopshooting() {[/CODE] [CODE]if (timer != null) {[/CODE] timer.cancel(); timer = null; shoottask = null; } } } [CODE]public enum entitytype {[/CODE] player(), block(), kirilmazblock(), bullet(), normalzombi(), surungezombi(), tankzombi(), asittukurenzombi(), asit(), asitlizombiefekt(), roketatarefekt(), yedeksarjor(); //iki efekt tipine göre renkleri farklı olcak } import java.awt.graphics; import java.awt.rectangle; import java.awt.color; [CODE]public class acyd extends gameobject{[/CODE] private handler handler; private double acydspeed; private double angle; [CODE]public acyd(int x, int y, entitytype type, handler handler,player player) {[/CODE] super(x, y, type); this.handler = handler; acydspeed = 6; angle = math.atan2(player.gety() - y, player.getx() - x); } @override [CODE]public void tick() {[/CODE] x += acydspeed * math.cos(angle); y += acydspeed * math.sin(angle); [CODE]for(int i = 0;[/CODE] i<handler.entities.size(); i++) { gameobject anyobject = handler.entities.get(i); if(anyobject.gettype() == entitytype.block) { if(getbounds().intersects(anyobject.getbounds())){ handler.removeentity(this); } } } } @override [CODE]public void render(graphics g) {[/CODE] g.setcolor([CODE]new color(0,100,0,240));[/CODE] g.filloval(x, y, 8, 8); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 8,8);[/CODE] } } import java.io.serializable; [CODE]public class camera implements serializable{[/CODE] private float x; private float y; [CODE]public camera(float x, float y) {[/CODE] this.x = x; this.y = y; } [CODE]public void tick(gameobject anyobject) {[/CODE] x += ((anyobject.getx() - x) - 1000/2) * 0.05f; y += ((anyobject.gety() - y) - 563/2) * 0.05f; //[CODE]internetten alındı, smooth olarak geçmesi için if( x<=0 ) x=-4;[/CODE] [CODE]if( x>=1032 ) x = 1032;[/CODE] [CODE]if( y<=0 ) y=0;[/CODE] [CODE]if( y>=579 ) y=579;[/CODE] } [CODE]public float getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public void setx(float x) {[/CODE] this.x = x; } [CODE]public float gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public void sety(float y) {[/CODE] this.y = y; } } import javax.swing.jbutton; import javax.swing.jframe; import javax.swing.jlabel; import javax.swing.jpanel; import java.awt.borderlayout; import java.awt.dimension; import java.awt.flowlayout; import java.io.fileoutputstream; import java.io.ioexception; import java.io.objectoutputstream; [CODE]public class window{[/CODE] [CODE]public window(int width, int height, string title, game game, thread thread, soundplayer sp) {[/CODE] jframe frame = [CODE]new jframe(title);[/CODE] frame.setpreferredsize([CODE]new dimension(width, height));[/CODE] frame.setmaximumsize([CODE]new dimension(width, height));[/CODE] frame.setminimumsize([CODE]new dimension(width, height));[/CODE] frame.setresizable(false); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlocationrelativeto(null); jpanel buttonpanel = new jpanel(new flowlayout(flowlayout.center)); // ortaya hizala jlabel infolabel = [CODE]new jlabel(""oyun kontrolleri: "");[/CODE] jbutton pausebutton = [CODE]new jbutton(""duraklat"");[/CODE] jbutton resumebutton = [CODE]new jbutton(""devam et"");[/CODE] jbutton savebutton = [CODE]new jbutton(""kaydet"");[/CODE] jbutton loadbutton = [CODE]new jbutton(""yükle(kaydedilen varsa)"");[/CODE] jbutton musicbutton = [CODE]new jbutton(""müziği kapat/aç"");[/CODE] buttonpanel.add(infolabel); buttonpanel.add(pausebutton); buttonpanel.add(resumebutton); buttonpanel.add(savebutton); buttonpanel.add(loadbutton); buttonpanel.add(musicbutton); pausebutton.addactionlistener(e -> { game.isrunning = false; [CODE]if (thread != null) {[/CODE] [CODE]try {[/CODE] thread.join(); } [CODE]catch (interruptedexception k) {[/CODE] k.pr[CODE]intstacktrace();[/CODE] } } } ); resumebutton.addactionlistener(e -> { if (!game.isrunning) { game.isrunning = true; game.thread = [CODE]new thread(game);[/CODE] game.thread.start(); } }); savebutton.addactionlistener(e -> { gamesave [CODE]newsave = new gamesave();[/CODE] //yazılacak save dosyasına verileri girmek için game.readdatastosave([CODE]newsave);[/CODE] //dosyaya yazz try (objectoutputstream oos = new objectoutputstream(new fileoutputstream(""oyunkaydi.ser""))) { oos.writeobject([CODE]newsave);[/CODE] system.out.pr[CODE]intln(""oyun başarıyla kaydedildi"");[/CODE] } [CODE]catch (ioexception io) {[/CODE] io.pr[CODE]intstacktrace();[/CODE] } }); loadbutton.addactionlistener(e -> { //dosyayı gamesave objesine oku gamesave kayitli = game.saveddatastoimply(); //oyunda güncellenmesi gereken her şeyi güncelle game.updatedatas(kayitli); }); musicbutton.addactionlistener(e -> { if(game.issong) { sp.stop(); game.issong = false; } [CODE]else {[/CODE] sp.play(); game.issong = true; } }); frame.add(buttonpanel, borderlayout.south); // butonları aşağıya ekle frame.add(game, borderlayout.center); // oyun alanını ortada tut frame.setvisible(true); } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; import java.awt.image.bufferedimage; import javax.swing.joptionpane; [CODE]public class player extends gameobject{[/CODE] handler handler; [CODE]int width = 64;[/CODE] [CODE]int height = 64;[/CODE] private [CODE]static double health = 1000;[/CODE] private [CODE]static int score = 0;[/CODE] [CODE]public transient bufferedimage ikon;[/CODE] [CODE]public player(int x, int y, entitytype type, handler handler) {[/CODE] super(x, y, type); this.handler = handler; loadplayericon(); } [CODE]public void loadplayericon() {[/CODE] bufferedimageloader loader = [CODE]new bufferedimageloader();[/CODE] ikon = loader.loadimage(""/res/ikon.png""); } [CODE]public static class gun {[/CODE] protected [CODE]static int max_magazine;[/CODE] protected [CODE]static int magazine;[/CODE] protected [CODE]static int fire;[/CODE] protected [CODE]static guntype type;[/CODE] protected [CODE]static int yedeksarjor;[/CODE] protected [CODE]static double speed;[/CODE] [CODE]public gun() {[/CODE] //obje oluşturulurken tabanca ile başlanır max_magazine = 12; magazine = 12; fire = 120; type = guntype.tabanca; speed = 7; } [CODE]public static void setgun(guntype type) {[/CODE] gun.type = type; if(type == guntype.tabanca) { max_magazine = 12; magazine = 12; fire = 120; speed = 7; //kontrol edilmeyecek - sonsuz } else if(type == guntype.piyade) { max_magazine = 30; magazine = 30; fire = 600; speed = 8; yedeksarjor = 2; } else if(type == guntype.pompali) { max_magazine = 5; magazine = 5; fire = 60; speed = 10; yedeksarjor = 3; } else if(type == guntype.keskinnisanci) { max_magazine = 5; magazine = 5; fire = 30; speed = 13; yedeksarjor = 4; } else if(type == guntype.roketatar) { max_magazine = 1; magazine = 1; fire = 10; speed = 10; yedeksarjor = 5; } } } [CODE]public static int getmax_magazine() {[/CODE] return gun.max_magazine; } [CODE]public static int getmagazine() {[/CODE] return gun.magazine; } [CODE]public static void setmagazine(int magazine) {[/CODE] gun.magazine = magazine; } [CODE]public static int getfire() {[/CODE] return gun.fire; } [CODE]public static void setfire(int fire) {[/CODE] gun.fire = fire; } @override [CODE]public void tick() {[/CODE] if(player.health <= 0) { joptionpane.showmessagedialog(null, ""öldün malesef :)) gbye"", ""goodbye"", joptionpane.error_message); system.exit(0); } x += speed_x; y += speed_y; collision.checksomecollision(this,handler); if(handler.isup()) speed_y = -4; else if(!handler.isdown()) speed_y = 0; if(handler.isdown()) speed_y = 4; else if(!handler.isup()) speed_y = 0; if(handler.isright()) speed_x = 4; else if(!handler.isleft()) speed_x = 0; if(handler.isleft()) speed_x = -4; else if(!handler.isright()) speed_x = 0; } @override [CODE]public void render(graphics g) {[/CODE] [CODE]if (ikon != null) {[/CODE] g.drawimage(ikon, x, y, width, height, null); } [CODE]else {[/CODE] //resim herhangi bişey yüzünden yüklenmezse g.setcolor(color.red); g.fillrect(x, y, width, height); } } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, width, height);[/CODE] } [CODE]public static double gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public static void sethealth(double newhealth) {[/CODE] health = [CODE]newhealth;[/CODE] } [CODE]public static int getscore() {[/CODE] [CODE]return score;[/CODE] } [CODE]public static void setscore(int newscore) {[/CODE] score = [CODE]newscore;[/CODE] } } import java.awt.graphics; import java.awt.rectangle; import java.io.serializable; [CODE]public abstract class gameobject implements serializable{[/CODE] [CODE]int x, y;[/CODE] float speed_x = 0, speed_y = 0; [CODE]int height, width;[/CODE] entitytype type; [CODE]public gameobject (int x, int y, entitytype type) {[/CODE] this.x = x; this.y = y; this.type = type; } [CODE]public abstract void tick();[/CODE] [CODE]public abstract void render(graphics g);[/CODE] [CODE]public abstract rectangle getbounds();[/CODE] [CODE]public entitytype gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(entitytype e) {[/CODE] this.type = e; } [CODE]public int getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public void setx(int x) {[/CODE] this.x = x; } [CODE]public int gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public void sety(int y) {[/CODE] this.y = y; } [CODE]public float getspeed_x() {[/CODE] [CODE]return speed_x;[/CODE] } [CODE]public void setspeed_x(float speed_x) {[/CODE] this.speed_x = speed_x; } [CODE]public float getspeed_y() {[/CODE] [CODE]return speed_y;[/CODE] } [CODE]public void setspeed_y(float speed_y) {[/CODE] this.speed_y = speed_y; } [CODE]public int getheight() {[/CODE] [CODE]return height;[/CODE] } [CODE]public int getwidth() {[/CODE] [CODE]return width;[/CODE] } }"
5187413,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class lab211q2 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int[] arr = {[/CODE] 5, 4, 1, 2 }; coctailsort(arr); } [CODE]public static void coctailsort(int[] arr) {[/CODE] int high = arr.length - 1; [CODE]int low = 0;[/CODE] [CODE]int[] temparr = arr;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length; i++) { [CODE]for (int j = 0;[/CODE] j < arr.length - 1; j++) { [CODE]if (temparr[j] > temparr[j + 1]) {[/CODE] [CODE]int temp = temparr[j];[/CODE] temparr[j] = temparr[j + 1]; temparr[j + 1] = temp; } } } [CODE]int count = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] == temparr[i]) {[/CODE] count++; } } if (count == arr.length) { system.out.pr[CODE]intln(arr);[/CODE] } [CODE]else {[/CODE] listingup(arr, temparr, low, high); } } [CODE]public static int listingup(int[] arr, int[] temparr, int low, int high) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] == temparr[i]) {[/CODE] count++; } } if (count == arr.length) { coctailsort(arr); } [CODE]if (low == high) {[/CODE] listingdown(arr, temparr, 0, high); } [CODE]if (arr[low] > arr[low + 1]) {[/CODE] [CODE]int temp = arr[low];[/CODE] arr[low] = arr[low + 1]; arr[low + 1] = temp; } [CODE]return listingup(arr, temparr, low + 1, high);[/CODE] } [CODE]public static int listingdown(int[] arr, int[] temparr, int low, int high) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < arr.length - 1; i++) { [CODE]if (arr[i] == temparr[i]) {[/CODE] count++; } } if (count == arr.length) { coctailsort(arr); } [CODE]if (low == high) {[/CODE] listingup(arr, temparr, low, arr.length - 1); } [CODE]if (arr[high] < arr[high - 1]) {[/CODE] [CODE]int temp = arr[high];[/CODE] arr[high] = arr[high - 1]; arr[high - 1] = temp; } [CODE]return listingdown(arr, temparr, low, high - 1);[/CODE] } } [CODE]public class q3sayac {[/CODE] private [CODE]string str;[/CODE] [CODE]public q3sayac(string str) {[/CODE] this.str = str; } [CODE]public int say() {[/CODE] [CODE]int count = 0;[/CODE] if (str.length() <= 0) { [CODE]return count;[/CODE] } if (str.charat(0) - '0' == 1) { count++; str = str.sub[CODE]string(1);[/CODE] [CODE]return count + say();[/CODE] } str = str.sub[CODE]string(1);[/CODE] [CODE]return count + say();[/CODE] } } [CODE]public class lab211q1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]int number = 5;[/CODE] system.out.pr[CODE]intln(collatz(number));[/CODE] } [CODE]public static int collatz(int i) {[/CODE] [CODE]int count = 0;[/CODE] [CODE]if (i == 1) {[/CODE] [CODE]return count;[/CODE] } [CODE]if (i % 2 == 0) {[/CODE] count++; [CODE]return count + collatz(i / 2);[/CODE] } count++; [CODE]return count + collatz(i * 3 + 1);[/CODE] } } [CODE]public class lab211q3 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] q3sayac s1 = [CODE]new q3sayac(""10001"");[/CODE] q3sayac s2 = [CODE]new q3sayac(""1111"");[/CODE] system.out.println(""s1 sonuç: "" + s1.say() + ""\ns2 sonuc: "" + s2.say()); } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar {[/CODE] calmastratejisi strateji; [CODE]public muzikcalar() {[/CODE] } [CODE]void setstrateji(calmastratejisi s) {[/CODE] strateji = s; } [CODE]void muzikcal(list<sarki> sarkilistesi) {[/CODE] strateji.cal(sarkilistesi); } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] sarki s1 = [CODE]new klasiksarki(""prelude in c minor"", ""bach"");[/CODE] sarki s2 = [CODE]new rocksarki(""immigrant song"", ""led zeppelin"");[/CODE] sarki s3 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s4 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s5 = [CODE]new rocksarki(""welcome to the jungle"", ""guns & roses"");[/CODE] list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""karisik calma: "");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""rockcu ozel calma listesi: "");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); system.out.pr[CODE]intln(""metal ozellikleri: "");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] if (sarki instanceof metalsarki) system.out.println( sarki.sanatci + "" - "" + sarki.isim + ""[ozellik: "" + ((metalsarki) sarki).metalozellik + ""]""); } } } [CODE]public class klasiksarki extends sarki {[/CODE] [CODE]public klasiksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] } } [CODE]public class metalsarki extends sarki {[/CODE] [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik) {[/CODE] this.isim = isim; this.sanatci = sanatci; this.metalozellik = metalozellik; } [CODE]void oynat() {[/CODE] } [CODE]void gostermetalozellikler() {[/CODE] system.out.pr[CODE]intln(metalozellik);[/CODE] } } [CODE]public class rocksarki extends sarki {[/CODE] [CODE]public rocksarki(string isim, string sanatci) {[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]void oynat() {[/CODE] } } import java.util.list; import java.util.random; import java.util.random.randomgenerator; [CODE]public class karisikcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] randomgenerator gen = [CODE]new random();[/CODE] sarki[] liste = new sarki[sarkilistesi.size()]; [CODE]int index = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { liste[index++] = sarkilistesi.get(i); } [CODE]for (int i = 0;[/CODE] i < liste.length; i++) { sarki temp = liste[i]; liste[i] = liste[gen.next[CODE]int(5)];[/CODE] liste[gen.next[CODE]int(5)] = temp;[/CODE] } [CODE]for (sarki sarki : liste) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""( "" + ((metalsarki) sarki).metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] system.out.println(""[klasi̇k] "" + sarki.sanatci + "" -"" + sarki.isim); } [CODE]else {[/CODE] system.out.println(""[rock] "" + sarki.sanatci + "" - "" + sarki.isim); } } } } import java.util.list; [CODE]public class siralicalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] system.out.println(""[metal] "" + sarki.sanatci + "" - "" + sarki.isim + ""( "" + ((metalsarki) sarki).metalozellik + "")""); } [CODE]else if (sarki instanceof klasiksarki) {[/CODE] system.out.println(""[klasi̇k] "" + sarki.sanatci + "" -"" + sarki.isim); } [CODE]else {[/CODE] system.out.println(""[rock] "" + sarki.sanatci + "" - "" + sarki.isim); } } } } [CODE]public abstract class sarki {[/CODE] [CODE]string isim;[/CODE] [CODE]string sanatci;[/CODE] abstract [CODE]void oynat();[/CODE] } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi {[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi) {[/CODE] [CODE]for (int i = 0;[/CODE] i < sarkilistesi.size(); i++) { if (sarkilistesi.get(i) instanceof metalsarki) { system.out.println(""[metal] "" + sarkilistesi.get(i).sanatci + "" - "" + sarkilistesi.get(i).isim + ""( "" + ((metalsarki) sarkilistesi.get(i)).metalozellik + "")""); } else if (sarkilistesi.get(i) instanceof klasiksarki) { system.out.println(""[klasi̇k] "" + sarkilistesi.get(i).sanatci + "" -"" + sarkilistesi.get(i).isim); } [CODE]else {[/CODE] if (!(sarkilistesi.get(i - 1) instanceof rocksarki)) system.out.pr[CODE]intln(""[bi̇lgi̇] yüksek ses düzeyi"");[/CODE] system.out.println(""[rock] "" + sarkilistesi.get(i).sanatci + "" - "" + sarkilistesi.get(i).isim); if (i != sarkilistesi.size() - 1) { if (!(sarkilistesi.get(i + 1) instanceof rocksarki)) system.out.pr[CODE]intln(""[bi̇lgi̇] normal ses düzeyi"");[/CODE] } } } } } import java.util.list; [CODE]public interface calmastratejisi {[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 4 import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class kelimesayaci {[/CODE] [CODE]public static void main(string[] args) {[/CODE] okuyucu(""metin.txt""); kelimesayac(""metin.txt"", ""kelimeler.txt""); } [CODE]public static string okuyucu(string filename) {[/CODE] [CODE]string str = """";[/CODE] scanner scan = null; [CODE]string removed = """";[/CODE] [CODE]try {[/CODE] scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] if (!scan.hasnextline()) { throw [CODE]new bosdosyaexception();[/CODE] } while (scan.hasnextline()) { str = scan.nextline(); } scan.close(); removed = str.replaceall(""\\p{punct}"", """"); [CODE]return removed;[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] ex.getmessage(); } } [CODE]catch (bosdosyaexception e) {[/CODE] e.getmessage(); } [CODE]return null;[/CODE] } [CODE]public static arraylist<string> okuyucu2(string filename) {[/CODE] arraylist<[CODE]string> removed = new arraylist<>();[/CODE] scanner scan = null; [CODE]try {[/CODE] scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] if (!scan.hasnextline()) { throw [CODE]new bosdosyaexception();[/CODE] } while (scan.hasnextline()) { removed.add(scan.nextline()); } scan.close(); [CODE]return removed;[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] ex.getmessage(); } } [CODE]catch (bosdosyaexception e) {[/CODE] e.getmessage(); } [CODE]return null;[/CODE] } [CODE]public void kelimeler() {[/CODE] pr[CODE]intwriter kelime = null;[/CODE] [CODE]try {[/CODE] kelime = new printwriter(new fileoutputstream(""sonuc.txt"")); } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] ex.getmessage(); } } } [CODE]public static void kelimesayac(string file1, string file2) {[/CODE] [CODE]if (file1 == null || file2 == null) {[/CODE] [CODE]return;[/CODE] } [CODE]string str1 = okuyucu(file1);[/CODE] arraylist<[CODE]string> str2 = okuyucu2(file2);[/CODE] int counts[] = new int[str2.size()]; [CODE]int counter = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < str2.size(); i++) { int l = str2.get(i).length(); counts[i] = counter; counter = 0; [CODE]for (int j = 0;[/CODE] j < str1.length(); j++) { if (str2.get(i).equals(str1.sub[CODE]string(j, l))) {[/CODE] counter++; } } } [CODE]int total = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < counts.length; i++) { total += counts[i]; } [CODE]try {[/CODE] [CODE]if (total == 0) throw new kelimebulunamadiexception();[/CODE] } [CODE]catch (kelimebulunamadiexception e) {[/CODE] e.getmessage(); } } } [CODE]public class kelimebulunamadiexception extends exception {[/CODE] [CODE]public kelimebulunamadiexception() {[/CODE] super(); } [CODE]public kelimebulunamadiexception(string e) {[/CODE] system.out.pr[CODE]intln(""hata: "" + e + "" metinde bulunamadi"");[/CODE] } } [CODE]public class bosdosyaexception extends inputexception {[/CODE] [CODE]public bosdosyaexception() {[/CODE] super(); } [CODE]public bosdosyaexception(string e) {[/CODE] super(e + "" bos""); } } [CODE]public class inputexception extends exception {[/CODE] [CODE]public inputexception() {[/CODE] super(); } [CODE]public inputexception(string e) {[/CODE] system.out.pr[CODE]intln(""hata: "" + e);[/CODE] } } [CODE]public class dosyabulunamadiexception extends inputexception {[/CODE] [CODE]public dosyabulunamadiexception() {[/CODE] super(); } [CODE]public dosyabulunamadiexception(string e) {[/CODE] super(e + "" bulunamadi""); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.arraylist; import java.util.list; [CODE]public class inventory<t extends item> {[/CODE] arraylist<t> objects = [CODE]new arraylist<>();[/CODE] [CODE]void additem(t item) {[/CODE] objects.add(item); } [CODE]void removeitem(t item) {[/CODE] objects.remove(item); } [CODE]void printinventory() {[/CODE] [CODE]for (t object : objects) {[/CODE] system.out.pr[CODE]intln(object);[/CODE] } } t mostvaluableitem() { t temp = null; [CODE]for (int i = 0;[/CODE] i < objects.size() - 1; i++) { if (objects.get(i).getvalue() < objects.get(i + 1).getvalue()) { temp = objects.get(i + 1); } } [CODE]return temp;[/CODE] } t finditembyname([CODE]string name) {[/CODE] [CODE]for (t items : objects) {[/CODE] if (items.getname().equals(name)) { [CODE]return items;[/CODE] } } [CODE]return null;[/CODE] } list<t> finditemsbyvalue([CODE]int value) {[/CODE] list<t> greater = [CODE]new arraylist<>();[/CODE] [CODE]for (t items : objects) {[/CODE] if (items.getvalue() > value) { greater.add(items); } } [CODE]return greater;[/CODE] } [CODE]int gettotalvalue() {[/CODE] [CODE]int total = 0;[/CODE] [CODE]for (t items : objects) {[/CODE] total += items.getvalue(); } [CODE]return total;[/CODE] } list<t> filterbytype([CODE]class<?> type) {[/CODE] list<t> clas = [CODE]new arraylist<>();[/CODE] [CODE]for (t items : objects) {[/CODE] if (items.getclass().equals(type)) { clas.add(items); } } [CODE]return clas;[/CODE] } [CODE]int gettotalweapondamage() {[/CODE] [CODE]int total = 0;[/CODE] [CODE]for (t item : objects) {[/CODE] if (item.getclass() == weapon.[CODE]class) {[/CODE] total += ((weapon) item).getdamage(); } } [CODE]return total;[/CODE] } [CODE]void sortbyvalue() {[/CODE] t temp; [CODE]for (int i = 0;[/CODE] i < objects.size(); i++) { if (objects.get(i).getvalue() < objects.get(i).getvalue()) { temp = objects.get(i); objects.set(i, objects.get(i + 1)); objects.set(i + 1, temp); } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory) {[/CODE] system.out.println(inventory.mostvaluableitem()); } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source) {[/CODE] [CODE]for (int i = 0;[/CODE] i < source.objects.size(); i++) { if (source.objects.get(i).getclass() == armor.[CODE]class) {[/CODE] destination.objects.add(source.objects.get(i)); } } } } [CODE]public class weapon implements item {[/CODE] private [CODE]int damage;[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] [CODE]public weapon(string name, int value, int damage) {[/CODE] this.name = name; this.damage = damage; this.value = value; } [CODE]public int getdamage() {[/CODE] [CODE]return damage;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string tostring() {[/CODE] [CODE]return (""name: "" + getname() + ""value: "" + getvalue() + ""damage: "" + getdamage());[/CODE] } } [CODE]public class armor implements item {[/CODE] private [CODE]int defense;[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] [CODE]public armor(string name, int value, int defense) {[/CODE] this.defense = defense; this.name = name; this.value = value; } [CODE]public int getdefense() {[/CODE] [CODE]return defense;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string tostring() {[/CODE] [CODE]return (""name: "" + getname() + ""value: "" + getvalue() + ""defense: "" + getdefense());[/CODE] } } [CODE]public class potion implements item {[/CODE] private [CODE]string effect;[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] [CODE]public potion(string name, int value, string effect) {[/CODE] this.effect = effect; this.name = name; this.value = value; } [CODE]public string geteffect() {[/CODE] [CODE]return effect;[/CODE] } @override [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue() {[/CODE] [CODE]return value;[/CODE] } [CODE]public string tostring() {[/CODE] [CODE]return (""name: "" + getname() + ""value: "" + getvalue() + ""effect: "" + geteffect());[/CODE] } } [CODE]public class driver {[/CODE] [CODE]public static void main(string[] args) {[/CODE] weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] weapon wea = [CODE]new weapon(""wea"", 50, 40);[/CODE] weapon wep = [CODE]new weapon(""wep"", 30, 10);[/CODE] armor armor = [CODE]new armor(""armor"", 90, 100);[/CODE] armor arm = [CODE]new armor(""arm"", 5, 10);[/CODE] armor mo = [CODE]new armor(""mo"", 60, 70);[/CODE] potion pot = [CODE]new potion(""pot"", 13, ""light"");[/CODE] inventory<item> items = [CODE]new inventory<>();[/CODE] items.additem(mo); items.additem(wep); items.additem(pot); inventory<weapon> wp = [CODE]new inventory<>();[/CODE] wp.additem(sword); wp.additem(wep); wp.additem(wea); inventory<armor> ar = [CODE]new inventory<>();[/CODE] ar.additem(armor); ar.additem(arm); inventory<armor> mor = [CODE]new inventory<>();[/CODE] mor.additem(mo); system.out.println(wp.gettotalweapondamage()); inventory.transferarmor(mor, ar); mor.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln(""----------------"");[/CODE] system.out.println(items.filterbytype(weapon.[CODE]class));[/CODE] } } ""recursion"" kavramı nedir, kısaca açıklayınız. özyinelemeli metot, kendi içinde tekrar kendi çağırarak işler. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case, metotun stack overflow olmasını engelleyen istenilen durum. büyük problem, çözmek istediğimiz ana problem(n). küçük problem, büyük problemi ayırarak çözümüne odaklandığımız parça (n-1). jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stack'de en alttan başlayarak elde tutması gerekenleri biriktirir. en tepeye ulaştıktan sonra yukarıdan aşağı olacak şekilde kodu işler. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. tek bir for döngüsüyle halledebileceğimiz için iteratif olarak. çünkü recursion daha yavaş işler. bir stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? base case stringin uzunluğu 1e eşitse 1 döndür olur. her seferinde int count değişkenimi 1 arttırıp stringi substring(1)'den başlatarak tekrar çağırırım. stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. bilgisayar kaynaklarını tükettiyse olur. base case tanımlanmadığı zaman recursion metotlarında olur. tail recursion nedir, kısaca açıklayınız. metotun içinde iflere girmediği durumda tekrar metotun çağrılmasıyla olur. abstraction kavramını açıklayınız. soyutlama, black box. çalışırken metotun işleyişini detaylı olarak bilmediğimiz ama çıktısını bildiğimiz metotları örnek verebiliriz örneğin system.out.println dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? override ettiğimiz metot diğer sınıfın subclassında yer aldığı için mümkündür. tersi değil. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? protected private a daha yakın çünkü aynı package ve subclassların erişimine izin veriyor. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? kendinden hemen önceki türetildiği classın contructorını almak için. bu listenin en tepesinde object classı yer alır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? hayır extend ettiğimiz classların metotları birbiriyle aynı olabilir sorun çıkarabilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a b'nin içinde tanımlı bir variabledir. metot overriding ve overloading kavramlarını açıklayınız. overriding base classta bulunan bir metotun türettiğimiz classa özel halini yazmaktır isimleri aynıdır. overloading yine aynı isimli metotların farklı imzalara sahip tanımlanmasıdır aynı classın içinde olur. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base 1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? parent+"" \n"" + 30 java'da ne zaman [CODE]static binding yapılır, ne zaman dynamic binding yapılır? direkt aktarmak istiyorsak static yoksa dinamik java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? override edilemezler değiştirilemezler yani overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? dinamik çünkü değiştirilebilirler dinamik bağlamada jvm'nin görevi nedir? ---- java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? ----- java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? staticler olmadığı için öncelikli aktarım sırasında sorun yasanırdı class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? parent dinamik [CODE]class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? product book statik java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir . unchecked ve checked exceptions. unchecked exceptionlara runtime exceptionlar örnek verilebilir örneğin nullpointerexceptin. ioexception checked exceptionlara örnek verilebilir. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? throws keywordu kullanarak attığımız exceptionlardır. eğer override edilmiş bir metotta bunu yapıyorsak throws yaptığımız exceptionun classı override ettiģimiz metotta throws yaptığımız exceptionun classından daha üst seviyede olamaz . finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? finally bloğu exception atılsa da atılmasa da her zaman çalıştırılır. java'da kendi exceptionunuzu nasıl tanımlarsınız? exception sınıfından bir class türeterek bu classta bir boş bir de string ifade alan olacak şekilde 2 contructor tanımlarım. constructorların içinde super metodunu çağırırım. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? handle edilmesi gerekilen exceptionu daha basitleştirmek. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally oops done 41 [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmez io exception exceptionun subclassıdır bu yüzden sıralamada önce o yazılmalıdır. trying m1 caught2 finally text file ile binary file arasındaki fark nedir? text file editor tarafından okunurken binary file bilgisayar tarafından okunur ve 1 ve 0lardan oluşur bir dosyaya yazarken düzenli olarak flush yapmamak neye yol açabilir? data kaybına yol açabilir binary bir dosyaya bir object yazdırırken bu objenin hangi interfaceyi implement etmesi gerekiyor? bu interfacenin metotlarını sıralayınız. bu interface functional veya marker bir interface midir? functional bir interfacedir binary bir dosyaya primitive typeler (int, float, char etc.) yazılabilir mi, evet ise nasıl? evet yazılabilir dosya bunları 1 ve 0lara çevirir buffered reader ve scanner sınıfları ile dosya okurken dosyanın sonuna geldiğini nasıl kontrol edilir? buffered reader readline metotu null döndürür read metotu ise -1 döndürür. sacnner sın[CODE]ıfında ise hasnext metotu ile sona gelip gelinmedigi anlaşılabilir binary bir dosya okurken dosyanın sonuna gelindiği nasıl test edilir? -- public class randomaccessdemo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] _______ f = new _______(""numbers.bin"", ""____""); f.write[CODE]int(10);[/CODE] f.write[CODE]int(20);[/CODE] int a = f.read[CODE]int();[/CODE] f.seek(_____________); int b = f.read[CODE]int();[/CODE] system.out.pr[CODE]intln(a + b);[/CODE] f.close(); } } boşluklara sırasıyla ne gelmelidir? output? -- [CODE]public class demo {[/CODE] [CODE]public static void main(string[] args) throws exception {[/CODE] fileoutputstream fos = new fileoutputstream(""log.txt"", true); ______________ pw = [CODE]new ______________(fos);[/CODE] pw.pr[CODE]intln(""new log entry"");[/CODE] pw.close(); } } boşluklara sırasıyla ne gelmelidir? bu kod çalıştırıldığında log.txt dosyası nasıl etkilenir? printwriter printwriter log.txt dosyasına new log entry yazılır what grade (a, b, c, d, or f) do you expect to earn by the end of this course? cc java'da generic kavramı nedir, bu kavramın temel amacı nedir? classı instantinate etmeden önce belli bir tiple yazmaya gerek kalmamasıdır upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. lower bound yazabilceģimiz minumum class tipini belirler upper bound da ulaşabileceģimiz maksimum class tipini belirtir örneğin t extends comperable demek class tiplerimizi t yi extend edenler olarak sınırlandırır generic bir classın constructorunda type parametresi bulunur mu, neden? hayır bulunmaz mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. normal kalıtım ilişkisi yoktur birinin obnesi diğerinin de objesi sayılmaz [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. generic type array yazamayız. arraylost kullanabiliriz swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? --- [CODE]public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. <t> map ve set veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. -- collections [CODE]interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? listelere ekleme eksiltme boyunu döndürme ve iterasyona aktarma i̇ki objenin equals metodu true dönüyorsa bu iki objenin hash codeleri aynıdır, bunun nedenini açıklayınız;[/CODE] eğer bu sağlanmazsa hangi veri yapıları istenilen şekilde sağlanır? kendi yazdığınız classlarda bunu sağlamak için hangi metotları override etmelisiniz, neden? hashcode objeleri tutan referanstir aynı referans iki objeyi tutabilir. equals metodu override edilmelidir. bir öğrenci kulübü, yılsonu etkinliği için sınırlı kontenjana sahip bir kayıt sistemi oluşturuyor. sistem, öğrenci kayıtlarını ""ilk gelen ilk hizmet alır"" prensibiyle yönetiyor. ancak, bazı öğrenciler kaydını iptal edebiliyor ve boş kalan yerler otomatik olarak sıradaki öğrenciye veriliyor. bu senaryoda, kayıt sırasını ve iptal durumlarını etkin bir şekilde yönetebilmek için hangi veri yapısını tercih edersiniz? neden? bu örnek bankada sıra bekleyen insanlara benziyor bu yuzden setler bu durumda kullanilabilir f[CODE]ifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue -- public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 80); scores.put(""alice"", 100); set<string> keys = scores.keyset(); [CODE]int sum = 0;[/CODE] [CODE]for (string key : keys) {[/CODE] sum += scores.get(key); } system.out.println(""number of entries: "" + scores.size()); system.out.pr[CODE]intln(""sum of scores: "" + sum);[/CODE] } } output? 3 275 [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<[CODE]string> list = new arraylist<>();[/CODE] list.add(""apple""); list.add(""banana""); list.add(1, ""cherry""); list.remove(""banana""); list.add(""apple""); system.out.println(list.size()); system.out.println(list.indexof(""apple"") + "" "" + list.lastindexof(""apple"")); } } output? 0 0 ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 30 java gui'leri bağlamında olay güdümlü (event driven) programlamayı tanımlayın. atılan event objesini yakalayan listenerların olduğu programlama turudur geleneksel sıralı programlama ile olay güdümlü (event driven) programlama arasındaki temel fark nedir? evetler gidişata karar verir bazı metotlar hiç kullanılmayabilir borderlayout yöneticisi, bir konteynerdeki bileşenleri nasıl düzenler? konteyner üzerindeki konumlarını ayarlamaya yardımcı olur. java gui uygulamalarında jpanel'in amacı nedir? -- java'daki gui programları neden tipik olarak sonsuz bir olay döngüsü çalıştırır ve bu durum sistem veya uygulama tarafından tetiklenen yeniden çizim (repa[CODE]int) olaylarıyla nasıl ilişkilidir? her seferinde ekrandaki şeklin güncellenmesi gerekir bir swing uygulamasında repaint() metodunu çağırmanın etkisi nedir? ekrana yeni eklenen şeyleri yansıtmak aşağıdaki kodun çalışmasını izleyin ve düğmeye tıklandığında ne olduğunu belirleyin: public class simplegui extends jframe implements actionlistener {[/CODE] [CODE]public simplegui() {[/CODE] setsize(200, 100); setdefaultcloseoperation(jframe.exit_on_close); jbutton button = [CODE]new jbutton(""click me"");[/CODE] button.addactionlistener(this); add(button); setvisible(true); } [CODE]public void actionperformed(actionevent e) {[/CODE] joptionpane.showmessagedialog(this, ""button was clicked!""); system.exit(0); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new simplegui();[/CODE] } } this button was clicked. program sonlanır. aşağıdaki kod parçasını inceleyin: import javax.swing.*; import java.awt.*; [CODE]public class layoutexample {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe frame = [CODE]new jframe(""layout test"");[/CODE] frame.setsize(400, 300); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlayout([CODE]new borderlayout());[/CODE] frame.add(new jlabel(""n""), borderlayout.north); frame.add(new jbutton(""s""), borderlayout.south); frame.add(new jpanel(), borderlayout.center); frame.setvisible(true); } } bu program çalıştığında bileşenlerin nasıl düzenlendiğini açıklayın. frame in başlığı layout test olur. frame in üstünde kuzeyde n güneyde s yazar . thread oluşturmanın 2 temel yöntemi nedir? thread oluştururken lambda notasyonunun kullanılabilmesi ne sağlar? lambda notasyonu kullanabilmesi block seklinde kullanimi saglar data race problemi nedir, neden kaynaklanır? nasıl önüne geçilir? -- dead lock problemi nedir, neden kaynaklanır; bunun önüne geçebilmek için ne yapılabilir? eğer 2 tread arasında biri karşıdan almayı beklerken veriyor diğeri de diğer treadten almayı bekliyor ve veriyor ise aralarinda dead lock problemi olur bir threadi başlatmak için neden run metodu çağırılmamalı, açıklayınız. peki hangi metot çağrılmalıdır? thread kendi içinde run metotudunu cagiracagi icin basladiğında bizim ayrıca çağırmamıza gerek yok bir thread başka bir thread tarafından nasıl doğru bir şekilde sonlandırılabilir? -- java'da kaç çeşit thread vardır, farkları açıklayınız. -- [CODE]public class bankaccount {[/CODE] private double balance; [CODE]public void deposit(double amount) {[/CODE] balance = balance + amount; ; } [CODE]public void withdraw(double amount) balance = balance - amount ;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] bankaccount account = [CODE]new bankaccount();[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 3; i++) { account.deposit(100); } }); thread t2 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 2; i++) { account.withdraw(100); } }); t1.start(); t2.start(); } } bu kodda bir problem var mı? varsa bu problemi nasıl çözersiniz? (varsa) problemi çözdükten sonra program çalıştığında balance'nin son değeri ne olur? dead lock problemi var bunu cozmek icin senkronize block kullanabiliriz.0. [CODE]class threadvisibility {[/CODE] private [CODE]static boolean flag = false;[/CODE] private [CODE]static int value = 0;[/CODE] [CODE]public static void main(string[] args) throws interruptedexception {[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] string name = thread.currentthread().getname(); system.out.pr[CODE]intln(""started"");[/CODE] [CODE]while (!flag) {[/CODE] [CODE]try {[/CODE] thread.sleep(100); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } system.out.pr[CODE]intln(name + value);[/CODE] }); t1.setname(""t2""); t1.start(); thread.sleep(1000); // give t1 time to start value = 11; synchronized (threadvisibility.[CODE]class) {[/CODE] flag = true; } } } output? started t2 0 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot {[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE]// 100 ile 0 arasında bir değer private boolean isoperational;// bataryası varsa true [CODE]public robot() {[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel) {[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type) {[/CODE] this.type = type; } [CODE]public int getbatterylevel() {[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel) {[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational() {[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisoperational(boolean isoperational) {[/CODE] this.isoperational = isoperational; } [CODE]public void charge() {[/CODE] batterylevel = 100; } [CODE]public void printrobot() {[/CODE] system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]public class factorybase {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } import java.util.arraylist; [CODE]public class quizq1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] system.out.pr[CODE]intln();[/CODE] } [CODE]public static void makearray(string str) {[/CODE] arraylist<[CODE]string> strs = new arraylist<>();[/CODE] [CODE]string str1 = """";[/CODE] [CODE]for (int i = 0;[/CODE] i < str.length(); i++) { if (str.charat(0) - 'a' < 0 && str.charat(0) - 'a' >= 0) { str1 += str.charat(0); } if (str.charat(0) - 'a' >= 0) { str1 += (char) ((str.charat(0) - 'a') + 'a'); } if (str.charat(0) - 'a' >= 0) { str1 += (char) ((str.charat(0) - 'a') + 'a'); } } strs.add(str1); } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public factory(string name, string location) {[/CODE] this.name = name; this.location = location; } [CODE]public factory() {[/CODE] name = ""factory1""; location = ""moon""; } [CODE]public string getname() {[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name) {[/CODE] this.name = name; } [CODE]public string getlocatiion() {[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location) {[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots() {[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots) {[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot) {[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(100); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]intln(""factory name: "" + name + "" location: "" + location + ""\nrobots operating here:"");[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).setbatterylevel(robots.get(i).getbatterylevel() * (75 / 100)); } } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery {[/CODE] [CODE]int getbatterylife();[/CODE] [CODE]void recharge();[/CODE] } [CODE]public abstract class abstractrobot implements withbattery {[/CODE] protected [CODE]string modelname;[/CODE] protected [CODE]int batterylife;[/CODE] [CODE]public abstractrobot(string modelname, int batterylife) {[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname() {[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] } [CODE]public class securityrobot extends abstractrobot {[/CODE] private boolean isarmed; [CODE]public boolean getisarmed() {[/CODE] [CODE]return isarmed;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batterylife = super.batteryl[CODE]ife;[/CODE] } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to scan threats...""); } } securityrobot([CODE]string modelname, int batterylife, boolean isarmed) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } [CODE]public void togglearmedmode() {[/CODE] isarmed = !isarmed; } } [CODE]public class cleaningrobot extends abstractrobot {[/CODE] private [CODE]int cleaningpower;[/CODE] [CODE]public int getcleaningpower() {[/CODE] [CODE]return cleaningpower;[/CODE] } @override [CODE]public int getbatterylife() {[/CODE] [CODE]return batterylife;[/CODE] } @override [CODE]public void recharge() {[/CODE] batterylife = super.batteryl[CODE]ife;[/CODE] } cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower) {[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } @override [CODE]public void performtask() {[/CODE] [CODE]if (batterylife >= 10) {[/CODE] system.out.println(""["" + modelname + ""] cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else {[/CODE] system.out.println(""["" + modelname + ""] not enough battery to clean...""); } } [CODE]public void boostcleaningpower(int cleaningpower, int miktar) {[/CODE] cleaningpower += miktar; } } import java.util.arraylist; [CODE]public class robotfactory {[/CODE] private arraylist<abstractrobot> robots = [CODE]new arraylist<>();[/CODE] [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) {[/CODE] cleaningrobot cleaningrobot = [CODE]new cleaningrobot(modelname, batterylife, cleaningpower);[/CODE] robots.add(cleaningrobot); counter++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) {[/CODE] securityrobot securityrobot = [CODE]new securityrobot(modelname, batterylife, isarmed);[/CODE] robots.add(securityrobot); counter++; } [CODE]public void performalltasks() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { robots.get(i).per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i).getclass() == cleaningrobot.[CODE]class) {[/CODE] cleaningrobot r1 = (cleaningrobot) robots.get(i); system.out.println(""cleaning robot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", cleaning power: "" + r1.getcleaningpower()); } [CODE]else {[/CODE] securityrobot r2 = (securityrobot) robots.get(i); system.out.println(""security robot - model: "" + robots.get(i).getmodelname() + "", battery: "" + robots.get(i).getbatterylife() + "", armed: "" + r2.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar) {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i).getclass() == cleaningrobot.[CODE]class) {[/CODE] cleaningrobot r3 = (cleaningrobot) robots.get(i); r3.boostcleaningpower(r3.getcleaningpower(), miktar); system.out.println(""cleaningrobot - "" + robots.get(i).modelname + ""now has cleaning power:"" + r3.getcleaningpower()); } } } [CODE]public void togglesecurityrobotsmode() {[/CODE] [CODE]for (int i = 0;[/CODE] i < robots.size(); i++) { if (robots.get(i).getclass() == securityrobot.[CODE]class) {[/CODE] securityrobot r4 = (securityrobot) robots.get(i); r4.togglearmedmode(); system.out.println(""securityrobot - "" + robots.get(i).modelname + ""is now "" + r4.getisarmed()); } } } [CODE]public static int counter;[/CODE] [CODE]public void allrobots() {[/CODE] system.out.println(""tum fabrikalar tarafindan toplam "" + counter + "" üretildi.""); } } [CODE]public class main1 {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] anotherfactory.allrobots(); } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 [CODE]public class bosdosyaaexception extends inputtexception {[/CODE] [CODE]public bosdosyaaexception() {[/CODE] super(""hata: envanter dosyasi bos.""); } [CODE]public bosdosyaaexception(string message) {[/CODE] super(message); } } [CODE]public class esyayokexception extends exception {[/CODE] [CODE]public esyayokexception() {[/CODE] super(""hata: i̇stenen eşya envanterde mevcut değil.""); } [CODE]public esyayokexception(string message) {[/CODE] super(message); } } [CODE]public class dosyabulunamadiiexception extends inputtexception {[/CODE] [CODE]public dosyabulunamadiiexception() {[/CODE] super(""hata: envanter dosyasi bulunamadi.""); } [CODE]public dosyabulunamadiiexception(string message) {[/CODE] super(message); } } import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.fileoutputstream; import java.io.pr[CODE]intwriter;[/CODE] import java.util.arraylist; import java.util.scanner; [CODE]public class kelimesayaci {[/CODE] [CODE]public static void main(string[] args) {[/CODE] okuyucu(""metin.txt""); kelimesayac(""metin.txt"", ""kelimeler.txt""); } [CODE]public static string okuyucu(string filename) {[/CODE] [CODE]string str = """";[/CODE] scanner scan = null; [CODE]string removed = """";[/CODE] [CODE]try {[/CODE] scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] if (!scan.hasnextline()) { throw [CODE]new bosdosyaexception();[/CODE] } while (scan.hasnextline()) { str = scan.nextline(); } scan.close(); removed = str.replaceall(""\\p{punct}"", """"); [CODE]return removed;[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] ex.getmessage(); } } [CODE]catch (bosdosyaexception e) {[/CODE] e.getmessage(); } [CODE]return null;[/CODE] } [CODE]public static arraylist<string> okuyucu2(string filename) {[/CODE] arraylist<[CODE]string> removed = new arraylist<>();[/CODE] scanner scan = null; removed. [CODE]try {[/CODE] scan = [CODE]new scanner(new fileinputstream(filename));[/CODE] if (!scan.hasnextline()) { throw [CODE]new bosdosyaexception();[/CODE] } while (scan.hasnextline()) { removed.add(scan.nextline()); } scan.close(); [CODE]return removed;[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] ex.getmessage(); } } [CODE]catch (bosdosyaexception e) {[/CODE] e.getmessage(); } [CODE]return null;[/CODE] } [CODE]public void kelimeler() {[/CODE] pr[CODE]intwriter kelime = null;[/CODE] [CODE]try {[/CODE] kelime = new printwriter(new fileoutputstream(""sonuc.txt"")); } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] ex.getmessage(); } } } [CODE]public static void kelimesayac(string file1, string file2) {[/CODE] [CODE]if (file1 == null || file2 == null) {[/CODE] [CODE]return;[/CODE] } [CODE]string str1 = okuyucu(file1);[/CODE] arraylist<[CODE]string> str2 = okuyucu2(file2);[/CODE] int counts[] = new int[str2.size()]; [CODE]int counter = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < str2.size(); i++) { int l = str2.get(i).length(); counts[i] = counter; counter = 0; [CODE]for (int j = 0;[/CODE] j < str1.length(); j++) { if (str2.get(i).equals(str1.sub[CODE]string(j, l))) {[/CODE] counter++; } } } [CODE]int total = 0;[/CODE] [CODE]for (int i = 0;[/CODE] i < counts.length; i++) { total += counts[i]; } [CODE]try {[/CODE] [CODE]if (total == 0) throw new kelimebulunamadiexception();[/CODE] } [CODE]catch (kelimebulunamadiexception e) {[/CODE] e.getmessage(); } } } [CODE]public class ozellikhatasiexception extends exception {[/CODE] [CODE]public ozellikhatasiexception() {[/CODE] super(""hata: eşya bilgileri hatali veya eksik.""); } [CODE]public ozellikhatasiexception(string message) {[/CODE] super(message); } } import java.io.serializable; [CODE]public class envanterkaydi implements serializable {[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public string getisim() {[/CODE] [CODE]return isim;[/CODE] } [CODE]public int getstok() {[/CODE] [CODE]return stok;[/CODE] } [CODE]public void setstok(int stok) {[/CODE] this.stok = stok; } [CODE]public void setisim(string isim) {[/CODE] this.isim = isim; } [CODE]public envanterkaydi(string isim, int stok) {[/CODE] this.isim = isim; this.stok = stok; } [CODE]public void stokguncelle(int miktar) {[/CODE] [CODE]try {[/CODE] stok += miktar; [CODE]if (stok < 0) {[/CODE] throw [CODE]new stoknegatifexception();[/CODE] } } [CODE]catch (stoknegatifexception e) {[/CODE] system.err.println(e.getmessage()); system.exit(0); } } [CODE]public void tostring(envanterkaydi esya) {[/CODE] system.out.println(""i̇sim: "" + esya.getisim() + "" stok: "" + esya.getstok()); } } import java.io.*; import java.util.scanner; import java.util.arraylist; [CODE]public class terminalmenu {[/CODE] [CODE]public static void main(string[] args) {[/CODE] arraylist<envanterkaydi> envanter = [CODE]new arraylist<>();[/CODE] scanner scan = new scanner(system.in); system.out.pr[CODE]intln( ""1)esya ekleme \n2)esya cikarma \n3)stok guncelleme \n4)envanter listeleme \n5)dosyaya kaydetme \n6)dosyadan geri yukleme \n7)cikis"");[/CODE] system.out.println(""i̇stediginiz islemi seciniz.""); int pick = scan.next[CODE]int();[/CODE] system.out.println(""bitirmek için -1 tuslayin.""); [CODE]while (pick != -1) {[/CODE] [CODE]if (pick == 1) {[/CODE] [CODE]try {[/CODE] [CODE]string eisim;[/CODE] system.out.pr[CODE]intln(""envanter ismi:"");[/CODE] scan.nextline(); eisim = scan.nextline(); system.out.pr[CODE]intln(""envanter stogu:"");[/CODE] int estok = scan.next[CODE]int();[/CODE] scan.nextline(); [CODE]if (eisim == null || estok < 0) {[/CODE] throw [CODE]new ozellikhatasiexception();[/CODE] } envanterkaydi esya1 = [CODE]new envanterkaydi(eisim, estok);[/CODE] envanter.add(esya1); } [CODE]catch (ozellikhatasiexception e) {[/CODE] system.err.println(e.getmessage()); system.exit(0); } } [CODE]if (pick == 2) {[/CODE] system.out.pr[CODE]intln(""cikarmak istediginiz esya ismi:"");[/CODE] string esyaout1 = scan.nextline(); scan.nextline(); system.out.pr[CODE]intln(""cikarmak istediginiz esya stogu:"");[/CODE] int esyaout2 = scan.next[CODE]int();[/CODE] scan.nextline(); [CODE]try {[/CODE] envanterkaydi esyaout = [CODE]new envanterkaydi(esyaout1, esyaout2);[/CODE] [CODE]for (int i = 0;[/CODE] i < envanter.size(); i++) { if (envanter.get(i).getisim().equals(esyaout1) && envanter.get(i).getstok() == esyaout2) { envanter.remove(esyaout); } else if (!envanter.contains(esyaout)) { throw [CODE]new esyayokexception();[/CODE] } } } [CODE]catch (esyayokexception e) {[/CODE] system.err.println(e.getmessage()); system.exit(0); } } [CODE]if (pick == 3) {[/CODE] system.out.pr[CODE]intln(""aradiginiz istediginiz esya ismi:"");[/CODE] string esyas = scan.nextline(); scan.nextline(); system.out.pr[CODE]intln(""aradiginiz istediginiz esya stogu:"");[/CODE] int esyas1 = scan.next[CODE]int();[/CODE] scan.nextline(); [CODE]try {[/CODE] envanterkaydi esyas2 = [CODE]new envanterkaydi(esyas, esyas1);[/CODE] system.out.pr[CODE]intln(""guncellemek istediginiz miktar:"");[/CODE] int guncel = scan.next[CODE]int();[/CODE] [CODE]for (int i = 0;[/CODE] i < envanter.size(); i++) { if (envanter.get(i).getisim().equals(esyas) && envanter.get(i).getstok() == esyas1) { esyas2.stokguncelle(guncel); } [CODE]else {[/CODE] throw [CODE]new esyayokexception();[/CODE] } } } [CODE]catch (esyayokexception e) {[/CODE] system.err.println(e.getmessage()); system.exit(0); } } [CODE]if (pick == 4) {[/CODE] [CODE]for (int i = 0;[/CODE] i < envanter.size(); i++) { system.out.println(envanter.get(i).to[CODE]string());[/CODE] } } [CODE]if (pick == 5) {[/CODE] [CODE]try {[/CODE] printwriter l = new printwriter(new fileoutputstream(""sabit.txt"")); [CODE]for (int i = 0;[/CODE] i < envanter.size(); i++) { l.println(envanter.get(i).to[CODE]string());[/CODE] } l.close(); } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] system.err.println(ex.getmessage()); system.exit(0); } } } [CODE]if (pick == 6) {[/CODE] scanner read = null; [CODE]try {[/CODE] read = new scanner(new fileinputstream(""sabit.txt"")); if (!read.hasnext()) { throw [CODE]new bosdosyaexception();[/CODE] } read.close(); } [CODE]catch (filenotfoundexception e) {[/CODE] [CODE]try {[/CODE] throw [CODE]new dosyabulunamadiexception();[/CODE] } [CODE]catch (dosyabulunamadiexception ex) {[/CODE] system.err.println(ex.getmessage()); system.exit(0); } } [CODE]catch (bosdosyaexception ep) {[/CODE] system.err.println(ep.getmessage()); system.exit(0); } } [CODE]if (pick == 7) {[/CODE] system.exit(0); } system.out.println(""i̇stediginiz islemi seciniz.""); int continue = scan.next[CODE]int();[/CODE] pick = continue; } scan.close(); } } [CODE]public class inputtexception extends exception {[/CODE] [CODE]public inputtexception() {[/CODE] super(); } [CODE]public inputtexception(string message) {[/CODE] super(message); } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.arraylist; import java.util.collection; import java.util.iterator; import java.util.list; [CODE]public class generic {[/CODE] @suppresswarnings(""unchecked"") [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] iterator<t> i = collection.iterator(); [CODE]if (findmax) {[/CODE] t max = i.next(); while (i.hasnext()) { if (i.next().compareto(max) > 0) { max = i.next(); } } [CODE]return max;[/CODE] } [CODE]else {[/CODE] t min = i.next(); while (i.hasnext()) { if (i.next().compareto(min) > 0) { min = i.next(); } } [CODE]return min;[/CODE] } } [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] list<t> [CODE]newlist = new arraylist<t>();[/CODE] iterator<?> i = collection.iterator(); while (i.hasnext()) { if (i.next().getclass().equals(type)) { newlist.add((t) i.next()); } } [CODE]return newlist;[/CODE] } } import java.util.arrays; import java.util.list; [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); system.out.println(list.getlastadded()); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.println(generic.findextreme(numbers, true)); // çıktı: 9 (maksimum) system.out.println(generic.findextreme(numbers, false)); // çıktı: 1 (minimum) list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(generic.filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"",""world""] system.out.println(generic.filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] } } import java.util.arraylist; [CODE]public class undoablelist<t> extends arraylist {[/CODE] [CODE]public undoablelist() {[/CODE] } [CODE]public void undolast() {[/CODE] if (!this.isempty()) { this.remove(this.getlastadded()); } } @suppresswarnings(""unchecked"") [CODE]public t getlastadded() {[/CODE] object e = this.get(this.size() - 1); t item = (t) e; [CODE]return item;[/CODE] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 [CODE]public class sniper extends weapon {[/CODE] [CODE]public static final int ammo = 5;[/CODE] [CODE]public static final double speedrate = 30;[/CODE] [CODE]public static final int wavenumber = 6;[/CODE] private double lastfiredtime = 0; handler handler; [CODE]public sniper() {[/CODE] super(sniper.[CODE]class, ammo, speedrate, wavenumber);[/CODE] } [CODE]public void reload() {[/CODE] if (handler.snipercharger > 0) { [CODE]if (currentammo != ammo) {[/CODE] currentammo = ammo; } } [CODE]else {[/CODE] system.out.pr[CODE]intln(""no charger left!!!"");[/CODE] } } [CODE]public void fire(int mousex, int mousey, int playerx, int playery, handler handler, spritesheet ss, long currenttime) {[/CODE] [CODE]if (currenttime - lastfiredtime >= 1000 / speedrate) {[/CODE] double angletoplayer = math.atan2(mousey - playery, mousex - playerx); // create the sniper bullet (penetrating bullet) bullet sniperbullet = [CODE]new bullet(playerx + 16, playery + 16, handler, mousex, mousey, ss);[/CODE] sniperbullet.setspeedx((float) (angletoplayer)); sniperbullet.setspeedy((float) (angletoplayer)); sniperbullet.setpasser(true); handler.addchar(sniperbullet); lastfiredtime = currenttime; } } } import java.awt.color; import java.awt.font; import java.awt.graphics; import java.awt.event.mouseadapter; import java.awt.event.mouseevent; [CODE]public class menu extends mouseadapter {[/CODE] private game game; private handler handler; private zombiewave zombiewave; [CODE]public menu(game game, handler handler) {[/CODE] this.game = game; this.handler = handler; } [CODE]public void mousepressed(mouseevent e) {[/CODE] int mx = e.getx(); int my = e.gety(); if (game.gamestate == game.state.menu) { [CODE]if (mouseover(mx, my, 430, 150, 160, 63)) {[/CODE] game.gamestate = game.state.game; zombiewave = [CODE]new zombiewave(handler);[/CODE] } } } [CODE]public void mousereleased(mouseevent e) {[/CODE] } private boolean mouseover([CODE]int mx, int my, int x, int y, int width, int height) {[/CODE] [CODE]if (mx > x && mx < x + width) {[/CODE] [CODE]if (my > y && my < y + height) {[/CODE] [CODE]return true;[/CODE] } [CODE]else {[/CODE] [CODE]return false;[/CODE] } } [CODE]else {[/CODE] [CODE]return false;[/CODE] } } [CODE]public void tick() {[/CODE] } [CODE]public void render(graphics g) {[/CODE] font f = [CODE]new font(""arial"", 1, 45);[/CODE] g.setfont(f); g.setcolor(color.red); g.draw[CODE]string(""start"", 434, 200);[/CODE] g.drawrect(430, 150, 160, 63); font ft = [CODE]new font(""arial"", 1, 12);[/CODE] g.setfont(ft); g.setcolor(color.dark_gray); g.draw[CODE]string(""press \""p\"" to pause"", 449, 310);[/CODE] g.draw[CODE]string(""press \""r\"" to reload the ammo"", 428, 250);[/CODE] g.draw[CODE]string(""use w a s d for movement"", 437, 280);[/CODE] } } import java.awt.color; import java.awt.font; import java.awt.graphics; import java.awt.event.mouseadapter; import java.awt.event.mouseevent; [CODE]public class pausemenu extends mouseadapter {[/CODE] private game game; private handler handler; [CODE]public pausemenu(game game, handler handler) {[/CODE] this.game = game; this.handler = handler; } [CODE]public void mousepressed(mouseevent e) {[/CODE] int mx = e.getx(); int my = e.gety(); if (game.gamestate == game.state.pausemenu) { [CODE]if (mouseover(mx, my, 400, 150, 200, 63)) {[/CODE] savemanager.savegame(game, ""savegame.dat""); system.out.pr[CODE]intln(""game has been saved"");[/CODE] } [CODE]else if (mouseover(mx, my, 450, 250, 100, 63)) {[/CODE] loadmanager.loadgame(""savegame.dat""); system.out.pr[CODE]intln(""game has been loaded"");[/CODE] } } } [CODE]public void mousereleased(mouseevent e) {[/CODE] } private boolean mouseover([CODE]int mx, int my, int x, int y, int width, int height) {[/CODE] [CODE]if (mx > x && mx < x + width) {[/CODE] [CODE]if (my > y && my < y + height) {[/CODE] [CODE]return true;[/CODE] } [CODE]else {[/CODE] [CODE]return false;[/CODE] } } [CODE]else {[/CODE] [CODE]return false;[/CODE] } } [CODE]public void tick() {[/CODE] } [CODE]public void render(graphics g) {[/CODE] font f = [CODE]new font(""arial"", 1, 45);[/CODE] g.setfont(f); g.setcolor(color.red); g.draw[CODE]string(""save"", 445, 200);[/CODE] g.drawrect(400, 150, 200, 63); g.draw[CODE]string(""load"", 445, 300);[/CODE] g.drawrect(400, 250, 200, 63); font ft = [CODE]new font(""arial"", 1, 15);[/CODE] g.setfont(ft); g.setcolor(color.dark_gray); g.draw[CODE]string(""press \""p\"" to continue"", 410, 350);[/CODE] } } [CODE]public class weapon {[/CODE] [CODE]class<?> currentweapon;[/CODE] [CODE]int ammo;[/CODE] [CODE]int currentammo;[/CODE] [CODE]int wavenumber;[/CODE] double speedrate; [CODE]int leftcharger;[/CODE] [CODE]public weapon(class<?> currentweapon, int ammo, double speedrate, int wavenumber) {[/CODE] this.currentweapon = currentweapon; this.ammo = ammo; this.speedrate = speedrate; this.wavenumber = wavenumber; this.currentammo = ammo; } [CODE]public void fire(int mousex, int mousey, int playerx, int playery, handler handler, spritesheet ss, long currenttime) {[/CODE] } [CODE]public int getleftcharger() {[/CODE] [CODE]return leftcharger;[/CODE] } [CODE]public void setleftcharger(int leftcharger) {[/CODE] this.leftcharger = leftcharger; } [CODE]public int getammo() {[/CODE] [CODE]return ammo;[/CODE] } [CODE]public int getwavenumber() {[/CODE] [CODE]return wavenumber;[/CODE] } [CODE]public double getspeedrate() {[/CODE] [CODE]return speedrate;[/CODE] } [CODE]public class<?> getcurrentweapon() {[/CODE] [CODE]return currentweapon;[/CODE] } [CODE]public weapon getcurrweapon() {[/CODE] [CODE]return this;[/CODE] } [CODE]public void setcurrentweapon(class<?> currentweapon) {[/CODE] this.currentweapon = currentweapon; } [CODE]public void setcurrentweapon(weapon weapon) {[/CODE] this.ammo = weapon.ammo; this.currentweapon = weapon.currentweapon; this.speedrate = weapon.speedrate; this.wavenumber = weapon.wavenumber; } [CODE]public int getcurrentammo() {[/CODE] [CODE]return currentammo;[/CODE] } [CODE]public void setcurrentammo(int consumed) {[/CODE] currentammo = currentammo - consumed; } [CODE]public void reload() {[/CODE] [CODE]if (currentammo != ammo) currentammo = ammo;[/CODE] } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class bullet extends gameobject {[/CODE] private handler handler; private game game; private double angle; private boolean ispasser = false;; [CODE]public void setpasser(boolean ispasser) {[/CODE] this.ispasser = ispasser; } [CODE]public boolean ispasser() {[/CODE] [CODE]return ispasser;[/CODE] } private double speed; private double angleadj; [CODE]public bullet(int x, int y, handler handler, int mx, int my, spritesheet ss) {[/CODE] super(x, y, ss); this.handler = handler; double disx = mx - x; double disy = my - y; double distance = math.sqrt(disx * disx + disy * disy); double baseangle = math.pi + math.atan2(disy, disx); this.angle = baseangle + angleadj; [CODE]if (distance != 0) {[/CODE] velx += (float) ((disx / distance) * 10.0); vely += (float) ((disy / distance) * 10.0); } [CODE]else {[/CODE] velx += 0; vely += 0; } } @override [CODE]public void tick() {[/CODE] x += velx; y += vely; [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject tempobject = handler.gamec.get(i); if (tempobject.getclass() == block.[CODE]class) {[/CODE] if (getbounds().intersects(tempobject.getbounds())) { handler.removechar(this); } } } } @override [CODE]public void render(graphics graphic) {[/CODE] graphic.setcolor(color.black); graphic.filloval(x, y, 5, 5); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 4, 4);[/CODE] } } [CODE]public class shotgun extends weapon {[/CODE] [CODE]public static final int ammo = 5;[/CODE] [CODE]public static final double speedrate = 60;[/CODE] [CODE]public static final int wavenumber = 4;[/CODE] private [CODE]static final int bulletspershot = 9;[/CODE] // shotgun fires 9 bullets per shot private static final double angleadj = math.toradians(45); private static final double bulletsep = math.toradians(5); // 5-degree separation between each bullet handler handler; private double lastfiredtime = 0; [CODE]public shotgun() {[/CODE] super(shotgun.[CODE]class, ammo, speedrate, wavenumber);[/CODE] } [CODE]public void reload() {[/CODE] if (handler.shotguncharger > 0) { [CODE]if (currentammo != ammo) {[/CODE] currentammo = ammo; } } [CODE]else {[/CODE] system.out.pr[CODE]intln(""no charger left!!!"");[/CODE] } } [CODE]public void shoot(int mousex, int mousey, int playerx, int playery, handler handler, spritesheet ss, long currenttime) {[/CODE] [CODE]if (currenttime - lastfiredtime >= 1000 / speedrate) {[/CODE] double angletoplayer = math.atan2(mousey - playery, mousex - playerx); [CODE]for (int i = 0;[/CODE] i < bulletspershot; i++) { double angleoffset = -(angleadj / 2) + (i * bulletsep); // calculate angle offset [CODE]for each bullet bullet bullet = new bullet(playerx + 16, playery + 16, handler, mousex, mousey, ss);[/CODE] bullet.setspeedx((float) (angletoplayer + angleoffset)); bullet.setspeedy((float) (angletoplayer + angleoffset)); handler.addchar(bullet); } lastfiredtime = currenttime; } } } [CODE]public class reptilezombie extends enemies {[/CODE] [CODE]public reptilezombie(int x, int y, handler handler, spritesheet ss, class<?> type, zombiewave zombiewave) {[/CODE] super(x, y, handler, ss, type, zombiewave); sethealth(); setdamage(); setspeed(); } [CODE]public void tick() {[/CODE] super.tick(); } [CODE]public void setspeed() {[/CODE] this.speed = 3.0; } [CODE]public void setdamage() {[/CODE] this.damage = 0.25; } [CODE]public double getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public void sethealth() {[/CODE] this.health = 25; } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(double damage) {[/CODE] health -= damage; } } [CODE]public class normalzombie extends enemies {[/CODE] [CODE]public normalzombie(int x, int y, handler handler, spritesheet ss, class<?> type, zombiewave zombiewave) {[/CODE] super(x, y, handler, ss, type, zombiewave); sethealth(); setdamage(); setspeed(); } [CODE]public void tick() {[/CODE] super.tick(); } [CODE]public void setspeed() {[/CODE] this.speed = 2.5; } [CODE]public void setdamage() {[/CODE] this.damage = 0.25; } [CODE]public double getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public void sethealth() {[/CODE] this.health = 50; } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(double damage) {[/CODE] health -= damage; } } import java.io.serializable; import java.util.arraylist; import java.util.random; [CODE]public class zombiewave implements serializable {[/CODE] private [CODE]int wavenumber = 0;[/CODE] handler handler; arraylist<enemies> zombies = [CODE]new arraylist<>();[/CODE] private [CODE]int waveinterval = 6000;[/CODE] // time between waves (in milliseconds) private [CODE]int spawninterval = 5000;[/CODE] // time between enemy spawns in the wave (in milliseconds) private long lastwavetime = 0; private long lastspawntime = 0; private [CODE]int enemiestospawn = 5;[/CODE] private [CODE]int enemiesspawned = 0;[/CODE] private long currenttime; bufferedimageloader loader = [CODE]new bufferedimageloader();[/CODE] [CODE]public zombiewave(handler handler) {[/CODE] this.handler = handler; } [CODE]public long getcurrenttime() {[/CODE] [CODE]return currenttime;[/CODE] } [CODE]public void tick() {[/CODE] currenttime = system.currenttimemillis(); [CODE]if (currenttime - lastwavetime >= waveinterval) {[/CODE] lastwavetime = currenttime; spawnwave(); handler.score += 5; } [CODE]if (currenttime - lastspawntime >= spawninterval && enemiesspawned < enemiestospawn) {[/CODE] lastspawntime = currenttime; spawnenemy(); } } private [CODE]void spawnwave() {[/CODE] enemiesspawned = 0; wavenumber++; enemiestospawn = wavenumber * 5; system.out.pr[CODE]intln(""new wave spawned: wave "" + wavenumber + "" with "" + enemiestospawn + "" enemies!"");[/CODE] spawninterval = math.max(1500, 2000 - (wavenumber * 100)); // decrease spawn [CODE]interval as waves progress }[/CODE] private [CODE]void spawnenemy() {[/CODE] [CODE]class<?> enemytype = selectrandomzombietype();[/CODE] [CODE]class<?> enemytype1 = selectrandomzombietype1();[/CODE] [CODE]class<?> enemytype2 = selectrandomzombietype2();[/CODE] [CODE]int spawnx, spawny;[/CODE] int coin = new random().next[CODE]int(2);[/CODE] [CODE]if (coin == 0) {[/CODE] spawnx = 8; spawny = 8; } [CODE]else {[/CODE] spawnx = 32; spawny = 32; } enemies [CODE]newenemy = null;[/CODE] [CODE]if (wavenumber <= 2) {[/CODE] newenemy = new normalzombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie movement.png"")), enemytype, this); } [CODE]else if (wavenumber > 2 && wavenumber <= 6) {[/CODE] switch (enemytype1.getsimplename()) { case ""normalzombie"": newenemy = new normalzombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie movement.png"")), enemytype, this); break; case ""acidiczombie"": newenemy = new acidiczombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie.png"")), enemytype, this); break; } } [CODE]else if (wavenumber > 6 && wavenumber <= 9) {[/CODE] switch (enemytype2.getsimplename()) { case ""normalzombie"": newenemy = new normalzombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie movement.png"")), enemytype, this); break; case ""acidiczombie"": newenemy = new acidiczombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie.png"")), enemytype, this); break; case ""reptilezombie"": newenemy = new reptilezombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\reptilezombie.png"")), enemytype, this); break; } } [CODE]else if (wavenumber >= 10) {[/CODE] switch (enemytype.getsimplename()) { case ""normalzombie"": newenemy = new normalzombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie movement.png"")), enemytype, this); break; case ""acidiczombie"": newenemy = new acidiczombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\zombie.png"")), enemytype, this); break; case ""reptilezombie"": newenemy = new reptilezombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\reptilezombie.png"")), enemytype, this); break; case ""tankzombie"": newenemy = new tankzombie(spawnx * 32, spawny * 32, handler, new spritesheet(loader.loadimage(""image\\tankzombie.png"")), enemytype, this); break; } } handler.addchar([CODE]newenemy);[/CODE] enemiesspawned++; } private [CODE]class<?> selectrandomzombietype() {[/CODE] random random = [CODE]new random();[/CODE] int randomchoice = random.next[CODE]int(4);[/CODE] switch (randomchoice) { case 0: return normalzombie.[CODE]class;[/CODE] case 1: return acidiczombie.[CODE]class;[/CODE] case 2: return reptilezombie.[CODE]class;[/CODE] case 3: return tankzombie.[CODE]class;[/CODE] default: return normalzombie.[CODE]class;[/CODE] } } private [CODE]class<?> selectrandomzombietype2() {[/CODE] random random = [CODE]new random();[/CODE] int randomchoice = random.next[CODE]int(3);[/CODE] switch (randomchoice) { case 0: return normalzombie.[CODE]class;[/CODE] case 1: return acidiczombie.[CODE]class;[/CODE] case 2: return reptilezombie.[CODE]class;[/CODE] default: return normalzombie.[CODE]class;[/CODE] } } private [CODE]class<?> selectrandomzombietype1() {[/CODE] random random = [CODE]new random();[/CODE] int randomchoice = random.next[CODE]int(2);[/CODE] switch (randomchoice) { case 0: return normalzombie.[CODE]class;[/CODE] case 1: return acidiczombie.[CODE]class;[/CODE] default: return normalzombie.[CODE]class;[/CODE] } } [CODE]public int getwavenumber() {[/CODE] [CODE]return wavenumber;[/CODE] } [CODE]public int getwaveinterval() {[/CODE] [CODE]return waveinterval;[/CODE] } [CODE]public int getspawninterval() {[/CODE] [CODE]return spawninterval;[/CODE] } [CODE]public long getlastwavetime() {[/CODE] [CODE]return lastwavetime;[/CODE] } [CODE]public long getlastspawntime() {[/CODE] [CODE]return lastspawntime;[/CODE] } [CODE]public int getenemiestospawn() {[/CODE] [CODE]return enemiestospawn;[/CODE] } [CODE]public int getenemiesspawned() {[/CODE] [CODE]return enemiesspawned;[/CODE] } } import java.awt.event.*; [CODE]public class keyinput extends keyadapter {[/CODE] handler handler; // yeni instance oluşturmayıp aynı handleri kullanıyoruz eğer yeni handler // oluşturursak yeni liste oluşturur. private game game; private weapon weapon; [CODE]public keyinput(handler handler, game game, weapon weapon) {[/CODE] this.handler = handler; this.game = game; this.weapon = weapon; } [CODE]public void keypressed(keyevent e) {[/CODE] int key = e.getkeycode(); [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject gamechar = handler.gamec.get(i); if (gamechar.getclass() == player.[CODE]class) {[/CODE] if (key == keyevent.vk_w) { handler.setup(true); } if (key == keyevent.vk_s) { handler.setdown(true); } if (key == keyevent.vk_a) { handler.setleft(true); } if (key == keyevent.vk_d) { handler.setright(true); } } } if (e.getkeycode() == keyevent.vk_p) { handler.togglepause(); if (handler.ispaused()) { game.gamestate = game.state.pausemenu; } else if (!handler.ispaused()) { game.gamestate = game.state.game; } } else if (e.getkeycode() == keyevent.vk_r) { weapon.reload(); } if (e.getkeycode() == keyevent.vk_1) { [CODE]for (int i = 0;[/CODE] i < handler.weapons.size(); i++) { if (handler.weapons.get(i).getcurrentweapon().equals(handgun.[CODE]class)) {[/CODE] weapon.setcurrentweapon(handler.weapons.get(i)); } } } else if (e.getkeycode() == keyevent.vk_2) { [CODE]for (int i = 0;[/CODE] i < handler.weapons.size(); i++) { if (handler.weapons.get(i).getcurrentweapon().equals(rifle.[CODE]class)) {[/CODE] weapon.setcurrentweapon(handler.weapons.get(i)); } } } else if (e.getkeycode() == keyevent.vk_3) { [CODE]for (int i = 0;[/CODE] i < handler.weapons.size(); i++) { if (handler.weapons.get(i).getcurrentweapon().equals(shotgun.[CODE]class)) {[/CODE] weapon.setcurrentweapon(handler.weapons.get(i)); } } } else if (e.getkeycode() == keyevent.vk_4) { [CODE]for (int i = 0;[/CODE] i < handler.weapons.size(); i++) { if (handler.weapons.get(i).getcurrentweapon().equals(sniper.[CODE]class)) {[/CODE] weapon.setcurrentweapon(handler.weapons.get(i)); } } } else if (e.getkeycode() == keyevent.vk_5) { [CODE]for (int i = 0;[/CODE] i < handler.weapons.size(); i++) { if (handler.weapons.get(i).getcurrentweapon().equals(rocketlauncher.[CODE]class)) {[/CODE] weapon.setcurrentweapon(handler.weapons.get(i)); } } } } [CODE]public void keyreleased(keyevent e) {[/CODE] int key = e.getkeycode(); [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject gamechar = handler.gamec.get(i); if (gamechar.getclass() == player.[CODE]class) {[/CODE] if (key == keyevent.vk_w) { handler.setup(false); } if (key == keyevent.vk_s) { handler.setdown(false); } if (key == keyevent.vk_a) { handler.setleft(false); } if (key == keyevent.vk_d) { handler.setright(false); } } } } } import java.awt.graphics; import java.awt.rectangle; import java.awt.image.bufferedimage; [CODE]public class block extends gameobject {[/CODE] private bufferedimage block1 = null; [CODE]public block(int x, int y, spritesheet ss) {[/CODE] super(x, y, ss); block1 = ss.grabimage16(32, 5, 32, 32);// 13 20 32 32 } @override [CODE]public void tick() {[/CODE] } @override [CODE]public void render(graphics graphic) {[/CODE] graphic.drawimage(block1, x, y, null); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 32, 32);[/CODE] } } import java.awt.graphics; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; [CODE]public class enemies extends gameobject {[/CODE] protected bufferedimage enemyimg = null; private double rotationspeed = 2.0; private double direction; zombiewave zombiewave; private game game; handler handler; private [CODE]class<?> type;[/CODE] protected [CODE]int health;[/CODE] protected double damage; protected [CODE]int playerx, playery;[/CODE] protected double speed; [CODE]public double getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(double damage) {[/CODE] health -= damage; } [CODE]public class<?> gettype() {[/CODE] [CODE]return type;[/CODE] } [CODE]public enemies(int x, int y, handler handler, spritesheet ss, class<?> type, zombiewave zombiewave) {[/CODE] super(x, y, ss); this.handler = handler; this.zombiewave = zombiewave; this.type = type; enemyimg = ss.grabimage32(1, 1, 32, 32); } @override [CODE]public void tick() {[/CODE] x += velx; y += vely; [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject tempobject = handler.gamec.get(i); if (tempobject.getclass() == block.[CODE]class) {[/CODE] if (getbounds2().intersects(tempobject.getbounds())) { x += velx * -1; y += vely * -1; } } if (tempobject.getclass() == bullet.[CODE]class) {[/CODE] bullet bullet = (bullet) tempobject; if (getbounds().intersects(tempobject.getbounds())) { health -= 25; [CODE]if (health <= 0) {[/CODE] handler.removechar(this); handler.zombiecounter++; if (this.getclass() == normalzombie.[CODE]class) {[/CODE] if (zombiewave.getwavenumber() >= 1 && !handler.weapons.contains(handler.handgun)) { handler.weapons.add(handler.handgun); } if (zombiewave.getwavenumber() >= 2 && !handler.weapons.contains(handler.r[CODE]ifle)) {[/CODE] handler.weapons.add(handler.r[CODE]ifle);[/CODE] system.out.pr[CODE]intln(""rifle added to inventory!"");[/CODE] } if (handler.zombiecounter % 5 == 0) handler.r[CODE]iflecharger += 2;[/CODE] handler.score += 10; } else if (this.getclass() == acidiczombie.class || this.getclass() == reptilezombie.[CODE]class) {[/CODE] if (zombiewave.getwavenumber() >= 4 && !handler.weapons.contains(handler.shotgun)) { handler.weapons.add(handler.shotgun); system.out.pr[CODE]intln(""shotgun added to inventory!"");[/CODE] } if (handler.zombiecounter % 5 == 0) handler.r[CODE]iflecharger += 2;[/CODE] if (zombiewave.getwavenumber() >= 6 && !handler.weapons.contains(handler.sniper)) { handler.weapons.add(handler.sniper); system.out.pr[CODE]intln(""sniper added to inventory!"");[/CODE] } if (handler.zombiecounter % 9 == 0) handler.snipercharger += 2; handler.score += 5; } else if (this.getclass() == tankzombie.[CODE]class) {[/CODE] if (zombiewave.getwavenumber() >= 11 && !handler.weapons.contains(handler.rocketlauncher)) { handler.weapons.add(handler.rocketlauncher); system.out.pr[CODE]intln(""rocketlauncher added to inventory!"");[/CODE] } if (handler.zombiecounter % 11 == 0) handler.rocketcharger += 2; handler.score += 15; } } if (!bullet.ispasser()) { handler.removechar(bullet); } } } [CODE]if (tempobject instanceof enemies) {[/CODE] if (getbounds2().intersects(tempobject.getbounds())) { velx += (velx * 2) * -1; vely += (vely * 2) * -1; } } if (tempobject.getclass() == player.[CODE]class) {[/CODE] if (getbounds2().intersects(tempobject.getbounds())) { if (this.getclass() == acidiczombie.[CODE]class) {[/CODE] acidiczombie ac = (acidiczombie) this; damage = ac.getdamage(); } } else if (getbounds().intersects(tempobject.getbounds())) { switch (this.gettype().getsimplename()) { case ""normalzombie"": normalzombie normzomb = (normalzombie) this; damage = normzomb.getdamage(); break; case ""acidiczombie"": acidiczombie acidzomb = (acidiczombie) this; damage = acidzomb.getdamage(); break; case ""reptilezombie"": reptilezombie repzomb = (reptilezombie) this; damage = repzomb.getdamage(); break; case ""tankzombie"": tankzombie tankzomb = (tankzombie) this; damage = tankzomb.getdamage(); break; default: damage = 0.25; break; } } } } [CODE]for ( int i = 0;[/CODE] i < handler.gamec.size(); i++) { if (handler.gamec.get(i).getclass() == player.[CODE]class) {[/CODE] playerx = handler.gamec.get(i).getx(); playery = handler.gamec.get(i).gety(); } } [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject temp = handler.gamec.get(i); if (temp.getclass() == player.[CODE]class) {[/CODE] player player = (player) temp; if (this.getclass() == reptilezombie.[CODE]class) {[/CODE] if (getbounds().intersects(player.getbounds2())) { this.x = playerx; this.y = playery; } } } } [CODE]int dx = playerx - x;[/CODE] [CODE]int dy = playery - y;[/CODE] double angle = math.atan2(dy, dx); velx = (int) (speed * math.cos(angle)); vely = (int) (speed * math.sin(angle)); x += velx; y += vely; double targetdirection = math.atan2(playery - (y + 24), playerx - (x + 24)); double angled[CODE]ifference = targetdirection - direction;[/CODE] if (angledifference > math.pi) angledifference -= 2 * math.pi; if (angledifference < -math.pi) angledifference += 2 * math.pi; if (math.abs(angled[CODE]ifference) > rotationspeed) {[/CODE] direction += rotationspeed * math.signum(angled[CODE]ifference);[/CODE] } [CODE]else {[/CODE] direction = targetdirection; } } @override [CODE]public void render(graphics graphic) {[/CODE] graphics2d g2d = (graphics2d) graphic; g2d.rotate(direction, x + 24, y + 24); g2d.drawimage(enemyimg, x, y, null); g2d.rotate(-direction, x + 24, y + 24); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 32, 32);[/CODE] } [CODE]public rectangle getbounds2() {[/CODE] [CODE]return new rectangle(x - 16, y - 16, 64, 64);[/CODE] } } import java.awt.color; import java.awt.graphics; import java.awt.rectangle; [CODE]public class rocket extends gameobject {[/CODE] private double angle; private boolean isexploded = false; private [CODE]int explosionradius = 50;[/CODE] handler handler; [CODE]public rocket(int x, int y, handler handler, int targetx, int targety, spritesheet ss) {[/CODE] super(x, y, ss); this.handler = handler; double disx = targetx - x; double disy = targety - y; double distance = math.sqrt(disx * disx + disy * disy); this.angle = math.atan2(disy, disx); // velocity of the rocket velx = (float) ((disx / distance) * 5.0); // adjust velocity as needed vely = (float) ((disy / distance) * 5.0); } @override [CODE]public void tick() {[/CODE] [CODE]if (!isexploded) {[/CODE] x += velx; y += vely; // check [CODE]for collision with blocks or other objects for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject tempobject = handler.gamec.get(i); if (tempobject.getclass() == block.class || tempobject.getclass() == enemies.[CODE]class) {[/CODE] // if the rocket hits a block or an enemy, trigger the explosion if (getbounds().intersects(tempobject.getbounds())) { triggerexplosion(); handler.removechar(this); // remove rocket after explosion break; } } } } } private [CODE]void triggerexplosion() {[/CODE] // explosion effect: damage enemies in the explosion radius [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject tempobject = handler.gamec.get(i); [CODE]if (tempobject instanceof enemies) {[/CODE] enemies enemy = (enemies) tempobject; // calculate the distance between the explosion and the enemy double distance = math.sqrt(math.pow(enemy.getx() - x, 2) + math.pow(enemy.gety() - y, 2)); // [CODE]if the enemy is within the explosion radius, apply damage if (distance <= explosionradius) {[/CODE] enemy.sethealth(100); // adjust damage as needed } } } // mark the rocket as exploded isexploded = true; } @override [CODE]public void render(graphics graphic) {[/CODE] graphic.setcolor(color.red); graphic.filloval(x, y, 10, 10); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 10, 10);[/CODE] } } [CODE]public class handgun extends weapon {[/CODE] [CODE]public static final int ammo = 12;[/CODE] [CODE]public static final double speedrate = 120;[/CODE] [CODE]public static final int wavenumber = 1;[/CODE] private double lastfiredtime = 0; handler handler; [CODE]public handgun() {[/CODE] super(handgun.[CODE]class, ammo, speedrate, wavenumber);[/CODE] } [CODE]public void fire(int mousex, int mousey, int playerx, int playery, handler handler, spritesheet ss, long currenttime) {[/CODE] [CODE]if (currenttime - lastfiredtime >= 1000 / speedrate) {[/CODE] bullet bullet = [CODE]new bullet(playerx + 16, playery + 16, handler, mousex, mousey, ss);[/CODE] handler.addchar(bullet); lastfiredtime = currenttime; } } } [CODE]public class acidiczombie extends enemies {[/CODE] [CODE]public acidiczombie(int x, int y, handler handler, spritesheet ss, class<?> type, zombiewave zombiewave) {[/CODE] super(x, y, handler, ss, type, zombiewave); sethealth(); setdamage(); setspeed(); } [CODE]public void tick() {[/CODE] super.tick(); } [CODE]public void setspeed() {[/CODE] this.speed = 2.5; } [CODE]public void setdamage() {[/CODE] this.damage = 0.5; } [CODE]public double getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public void sethealth() {[/CODE] this.health = 25; } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(double damage) {[/CODE] health -= damage; } } import java.util.arraylist; import java.util.linkedlist; import java.awt.*; import java.io.serializable; [CODE]public class handler implements serializable {[/CODE] private boolean up = false, down = false, left = false, right = false, ispaused = false; [CODE]int score;[/CODE] linkedlist<gameobject> gamec = [CODE]new linkedlist<gameobject>();[/CODE] arraylist<weapon> weapons = [CODE]new arraylist<>();[/CODE] weapon handgun = [CODE]new handgun();[/CODE] weapon r[CODE]ifle = new rifle();[/CODE] weapon shotgun = [CODE]new shotgun();[/CODE] weapon sniper = [CODE]new sniper();[/CODE] weapon rocketlauncher = [CODE]new rocketlauncher();[/CODE] [CODE]int zombiecounter;[/CODE] [CODE]int riflecharger = 1;[/CODE] [CODE]int shotguncharger = 1;[/CODE] [CODE]int snipercharger = 1;[/CODE] [CODE]int rocketcharger = 1;[/CODE] [CODE]public void tick() {[/CODE] [CODE]for (int i = 0;[/CODE] i < gamec.size(); i++) { gameobject tempchar = gamec.get(i); tempchar.tick(); } } [CODE]public boolean ispaused() {[/CODE] [CODE]return ispaused;[/CODE] } [CODE]public void togglepause() {[/CODE] ispaused = !ispaused; } [CODE]public boolean isup() {[/CODE] [CODE]return up;[/CODE] } [CODE]public void setup(boolean up) {[/CODE] this.up = up; } [CODE]public boolean isdown() {[/CODE] [CODE]return down;[/CODE] } [CODE]public void setdown(boolean down) {[/CODE] this.down = down; } [CODE]public boolean isleft() {[/CODE] [CODE]return left;[/CODE] } [CODE]public void setleft(boolean left) {[/CODE] this.left = left; } [CODE]public boolean isright() {[/CODE] [CODE]return right;[/CODE] } [CODE]public void setright(boolean right) {[/CODE] this.right = right; } [CODE]public void render(graphics graphic) {[/CODE] [CODE]for (int i = 0;[/CODE] i < gamec.size(); i++) { gameobject tempchar = gamec.get(i); tempchar.render(graphic); } } [CODE]public void addchar(gameobject gamechar) {[/CODE] gamec.add(gamechar); } [CODE]public void removechar(gameobject gamechar) {[/CODE] gamec.remove(gamechar); } [CODE]public boolean contains(weapon weapon) {[/CODE] [CODE]for (int i = 0;[/CODE] i < weapons.size(); i++) { weapon temp = weapons.get(i); if (temp.getclass() == weapon.get[CODE]class()) {[/CODE] [CODE]return true;[/CODE] } } [CODE]return false;[/CODE] } } import java.util.random; [CODE]public class rifle extends weapon {[/CODE] [CODE]public static final int ammo = 30;[/CODE] [CODE]public static final double speedrate = 600;[/CODE] [CODE]public static final int wavenumber = 2;[/CODE] private static final double angleadj = math.toradians(30); private double lastfiredtime = 0; handler handler; [CODE]public rifle() {[/CODE] super(rifle.[CODE]class, ammo, speedrate, wavenumber);[/CODE] } [CODE]public void reload() {[/CODE] if (handler.r[CODE]iflecharger > 0) {[/CODE] [CODE]if (currentammo != ammo) {[/CODE] currentammo = ammo; } } [CODE]else {[/CODE] system.out.pr[CODE]intln(""no charger left!!!"");[/CODE] } } [CODE]public void fire(int mousex, int mousey, int playerx, int playery, handler handler, spritesheet ss, long currenttime) {[/CODE] [CODE]if (currenttime - lastfiredtime >= 1000 / speedrate) {[/CODE] bullet bullet1 = [CODE]new bullet(playerx + 16, playery + 16, handler, mousex, mousey, ss);[/CODE] bullet bullet2 = [CODE]new bullet(playerx + 16, playery + 16, handler, mousex, mousey, ss);[/CODE] bullet1.setspeedx((float) (+getrandomdeviation())); bullet1.setspeedy((float) (+getrandomdeviation())); bullet2.setspeedx((float) (-getrandomdeviation())); bullet2.setspeedy((float) (-getrandomdeviation())); handler.addchar(bullet1); handler.addchar(bullet2); lastfiredtime = currenttime; } } private double getrandomdeviation() { random rand = [CODE]new random();[/CODE] return rand.nextdouble() * angleadj * 2 - angleadj; // random value between -angleadj and +angleadj } } [CODE]public class tankzombie extends enemies {[/CODE] [CODE]public tankzombie(int x, int y, handler handler, spritesheet ss, class<?> type, zombiewave zombiewave) {[/CODE] super(x, y, handler, ss, type, zombiewave); sethealth(); setdamage(); setspeed(); } [CODE]public void tick() {[/CODE] super.tick(); } [CODE]public void setspeed() {[/CODE] this.speed = 2.0; } [CODE]public void setdamage() {[/CODE] this.damage = 0.5; } [CODE]public double getdamage() {[/CODE] [CODE]return damage;[/CODE] } [CODE]public void sethealth() {[/CODE] this.health = 85; } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth(double damage) {[/CODE] health -= damage; } } import java.io.fileoutputstream; import java.io.objectoutputstream; [CODE]public class savemanager {[/CODE] [CODE]public static void savegame(game game, string filename) {[/CODE] objectoutputstream outst; [CODE]try {[/CODE] outst = [CODE]new objectoutputstream(new fileoutputstream(filename));[/CODE] outst.writeobject(game); outst.close(); } [CODE]catch (exception e) {[/CODE] system.err.println(e.getmessage()); } } } import java.awt.image.*; import java.io.ioexception; import javax.imageio.imageio; [CODE]public class bufferedimageloader {[/CODE] private bufferedimage image; [CODE]public bufferedimage loadimage(string path) {[/CODE] [CODE]try {[/CODE] image = imageio.read(getclass().getresource(path)); } [CODE]catch (ioexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } [CODE]return image;[/CODE] } } import java.awt.color; import java.awt.font; import java.awt.graphics; import java.awt.event.mouseadapter; import java.awt.event.mouseevent; [CODE]public class gameover extends mouseadapter {[/CODE] private game game; private handler handler; [CODE]public gameover(game game, handler handler) {[/CODE] this.game = game; this.handler = handler; } [CODE]public void mousepressed(mouseevent e) {[/CODE] int mx = e.getx(); int my = e.gety(); [CODE]if (mouseover(mx, my, 375, 200, 255, 63)) {[/CODE] if (game.gamestate == game.state.gameover) system.exit(0); } } [CODE]public void mousereleased(mouseevent e) {[/CODE] } private boolean mouseover([CODE]int mx, int my, int x, int y, int width, int height) {[/CODE] [CODE]if (mx > x && mx < x + width) {[/CODE] [CODE]if (my > y && my < y + height) {[/CODE] [CODE]return true;[/CODE] } [CODE]else {[/CODE] [CODE]return false;[/CODE] } } [CODE]else {[/CODE] [CODE]return false;[/CODE] } } [CODE]public void tick() {[/CODE] } [CODE]public void render(graphics g) {[/CODE] font f = [CODE]new font(""arial"", 1, 40);[/CODE] g.setfont(f); g.setcolor(color.red); g.draw[CODE]string(""game over"", 380, 250);[/CODE] g.drawrect(375, 200, 255, 63); font ft = [CODE]new font(""arial"", 1, 12);[/CODE] g.setfont(ft); g.setcolor(color.dark_gray); g.draw[CODE]string(""enter to exit"", 465, 290);[/CODE] g.drawstring(""score : "" + handler.score, 470, 180); } } import java.awt.canvas; import java.awt.color; import java.awt.*; import java.awt.font; import java.awt.graphics; import java.awt.graphics2d; import java.awt.graphics2d.*; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.awt.image.bufferstrategy; import java.awt.image.bufferedimage; [CODE]public class game extends canvas implements runnable {[/CODE] private boolean isrunning = false; private thread thread; private handler handler; private zombiewave zombiewave; private weapon weapon; affinetrans[CODE]form transform;[/CODE] private bufferedimage spritesheet = null; private bufferedimage spritesheet2 = null; private bufferedimage spritesheet3 = null; private bufferedimage spritesheet4 = null; private bufferedimage img = null; private bufferedimage background = null; private camera camera; private spritesheet ss; private spritesheet ss2; private spritesheet ss3; private spritesheet ss4; private player player; private menu menu; private gameover gameover; private pausemenu pausemenu; [CODE]public enum state {[/CODE] menu, game, gameover, pausemenu }; public state gamestate = state.menu; [CODE]public spritesheet getss3() {[/CODE] [CODE]return ss3;[/CODE] } [CODE]public game() {[/CODE] [CODE]new window(1000, 563, ""top down shooter"", this);[/CODE] start(); synchronized (this) { handler = [CODE]new handler();[/CODE] zombiewave = [CODE]new zombiewave(handler);[/CODE] camera = [CODE]new camera(0, 0);[/CODE] menu = [CODE]new menu(this, handler);[/CODE] gameover = [CODE]new gameover(this, handler);[/CODE] pausemenu = [CODE]new pausemenu(this, handler);[/CODE] weapon = [CODE]new handgun();[/CODE] } this.addkeylistener([CODE]new keyinput(handler, this, weapon));[/CODE] bufferedimageloader loader = [CODE]new bufferedimageloader();[/CODE] img = loader.loadimage(""image\\pixil-frame-0.png""); spritesheet = loader.loadimage(""image\\apocalypse.png""); ss = [CODE]new spritesheet(spritesheet);[/CODE] spritesheet2 = loader.loadimage(""image\\tileset-grassland-grass.png""); ss2 = [CODE]new spritesheet(spritesheet2);[/CODE] spritesheet3 = loader.loadimage(""image\\zombie movement.png""); ss3 = [CODE]new spritesheet(spritesheet3);[/CODE] spritesheet4 = loader.loadimage(""image\\ekran görüntüsü (4).png""); ss4 = [CODE]new spritesheet(spritesheet4);[/CODE] background = ss2.grabimage160(1, 1, 160, 160); this.addmouselistener(menu); this.addmouselistener(gameover); this.addmouselistener(pausemenu); this.addmouselistener([CODE]new mouseinput(handler, camera, weapon, zombiewave, ss));[/CODE] this.addmousemotionlistener([CODE]new mouseinput(handler, camera, weapon, zombiewave, ss));[/CODE] loading(img); if (gamestate == state.game) { zombiewave = [CODE]new zombiewave(handler);[/CODE] } } private [CODE]void start() {[/CODE] isrunning = true; thread = [CODE]new thread(this);[/CODE]// by mean this, it is this classes run method thread.start(); } private [CODE]void stop() {[/CODE] isrunning = false; [CODE]try {[/CODE] thread.join(); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } [CODE]public void savegame() {[/CODE] savemanager.savegame(this, ""savegame.dat""); } [CODE]public void loadgame() {[/CODE] game loadedgame = loadmanager.loadgame(""savegame.dat""); [CODE]if (loadedgame != null) {[/CODE] this.player = loadedgame.player; this.handler = loadedgame.handler; this.gamestate = loadedgame.gamestate; this.weapon = loadedgame.weapon; this.zombiewave = loadedgame.zombiewave; } } [CODE]public synchronized void tick() {[/CODE] if (!handler.ispaused()) { [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { if (handler.gamec.get(i).getclass() == player.[CODE]class) {[/CODE] camera.tick(handler.gamec.get(i)); } } handler.tick(); if (gamestate == state.game) { zombiewave.tick(); } else if (gamestate == state.menu) { [CODE]if (menu != null) {[/CODE] menu.tick(); } [CODE]else {[/CODE] system.out.pr[CODE]intln(""menu is null in tick()"");[/CODE] } } else if (gamestate == state.gameover) { gameover.tick(); } } [CODE]else {[/CODE] pausemenu.tick(); } } [CODE]public void render() {[/CODE] bufferstrategy buffers = this.getbufferstrategy();// when it created it becames null [CODE]if (buffers == null) {[/CODE] this.createbufferstrategy(3);// its creates buffers with 3 arguments, number of frames that loaded [CODE]if we // make it 30 it will slows our game return;[/CODE] } graphics graphic = buffers.getdrawgraphics(); graphics2d g2d = (graphics2d) graphic; if (!handler.ispaused()) { ////////////////////////////////////////////////// g2d.translate(-camera.getx(), -camera.gety()); [CODE]for (int xx = 0;[/CODE] xx < 30 * 72; xx += 160) { [CODE]for (int yy = 0;[/CODE] yy < 30 * 72; yy += 160) { graphic.drawimage(background, xx, yy, null); } } handler.render(graphic); g2d.translate(camera.getx(), camera.gety()); if (gamestate == state.game) { font f = [CODE]new font(""arial"", 1, 9);[/CODE] graphic.setfont(f); graphic.drawstring(""ammo : "" + weapon.getcurrentammo(), 10, 30); graphic.drawstring(""current weapon : "" + weapon.getcurrentweapon().getsimplename(), 10, 50); graphic.drawstring(""score : "" + handler.score, 905, 30); graphic.drawstring(""health : "" + player.gethealth(), 905, 50); } else if (gamestate == state.menu) { menu.render(graphic); } else if (gamestate == state.gameover) { gameover.render(graphic); } //////////////////////////////////////////////// } [CODE]else {[/CODE] pausemenu.render(graphic); } graphic.dispose(); buffers.show(); } private [CODE]void loading(bufferedimage image) {[/CODE] int w = image.getwidth(); int h = image.getheight(); [CODE]for (int xx = 0;[/CODE] xx < w; xx++) { [CODE]for (int yy = 0;[/CODE] yy < h; yy++) { int pixel = image.getrgb(xx, yy); [CODE]int red = (pixel >> 16) & 0xff;[/CODE] [CODE]int green = (pixel >> 8) & 0xff;[/CODE] [CODE]int blue = (pixel) & 0xff;[/CODE] [CODE]if (red == 255 && blue == 0 && green == 0) {[/CODE] handler.addchar([CODE]new block(xx * 32, yy * 32, ss));[/CODE] } [CODE]if (blue == 255 && red == 0 && green == 0) {[/CODE] player = [CODE]new player(xx * 32, yy * 32, handler, ss4, this);[/CODE] handler.addchar(player); } } } } @override [CODE]public void run() {[/CODE] this.requestfocus(); long lasttime = system.nanotime(); double amountofticks = 60.0; double ns = 1000000000 / amountofticks; double delta = 0; long timer = system.currenttimemillis(); [CODE]int frames = 0;[/CODE] [CODE]while (isrunning) {[/CODE] long now = system.nanotime(); delta += (now - lasttime) / ns; lasttime = now; [CODE]while (delta >= 1) {[/CODE] tick(); delta--; } render(); frames++; if (system.currenttimemillis() - timer > 1000) { timer += 1000; frames = 0; } } stop(); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new game();[/CODE] } } import java.awt.event.mouseadapter; import java.awt.event.mouseevent; [CODE]public class mouseinput extends mouseadapter {[/CODE] private handler handler; private camera camera; private weapon weapon; private spritesheet ss; [CODE]public static float x, y;[/CODE] private zombiewave zombiewave; [CODE]public mouseinput(handler handler, camera camera, weapon weapon, zombiewave zombiewave, spritesheet ss) {[/CODE] this.handler = handler; this.camera = camera; this.weapon = weapon; this.ss = ss; this.zombiewave = zombiewave; } [CODE]public void mousemoved(mouseevent e) {[/CODE] // update mouse position when moved x = e.getx() + camera.getx(); y = e.gety() + camera.gety(); } [CODE]public void mousepressed(mouseevent e) {[/CODE] int mx = (int) (e.getx() + camera.getx()); int my = (int) (e.gety() + camera.gety()); [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject tempobject = handler.gamec.get(i); if (tempobject.getclass() == player.[CODE]class) {[/CODE] // handler.addchar(new bullet(tempobject.getx() + 16, tempobject.gety() + 24, // handler, mx, my, ss)); weapon.getcurrweapon().fire(mx, my, tempobject.getx(), tempobject.gety(), handler, ss, zombiewave.getcurrenttime()); weapon.setcurrentammo(1); } if (weapon.getcurrentammo() <= 0) break; } } } [CODE]public class camera {[/CODE] private float x, y; [CODE]public camera(float x, float y) {[/CODE] this.x = x; this.y = y; } [CODE]public void tick(gameobject gameobject) {[/CODE] x += ((gameobject.getx() - x) - 1000 / 2) * 0.05f; y += ((gameobject.gety() - y) - 563 / 2) * 0.05f; [CODE]if (x <= 0) x = 0;[/CODE] [CODE]if (x >= 1032) x = 1032;[/CODE] [CODE]if (y <= 0) y = 0;[/CODE] [CODE]if (y >= 611) y = 611;[/CODE] } [CODE]public float getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public void setx(float x) {[/CODE] this.x = x; } [CODE]public float gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public void sety(float y) {[/CODE] this.y = y; } } import java.awt.image.*; [CODE]public class spritesheet {[/CODE] private bufferedimage img; [CODE]public spritesheet(bufferedimage img) {[/CODE] this.img = img; } [CODE]public bufferedimage grabimage16(int col, int row, int width, int height) {[/CODE] return img.getsubimage((col * 16) - 16, (row * 16) - 16, width, height); } [CODE]public bufferedimage grabimage32(int col, int row, int width, int height) {[/CODE] return img.getsubimage((col * 32) - 32, (row * 32) - 32, width, height); } [CODE]public bufferedimage grabimage48(int col, int row, int width, int height) {[/CODE] return img.getsubimage((col * 48) - 48, (row * 48) - 48, width, height); } [CODE]public bufferedimage grabimage160(int col, int row, int width, int height) {[/CODE] return img.getsubimage((col * 160) - 160, (row * 160) - 160, width, height); } } [CODE]public class rocketlauncher extends weapon {[/CODE] [CODE]public static final int ammo = 1;[/CODE] [CODE]public static final double speedrate = 10;[/CODE] [CODE]public static final int wavenumber = 11;[/CODE] handler handler; [CODE]public rocketlauncher() {[/CODE] super(rocketlauncher.[CODE]class, ammo, speedrate, wavenumber);[/CODE] } [CODE]public void reload() {[/CODE] if (handler.rocketcharger > 0) { [CODE]if (currentammo != ammo) {[/CODE] currentammo = ammo; } } [CODE]else {[/CODE] system.out.pr[CODE]intln(""no charger left!!!"");[/CODE] } } [CODE]public void fire(int x, int y, int targetx, int targety, spritesheet ss) {[/CODE] rocket rocket = [CODE]new rocket(x, y, handler, targetx, targety, ss);[/CODE] handler.addchar(rocket); } } import java.io.fileinputstream; import java.io.objectinputstream; [CODE]public class loadmanager {[/CODE] [CODE]public static game loadgame(string filename) {[/CODE] game game = null; objectinputstream inst; [CODE]try {[/CODE] inst = [CODE]new objectinputstream(new fileinputstream(filename));[/CODE] game = (game) inst.readobject(); inst.close(); } [CODE]catch (exception e) {[/CODE] system.err.println(e.getmessage()); } [CODE]return game;[/CODE] } } import javax.swing.*; import java.awt.*; [CODE]public class window {[/CODE] [CODE]public window(int width, int height, string title, game game) {[/CODE] jframe window = [CODE]new jframe(title);[/CODE] window.setpreferredsize([CODE]new dimension(width, height));[/CODE] window.setmaximumsize([CODE]new dimension(width, height));[/CODE] window.setminimumsize([CODE]new dimension(width, height));[/CODE] window.add(game); window.setresizable(false); window.setlocationrelativeto(null); window.setdefaultcloseoperation(jframe.exit_on_close); window.setvisible(true); } } import java.awt.graphics; import java.awt.graphics2d; import java.awt.rectangle; import java.awt.image.bufferedimage; [CODE]public class player extends gameobject {[/CODE] handler handler; private game game; private bufferedimage playerimg = null; private [CODE]int health;[/CODE] private double direction; private double rotationspeed = 0.2; private double targetdirection; [CODE]public player(int x, int y, handler handler, spritesheet ss, game game) {[/CODE] super(x, y, ss); this.handler = handler; sethealth(); playerimg = ss.grabimage48(1, 1, 48, 48); this.game = game; } [CODE]public int gethealth() {[/CODE] [CODE]return health;[/CODE] } [CODE]public void sethealth() {[/CODE] this.health = 200; } [CODE]public void sethealth(double damage) {[/CODE] health -= damage; } @override [CODE]public void tick() {[/CODE] x += velx; y += vely; collision(); if (handler.isup()) { vely = -5; } else if (!handler.isdown()) { vely = 0; } if (handler.isdown()) { vely = 5; } else if (!handler.isup()) { vely = 0; } if (handler.isright()) { velx = 5; } else if (!handler.isleft()) { velx = 0; } if (handler.isleft()) { velx = -5; } else if (!handler.isright()) { velx = 0; } double mousex = mouseinput.x; double mousey = mouseinput.y; targetdirection = math.atan2(mousey - (y + 24), mousex - (x + 24)); double angled[CODE]ifference = targetdirection - direction;[/CODE] if (angledifference > math.pi) angledifference -= 2 * math.pi; if (angledifference < -math.pi) angledifference += 2 * math.pi; if (math.abs(angled[CODE]ifference) > rotationspeed) {[/CODE] direction += rotationspeed * math.signum(angled[CODE]ifference);[/CODE] } [CODE]else {[/CODE] direction = targetdirection; } } private [CODE]void collision() {[/CODE] [CODE]for (int i = 0;[/CODE] i < handler.gamec.size(); i++) { gameobject tempobject = handler.gamec.get(i); if (tempobject.getclass() == block.[CODE]class) {[/CODE] if (getbounds().intersects(tempobject.getbounds())) { x += velx * -1; y += vely * -1; } } [CODE]else if (tempobject instanceof enemies) {[/CODE] if (getbounds().intersects(tempobject.getbounds())) { velx += (velx * 2) * -1; vely += (vely * 2) * -1; enemies enemy = (enemies) tempobject; double damage = enemy.getdamage(); system.out.println( ""player collided with "" + enemy.getclass().getsimplename() + "" - damage: "" + damage); health -= damage; [CODE]if (health <= 0) {[/CODE] handler.removechar(this); game.gamestate = game.state.gameover; } } } } } @override [CODE]public void render(graphics graphic) {[/CODE] graphics2d g2d = (graphics2d) graphic; g2d.rotate(direction, x + 24, y + 24); g2d.drawimage(playerimg, x, y, null); g2d.rotate(-direction, x + 24, y + 24); } @override [CODE]public rectangle getbounds() {[/CODE] [CODE]return new rectangle(x, y, 48, 48);[/CODE] } [CODE]public rectangle getbounds2() {[/CODE] [CODE]return new rectangle(x - 16, y - 16, 96, 96);[/CODE] } } import java.awt.graphics; import java.awt.rectangle; import java.awt.geom.affinetrans[CODE]form;[/CODE] import java.io.serializable; [CODE]public abstract class gameobject implements serializable {[/CODE] protected [CODE]int x;[/CODE] protected [CODE]int y;[/CODE] protected float velx = 0; protected float vely = 0; protected spritesheet ss; protected affinetrans[CODE]form transform;[/CODE] [CODE]public gameobject(int x, int y, spritesheet ss) {[/CODE] this.x = x; this.y = y; this.ss = ss; } [CODE]public int getx() {[/CODE] [CODE]return x;[/CODE] } [CODE]public void setx(int x) {[/CODE] this.x = x; } [CODE]public int gety() {[/CODE] [CODE]return y;[/CODE] } [CODE]public void sety(int y) {[/CODE] this.y = y; } [CODE]public float getspeedx() {[/CODE] [CODE]return velx;[/CODE] } [CODE]public void setspeedx(float speedx) {[/CODE] this.velx += speedx; } [CODE]public float getspeedy() {[/CODE] [CODE]return vely;[/CODE] } [CODE]public void setspeedy(float speedy) {[/CODE] this.vely += speedy; } [CODE]public abstract void tick();[/CODE] [CODE]public abstract void render(graphics graphic);[/CODE] [CODE]public abstract rectangle getbounds();[/CODE] }"
6914659,"recursion 1) collatz problemi. bu kısımda amacımız bize verilen bir pozitif tam sayının collatz kuralları uygulanarak kaç adım sonra 1 olacağını hesaplamaktır . kurallar şu şekildedir: eğer sayı çift ise 2’ye bölünür eğer sayı tek ise 3 ile çarpılıp 1 eklenir . örneğin 5 -> 16 -> 8 -> 4 -> 2 -> 1 5 adım sürdüğü için cevap 5 inputu için 5’tir. bu işlemi yapan recursive metodu yazmanız gerekmektedir . bu metodun imzası public static int collatz(int i) olmalıdır . ancak yardımcı metotlar kullanabilirsiniz. burada girdinin sadece pozitif tam sayı olduğunu varsayabilirsiniz. 2) cocktail shaker sort bu kısımda sizden cocktail shaker sort implement etmeniz bekleniyor . cocktail shaker sort bubble sort’un bir yukarıdan bir aşağıdan baloncuk gönderilmesi ile yapılan sıralama işlemidir . bu sıralamayı recursive olarak yapmalısınız. imzası public static void cocktailsort(int[] arr) olmalıdır . yardımcı metotlar kullanmalısınız. örneğin girdi 5 4 1 2 olsun. ilk önce 5 < 4 değil 4 5 1 2 sonra 5 < 1 değil 4 1 5 2 5 < 2 değil 4 1 2 5 sonra recursive call ile bir sonraki kısma geçilecek. 1 < 2 işlem yapılmayacak. 4 < 1 değil 1 4 2 5 ve son iterasyonda sağdan soldan sağa doğru ilerleyip 4 < 2 değil 1 2 4 5 ile sıralı hale gelecek. eğer sınırları tutmak istemez iseniz direk her aşamada tüm arrayin üstünden de geçebilirsiniz. 3) bu kısımda bir stringdeki “1” leri sayan bir sınıf yazacaksınız. bu sınıf constructor da stringi alacak. public int say() metodu ile recursive şekilde bu stringdeki 1 değerlerini sayacak(helper metot kullanılması lazım). bu class objesi oluşturularak çalıştırılacak ve birden fazla string için birden fazla obje oluşturulacaktır . çalıştırma örneği: sayac s1 = [CODE]new sayac(“10001”);[/CODE] sayac s2 = [CODE]new sayac(“1 111”);[/CODE] system.out.println(s1.say()); // 2 basacak. [CODE]public class cocktailshaker{[/CODE] [CODE]public static void cocktailsort(int[] array2){[/CODE] csrec(array2, 0, array2.length - 1); } [CODE]public static void csrec(int[] array1, int ilk, int son){[/CODE] [CODE]if (ilk >= son) //base case return;[/CODE] boolean degistir = false; [CODE]for (int i=ilk ;[/CODE] i<son ; i++){//soldan sağa doğru kontrol ediyorum [CODE]if (array1[i] > array1[i+1]){[/CODE] //buradaki durum 5,4 durumu. bunu 4,5 yapmaya çalışıyorum yer_degistirme(array1, i, i+1); //soldaki ile sağdakinin yerini değiştirdim degistir = true; //değiştirme işleminin yapıldığını göstermek için } } [CODE]if (!degistir){[/CODE] //değiştirme işleminin yani yer_degistirme metodunun kullanılıp kullanılmadığını kontrol ediyorum /* eğer değiştirme işlemi yapılsaydı ""degistir"" değeri true olacaktı ve bu blok false olacağı için çalışmazdı değiştirme işlemi yapılmazsa ""degistir"" değeri false olarak kalacağı için blok true olur ve çalışır. */ [CODE]return;[/CODE] } degistir = false; [CODE]for (int i = son-1 ;[/CODE] i>ilk ; i--){//sağdan sola doğru kontrol ediyorum [CODE]if (array1[i-1] > array1[i]){[/CODE] yer_degistirme(array1, i-1, i);//sağdaki ile soldakinin yerini değiştirdim degistir = true; //değiştirme işleminin yapıldığını göstermek için } } csrec(array1, ilk+1, son-1);//arrayın ilk elemanı ile son elemanını attım } [CODE]public static void yer_degistirme(int[] arr, int a, int b){[/CODE] [CODE]int temp = arr[a];[/CODE] arr[a] = arr[b]; arr[b] = temp; } [CODE]public static void main(string[] args){[/CODE] [CODE]int[] array3 = {[/CODE]5, 4, 1, 2}; cocktailsort(array3); [CODE]for (int a: array3){[/CODE] system.out.pr[CODE]int(a + "" "");[/CODE] } } } [CODE]public class collatz{[/CODE] [CODE]public static int collatz(int i){[/CODE] [CODE]int sum = i;[/CODE] [CODE]if(i == 1) //base case return 0;[/CODE] [CODE]if(i % 2 == 0){[/CODE] //ç[CODE]iftse ikiye böl sum /= 2;[/CODE] [CODE]return 1 + collatz(sum);[/CODE] } [CODE]else{[/CODE] //tekse 3 ile çarp 1 ekle sum = (sum*3)+1; [CODE]return 1 + collatz(sum);[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] system.out.pr[CODE]intln(collatz(5));[/CODE] } } [CODE]public class sayacwithhelpermethod {[/CODE] [CODE]string str;[/CODE] [CODE]public sayacwithhelpermethod(string str){[/CODE] this.str = str; } [CODE]public int helper(string str) {[/CODE] [CODE]int currentcount = 0;[/CODE] if(str.length() == 0) //base case [CODE]return 0;[/CODE] if(str.charat(0)=='1') return 1+helper(str.sub[CODE]string(1));[/CODE] return currentcount + helper(str.sub[CODE]string(1));[/CODE] } [CODE]public int say(){[/CODE] if(str.length() == 0) [CODE]return 0;[/CODE] if(str.charat(0)=='1'){ str = str.sub[CODE]string(1);[/CODE] [CODE]return 1 + say();[/CODE] } [CODE]else{[/CODE] str = str.sub[CODE]string(1);[/CODE] [CODE]return say();[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] sayacwithhelpermethod s1 = [CODE]new sayacwithhelpermethod(""10001"");[/CODE] sayacwithhelpermethod s2 = [CODE]new sayacwithhelpermethod(""1111"");[/CODE] sayacwithhelpermethod s3 = [CODE]new sayacwithhelpermethod(""11190002"");[/CODE] system.out.pr[CODE]intln(""sayac with helper method"");[/CODE] system.out.println(s1.say()); // 2 basacak. system.out.println(s2.say()); //4 system.out.println(s3.say()); //3 } } [CODE]public class sayac {[/CODE] [CODE]string str;[/CODE] [CODE]public sayac(string str){[/CODE] this.str = str; } [CODE]public int say(){[/CODE] if(str.length() == 0)//base case [CODE]return 0;[/CODE] if(str.charat(0)=='1'){ //eleman 1 ise sayacı 1 artır str = str.sub[CODE]string(1);[/CODE] [CODE]return 1 + say();[/CODE] } [CODE]else{[/CODE] //eleman 1 dışında herhangi bir rakam ise sayacın degerini degistirme str = str.sub[CODE]string(1);[/CODE] [CODE]return say();[/CODE] } } [CODE]public static void main(string[] args) {[/CODE] sayac s1 = [CODE]new sayac(""10001"");[/CODE] sayac s2 = [CODE]new sayac(""1111"");[/CODE] sayac s3 = [CODE]new sayac(""11190002"");[/CODE] system.out.println(s1.say()); // 2 basacak. system.out.println(s2.say()); //4 system.out.println(s3.say()); //3 } } müzik çalar simülasyonu bil 211 - laboratuvar 2 6 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir müzik çalar simülasyonu geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: şarkı (sarki) sınıfı ve türevleri. farklı müzik türlerini temsil eder. çalma stratejisi arayüzü (calmastratejisi). farklı çalma yöntemlerini tanımlar. müzik çalar (muzikcalar) sınıfı. stratejilere bağlı olarak şarkıları çalar. 3 sınıf ve arayüz tanımları 3.1 sarki sınıfı (soyut sınıf ) değişkenler: - isim (string) - şarkının adı - sanatci (string) - sanatçının adı metodlar: - void oynat() - soyut metod, türetilmiş sınıflar tarafından override edilecek 3.2 metalsarki, rocksarki, klasiksarki sınıfları bu sınıflar sarki sınıfından türetilmiştir. oynat() metodu şarkıları türlerine özgü şekilde çalar ve ekrana yazdırır. doküman sonunda (ana program bölümü) her sınıfın şarkıları ne şekilde çaldığına ve ekrana yazdırdığına dair bir örnek bulabilirsiniz. rocksarki ve klasiksarki sınıflarında sarki sınıfında bulun- mayan constructor metodlar mevcuttur (kullanımları ana program bölümünde mevcut). metalsarki sınıfının sarki sınıfında bulunmayan değişken ve metodları aşağıda belirtilmiştir. 3.2.1 metalsarki sınıfı değişkenler: - metalozellik (string) - şarkıya ait nitelik (örn., agresif ritim, yüksek enerji) metodlar: - metalsarki(string isim, string sanatci, string metalozellik) - constructor - void gostermetalozellikleri() - metalozellik değişkenini ekrana yazdırır 3.3 calmastratejisi arayüzü metodlar: - void cal(list<sarki> sarkilistesi) - şarkıları belirli bir sıra ile çalar 1 3.4 siralicalma ve karisikcalma sınıfları bu sınıflar calmastratejisi arayüzünü uygular ve cal(list<sarki> sarkilistesi) metodunu tanımlar. siralicalma. sarkilistesi’ni liste sırasında çalar. karisikcalma. sarkilistesi’ni her şarkı bir kere çalınmak üzere karışık sırada çalar. rockcuozelcalma. sarkilistesi’ni liste sırasında çalar. rocksarki çalarken sesi yükseltir ve diğer şarkılar için sesi normal düzeye döndürür (ana program bölümünde örnek bilgi mesajları bulabilirsiniz). listede ardışık rocksarki bulunduğunda, ses yalnızca ardışık bölümdeki ilk şarkıdan önce yükseltilir ve ardışık bölümdeki son şarkıdan sonra normal düzeye döndürülür. 3.5 muzikcalar sınıfı değişkenler: - strateji (calmastratejisi) - çalma yöntemi metodlar: - void setstrateji(calmastratejisi s) - çalma stratejisini günceller. - void muzikcal(list<sarki> sarkilistesi) - seçilen stratejiye göre şarkıları çalar. 4 ana program (main sınıfı) ana programda, farklı türlerde şarkılar oluşturulacak ve çeşitli çalma stratejileri uygulanacaktır. 4.1 ana program örneği [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki : sarkilistesi) {[/CODE] ... // bu kismi cikti ornegini saglayacak sekilde doldurun } } } 2 4.2 çıktı örneği sirali calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) karisik calma: [rock] vega - ankara (huzurlu ve nostaljik) [klasik] ludovico einaudi - una mattina (hafif ve sakin) [metal] thurisaz - years of silence (aykiri ve atmosferik) [rock] midlake - small mountain (huzurlu ve nostaljik) [metal] death - voice of the soul (enstrumantal) rockcu ozel calma: [metal] thurisaz - years of silence (aykiri ve atmosferik) [metal] death - voice of the soul (enstrumantal) [bilgi] ses duzeyi: yuksek [rock] midlake - small mountain (huzurlu ve nostaljik) [rock] vega - ankara (huzurlu ve nostaljik) [bilgi] ses duzeyi: normal [klasik] ludovico einaudi - una mattina (hafif ve sakin) metal ozellikleri: thurisaz - years of silence [ozellik: aykiri ve atmosferik] death - voice of the soul [ozellik: enstrumantal] 3 import java.util.list; [CODE]public class muzikcalar{[/CODE] private calmastratejisi strateji; [CODE]public void setstrateji(calmastratejisi s){[/CODE] this.strateji = s; } [CODE]public void muzikcal(list<sarki> sarkilistesi){[/CODE] [CODE]if (strateji != null){[/CODE] //strateji objesi bos degilse strateji.cal(sarkilistesi); } } } import java.util.arrays; import java.util.list; [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] // farkli turde sarkilar olusturuluyor sarki s1 = [CODE]new metalsarki(""years of silence"", ""thurisaz"", ""aykiri ve atmosferik"");[/CODE] sarki s2 = [CODE]new metalsarki(""voice of the soul"", ""death"", ""enstrumantal"");[/CODE] sarki s3 = [CODE]new rocksarki(""small mountain"", ""midlake"");[/CODE] sarki s4 = [CODE]new rocksarki(""ankara"", ""vega"");[/CODE] sarki s5 = [CODE]new klasiksarki(""una mattina"", ""ludovico einaudi"");[/CODE] // sarkilari iceren calma listesi list<sarki> sarkilistesi = arrays.aslist(s1, s2, s3, s4, s5); // muzik calar objesi muzikcalar muzikcalar = [CODE]new muzikcalar();[/CODE] // sirali calma stratejisi system.out.pr[CODE]intln(""sirali calma:"");[/CODE] muzikcalar.setstrateji([CODE]new siralicalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // karisik calma stratejisi system.out.pr[CODE]intln(""karisik calma:"");[/CODE] muzikcalar.setstrateji([CODE]new karisikcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // rockcu ozel calma stratejisi system.out.pr[CODE]intln(""rockcu ozel calma:"");[/CODE] muzikcalar.setstrateji([CODE]new rockcuozelcalma());[/CODE] muzikcalar.muzikcal(sarkilistesi); // metal sarkilarin ozelliklerini goster system.out.pr[CODE]intln(""metal ozellikleri:"");[/CODE] [CODE]for (sarki sarki: sarkilistesi) {[/CODE] [CODE]if (sarki instanceof metalsarki) {[/CODE] ((metalsarki) sarki).gostermetalozellikleri(); } } } } [CODE]public class klasiksarki extends sarki{[/CODE] [CODE]public klasiksarki(string isim, string sanatci){[/CODE] super(isim, sanatci); } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[klasik] "" + getsanatci() + "" - "" + getisim() + "" (hafif ve sakin)"");[/CODE] } } import java.util.list; [CODE]public class metalsarki extends sarki implements calmastratejisi{[/CODE] private [CODE]string metalozellik;[/CODE] [CODE]public metalsarki(string isim, string sanatci, string metalozellik){[/CODE] super(isim, sanatci); this.metalozellik = metalozellik; } [CODE]public string getmetalozellik(){[/CODE] [CODE]return metalozellik;[/CODE] } [CODE]public void setmetalozellik(string metalozellik){[/CODE] this.metalozellik = metalozellik; } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[metal] "" + getsanatci() + "" - "" + getisim() + "" ("" + getmetalozellik() + "")"");[/CODE] } [CODE]public void gostermetalozellikleri(){[/CODE] system.out.pr[CODE]intln(getsanatci() + "" - "" + getisim() + "" [ozellik: "" + getmetalozellik() + ""]"");[/CODE] } @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] // todo auto-generated method stub throw [CODE]new unsupportedoperationexception(""unimplemented method 'cal'"");[/CODE] } } [CODE]public class rocksarki extends sarki{[/CODE] [CODE]public rocksarki(string isim, string sanatci){[/CODE] super(isim,sanatci); } @override [CODE]public void oynat(){[/CODE] system.out.pr[CODE]intln(""[rock] "" + getsanatci() + "" - "" + getisim() + "" (huzurlu ve nostaljik)"");[/CODE] } } import java.util.list; [CODE]public class karisikcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] int n = sarkilistesi.size(); [CODE]for (int i=n-1;[/CODE] i>0; i--){ int rnd = (int)(math.random()*(i+1)); //indeksi rastgele seçiyor sarki temp = sarkilistesi.get(i); sarkilistesi.set(i, sarkilistesi.get(rnd)); //random gelen elemani koydum sarkilistesi.set(rnd, temp); } [CODE]for (sarki sarki: sarkilistesi){[/CODE] //sarkilistesinin yeni hali sarki.oynat(); } } } import java.util.list; [CODE]class siralicalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] [CODE]for (sarki sarki: sarkilistesi){[/CODE] sarki.oynat(); } } } [CODE]public abstract class sarki{[/CODE] private [CODE]string isim;[/CODE] //sarki adi private [CODE]string sanatci;[/CODE] //sanatci adi [CODE]public sarki(string isim, string sanatci){[/CODE] this.isim = isim; this.sanatci = sanatci; } [CODE]public string getisim(){[/CODE] [CODE]return isim;[/CODE] } [CODE]public void setisim(string isim){[/CODE] this.isim = isim; } [CODE]public string getsanatci(){[/CODE] [CODE]return sanatci;[/CODE] } [CODE]public void setsanatci(string sanatci){[/CODE] this.sanatci = sanatci; } [CODE]public abstract void oynat();[/CODE] //soyut metod oldugu icin govdesi yok. } import java.util.list; [CODE]public class rockcuozelcalma implements calmastratejisi{[/CODE] @override [CODE]public void cal(list<sarki> sarkilistesi){[/CODE] boolean sesyuksekmi = false; [CODE]for (int i=0;[/CODE] i<sarkilistesi.size(); i++){ sarki sarki = sarkilistesi.get(i); [CODE]if (sarki instanceof rocksarki && !sesyuksekmi){[/CODE] //eger sarki objesi rocksarki objesi ise ve ses yuksekse system.out.pr[CODE]intln(""[bilgi] ses duzeyi: yuksek"");[/CODE] sesyuksekmi = true; //ses artık yuksek } sarki.oynat(); //sanatciyi, sarki ismini ve sarki ozelliklerini bastirdi if (sesyuksekmi && (i == sarkilistesi.size()-1 || !(sarkilistesi.get(i+1) instanceof rocksarki))){ //ses yuksekligi dusukse ve sarkilistesindeki elemanlar rocksarki objesi degilse veya index sondaysa system.out.pr[CODE]intln(""[bilgi] ses duzeyi: normal"");[/CODE] sesyuksekmi = false; } } } } import java.util.list; [CODE]public interface calmastratejisi{[/CODE] [CODE]void cal(list<sarki> sarkilistesi);[/CODE] } kelime sayıcı bil 211 - lab 3 20 şubat 2025 1 giriş bu laboratuvarda fileioveexceptions kullanarak bir kelime sayıcı geliştireceğiz. kelime sayıcı , verilen birmetindosyasındakibelirlikelimelerinkaçkezgeçtiğinisayarakbirçıktıdosyasınakaydedecekvebelirlenen hata durumlarında uygun çıktılar oluşturacaktır. 2 genel program program, aşağıdaki sabit isimlere sahip iki giriş dosyası ile çalışacaktır: -kelimeler.txt – aranacak kelimeleri içeren dosya. -metin.txt – kelimelerin aranacağı metnin bulunduğu dosya. program, kelimeler.txt dosyasındaki her kelimenin metin.txt içinde kaç kez geçtiğini sayacak ve sonucu bir çıktı dosyasına kaydedecektir: -sonuc.txt – her kelimenin kaç kez geçtiğini içeren çıktı dosyası. dosyalar,programınçalıştırıldığıdizindebulunmalıdır. dosyaisimlerideğiştirilemez,programsadeceyukarıda belirtilen isimlerle çalışacaktır. eğerkelimeler.txt içinde bulunan herhangi bir kelime, metin.txt içinde hiç geçmiyorsa, program bir hata oluşturmalı ve stderr’e uygun bir mesaj yazmalıdır. 3 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları kullanacaktır (örn., bufferredreader, scanner, printwriter). dosyaları okurken ve yazarken kullanacağınız fileio sınıflarının seçimi size bırakılmıştır. i̇şlenmesi gereken dosyalar şunlardır: -kelimeler.txt dosyası okunmalıdır. -metin.txt dosyası okunmalıdır. -sonuc.txt dosyası oluşturulup yazılmalıdır. program,aşağıdakiolasıdosyahatalarınıoluşturmalıvehatalaroluştuğundastderr’ebelirlenenhatamesajlarını yazmalıdır: - dosyabulunamıyorsa: ""hata: kelimeler.txt bulunamadı."" veya""hata: metin.txt bulunamadı."" - dosya boşsa: ""hata: kelimeler.txt boş."" veya""hata: metin.txt boş."" 4 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program hata kodu ile çıkış yapmalıdır (yani mainmetodunuz bu hataları atarak sonlanmalı) ve hatalar stderr’e yazılmalıdır (programınızı hata atarak sonlandırırsanız java bunu kendisi yapacaktır). belirtilen hata mesajları ile birlikte java’nın hata ile sonlanan programlar için oluşturduğu sınıf, metod, ve satır gibi bilgiler bulunabilir. 1 4.1 girdi hataları (inputexception class) bu kategori, programın giriş dosyalarıyla ilgili karşılaşabileceği tüm hataları kapsar. öğrenciler, dosya işlem- leriyle ilgili hata türlerini inputexception sınıfından türetmelidir. aşağıdaki özel hata türleri tanımlanmalıdır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: [dosya adı] bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: [dosya adı] boş."" 4.2 kelime bulunamadı hatası (kelimebulunamadiexception class) eğerkelimeler.txt içinde bulunan en az bir kelime, metin.txt dosyasında hiç geçmiyorsa, program kelimebulunamadiexception hatasını atmalıdır. hata yalnızca kelimeler.txt dosyasında bulunamayan ilk kelime için atılır ve program sonlanır. bu hata oluştuğunda stderr’e şu mesaj yazılmalıdır: -""hata: [kelime] metinde bulunamadı."" bu hata, doğrudan exception sınıfından türetilecek ve inputexception ile bağlantılı olmayacaktır. 5 dosya formatları program üç farklı dosya ile çalışacaktır: kelimeler.txt (girdi),metin.txt (girdi) ve sonuc.txt (çıktı). bu dosyaların formatı aşağıda belirtilmiştir. 5.1 girdi dosyaları girdi dosyaları düz metin ( .txt) formatında olacaktır ve her biri aşağıdaki gibi yapılandırılmış olmalıdır. 5.1.1kelimeler.txt formatı kelimeler.txt dosyası, her satırda bir kelime olacak şekilde düzenlenmelidir. dosyada yalnızca harf karak- terleri bulunur. kelimeler büyük/küçük harf duyarsız olarak aranacaktır. örnek i̇çerik: elma armut üzüm eğer dosya boşsa, program şu hatayı vermelidir: hata: kelimeler.txt boş. 5.1.2metin.txt formatı metin.txt dosyası, içinde aranacak kelimelerin geçebileceği serbest formatlı bir metin içermelidir. dosya içinde noktalama işaretleri ve boşluklar bulunabilir. örnek i̇çerik: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. eğer dosya boşsa, program şu hatayı vermelidir: hata: metin.txt boş. 5.2 çıktı dosyası program, kelimelerin kaç kez geçtiğini gösteren bir çıktı dosyası ( sonuc.txt ) oluşturmalıdır. 2 5.2.1sonuc.txt formatı sonuc.txt dosyası, her satırda kelimenin adı ve kaç kez geçtiği bilgisi olacak şekilde düzenlenmelidir. format şu şekilde olmalıdır: [kelime] [geçme sayısı] kelime ve geçme sayısı arasında tek bir boşluk olmalıdır. örnek çıktı ( sonuc.txt ): elma 2 armut 2 üzüm 1 5.3 özel hata durumları ve çıktıları eğerkelimeler.txt içindekiherhangibirkelime metin.txt içindebulunamazsa, kelimebulunamadiexception hatası atılmalıdır ve stderr’e şu mesaj yazılmalıdır: hata: üzüm metinde bulunamadı. bu hata oluştuğunda, yine de sonuc.txt dosyası oluşturulmalı ve bulunan kelimeler için normal çıktı yazıl- malıdır. ancak bulunamayan kelimeler çıktı dosyasına eklenmemelidir. örnek durum: eğerkelimeler.txt şu şekildeyse: elma armut muz vemetin.txt şu şekildeyse: elma ve armut çok lezzetlidir. elma suyu da çok faydalıdır. armut yemek sağlığa iyi gelir. üzüm de sağlıklı bir meyvedir. o zaman sonuc.txt şu şekilde olmalıdır: elma 2 armut 2 ve stderr’e şu mesaj yazılmalıdır: hata: muz metinde bulunamadı. 6 gönderim formatı - labı bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmış arşivin ismini isim_numara şeklinde isimlendirin (örn., johnnash_181101014.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""lab3 gönderim"" başlıklı bir mail ile gönderin. 3 metot açıklama string(string s) sile aynı değere sahip bir string oluşturur. string(char[] a) a[]dizisindeki karakterlerle bir string oluşturur. int length() string içindeki karakter sayısını döndürür. char charat(int i) belirtilen iindeksindeki karakteri döndürür. string substring(int i, int j) iilej-1arasındaki karakterleri içeren bir alt string döndürür. boolean contains(string substring) string’in substring ’i içerip içermediğini kontrol eder. boolean startswith(string prefix) string’in prefixile başlayıp başlamadığını kontrol eder. boolean endswith(string postfix) string’in postfix ile bitip bitmediğini kontrol eder. int indexof(string pattern) pattern ifadesinin ilk geçtiği indeks değerini döndürür. int indexof(string pattern, int i) iindeksinden sonraki ilk pattern konumunu döndürür. string concat(string t) string’in sonuna teklenmiş halini döndürür. int compareto(string t) i̇ki string’i karşılaştırır (sözlük sırasına göre). string tolowercase() string’in tüm harflerini küçük harfe çevirir. string touppercase() string’in tüm harflerini büyük harfe çevirir. string replace(string a, string b) string içindeki a’larıbile değiştirir. string trim() string’in başındaki ve sonundaki boşlukları kaldırır. boolean matches(string regex) string’in belirtilen regexle eşleşip eşleşmediğini kontrol eder. string[] split(string delimiter) string’idelimiter kullanarak böler ve bir dizi döndürür. boolean equals(object t) string’in değeri tile aynı mı diye kontrol eder. table 1: java string sınıfı metotları 4 import java.io.*; import java.util.*; [CODE]public class kelimesayaci{[/CODE] [CODE]public static void main(string[] args){[/CODE] [CODE]try{[/CODE] list<string>kelimeler = dosyayioku(""kelimeler.txt""); list<string>metin = dosyayioku(""metin.txt""); list<[CODE]string>kelimelistesi = new arraylist<>();[/CODE] list<[CODE]integer>kelimesayilari = new arraylist<>();[/CODE] boolean kelimebulunamadi = false; //yani kelime bulunmus kabul et. [CODE]string ilkbulunamayankelime = null;[/CODE] [CODE]for(string k: kelimeler){[/CODE] [CODE]int sayac = kelimesay(metin, k);[/CODE] [CODE]if((sayac == 0) && (!kelimebulunamadi)){[/CODE] kelimebulunamadi = true; //kelimenin bulunamadigini dogrular. ilkbulunamayankelime = k; } [CODE]if(sayac > 0){[/CODE] kelimelistesi.add(k); kelimesayilari.add(sayac); } } sonucdosyasiniyaz(""sonuc.txt"", kelimelistesi, kelimesayilari); //sonuc.txt'ye yazacak. [CODE]if(kelimebulunamadi){[/CODE] //kelimebulunamadi == true oldugunda exception firlat. throw [CODE]new kelimebulunamadiexception(ilkbulunamayankelime);[/CODE] } }[CODE]catch(inputexception e){[/CODE] system.err.println(e.getmessage()); }[CODE]catch(kelimebulunamadiexception e){[/CODE] system.err.println(e.getmessage()); }[CODE]catch(ioexception e){[/CODE] system.err.println(""hata: dosya okuma/yazma hatası oluştu.""); } } [CODE]public static list<string>dosyayioku(string dosyaadi) throws inputexception, ioexception{[/CODE] //checked exceptionlar file f = [CODE]new file(dosyaadi);[/CODE] if (!f.exists()){ //dosya bulunamazsa exception firlat. throw [CODE]new dosyabulunamadiexception(dosyaadi);[/CODE] } list<[CODE]string>satir = new arraylist<>();[/CODE] [CODE]try(bufferedreader br = new bufferedreader(new filereader(f))){[/CODE] [CODE]string str;[/CODE] while((str = br.readline()) != null){ if(!str.trim().isempty()) { satir.add(str.trim().tolowercase()); } } } if(satir.isempty()){ throw [CODE]new bosdosyaexception(dosyaadi);[/CODE] } [CODE]return satir;[/CODE] } [CODE]public static int kelimesay(list<string>metin, string kelime){[/CODE] [CODE]int sayac = 0;[/CODE] [CODE]for(string str: metin){[/CODE] string[]kelimeler = str.tolowercase().split(""\\w+""); [CODE]for(string k: kelimeler){[/CODE] if (k.equals(kelime)){ sayac++; } } } [CODE]return sayac;[/CODE] } [CODE]public static void sonucdosyasiniyaz(string dosyaadi, list<string>kelimelistesi, list<integer>kelimesayilari) throws ioexception{[/CODE] [CODE]try(printwriter wrt = new printwriter(new filewriter(dosyaadi))){[/CODE] [CODE]for(int i=0;[/CODE] i<kelimelistesi.size(); i++){ if(kelimesayilari.get(i) > 0){ //eger kelime metinde gectiyse yazdirir wrt.println(kelimelistesi.get(i) + "" "" + kelimesayilari.get(i)); } } wrt.flush(); } } } [CODE]public class kelimebulunamadiexception extends exception{[/CODE] [CODE]public kelimebulunamadiexception(string kelime){[/CODE] super(""hata: "" + kelime + "" metinde bulunamadı.""); } } [CODE]public class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(string filename){[/CODE] super(""hata: "" + filename + "" boş.""); } } [CODE]public class inputexception extends exception{[/CODE] [CODE]public inputexception(string message){[/CODE] super(message); } } [CODE]public class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(string filename){[/CODE] super(""hata: "" + filename + "" bulunamadı.""); } } generic 1) envanter yönetim sistemi bu labda amacımı bir oyun için envanter sistemi eklemektir. item isminde bir arayüz tanımlayın: aşağıdaki metotları içermelidir: string getname() int getvalue() weapon sınıfı tanımlayın. bu sınıf item arayüzünü uygulamalıdır. int damage isimli bir özelliği olmalıdır. armor sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. int defense isimli bir değişkeni olmalıdır. potion sınıfı tanımlayın. bu sınıf da item arayüzünü uygulamalıdır. string effect isimli bir değişkeni olmalıdır. generic inventory<t> sınıfı bir arraylist kullanarak nesneleri saklamalıdır. void additem(t item): envantere istenilen eşyayı eklemeli void removeitem(t item): envanterden istenilen eşyayı silmeli void printinventory(): envanteri basmalı t mostvaluableitem(): en değerli eşyayı dönmeli t finditembyname(string name): verilen isme karşılık gelen eşyayı dönmeli. i̇simlerin unique olduğunu varsayabilirsiniz. eğer yoksa null dönün. list<t> finditemsbyvalue(int value): verilen değerden daha değerli eşyaarın listesini döndürür. int gettotalvalue(): envanterin toplam değerini döner. list<t> filterbytype(class<?> type): istenilen sınıfa ait ögeleri döner. int gettotalweapondamage(): weapon classına ait olan nesnelerin toplam hasarınıdöner. void sortbyvalue(): değeri azalan şekilde envanteri sıralamalıdır. public static void printmostvaluableitem(inventory<? extends item> inventory): verilen envanterdem en değerli eşayı ekrana basmalıdır. public static void transferarmor(inventory<? super armor> destination, inventory<armor> source): verilen hedef envantere zırhı taşımalıdır. driver class: main metodu burada olmalıdır. sadece weapon’dan oluşan ve itemdan oluşan invertory classı yazıp test ediniz. yardımcı olabilecek metotlar: class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon import java.util.arraylist; import java.util.list; [CODE]public class inventory<t extends item>{[/CODE] [CODE]public list<t> items = new arraylist<>();[/CODE] [CODE]public void additem(t i){[/CODE] //envntere istenilen esyayi eklemeli items.add(i); } [CODE]public void removeitem(t i){[/CODE] //envanterden istenilen esyayi silmeli items.remove(i); } [CODE]public void printinventory(){[/CODE] //envanteri basmali [CODE]for (t i: items){[/CODE] system.out.pr[CODE]intln(i);[/CODE] } } [CODE]public t mostvaluableitem(){[/CODE] //en degerli esyayi donmeli if(items.isempty()){ [CODE]return null;[/CODE] } t mostvalit = items.get(0); [CODE]for(t i: items){[/CODE] if(i.getvalue() > mostvalit.getvalue()){ mostvalit = i; } } [CODE]return mostvalit;[/CODE] } [CODE]public t finditembyname(string name){[/CODE] //verilen isme karsilik gelen esyayi doner, eger yoksa null don [CODE]for(t i: items){[/CODE] if(i.getname().equals(name)){ [CODE]return i;[/CODE] } } [CODE]return null;[/CODE] } [CODE]public list<t> finditemsbyvalue(int value){[/CODE] //verilen degerden daha degerli esyalarin listesi list<t> itms = [CODE]new arraylist<>();[/CODE] [CODE]for(t i: items){[/CODE] if(i.getvalue() > value){ itms.add(i); } } [CODE]return itms;[/CODE] } [CODE]public int gettotalvalue(){[/CODE] //weapon [CODE]classinin toplam hasari int total_damage = 0;[/CODE] [CODE]for (t i: items){[/CODE] total_damage += i.getvalue(); } [CODE]return total_damage;[/CODE] } [CODE]public list<t> filterbytype(class<?> type){[/CODE] //istenilen sin[CODE]ifa ait ogeler, sinifin ne oldugunu bilmedigimiz icin ? wildcard kullandim list<t> ogeler = new arraylist<>();[/CODE] [CODE]for (t i: items){[/CODE] if(i.getclass().equals(type)){ ogeler.add(i); } } [CODE]return ogeler;[/CODE] } [CODE]public int gettotalweapondamage(){[/CODE] //weapon [CODE]classina ait olan nesnelerin toplam hasarini don int total_damage = 0;[/CODE] [CODE]for(t i: items){[/CODE] [CODE]if (i instanceof weapon) {[/CODE] total_damage += ((weapon)i).getdamage(); } } [CODE]return total_damage;[/CODE] } [CODE]public void sortbyvalue(){[/CODE] //degeri azalan seklinde envanteri sirala [CODE]for(int i=0 ;[/CODE] i<items.size()-1 ; i++){ [CODE]for(int j=i+1 ;[/CODE] j<items.size() ; j++){ if(items.get(i).getvalue() < items.get(j).getvalue()){ t temp = items.get(i); items.set(i, items.get(j)); items.set(j, temp); } } } } [CODE]public static void printmostvaluableitem(inventory<? extends item> inventory){[/CODE] //verilen envanterdem en degerli esyayi ekrana bas item i = inventory.mostvaluableitem(); [CODE]if(i != null){[/CODE] system.out.pr[CODE]intln(""most valuable item: "" + i);[/CODE] } } [CODE]public static void transferarmor(inventory<? super armor> destination, inventory<armor> source){[/CODE] //verilen hedef envantere zirhi tasi list<armor> move = [CODE]new arraylist<>();[/CODE] for(item i: source.items){ [CODE]if(i instanceof armor){[/CODE] //ekle move.add((armor)i); } } [CODE]for(armor a: move){[/CODE] //tasi destination.additem(a); source.removeitem(a); } } } [CODE]public class weapon implements item{[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int damage;[/CODE] [CODE]public weapon(string name, int value, int damage){[/CODE] this.name = name; this.value = value; this.damage = damage; } @override [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdamage(){[/CODE] [CODE]return damage;[/CODE] } @override [CODE]public string tostring(){[/CODE] [CODE]return ""weapon{[/CODE]"" + ""name='"" + name + '\'' + "", value="" + value + "", damage="" + damage + '}'; } } [CODE]public interface item{[/CODE] [CODE]string getname();[/CODE] [CODE]int getvalue();[/CODE] } [CODE]public class armor implements item{[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]int defense;[/CODE] [CODE]public armor(string name, int value, int defense){[/CODE] this.name = name; this.value = value; this.defense = defense; } @override [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public int getdefense(){[/CODE] [CODE]return defense;[/CODE] } @override [CODE]public string tostring(){[/CODE] [CODE]return ""armor{[/CODE]"" + ""name='"" + name + '\'' + "", value="" + value + "", defense="" + defense + '}'; } } [CODE]public class potion implements item{[/CODE] private [CODE]string name;[/CODE] private [CODE]int value;[/CODE] private [CODE]string effect;[/CODE] [CODE]public potion(string name, int value, string effect){[/CODE] this.name = name; this.value = value; this.effect = effect; } @override [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } @override [CODE]public int getvalue(){[/CODE] [CODE]return value;[/CODE] } [CODE]public string geteffect(){[/CODE] [CODE]return effect;[/CODE] } @override [CODE]public string tostring(){[/CODE] [CODE]return ""potion{[/CODE]"" + ""name='"" + name + '\'' + "", value="" + value + "", effect='"" + effect + '\'' + '}'; } } [CODE]public class driver{[/CODE] /*[CODE]public static void main(string[] args){[/CODE] class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon }*/ [CODE]public static void main(string[] args){[/CODE] inventory<weapon>weaponinventory = [CODE]new inventory<>();[/CODE] weaponinventory.additem([CODE]new weapon(""excalibur"", 1000, 100));[/CODE] weaponinventory.additem([CODE]new weapon(""excalibur2"", 300, 50));[/CODE] inventory<item>generalinventory = [CODE]new inventory<>();[/CODE] generalinventory.additem([CODE]new weapon(""weapon1"", 400, 85));[/CODE] generalinventory.additem([CODE]new weapon(""weapon2"", 500, 80));[/CODE] system.out.pr[CODE]intln(""weapon inventory:"");[/CODE] weaponinventory.pr[CODE]intinventory();[/CODE] system.out.println(""total weapon damage: "" + weaponinventory.gettotalweapondamage()); system.out.println(""most valuable weapon: "" + weaponinventory.mostvaluableitem()); system.out.println(""verilen isme karsilik gelip gelmedigini kontrol et: "" + weaponinventory.finditembyname(""excalibur"")); system.out.println(""verilen degerden daha degerli esyalar: "" + weaponinventory.finditemsbyvalue(30)); system.out.println(""toplam deger: "" + weaponinventory.gettotalvalue()); system.out.println(""toplam weapon hasari: "" + weaponinventory.gettotalweapondamage()); system.out.pr[CODE]intln();[/CODE] system.out.pr[CODE]intln(""general inventory:"");[/CODE] generalinventory.pr[CODE]intinventory();[/CODE] system.out.pr[CODE]intln();[/CODE] class<weapon> weaponclass = weapon.[CODE]class;[/CODE] system.out.println(""sınıf adı: "" + weaponclass.getname()); // çıktı: weapon weapon sword = [CODE]new weapon(""excalibur"", 1000, 100);[/CODE] class<?> clazz = sword.get[CODE]class();[/CODE] system.out.println(clazz.getname()); // çıktı: weapon } } ""recursion"" kavramı nedir, kısaca açıklayınız. bir metodun kendi kendisini çağırmasıdır. recursive bir metodun temel kısımları nelerdır, kısaca açıklayınız. base case: temel olan kısımdır. burasi recursive kolun kilitlendiği yerdir. call case: burasi ise recursive kismin devamli olarak büyüyüp kuculerek kendisini çağırmaya devam ettigi yerdir. jvm recursive call'ları nasıl handle ediyor, kısaca açıklayınız. stack denilen bir yapıda bu call'ları tutuyor, son giren veri ilk çıkıyor. [CODE]int power(x, y) metodu recursive olarak mı daha verimlidir, iteratif olarak mı;[/CODE] kısaca açıklayınız. i̇teratif yöntem yani for veya while döngüsü daha hızlıdır ve bellekte daha az yer kaplar, fakat bu verilen metodu recursive yazmak yazılımcı acisindan daha kolaydir ve kod daha clean gozukur. bir [CODE]stringin uzunluğunu bulduracak recursive bir metodu nasıl yazarsınız, base casesi ne olurdu? public int length(string s) {[/CODE] if(s.length() == 1) //base case [CODE]return 1;[/CODE] calling case: else return length(s.sub[CODE]string(1))+1;[/CODE] stack nedir, neden overflow olur; overflow olma nedenlerinden bir tanesini açıklayınız. stack: recursive metotlarda metod kendisini her çağırdığında gelecek veriler burada toplanir, son giren veri ilk cikar. stackoverflow ise cok fazla veri geldiğinde olusur, stack taşar. tail recursion nedir, kısaca açıklayınız. metodun sadece kendisini çağırmasıdır yani yaninda toplama veya carpma gibi bir işlem bulunmaz abstraction kavramını açıklayınız. soyutlama anlamina gelir. java dilinde classlar objeler encapsulation ve polymorphism abstarction kavramina örnektir. dönüş tipi employee olan bir metodu dönüş tipi hourlyemployee olan bir metot olarak override etmek mümkün müdür? peki ya bunun tersi? evet mumkundur. çünkü hourlyemployee employee sınırının alt classıdır. fakat tersi mümkün değildir. çünkü her hourlyemployee bir employee'dir, fakat her employee hourlyemployee değildir. protected ve no modifier (package access) access modifierlerinden hangisi private modifierine daha yakındır? default daha yakindir, çünkü protected ile alt sinif oldugu surece farkli paketlerden erisim saglanir ama default'tan saglanmaz. java'da neden her bir classın constructorunun ilk satırı 'super' olmak zorundadır? alt sinif oldugu icin. ust sinifin ozelliklerini de icermesi gerektiğinden daima alt sinifin constructorının ilk satirinda ust sinifi temsil eden super satırı olmak zorundadır. java'da bir class birden çok classı extend edebilir mi, ""a extends b, c"" gibi bir şey mümkün müdür? edemez. bir class her zaman yalnizca tek 1 class'ı extend edebilir. java'da ""instanceof"" operatörü hangi ilişkiyi kontrol eder? ""a instanceof b"" ise a ve b arasındaki ilişki nedir? a objesi b classının bir objeyi mi diye bakar. metot overriding ve overloading kavramlarını açıklayınız. overriding: ust sinifta tanımlanmış bir metodun alt sınıflarda yeniden tanimlanmasidir, metodun imzasi ve return type'ı degismez. ust sinifta metod tanimlanirken final keywordü kullanilirsa o metod override edilemez. overloading: bir metodun ayni isimle ama farkli parametrelerle yeniden tanimlanmasidir, parametreler degisecegi icin imza degisebilir fakar return type degisemez. [CODE]class base {[/CODE] [CODE]int x = 10;[/CODE] base() { pr[CODE]int();[/CODE] } [CODE]void print() {[/CODE] system.out.pr[CODE]int(""base"");[/CODE] } } [CODE]class derived extends base {[/CODE] [CODE]int x = 1;[/CODE] [CODE]void print() {[/CODE] system.out.pr[CODE]int(x);[/CODE] } } // test sın[CODE]ıfı, main metodu içinde new derived();[/CODE] output? base1 [CODE]class parent {[/CODE] protected [CODE]int x = 10;[/CODE] { system.out.pr[CODE]intln(""parent"");[/CODE]} [CODE]public int getvalue() {[/CODE] [CODE]return x;[/CODE] } } [CODE]class child extends parent {[/CODE] private [CODE]int x = 20;[/CODE] [CODE]public int getvalue() {[/CODE] return super.x + x; } } // test sın[CODE]ıfı, main metodu içinde parent c = new child();[/CODE] system.out.println(c.getvalue()); output? hata verir. çünkü görünürlüğü azaltamayız. fakat burada ust sın[CODE]ıfta x değişkeni protected olarak tanimlanirken alt sinifta private olarak tanımlayarak bu hatayı yapmış java'da ne zaman static binding yapılır, ne zaman dynamic binding yapılır? metotlar ve variablelar siniflara özgü ise static, objelere ozgu ise dynamic java'da static, private ve final metotlar neden static bindingle bağlanır;[/CODE] [CODE]static, private ve final metotların ortak özelliği nedir? override edilemezler yani degistirilemezler overloading ve overriding yaparken hangi tür binding gerçekleşir, neden? early binding, çünkü compiler hangi metodu calistiracagina karar verir dinamik bağlamada jvm'nin görevi nedir? kodu javanin anlayacagi bytecode a cevirir java'da upcasting neden implicit bir şekilde yapılabilir, neden? peki ya down casting implicit bir şekilde yapılabilir mi? çünkü üst sınıf referanslı alt sınıf objesi oluşturulur, fakat down casting implicit yapilamaz java'da tüm bindingler dinamik olsaydı ne olurdu, nasıl bir sorunla karşılaşırdık? late binding yapılamazdi ve çoğu kod hatalı olurdu class parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""parent"");[/CODE] } } [CODE]class child extends parent {[/CODE] [CODE]void show() {[/CODE] system.out.pr[CODE]intln(""child"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] parent p = [CODE]new child();[/CODE] p.show(); } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? [CODE]static class product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""product"");[/CODE] } } [CODE]class book extends product {[/CODE] [CODE]void display() {[/CODE] system.out.pr[CODE]intln(""book"");[/CODE] } } [CODE]public class test {[/CODE] [CODE]public static void main(string[] args) {[/CODE] product[] items = {[CODE]new product(), new book()}[/CODE]; [CODE]for(product item : items) {[/CODE] item.display(); } } } output? burada statik bağlama mı dinamik bağlama mı gözlemlemektesiniz? dinamik java'da exceptionlar kaç çeşittir, her çeşit için birer örnek verin. 2 çeşittir checked ve unchecked. checked exception örneği io, unchecked exception örneği runtime. java'da 'throws' keywordunu kullanırken kısıtlar nedir, override edilen metotlarda bu kısıtlar nasıl işler? checked exceptionlar için throws kullanılır. override edilen metodlarda throw yazılarak exception fırlatılır. finally bloğunun işlevi nedir? finally bloğu exception atılmayan durumlarda da çalışır mı? ne olursa olsun çalıştır demektir. finally blogu exception atılmayan yerde çalışmaz. java'da kendi exceptionunuzu nasıl tanımlarsınız? class yazıp extends throwable ya da extends exception yazarak. java'da bazen catch edilen bir exception bazı işlemler yapıldıktan sonra tekrar fırlatılır, bunun amacı ne olabilir? checked exception olduğu için. veya birden fazla exception olabileceği için. [CODE]static int doexceptionalmath(int x){[/CODE] [CODE]try{[/CODE] [CODE]int result = x / 0;[/CODE] [CODE]return result;[/CODE] } [CODE]catch(arithmeticexception e){[/CODE] system.out.pr[CODE]intln(""caught"");[/CODE] [CODE]return -1;[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] [CODE]try{[/CODE] finalmath(); } [CODE]catch(exception e){[/CODE] [CODE]catchfinal();[/CODE] } [CODE]return 41;[/CODE] } } [CODE]static void finalmath() throws exception{[/CODE] system.out.pr[CODE]intln(""oops"");[/CODE] throw [CODE]new exception();[/CODE] } [CODE]static void catchfinal(){[/CODE] system.out.pr[CODE]intln(""done"");[/CODE] } // psvm system.out.pr[CODE]intln(doexceptionalmath(77));[/CODE] output? caught finally done [CODE]static void m2(){[/CODE] [CODE]try{[/CODE] system.out.pr[CODE]intln(""trying m1"");[/CODE] m1(); } [CODE]catch(exception e){[/CODE] system.out.pr[CODE]intln(""caught1"");[/CODE] } [CODE]catch(ioexception e){[/CODE] system.out.pr[CODE]intln(""caught2"");[/CODE] } finally{ system.out.pr[CODE]intln(""finally"");[/CODE] } } [CODE]static void m1() throws ioexception {[/CODE] [CODE]try {[/CODE] throw [CODE]new filenotfoundexception();[/CODE] } [CODE]catch (filenotfoundexception e) {[/CODE] throw [CODE]new ioexception();[/CODE] } } kod bu şekilde derlenir mi? eğer derlenmezse hata(lar)nın kaynağı nedir? varsa hatay(lar)ı nasıl düzeltirsiniz? varsa hata(lar)yı düzelttikten sonra output ne olur? derlenmesi. hata ise ilk catch blogunda exception yazıp altındaki catch blogunda exception classinin alt sınıfı olan ioexception yapmasıdır. hatayı düzeltmek için ioexception ı yukarı, exception ı aşağı almalıyız. hata duzeltildikten sonra: trying m1 caught2 finally what grade (a, b, c, d, or f) do you expect to earn by the end of this course? dd java'da generic kavramı nedir, bu kavramın temel amacı nedir? her türü destekleyen genel bir yapı upper bound ve lower bound wildcardları nasıl ifade edersiniz? upper ve lower boundun kullanılacağı durumlara birer tane örnek veriniz. upper bound okuma, lower bound yazma amacıyla kullanılır. upperbound(? extends t) ve lowerbound(? extends t) generic bir classın constructorunda type parametresi bulunur mu, neden? bir generic sınıfın constructor'ı generic type parametresini alabilir ancak constructor'ın kendisi generic olamaz.cunku runtimeda tür bilgisi silinir mygenericclass<a> ve mygenericclass<object> classları arasında kalıtım (child-parent) ilişkisi nasıldır, açıklayınız. mygenericclass<a> ve mygenericclass<object> arasında kalıtım ilişkisi yoktur. eğer mygenericclass<t> içindeki t, object'in bir alt sınıfıysa, ? extends object kullanarak ilişkili hale getirebiliriz. generics kullanırken kalıtım ilişkisi oluşturmak için wildcard (? extends) kullanılmalı. [CODE]class node<t>{[/CODE] t[] data = [CODE]new t[10];[/CODE] } //psvm node<[CODE]string> stringnode = new node<>();[/CODE] bu kodda bir hata var mı? (varsa) bu hata nedir, nedenini açıklayınız. (varsa) bu hata nasıl düzeltilmeli, kodun doğru halini yazınız. t[10] hatalıdır cünkü generics runtimeda tür bilgisine sahip değildir. diziyi object[] olarak oluşturup (t[]) ile cast edebiliriz swapheadandtail metodu aşağıda tanımı verilmiş node classının birbirlerine bağlanmış nodelerinden ilkini alan ve baştaki node ile sondaki node'yi değiştiren metottur. örnek: başlangıçta: a -> b -> c metodu a ile çağırdığıktan sonra: c -> b -> a ayrıca metot en başa gelen nodeyi dönmelidir (bu örnekte c dönmeli). [CODE]class node{[/CODE] [CODE]int data;[/CODE] node next; } [CODE]static node swapheadandtail(node head) {[/CODE] node a = head; node b = head.next; node c = head; node d = null; [CODE]while (____ != null) {[/CODE] d = c; c = c.next; } c.next = ____; d.next = ____; a.next = ____; [CODE]return ____;[/CODE] } buna göre boşluklara neler gelmelidir? (c.next != null) c.next = null d.next = a a.next = b [CODE]return c public _________ {[/CODE] [CODE]public void sırala(list<t> liste) {[/CODE] // sıralama algoritmanız } } yaptığınız uzun çalışmalar sonucu yeni bir sıralama algoritması buldunuz. bunu implement etmek için bir class yazmalısınız. bu classın declarationunu nasıl yapardınız neden, boşluğu buna göre doldurun. public class mysorter<t> türü belli olmadığı için declarationı t ile yaparız. map ve set veri yapılarını kıyaslayınız, aralarındaki farkları açıklayınız. set, elemanlarının sırasını saklamaz veya belirli bir düzene göre sıralayabilir (treeset). map ise anahtarların sırasını değiştirebilir veya belirli bir düzene sokabilir (treemap). collections [CODE]interfacesindeki metotlar temel olarak hangi işlevleri yerine getiriyor? ekle sil ara dönüştür manipülasyon i̇ki objenin equals metodu true dönüyorsa bu iki objenin hash codeleri aynıdır, bunun nedenini açıklayınız;[/CODE] eğer bu sağlanmazsa hangi veri yapıları istenilen şekilde sağlanır? kendi yazdığınız classlarda bunu sağlamak için hangi metotları override etmelisiniz, neden? hashmap veya hashset içinde aynı nesneler farklı hash kodlarına sahip olursa, veri yapısı gereksiz yere daha fazla alan kullanır ve arama ekleme performansı düşebilir. override edilmesi gerek metodlar: equals(): iki nesnenin eşit olup olmadığını anlamak için. hashcode(): eşit nesnelerin aynı hash koduna sahip olmasını sağlamak için. bir öğrenci kulübü, yılsonu etkinliği için sınırlı kontenjana sahip bir kayıt sistemi oluşturuyor. sistem, öğrenci kayıtlarını ""ilk gelen ilk hizmet alır"" prensibiyle yönetiyor. ancak, bazı öğrenciler kaydını iptal edebiliyor ve boş kalan yerler otomatik olarak sıradaki öğrenciye veriliyor. bu senaryoda, kayıt sırasını ve iptal durumlarını etkin bir şekilde yönetebilmek için hangi veri yapısını tercih edersiniz? neden? ""ilk gelen ilk hizmet alır"" yani fifo prensibi uygulandığı için queue (kuyruk) veri yapısı en uygun seçimdir. fifo nedir, açıklayınız ve aşağıdakı veri yapılarını fifo/lifo şeklinde sınıflandırınız: stack queue map priorityqueue fifo: first on first out demektir yani ilk giren ilk çıkar. stack: l[CODE]ifo queue: fifo map: ikisi de değil priorityqueue: fifo public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] map<[CODE]string, integer> scores = new hashmap<>();[/CODE] scores.put(""alice"", 95); scores.put(""bob"", 80); scores.put(""alice"", 100); set<string> keys = scores.keyset(); [CODE]int sum = 0;[/CODE] [CODE]for (string key : keys) {[/CODE] sum += scores.get(key); } system.out.println(""number of entries: "" + scores.size()); system.out.pr[CODE]intln(""sum of scores: "" + sum);[/CODE] } } output? number of entries: 2 sum of scores: 180 [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] list<[CODE]string> list = new arraylist<>();[/CODE] list.add(""apple""); list.add(""banana""); list.add(1, ""cherry""); list.remove(""banana""); list.add(""apple""); system.out.println(list.size()); system.out.println(list.indexof(""apple"") + "" "" + list.lastindexof(""apple"")); } } output? 3 0 2 ara sınavdan yaklaşık hangi notu bekliyorsun (0-100)? 30 java gui'leri bağlamında olay güdümlü (event driven) programlamayı tanımlayın. event, kullanıcının yaptığı eylemler. event source, olayın gerçekleştiği bileşen. event listener, olayı yakalayan ve ilgili kodu çalıştıran arayüz veya sınıf. geleneksel sıralı programlama ile olay güdümlü (event driven) programlama arasındaki temel fark nedir? programin akışının kontrolü borderlayout yöneticisi, bir konteynerdeki bileşenleri nasıl düzenler? .north kuzey, .south güney, .east doğu, .west batı, .center tam orta java gui uygulamalarında jpanel'in amacı nedir? yeni bir panel açmayı sağlar. java'daki gui programları neden tipik olarak sonsuz bir olay döngüsü çalıştırır ve bu durum sistem veya uygulama tarafından tetiklenen yeniden çizim (repaint) olaylarıyla nasıl ilişkilidir? kullanıcının veya sistemin tetiklediği olayları devamlı dinler ve işleyerek uygulamanın dinamik ve etkileşimli olmasını sağlar. bir swing uygulamasında repaint() metodunu çağırmanın etkisi nedir? bilesenleri yeniden çizer. aşağıdaki kodun çalışmasını izleyin ve düğmeye tıklandığında ne olduğunu belirleyin: [CODE]public class simplegui extends jframe implements actionlistener {[/CODE] [CODE]public simplegui() {[/CODE] setsize(200, 100); setdefaultcloseoperation(jframe.exit_on_close); jbutton button = [CODE]new jbutton(""click me"");[/CODE] button.addactionlistener(this); add(button); setvisible(true); } [CODE]public void actionperformed(actionevent e) {[/CODE] joptionpane.showmessagedialog(this, ""button was clicked!""); system.exit(0); } [CODE]public static void main(string[] args) {[/CODE] [CODE]new simplegui();[/CODE] } } button was clicked! yazar ve kapanir aşağıdaki kod parçasını inceleyin: import javax.swing.*; import java.awt.*; [CODE]public class layoutexample {[/CODE] [CODE]public static void main(string[] args) {[/CODE] jframe frame = [CODE]new jframe(""layout test"");[/CODE] frame.setsize(400, 300); frame.setdefaultcloseoperation(jframe.exit_on_close); frame.setlayout([CODE]new borderlayout());[/CODE] frame.add(new jlabel(""n""), borderlayout.north); frame.add(new jbutton(""s""), borderlayout.south); frame.add(new jpanel(), borderlayout.center); frame.setvisible(true); } } bu program çalıştığında bileşenlerin nasıl düzenlendiğini açıklayın. t thread oluşturmanın 2 temel yöntemi nedir? thread oluştururken lambda notasyonunun kullanılabilmesi ne sağlar? extends thread ya da implements runnable data race problemi nedir, neden kaynaklanır? nasıl önüne geçilir? aynı paylaşılan kaynağa (örneğin bir değişken) iki veya daha fazla thread'in aynı anda erişmesi sonucu tutarsız verilere yol açmasıdır. synchronized kullanarak geçilir. dead lock problemi nedir, neden kaynaklanır; bunun önüne geçebilmek için ne yapılabilir? dead lock problemi threadlerin birbirini bekleyip kilitlenerek sonsuza kadar durmasıdır. trylock() wait() ve notify() kullanarak bunun önüne geçilebilir. bir threadi başlatmak için neden run metodu çağırılmamalı, açıklayınız. peki hangi metot çağrılmalıdır? run() metodu threadi thread gibi değil, normal.bir metod gibi çağırır. bu yüzden start() metodu çağırmalıyız. bir thread başka bir thread tarafından nasıl doğru bir şekilde sonlandırılabilir? interrput() veya isinterrupted() java'da kaç çeşit thread vardır, farkları açıklayınız. user ve daemon threads. user kullanıcının gördüğü, daemon ise arka planda çalışan ve garbage işlerini yapan threaddir. [CODE]public class bankaccount {[/CODE] private double balance; [CODE]public void deposit(double amount) {[/CODE] balance = balance + amount; ; } [CODE]public void withdraw(double amount) balance = balance - amount ;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] bankaccount account = [CODE]new bankaccount();[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 3; i++) { account.deposit(100); } }); thread t2 = [CODE]new thread(() -> {[/CODE] [CODE]for (int i = 0;[/CODE] i < 2; i++) { account.withdraw(100); } }); t1.start(); t2.start(); } } bu kodda bir problem var mı? varsa bu problemi nasıl çözersiniz? (varsa) problemi çözdükten sonra program çalıştığında balance'nin son değeri ne olur? deposit() ve withdraw() metotları senkronize değil. birden fazla thread aynı anda eriştiğinde data race oluşabilir. synchronized ekleyerek duzeltebiliriz. sonuç ise 100 olur. [CODE]class threadvisibility {[/CODE] private [CODE]static boolean flag = false;[/CODE] private [CODE]static int value = 0;[/CODE] [CODE]public static void main(string[] args) throws interruptedexception {[/CODE] thread t1 = [CODE]new thread(() -> {[/CODE] string name = thread.currentthread().getname(); system.out.pr[CODE]intln(""started"");[/CODE] [CODE]while (!flag) {[/CODE] [CODE]try {[/CODE] thread.sleep(100); } [CODE]catch (interruptedexception e) {[/CODE] e.pr[CODE]intstacktrace();[/CODE] } } system.out.pr[CODE]intln(name + value);[/CODE] }); t1.setname(""t2""); t1.start(); thread.sleep(1000); // give t1 time to start value = 11; synchronized (threadvisibility.[CODE]class) {[/CODE] flag = true; } } } output? started t2 11 bil211 quiz 1 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: verilen bir alfanumerik string içindeki harflerin büyük/küçük harfli tüm kombinasyonlarını üretin ve ekrana basın. rakamlar değiştirilemez, sadece harfler farklı kombinasyonlarda olmalıdır. kurallar: 1. string içindeki harfler büyük veya küçük olabilir, ancak rakamlar sabit kalır. 2. çıkış dizisi tekrarsız tüm büyük/küçük harf kombinasyonlarını içermelidir. 3. sıra korunmalıdır, yani karakterlerin sırası değiştirilemez. örnek: s = ""a1b2"": [""a1b2"", ""a1b2"", ""a1b2"", ""a1b2""] q2:bu soruda robot ve factory adında iki sınıf oluşturacağız ve bu sınıfların metodlarını test edeceğiz. robot: değişkenler: private string name private string type private int batterylevel // 100 ile 0 arasında bir değer private boolean isoperational // bataryası varsa true metotlar: private değişkenler için get ve set metotları. public void charge(): batarya seviyesini 100 e çıkarır. constructorlar: bir tane parametresiz ve parametreli constructor. parametresiz olan name= “wall-e”, type= “trash”, batterylevel = 100 ve isoperational = true yapmalıdır. public void printrobot(): pengueni ekrana basmalıdır. örnek: robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true factory: değişkenler: private string name private string location private arraylist<robot> robots metotlar: public factory(string name, string location) public factory()// name = “factory1” ve location = “moon” yapar. private değişkenler için get ve set metotları. public void addrobot(robot robot) public void chargeallrobots(): tüm robotların şarjını 100 yapar. public void printfactory(): ekrana basar. aşağıdaki formatta çıktı vermelidir: public void work(): her robotun şarjı %15 azalır. main: factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] çıktı: factory name: factory1 location: moon robots operating here: robot name: wall-e robot type: trash battery level: 100% is operational: true robot name: bender robot type: bending unit battery level: 55% is operational: true robot name: r2-d2 robot type: astromech battery level: 80% is operational: true [CODE]public class robot{[/CODE] private [CODE]string name;[/CODE] private [CODE]string type;[/CODE] private [CODE]int batterylevel;[/CODE] // 100 ile 0 arasında bir değer private boolean isoperational; // bataryası varsa true [CODE]public robot(){[/CODE] name = ""wall-e""; type = ""trash""; batterylevel = 100; isoperational = true; } [CODE]public robot(string name, string type, int batterylevel){[/CODE] this.name = name; this.type = type; this.batterylevel = batterylevel; } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string gettype(){[/CODE] [CODE]return type;[/CODE] } [CODE]public void settype(string type){[/CODE] this.type = type; } [CODE]public int getbatterylevel(){[/CODE] [CODE]return batterylevel;[/CODE] } [CODE]public void setbatterylevel(int batterylevel){[/CODE] this.batterylevel = batterylevel; } [CODE]public boolean getisoperational(){[/CODE] [CODE]return isoperational;[/CODE] } [CODE]public void setisoperational(boolean isoperational){[/CODE] //this.isoperational = isoperational; [CODE]if(batterylevel > 0) isoperational = true;[/CODE] [CODE]else isoperational = false;[/CODE] this.isoperational = isoperational; } [CODE]public void charge(){[/CODE] batterylevel = 100; } [CODE]public void printrobot(){[/CODE] //robot name: wall-e robot type: trash batterylevel : 100% isoperationalt: true system.out.pr[CODE]intln(""robot name: "" + name + "" robot type: "" + type + "" battery level: "" + batterylevel + ""%"" + "" is operational: "" + isoperational);[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] factory factory = [CODE]new factory();[/CODE] robot r1 = [CODE]new robot();[/CODE] // default robot ""wall-e"" robot r2 = [CODE]new robot(""bender"", ""bending unit"", 55);[/CODE] robot r3 = [CODE]new robot(""r2-d2"", ""astromech"", 80);[/CODE] factory.addrobot(r1); factory.addrobot(r2); factory.addrobot(r3); factory.pr[CODE]intfactory();[/CODE] } } [CODE]public class q1{[/CODE] [CODE]public static void combinations(string str, int index, string guncelstr){[/CODE] if(index == str.length()){ // stringin verilen ilk halini yazdıracak system.out.pr[CODE]intln(guncelstr);[/CODE] [CODE]return;[/CODE] } char c = str.charat(index); [CODE]int ascii_degeri = (int)c;[/CODE] [CODE]if ((ascii_degeri>=65 && ascii_degeri<=90) || (ascii_degeri>=97 && ascii_degeri<=122)) {[/CODE] //küçük harf mi veya büyük harf mi diye bakacak, rakam ise lower veya upper işlemi uygulamayacak. combinations(str, index+1, guncelstr+character.tolowercase(c)); combinations(str, index+1, guncelstr+character.touppercase(c)); } [CODE]else combinations(str, index+1, guncelstr+c);[/CODE] } [CODE]public static void main(string[] args) {[/CODE] [CODE]string str = ""a1b2"";[/CODE] combinations(str, 0, """"); } } import java.util.arraylist; [CODE]public class factory {[/CODE] private [CODE]string name;[/CODE] private [CODE]string location;[/CODE] private arraylist<robot> robots; [CODE]public factory(string name, string location){[/CODE] this.name = name; this.location = location; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public factory(){[/CODE] name = ""factory1""; location = ""moon""; this.robots = [CODE]new arraylist<>();[/CODE] } [CODE]public string getname(){[/CODE] [CODE]return name;[/CODE] } [CODE]public void setname(string name){[/CODE] this.name = name; } [CODE]public string getlocation(){[/CODE] [CODE]return location;[/CODE] } [CODE]public void setlocation(string location){[/CODE] this.location = location; } [CODE]public arraylist<robot> getrobots(){[/CODE] [CODE]return robots;[/CODE] } [CODE]public void setrobots(arraylist<robot> robots){[/CODE] this.robots = robots; } [CODE]public void addrobot(robot robot){[/CODE] robots.add(robot); } [CODE]public void chargeallrobots() {[/CODE] [CODE]for (robot robot: robots) {[/CODE] robot.charge(); } } [CODE]public void printfactory() {[/CODE] system.out.pr[CODE]int(""factory name: "" + name);[/CODE] system.out.pr[CODE]intln("" location: "" + location);[/CODE] system.out.pr[CODE]intln(""robots operating here:"");[/CODE] [CODE]for (robot robot : robots) {[/CODE] robot.pr[CODE]introbot();[/CODE] } } [CODE]public void work() {[/CODE] robot rbt = [CODE]new robot();[/CODE] if(rbt.getbatterylevel() >= 15) rbt.setbatterylevel(rbt.getbatterylevel()-15); else rbt.setbatterylevel(0); rbt.setisoperational(rbt.getbatterylevel() > 0); } } robot fabrikası bil 211 - quiz 2 13 şubat 2025 1 giriş bu laboratuvarda inheritance, polymorphism ve interface kullanarak bir robot fabrikası geliştireceğiz. 2 genel yapı sistem, üç ana bileşenden oluşmaktadır: bataryalı ( withbattery ) arayüzü. bataryası olan objelerle etkileşimi tanımlar. soyut robot sınıfı ( abstractrobot ).ortak robot özelliklerini içerir. özel robot sınıfları ( cleaningrobot vesecurityrobot ).farklı robot türlerini temsil eder. robot fabrikası ( robotfactory ).robotların üretilmesini ve yönetilmesini sağlar. 3 sınıf ve arayüz tanımları 3.1 withbattery arayüzü metotlar: -int getbatterylife() batarya ömrünü döner. -void recharge() bataryayı yeniler. 3.2 abstractrobot sınıfı (soyut sınıf) - withbattery arayüzünü gerçekler (implement) değişkenler: -modelname (protected string) robotun modeli. -batterylife (protected int) robotun batarya ömrü. metotlar: -public abstractrobot(string modelname, int batterylife) constructor. -public string getmodelname() model adını döner. -public abstract void performtask() soyut metod. cleaningrobot vesecurityrobot sınıfları tarafından tanımlanacak. 3.3 cleaningrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -cleaningpower (private int) robotun temizlik gücü. ekstra metotlar: -cleaningrobot(string modelname, int batterylife, int cleaningpower) constructor. 1 -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] cleaning in progress... cleaning power: cleaningpower "" mesajını yazdırır ( modelname vecleaningpower yerine değişken değerleri göster- ilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname ] not enough battery to clean..."" mesajı gösterilmeli. -public void boostcleaningpower(int miktar) temizlik gücünü miktarkadar artırır. 3.4 securityrobot sınıfı - abstractrobot sınıfını geliştirir (extend) ekstra değişken: -isarmed (private boolean) robotun silahlı olup olmadığı. ekstra metotlar: -securityrobot(string modelname, int batterylife, bool isarmed) constructor. -public void performtask() eğer batarya ömrü 10 ya da daha fazla ise ""[ modelname ] scanning for threats... armed: isarmed"" mesajını yazdırır ( modelname veisarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[ modelname ] not enough battery to scan threats..."" mesajı gösterilmeli. -public void togglearmedmode() silah modunu değiştirir. 3.5 robotfactory sınıfı değişkenler: -robots(private arraylist<abstractrobot>) üretilen robotları saklar. metotlar: -public void producecleaningrobot(string modelname, int batterylife, int cleaningpower) robotsdizisine verilen parametrelerle bir cleaningrobot ekler. -public void producesecurityrobot(string modelname, int batterylife, boolean isarmed) robotsdizisine verilen parametrelerle bir securityrobot ekler. -public void performalltasks() robotsdizisindeki robotların dizi sırasında performtask metodlarını çağırır. -public void displayrobots() tüm robotları ekrana yazdırır (çıktının formatı ana program bölümünde mevcut). -public void upgradecleaningrobots(int miktar) temizlik robotlarının gücünü miktarkadar artırır. -public void togglesecurityrobotsmode() güvenlik robotlarının modunu tersine döndürür. -??? bu fonksiyon tüm farklı robotfactory’ler tarafından üretilmiş robot sayısını ekrana ""tum fabrikalar tarafindan toplam toplamroboturetimi robot uretildi"" yazdırır ( toplamroboturetimi yerine toplam üretilen robot sayısı yazılmalıdır). bu fonksiyonu tamamlamak için robotfactory sınıfına yardımcı değişkenler ve metodlar ekleyebilirsiniz ancak yukarıda belirtilmiş metodlarda değişiklik yapmayın . 2 4 ana program ( mainsın[CODE]ıfı) public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\performing all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.our.pr[CODE]intln(""\n"");[/CODE] ??? // burada robotfactory sin[CODE]ifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz }[/CODE] } 5 çıktı örneği produced robots: cleaningrobot - model: cleanmaster 3000, battery: 100, cleaning power: 80 securityrobot - model: guardbot x, battery: 150, armed: true securityrobot - model: patrolbot, battery: 120, armed: false cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 150 performıng all robot tasks: [cleanmaster 3000] cleaning in progress... cleaning power: 80 [guardbot x] scanning for threats... armed: true [patrolbot] scanning for threats... armed: false [cleanmaster 3500] not enough battery to clean... upgrading cleaning robots: cleaningrobot - cleanmaster 3000 now has cleaning power: 90 cleaningrobot - cleanmaster 3500 now has cleaning power: 160 toggling security robot modes: securityrobot - guardbot x is now unarmed securityrobot - patrolbot is now armed 3 final robot status: cleaningrobot - model: cleanmaster 3000, battery: 90, cleaning power: 90 securityrobot - model: guardbot x, battery: 140, armed: false securityrobot - model: patrolbot, battery: 110, armed: true cleaningrobot - model: cleanmaster 3500, battery: 5, cleaning power: 160 tum fabrikalar tarafindan toplam 6 robot uretildi 6 gönderim formatı - tüm sınıflar için ayrı bir dosya oluşturun (main.java, robotfactory.java, ...). - quizi bitirdiğinizde oluşturduğunuz tüm dosyaları sıkıştırın (zip, rar, 7z, tar, tar.gz formatlarından herhangi birisi uygun). - sıkıştırılmışarşivinisminiisim_numara_sube2şeklindeisimlendirin(örn.,johnnash_181101014_sube2.zip). - i̇simlendirdiğiniz arşivi canpolatog@gmail.com e-mail adresine ""quiz2 şube2"" başlıklı bir mail ile gönderin. 4 [CODE]public interface withbattery{[/CODE] [CODE]int getbatterylife();[/CODE] //batarya omrunu doner [CODE]void recharge();[/CODE] //bataryayi yeniler } [CODE]public abstract class abstractrobot implements withbattery{[/CODE] protected [CODE]string modelname;[/CODE] //robotun modeli protected [CODE]int batterylife;[/CODE] //robotun batarya omru [CODE]public abstractrobot(string modelname, int batterylife){[/CODE] this.modelname = modelname; this.batteryl[CODE]ife = batterylife;[/CODE] } [CODE]public string getmodelname(){[/CODE] [CODE]return modelname;[/CODE] } [CODE]public abstract void performtask();[/CODE] //abstract metod oldugu icin govdesiz [CODE]public int getbatterylife(){[/CODE] [CODE]return batterylife;[/CODE] } [CODE]public void recharge(){[/CODE] this.batteryl[CODE]ife = 100;[/CODE] } } [CODE]public class main {[/CODE] [CODE]public static void main(string[] args) {[/CODE] robotfactory factory = [CODE]new robotfactory();[/CODE] factory.producecleaningrobot(""cleanmaster 3000"", 100, 80); factory.producesecurityrobot(""guardbot x"", 150, true); factory.producesecurityrobot(""patrolbot"", 120, false); factory.producecleaningrobot(""cleanmaster 3500"", 5, 150); system.out.pr[CODE]intln(""\nproduced robots:"");[/CODE] factory.displayrobots(); system.out.pr[CODE]intln(""\nperforming all robot tasks:"");[/CODE] factory.per[CODE]formalltasks();[/CODE] system.out.pr[CODE]intln(""\nupgrading cleaning robots:"");[/CODE] factory.upgradecleaningrobots(10); system.out.pr[CODE]intln(""\ntoggling security robot modes:"");[/CODE] factory.togglesecurityrobotsmode(); system.out.pr[CODE]intln(""\nfinal robot status:"");[/CODE] factory.displayrobots(); // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz. robotfactory anotherfactory = [CODE]new robotfactory();[/CODE] anotherfactory.producecleaningrobot(""checkmaster 3000"", 100, 80); anotherfactory.producesecurityrobot(""checkbot x"", 150, true); system.out.pr[CODE]intln(""\n"");[/CODE] //?? // burada robotfactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz robotfactory.toplamroboturetimi(); } } [CODE]public class securityrobot extends abstractrobot{[/CODE] private boolean isarmed; //robotun silahli olup olmadigini gosterir securityrobot([CODE]string modelname, int batterylife, boolean isarmed){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.isarmed = isarmed; } /* eğer batarya ömrü 10 ya da daha fazla ise ""[modelname] scanning for threats... armed: isarmed"" mesajını yazdırır (modelname ve isarmed yerine değişken değerleri göstermeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname] not enough battery to scan threats..."" mesajı gösterilmeli. */ [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" scanning for threats... armed: "" + isarmed); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to scan threats...""); } } [CODE]public void togglearmedmode(){[/CODE] //silah modunu degistirir //securityrobot - guardbot x is now unarmed this.isarmed = !this.isarmed; if(isarmed == true) system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now armed"");[/CODE] else system.out.pr[CODE]intln(""securityrobot - "" + modelname + "" is now unarmed"");[/CODE] } [CODE]public boolean getisarmed(){[/CODE] [CODE]return isarmed;[/CODE] } [CODE]public void setisarmed(boolean isarmed){[/CODE] this.isarmed = isarmed; } } [CODE]public class cleaningrobot extends abstractrobot{[/CODE] private [CODE]int cleaningpower;[/CODE] cleaningrobot([CODE]string modelname, int batterylife, int cleaningpower){[/CODE] super(modelname, batteryl[CODE]ife);[/CODE] this.cleaningpower = cleaningpower; } /* eğer batarya ömrü 10 ya da daha fazla ise ""[modelname] cleaning in progress... cleaning power: cleaningpower"" mesajını yazdırır (modelname ve cleaningpower yerine değişken değerleri gösterilmeli). mesaj gösterildikten sonra batarya ömrü 10 azalır. metod çağırıldığında yeterli batarya ömrü yoksa ""[modelname] not enough battery to clean..."" mesajı gösterilmeli. */ [CODE]public void performtask(){[/CODE] [CODE]if(batterylife >= 10){[/CODE] system.out.println(""["" + modelname + ""]"" + "" cleaning in progress... cleaning power: "" + cleaningpower); batteryl[CODE]ife -= 10;[/CODE] } [CODE]else{[/CODE] system.out.println(""["" + modelname + ""]"" + "" not enough battery to clean...""); } } [CODE]public void boostcleaningpower(){[/CODE] //temizlik gucunu artirir this.cleaningpower += 10; system.out.pr[CODE]intln(""cleaningrobot - "" + modelname + "" now has cleaning power: "" + cleaningpower);[/CODE] } [CODE]public int getcleaningpower(){[/CODE] [CODE]return cleaningpower;[/CODE] } [CODE]public void setcleaningpower(int cleaningpower){[/CODE] this.cleaningpower = cleaningpower; } } import java.util.arraylist; [CODE]class robotfactory{[/CODE] private arraylist<abstractrobot> robots; private [CODE]static int totalrobotproduction = 0;[/CODE] // main metodunda obje olusturmadan cagirmak icin [CODE]static public robotfactory(){[/CODE] robots = [CODE]new arraylist<>();[/CODE] } [CODE]public void producecleaningrobot(string modelname, int batterylife, int cleaningpower){[/CODE] robots.add([CODE]new cleaningrobot(modelname, batterylife, cleaningpower));[/CODE] totalrobotproduction++; } [CODE]public void producesecurityrobot(string modelname, int batterylife, boolean isarmed){[/CODE] robots.add([CODE]new securityrobot(modelname, batterylife, isarmed));[/CODE] totalrobotproduction++; } [CODE]public void performalltasks(){[/CODE] [CODE]for (abstractrobot robot: robots){[/CODE] robot.per[CODE]formtask();[/CODE] } } [CODE]public void displayrobots(){[/CODE] [CODE]for (abstractrobot r: robots){[/CODE] [CODE]if (r instanceof cleaningrobot){[/CODE] cleaningrobot cr = (cleaningrobot)r; system.out.println(""cleaningrobot - model: "" + cr.getmodelname() + "", battery: "" + cr.getbatterylife() + "", cleaning power: "" + cr.getcleaningpower()); } [CODE]else if (r instanceof securityrobot){[/CODE] securityrobot sr = (securityrobot)r; system.out.println(""securityrobot - model: "" + sr.getmodelname() + "", battery: "" + sr.getbatterylife() + "", armed: "" + sr.getisarmed()); } } } [CODE]public void upgradecleaningrobots(int miktar){[/CODE] //cleaning robot sin[CODE]ifindayken for (abstractrobot r: robots){[/CODE] [CODE]if (r instanceof cleaningrobot){[/CODE] ((cleaningrobot)r).boostcleaningpower(); } } } [CODE]public void togglesecurityrobotsmode(){[/CODE] //security robot sin[CODE]ifindayken for (abstractrobot r: robots){[/CODE] [CODE]if (r instanceof securityrobot){[/CODE] ((securityrobot)r).togglearmedmode(); } } } [CODE]public static void toplamroboturetimi(){[/CODE] system.out.pr[CODE]intln(""tum fabrikalar tarafindan toplam "" + totalrobotproduction + "" robot uretildi"");[/CODE] } } envanter takip sistemi bil 211 - quiz 3 27 şubat 2025 1 giriş bu quizde, fileioveexceptions kullanarak basit bir envanter takip sistemi uygulaması geliştireceğiz. uygulama, interaktif bir terminal menüsü üzerinden, tek bir eşyanın ve stoğunun tutulduğu kayıtların yönetilmesini (eşya ekleme, çıkarma ve stok güncelleme) sağlayacaktır. ayrıca, envanter verileri sabit isimli bir dosyaya kaydedilebilecek ve bu dosyadan geri yüklenebilecektir. 2 genel program program konsol tabanlı bir kullanıcı arayüzü ile envanter takibi gerçekleştirmelidir. arayüz özellikleri aşağı- daki gibidir. -terminal menüsü: kullanıcıya aşağıdaki seçenekleri sunacaktır: – eşya ekleme: yeni bir eşya kaydı oluşturulur. her kayıt, eşya adı ve başlangıç stoğu bilgilerini içerir. eğer çoktan var olan bir eşya eklenmeye çalışılırsa program otomatik olarak önceki kaydın stoğunu güncellemelidir (yani aynı isimde iki kayıt oluşmamalı). – eşya çıkarma: mevcut envanterden istenilen eşya silinir. – stok güncelleme: kayıtlı bir eşyanın stoğu artırılabilir ya da azaltılabilir. i̇şlem sonucunda stok miktarı negatif olmamalıdır. – envanter listeleme: mevcut envanter kayıtları ekrana listelenir. – dosyaya kaydetme: güncel envanter verileri sabit isimli dosyaya kaydedilir. – dosyadan geri yükleme: daha önce kaydedilmiş envanter verileri dosyadan okunarak geri yüklenir. – çıkış: program sonlandırılır. 3envanterkaydi sınıfı değişkenler: -isim(private string) eşyanın adını tutar. -stok(private int) eşyanın stok miktarını tutar. metotlar: -[CODE]public envanterkaydi(string isim, int stok) constructor;[/CODE] eşya adı ve stok miktarını başlatır. -[CODE]public void stokguncelle(int miktar) stok miktarını günceller;[/CODE] negatif sonuç oluşmaması kontrol edilmelidir. - stokguncelle dışında ihtiyacınıza göre private değişkenler için getter ve setter tanımlayabilirsiniz. 4 fileio program, dosya okuma ve yazma işlemleri için java’nın java.io paketindeki sınıfları (örn., bufferedreader , scanner,printwriter ) kullanacaktır. dosya işlemleri sırasında aşağıdaki hata durumları için uygun mesajlar verilmelidir: - dosya bulunamazsa: ""hata: envanter dosyası bulunamadı."" - dosya boşsa: ""hata: envanter dosyası boş."" 1 5 hata yönetimi programda hata yönetimini düzenlemek için aşağıdaki özel hata türleri tanımlanacaktır. bu hatalar tespit edildiğinde program, hata kodu ile sonlanmalı ve ilgili hata mesajları stderr’e yazdırılmalıdır. 5.1 girdi hataları (inputexception class) dosya işlemleriyle ilgili hatalar için kendi tanımlayacağınız inputexception sınıfından türeyen özel hata sınıfları oluşturulacaktır: -dosyabulunamadiexception (extends inputexception) : dosya eksikse atılacak hata. - hata mesajı: ""hata: envanter dosyası bulunamadı."" -bosdosyaexception (extends inputexception) : dosya boşsa atılacak hata. - hata mesajı: ""hata: envanter dosyası boş."" 5.2 envanter i̇şlemleri hataları envanter işlemleri sırasında oluşabilecek hatalar için aşağıdaki özel hata türleri tanımlanacaktır: -stoknegatifexception (extends exception) : stok güncelleme işlemi sonucunda, eşyanın stoğu negatif bir değere düşerse atılacak hata. - hata mesajı: ""hata: stok miktarı negatif olamaz."" -esyayokexception (extends exception) : çıkarma veya güncelleme işlemi yapılmak istenen eşya envanterde bulunmuyorsa atılacak hata. - hata mesajı: ""hata: i̇stenen eşya envanterde mevcut değil."" -ozellikhatasiexception (extends exception) : eşya ekleme sırasında girilen bilgilerde hata veya eksiklik varsa atılacak hata. - hata mesajı: ""hata: eşya bilgileri hatalı veya eksik."" 6 gönderim formatı - quizinizi bitirdiğinizde asistanlarınızdan birisine kodunuzu ve çıktısını gösterip puanlatın. - asistan labınızı puanladığında tüm kaynak dosyalarını ve bu dökümantasyonu bir arşiv dosyası (zip, rar, 7z, tar, tar.gz) halinde sıkıştırın. - arşiv dosyasının isim_numara formatında isimlendirin (örn., sebnemferah_181101014.zip). - i̇simlendirdiğiniz arşiv dosyasını uzak sistemindeki quiz alanına yükleyin. 2 import java.io.*; import java.util.arraylist; import java.util.list; import java.util.scanner; [CODE]public class envantersistemi{[/CODE] public static final string dosyaadi = ""envanter.txt""; [CODE]public static list<envanterkaydi> env = new arraylist<>();[/CODE] [CODE]public static void main(string[] args){[/CODE] scanner keyboard = new scanner(system.in); boolean cont = true; [CODE]while(cont){[/CODE] system.out.println(""\n1. eşya ekle\n2. eşya çıkar\n3. stok güncelle\n4. envanteri listele\n5. dosyaya kaydet\n6. dosyadan yükle\n7. çıkış""); system.out.pr[CODE]int(""seçim: "");[/CODE] int sec = keyboard.next[CODE]int();[/CODE] keyboard.nextline(); [CODE]try{[/CODE] switch(sec){ case 1: esyaekle(); break; case 2: esyacikar(); break; case 3: stokguncelle(); break; case 4: envanterilistele(); break; case 5: dosyayakaydet(); break; case 6: dosyadanyukle(); break; case 7: cont = false; break; default: system.out.pr[CODE]intln(""geçersiz seçim!"");[/CODE] } } [CODE]catch(exception e){[/CODE] system.err.println(e.getmessage()); } } } [CODE]public static void esyaekle(){[/CODE] scanner keyboard = new scanner(system.in); system.out.pr[CODE]int(""eşya adı: "");[/CODE] string isim = keyboard.nextline(); system.out.pr[CODE]int(""stok miktarı: "");[/CODE] int stok = keyboard.next[CODE]int();[/CODE] keyboard.nextline(); [CODE]for (envanterkaydi k: env){[/CODE] if (k.getisim().equals(isim)){ [CODE]try{[/CODE] k.stokguncelle(stok); } [CODE]catch(stoknegatifexception e){[/CODE] system.err.println(e.getmessage()); } [CODE]return;[/CODE] } } env.add([CODE]new envanterkaydi(isim, stok));[/CODE] } [CODE]public static void esyacikar() throws esyayokexception{[/CODE] scanner keyboard = new scanner(system.in); system.out.pr[CODE]int(""silinecek eşya adı: "");[/CODE] string isim = keyboard.nextline(); [CODE]for(int i = 0;[/CODE] i< env.size() ; i++){ if (env.get(i).getisim().equals(isim)){ env.remove(i); [CODE]return;[/CODE] } } throw [CODE]new esyayokexception();[/CODE] } [CODE]public static void stokguncelle() throws esyayokexception{[/CODE] scanner keyboard = new scanner(system.in); system.out.pr[CODE]int(""eşya adı: "");[/CODE] string isim = keyboard.nextline(); [CODE]for(envanterkaydi kayit : env){[/CODE] if(kayit.getisim().equals(isim)){ system.out.pr[CODE]int(""stok değişim miktarı (+/-): "");[/CODE] int miktar = keyboard.next[CODE]int();[/CODE] keyboard.nextline(); [CODE]try{[/CODE] kayit.stokguncelle(miktar); }[CODE]catch(stoknegatifexception e){[/CODE] system.err.println(e.getmessage()); } [CODE]return;[/CODE] } } throw [CODE]new esyayokexception();[/CODE] } [CODE]public static void envanterilistele(){[/CODE] if(env.isempty()){ system.out.println(""envanter boş.""); [CODE]return;[/CODE] } [CODE]for(envanterkaydi k: env){[/CODE] system.out.println(k.getisim() + "" - stok: "" + k.getstok()); } } [CODE]public static void dosyayakaydet(){[/CODE] [CODE]try (printwriter writer = new printwriter(new filewriter(dosyaadi))){[/CODE] [CODE]for (envanterkaydi k: env){[/CODE] writer.println(k.getisim() + "","" + k.getstok()); } } [CODE]catch(ioexception e){[/CODE] system.err.pr[CODE]intln(""dosya yazma hatası!"");[/CODE] } } [CODE]public static void dosyadanyukle(){[/CODE] [CODE]try (bufferedreader rd = new bufferedreader(new filereader(dosyaadi))){[/CODE] [CODE]string cols;[/CODE] env.clear(); while((cols = rd.readline()) != null){ string[] elemanlar = cols.split("",""); if (elemanlar.length != 2) continue; env.add(new envanterkaydi(elemanlar[0], integer.parse[CODE]int(elemanlar[1])));[/CODE] } if(env.isempty()){ throw [CODE]new bosdosyaexception();[/CODE] } } [CODE]catch(filenotfoundexception e){[/CODE] system.err.println(new dosyabulunamadiexception().getmessage()); } [CODE]catch(ioexception | bosdosyaexception e){[/CODE] system.err.println(e.getmessage()); } } } [CODE]public class esyayokexception extends exception{[/CODE] [CODE]public esyayokexception(){[/CODE] super(""hata: i̇stenen eşya envanterde mevcut değil.""); } } [CODE]public class ozellikhatasiexception extends runtimeexception{[/CODE] [CODE]public ozellikhatasiexception(string mesaj){[/CODE] super(mesaj); } } [CODE]public class envanterkaydi{[/CODE] private [CODE]string isim;[/CODE] private [CODE]int stok;[/CODE] [CODE]public envanterkaydi(string isim, int stok){[/CODE] if ((isim == null) || (isim.isempty()) || (stok < 0)){ throw new ozellikhatasiexception(""hata: eşya bilgileri hatalı veya eksik.""); } this.isim = isim; this.stok = stok; } [CODE]public string getisim(){[/CODE] [CODE]return isim;[/CODE] } [CODE]public void setisim(string isim){[/CODE] this.isim = isim; } [CODE]public int getstok(){[/CODE] [CODE]return stok;[/CODE] } [CODE]public void setstok(int stok){[/CODE] this.stok = stok; } [CODE]public void stokguncelle(int miktar) throws stoknegatifexception{[/CODE] if ((this.stok + miktar < 0)){ throw new stoknegatifexception(""hata: stok miktarı negatif olamaz.""); } this.stok += miktar; } } [CODE]public class bosdosyaexception extends inputexception{[/CODE] [CODE]public bosdosyaexception(){[/CODE] super(""hata: envanter dosyası boş""); } } [CODE]public class stoknegatifexception extends exception{[/CODE] [CODE]public stoknegatifexception(string mesaj){[/CODE] super(mesaj); } } [CODE]public class inputexception extends exception {[/CODE] [CODE]public inputexception(string mesaj) {[/CODE] super(mesaj); } } [CODE]public class dosyabulunamadiexception extends inputexception{[/CODE] [CODE]public dosyabulunamadiexception(){[/CODE] super(""hata: envanter dosyası bulunamadı.""); } } bil211 quiz 4 section 2 quizleri uzak sistemine yükleyeceksiniz. q1: undoablelist<t> adında bir sınıf oluşturun. bu sınıf, bir arraylist'i genişletmeli ve aşağıdaki ek özelliklere sahip olmalıdır: ● undolast() metodu, en son eklenen öğeyi kaldırmalıdır. ● getlastadded() → son eklenen öğeyi listeyi değiştirmeden döndürür. ● eğer liste boşsa, undolast() bir hata vermemeli, sadece hiçbir şey yapmamalıdır. örnek kullanım: undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] q2: aşağıdaki generic metodu tamamlayın. ● verilen bir collection<t> içinde minimum veya maksimum öğeyi bulan bir metod yazın. ● boolean parametresi true ise maksimumu, false ise minimumu döndürmelidir. ● t öğeleri comparable<t> arabirimini uygulamalıdır. [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax) {[/CODE] // metodu tamamlayın } örnek kullanım: list<integer> numbers = arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) q3: belirli türdeki elemanları filtreleme ● bir collection<?> içindeki belirli bir türdeki öğeleri filtreleyen bir generic metod yazın. ● class<t> tür filtresi olarak kullanılmalıdır. ● sonucu yeni bir list<t> olarak döndürmelidir. [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type) {[/CODE] // metodu tamamlayın } örnek kullanım: list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] import java.util.collection; import java.util.arraylist; import java.util.arrays; import java.util.list; [CODE]public class utils{[/CODE] [CODE]public static <t> list<t> filterbytype(collection<?> collection, class<t> type){[/CODE] list<t> f_l = [CODE]new arraylist<>();[/CODE] [CODE]for(object eleman: collection){[/CODE] if (type.isinstance(eleman)){ f_l.add(type.cast(eleman)); } } [CODE]return f_l;[/CODE] } [CODE]public static void main(string[] args){[/CODE] list<object> mixed = arrays.aslist(1, ""hello"", 2.5, ""world"", 3, true); system.out.println(filterbytype(mixed, string.[CODE]class));[/CODE] // çıktı: [""hello"", ""world""] system.out.println(filterbytype(mixed, integer.[CODE]class));[/CODE] // çıktı: [1, 3] } } import java.util.collection; [CODE]public class extremefinder{[/CODE] [CODE]public static <t extends comparable<t>> t findextreme(collection<t> collection, boolean findmax){[/CODE] if(collection == null || collection.isempty()){ //bossa null don [CODE]return null;[/CODE] } t a = null; [CODE]for(t eleman: collection){[/CODE] [CODE]if(a == null){[/CODE] // a bossa elemani a'ya ata a = eleman; } [CODE]else{[/CODE] // a bos degilse b ile a'yi karsilastir int b = eleman.compareto(a); [CODE]if((findmax) && (b>0)){[/CODE] // findmax true ise maksimumu doner a = eleman; } [CODE]else if((!findmax) && (b<0)){[/CODE] // findmax false ise minimumu doner a = eleman; } } } [CODE]return a;[/CODE] } [CODE]public static void main(string[] args) {[/CODE] java.util.list<integer> numbers = java.util.arrays.aslist(3, 9, 1, 6); system.out.pr[CODE]intln(findextreme(numbers, true));[/CODE] // çıktı: 9 (maksimum) system.out.pr[CODE]intln(findextreme(numbers, false));[/CODE] // çıktı: 1 (minimum) } } import java.util.arraylist; [CODE]public class undoablelist<t> extends arraylist<t>{[/CODE] [CODE]public void undolast(){[/CODE] // en son eklenen ogeyi kaldir if(this.isempty()){ // liste bossa bir sey yapma [CODE]return;[/CODE] } else if(!this.isempty()){ //liste doluysa son ogeyi cikar this.remove(this.size()-1); } } [CODE]public t getlastadded(){[/CODE] // son eklenen ogeyi listeyi degistirmeden dondur if(!this.isempty()){ return this.get(this.size()-1); } [CODE]return null;[/CODE] } [CODE]public static void main(string[] args){[/CODE] undoablelist<[CODE]string> list = new undoablelist<>();[/CODE] list.add(""a""); list.add(""b""); list.add(""c""); list.undolast(); // ""c"" kaldırılmalı system.out.pr[CODE]intln(list);[/CODE] // çıktı: [""a"", ""b""] } } kuş bakışı atış oyunu (top-down shooter) bil 211 - proje teslim tarihi: 27 mart 2025 23:59 1 amaç bu ödevde amacınız, java swing kullanarak kuş bakışı bir atış oyunu (top-down shooter) tasarlamaktır. oyunda, yönettiğimiz karakterin üzerine dalga dalga gelen çeşitli zombileri fare ile hedef alarak farklı silahlar kullanıp öldürmemiz gerekmektedir. karakterimiz öldüğünde oyun sona erecektir. her dalga başına ve öldürülen zombi başına kazanılan puan artacaktır. dalgalar ilerledikçe gelen zombilerin sayısı ve çeşitleri artarak zorluk seviyesi yükselecektir. 2 gereksinimler oyun derste öğrendiğiniz oop ilkelerine uygun sınıf/arayüz tasarımları ile geliştirilmelidir. - zorluk seviyesi arttıkça zombi sayısı ve çeşitliliği artmalıdır. - oyun duraklatılabilmeli ve kaydedilip tekrar yüklenilebilmelidir (fileio kullanılmalıdır). - sol üst köşede seçili silah ve kalan mermi miktarı gösterilmelidir. - sağ üst köşede oyuncunun canı ve toplam puanı gösterilmelidir. - oyunun duraklatılması, kaydedilmesi ve devam ettirilmesi için bir menü bulunmalıdır. 3 silahlar oyunda farklı silahlar bulunmaktadır. belirli zombi dalgaları temizlendikten sonra oyun ödül olarak yeni bir silahverecektir. hersilahınkendineözgübirçalışmamekanizmasıvardır. silahlarınşarjörkapasitesisınırlıdır ve şarjördeki mermiler bittiğinde tekrar doldurulmadan ateş edilemez. toplam mermi sayısı oyuncunun o silaha ait elinde ne kadar mermi olduğunu gösterir. r tuşuna basarak şarjör yeniden doldurulabilir. 3.1 tabanca - şarjör kapasitesi: 12 mermi - ateş hızı: 120 mermi/dakika - elde etme: oyuncu oyuna bu silahla başlar. - özellik: düz atış yapar, sapma yoktur. sınırsız yedek şarjör (diğer tüm silahlar için yedek şarjör ve mermiler rastgele bir şekilde dalga sırasında ve sonlarında zombilerden düşer). 3.2 piyade tüfeği - şarjör kapasitesi: 30 mermi - ateş hızı: 600 mermi/dakika - elde etme: 1. dalga tamamlandıktan sonra - özellik: düzatışyaparancak30derecesapmasıvardır. sapmaaçısı, karakterinbaktığıyöndemerminin her iki dönme yönüne de saçılabileceği maksimum açıdır. 1 3.3 pompalı tüfek - şarjör kapasitesi: 5 mermi - ateş hızı: 60 mermi/dakika - elde etme: 3. dalga tamamlandıktan sonra - özellik: her atış 45 derecelik bir yay üzerinde eşit aralıklı 9 mermi atar (yani karakter merkezli mermi hız vektörleri arasında 5 derece açı olmalıdır). 3.4 keskin nişancı tüfeği - şarjör kapasitesi: 5 mermi - ateş hızı: 30 mermi/dakika - elde etme: 5. dalga tamamlandıktan sonra - özellik: mermileri zombileri delip arasındaki zombilere de hasar verir. 3.5 roketatar - şarjör kapasitesi: 1 roket - ateş hızı: 10 roket/dakika - elde etme: 10. dalga tamamlandıktan sonra - özellik: patlama etkisiyle birden fazla zombiye zarar verir. 4 zombiler zombiler oyundaki düşman tipleridir. zombiler oyuncuya doğru ilerlerler ve eğer oyuncuya temas ederlerse oyuncuya hasar verirler. zorluk seviyesi arttıkça zombilerin sayısı ve çeşitliliği artmaktadır. zombi tipleri birbirinden renk ya da şekil olarak ayırt edilebilmelidir. 4.1 normal zombi - can: orta - hız: yavaş - hasar: orta 4.2 sürünge zombi - can: düşük - hız: hızlı - hasar: orta - özellik: oyuncunun yakınına geldiğinde zıplar. 4.3 tank zombi - can: yüksek - hız: çok yavaş - hasar: yüksek 2 4.4 asit tüküren zombi - can: düşük - hız: yavaş - hasar: orta (uzaktan asit tükürebilir) - özellik: öldürüldüğünde yanındaki birimlere zarar verir. 5 rapor ve teslim formatı - oyun, oopprensiplerineuygunolaraktasarlanmalıvesınıfdiyagramları, arayüztasarımıfinalraporda sunulmalıdır. - oyun test edilerek ekran görüntüleri rapora eklenmelidir. - rapor pdf formatında olmalı ve ismi proje_rapor.pdf olmalıdır. - oyunun mainfonksiyonu gameisimli bir sınıf içinde bulunmalıdır ( java game komutuyla çalışmalı). - kaynak kodun tamamı source.zip (uzantı 7z, rar, tar.gz de olabilir) şeklinde sıkıştırılmış olmalıdır. - sıkıştırılmış kaynak kod ve rapor uzak sistemine yüklenmelidir. 6 yardımcı kaynaklar dahaöncehiçkuşbakışıatışoyunuoynamadıysanızaşağıdakioyunlarıreferansolarakalabilirsiniz. buradaki oyunlarıngrafikleriilemekaniklerisizdenbeklenendenfarklıolsadaharitatasarımı, karakterhareketi,kamera hareketi, ateş etme mekanikleri ve zombilerin yapay zekası ile ilgili temel fikirler edinebilirsiniz. - little top-down shooter: https://www.youtube.com/watch?v=pj3m3fu3i5a - super c - stage 2: https://www.youtube.com/watch?v=os2t_v5suj4 - neon chrome: https://www.youtube.com/watch?v=puhw1bevtro 3 [CODE]public class weapon {[/CODE] } [CODE]public class pistol {[/CODE] } import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.awt.geom.po[CODE]int2d;[/CODE] import java.awt.image.bufferedimage; import java.io.*; import java.util.*; import java.util.list; import java.util.timer; import javax.imageio.imageio; import java.awt.image.*; [CODE]public class game extends jframe implements keylistener, mouselistener, mousemotionlistener{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] // game constants private [CODE]static final int window_width = 1000;[/CODE] private [CODE]static final int window_height = 600;[/CODE] private [CODE]static final int player_size = 30;[/CODE] private [CODE]static final int zombie_size = 25;[/CODE] private [CODE]static final int projectile_size = 5;[/CODE] private [CODE]static final int player_speed = 5;[/CODE] // game state private boolean running = false; private boolean paused = false; private [CODE]int score = 0;[/CODE] private [CODE]int currentwave = 0;[/CODE] private long lastwavetime = 0; private long wavedelay = 5000; // wave'ler arası 5 saniye // game entities private player player; private list<zombie> zombies = [CODE]new arraylist<>();[/CODE] private list<projectile> projectiles = [CODE]new arraylist<>();[/CODE] private list<pickup> pickups = [CODE]new arraylist<>();[/CODE] private list<wall> walls = [CODE]new arraylist<>();[/CODE] // ui elements //private bufferedimage background; private jpanel gamepanel; private jmenubar menubar; private jmenuitem pauseitem, saveitem, loaditem, exititem; private transient bufferedimage background; // input tracking private boolean up, down, left, right; private po[CODE]int mouseposition = new point(0, 0);[/CODE] // game timer private transient timer gametimer; private [CODE]int fps = 60;[/CODE] //backgorund private transient bufferedimage coverimage; [CODE]public static void main(string[] args){[/CODE] [CODE]new game();[/CODE] } [CODE]public game(){[/CODE] settitle(""zombie shooter""); setdefaultcloseoperation(jframe.exit_on_close); setresizable(false); [CODE]try{[/CODE] coverimage = imageio.read(getclass().getclassloader().getresourceasstream(""background.png"")); }[CODE]catch(ioexception e){[/CODE] system.out.println(""gorsel yuklenemedi: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } // arayuz initialize ediyorum createmenubar(); creategamepanel(); addwindowfocuslistener([CODE]new windowadapter(){[/CODE] @override [CODE]public void windowgainedfocus(windowevent e){[/CODE] gamepanel.requestfocusinwindow(); } }); // oyunu initialize ediyorum initializegame(); pack(); setlocationrelativeto(null); setvisible(true); // oyun loopunu baslatiyorum startgameloop(); } private [CODE]void createmenubar(){[/CODE] menubar = [CODE]new jmenubar();[/CODE] jmenu gamemenu = [CODE]new jmenu(""game"");[/CODE] pauseitem = [CODE]new jmenuitem(""pause"");[/CODE] pauseitem.addactionlistener(e -> togglepause()); saveitem = [CODE]new jmenuitem(""save game"");[/CODE] saveitem.addactionlistener(e -> savegame()); loaditem = [CODE]new jmenuitem(""load game"");[/CODE] loaditem.addactionlistener(e -> loadgame()); exititem = [CODE]new jmenuitem(""exit"");[/CODE] exititem.addactionlistener(e -> system.exit(0)); gamemenu.add(pauseitem); gamemenu.add(saveitem); gamemenu.add(loaditem); gamemenu.addseparator(); gamemenu.add(exititem); menubar.add(gamemenu); setjmenubar(menubar); } private [CODE]void creategamepanel(){[/CODE] gamepanel = [CODE]new jpanel(){[/CODE] @override protected [CODE]void paintcomponent(graphics g){[/CODE] super.pa[CODE]intcomponent(g);[/CODE] graphics2d g2d = (graphics2d) g; // oyun calismiyorsa kapak ekrani [CODE]if (!running){[/CODE] bufferedimage coverimage = null; [CODE]try{[/CODE] coverimage = imageio.read(getclass().getclassloader().getresourceasstream(""background.png"")); }[CODE]catch(ioexception e){[/CODE] system.out.println(""kapak resmi yüklenemedi: "" + e.getmessage()); e.pr[CODE]intstacktrace();[/CODE] } // kapak resmi [CODE]if (coverimage != null){[/CODE] g2d.drawimage(coverimage, 0, 0, getwidth(), getheight(), null); } [CODE]else{[/CODE] // eğer fotograf yuklenmezse siyah background ve ustune hata mesaji yazacak g2d.setcolor(color.black); g2d.fillrect(0, 0, getwidth(), getheight()); g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 36)); g2d.draw[CODE]string(""kapak resmi yüklenemedi!"", getwidth() / 2 - 150, getheight() / 2 - 20);[/CODE] } // baslik ve buyruklar g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 36)); //g2d.draw[CODE]string(""zombie shooter"", getwidth() / 2 - 150, getheight() / 2 - 50);[/CODE] g2d.setfont(new font(""arial"", font.plain, 20)); //g2d.draw[CODE]string(""press enter to start"", getwidth() / 2 - 100, getheight() / 2);[/CODE] } [CODE]else{[/CODE] // oyun calisiyorsa background siyah g2d.setcolor(color.black); g2d.fillrect(0, 0, getwidth(), getheight()); // duvarlar [CODE]for (wall wall: walls){[/CODE] wall.render(g2d); } // projeler [CODE]for (projectile p: projectiles){[/CODE] p.render(g2d); } // zombiler [CODE]for (zombie z: zombies){[/CODE] z.render(g2d); } // pickuplar [CODE]for (pickup pickup: pickups){[/CODE] pickup.render(g2d); } // oyuncu (biz) player.render(g2d); // arayuz elemanlari drawui(g2d); } } }; gamepanel.setpreferredsize([CODE]new dimension(window_width, window_height));[/CODE] gamepanel.setfocusable(true); gamepanel.addkeylistener(this); gamepanel.addmouselistener(this); gamepanel.addmousemotionlistener(this); add(gamepanel); } private [CODE]void drawui(graphics2d g2d){[/CODE] // silah bilgisi (solda) g2d.setcolor(color.white); g2d.setfont(new font(""arial"", font.bold, 14)); weapon currentweapon = player.getcurrentweapon(); g2d.drawstring(""weapon: "" + currentweapon.getname(), 20, 30); g2d.drawstring(""ammo: "" + currentweapon.getammo() + ""/"" + currentweapon.gettotalammo(), 20, 50); // saglik durumu ve score g2d.drawstring(""health: "" + player.health, 800, 30); // sag ust g2d.draw[CODE]string(""score: "" + score, 780, 60);[/CODE] // sag ustun alti // hangi level'da (wave) oldugumuzun bilgisi (orta ust) g2d.draw[CODE]string(""wave: "" + currentwave, window_width / 2 - 30, 30);[/CODE] // saglik durumu guncellemesi gorsel gorunum g2d.setcolor(color.red); g2d.fillrect(window_width - 150, 40, 100, 10); g2d.setcolor(color.green); g2d.fillrect(window_width - 150, 40, player.health, 10); // zombi turlerinin bilgisi drawzombiekey(g2d); } // ustte zombilerin ikon ve isimlerini gösteren panel private [CODE]void drawzombiekey(graphics2d g2d){[/CODE] [CODE]int iconsize = 20;[/CODE] [CODE]int margin = 10;[/CODE] [CODE]int startx = window_width/2 - 200;[/CODE] // baslangic noktasi [CODE]int y = 60;[/CODE] // normal zombie: yesil daire g2d.setcolor(color.green); g2d.filloval(startx, y, iconsize, iconsize); g2d.setcolor(color.white); g2d.draw[CODE]string(""normal zombie"", startx + iconsize + margin, y + iconsize - 3);[/CODE] // crawler (surungen) zombie: sari kare startx += 180; g2d.setcolor(color.yellow); g2d.fillrect(startx, y, iconsize, iconsize); g2d.setcolor(color.white); g2d.draw[CODE]string(""crawler zombie"", startx + iconsize + margin, y + iconsize - 3);[/CODE] // tank zombie: kirmizi dortgen startx += 180; [CODE]int centerx = startx + iconsize / 2;[/CODE] [CODE]int centery = y + iconsize / 2;[/CODE] polygon diamond = [CODE]new polygon();[/CODE] diamond.addpo[CODE]int(centerx, centery - iconsize / 2);[/CODE] // ust nokta diamond.addpo[CODE]int(centerx + iconsize / 2, centery);[/CODE] // sag nokta diamond.addpo[CODE]int(centerx, centery + iconsize / 2);[/CODE] // alt nokta diamond.addpo[CODE]int(centerx - iconsize / 2, centery);[/CODE] // sol nokta g2d.setcolor(color.red); g2d.fillpolygon(diamond); g2d.setcolor(color.black); g2d.setstroke([CODE]new basicstroke(2));[/CODE] g2d.drawpolygon(diamond); g2d.setcolor(color.white); g2d.setstroke([CODE]new basicstroke(1));[/CODE] g2d.draw[CODE]string(""tank zombie"", startx + iconsize + margin, y + iconsize - 3);[/CODE] // acid (asit tukuren) zombie: mor ucgen startx += 180; g2d.setcolor(color.magenta); [CODE]int[] xpoints = {[/CODE]startx + iconsize/2, startx, startx + iconsize}; [CODE]int[] ypoints = {[/CODE]y, y + iconsize, y + iconsize}; g2d.fillpolygon(xpo[CODE]ints, ypoints, 3);[/CODE] g2d.setcolor(color.white); g2d.draw[CODE]string(""acid zombie"", startx + iconsize + margin, y + iconsize - 3);[/CODE] } // duvarlarin cakismasini istemedigim icin bunun kontrolunu burada yapiyorum private boolean canplacewall([CODE]int x, int y, int width, int height){[/CODE] rectangle [CODE]newwallrect = new rectangle(x, y, width, height);[/CODE] [CODE]for (wall wall: walls){[/CODE] rectangle existingwallrect = new rectangle(wall.x, wall.y, wall.width, wall.height); if(newwallrect.[CODE]intersects(existingwallrect)){[/CODE] [CODE]return false;[/CODE] } } [CODE]return true;[/CODE] } private [CODE]void initializegame(){[/CODE] // oyuncu (ben) oyun ekraninin merkezinde oyuna basliyorum player = [CODE]new player(window_width / 2, window_height / 2);[/CODE] player.addweapon([CODE]new pistol());[/CODE] // resetleme zombies.clear(); projectiles.clear(); pickups.clear(); walls.clear(); score = 0; currentwave = 0; [CODE]if(canplacewall(150, 50, 20, 200)){[/CODE] walls.add([CODE]new wall(350, 90, 20, 200));[/CODE] } [CODE]if(canplacewall(550, 300, 20, 200)){[/CODE] walls.add([CODE]new wall(550, 300, 20, 200));[/CODE] } [CODE]if(canplacewall(700, 100, 20, 200)){[/CODE] walls.add([CODE]new wall(700, 150, 20, 200));[/CODE] } [CODE]if(canplacewall(200, 350, 200, 20)){[/CODE] walls.add([CODE]new wall(200, 350, 200, 20));[/CODE] } [CODE]if(canplacewall(400, 500, 200, 20)){[/CODE] walls.add([CODE]new wall(700, 500, 200, 20));[/CODE] } [CODE]if(canplacewall(50, 300, 100, 20)){[/CODE] walls.add([CODE]new wall(50, 200, 100, 20));[/CODE] } [CODE]if(canplacewall(850, 50, 100, 20)){[/CODE] walls.add([CODE]new wall(850, 250, 100, 20));[/CODE] } [CODE]if(canplacewall(300, 450, 20, 100)){[/CODE] walls.add([CODE]new wall(300, 450, 20, 100));[/CODE] } // baslangicta oyun calismasin running = false; paused = false; } private [CODE]void startgameloop(){[/CODE] gametimer = [CODE]new timer();[/CODE] gametimer.scheduleatfixedrate([CODE]new timertask(){[/CODE] @override [CODE]public void run(){[/CODE] [CODE]if(running && !paused){[/CODE] update(); } gamepanel.repa[CODE]int();[/CODE] } }, 0, 1000 / fps); } private [CODE]void update(){[/CODE] // oyuncu guncellemesi player.update(); // mermi guncellemesi ve carpisma kontrolu for(int i = projectiles.size() - 1; i >= 0; i--){ projectile p = projectiles.get(i); p.update(); // sinir disinda kalan mermileri yok ediyorum if (p.x < 0 || p.x > window_width || p.y < 0 || p.y > window_height){ projectiles.remove(i); continue; } // duvarlarla carpisma olup olmadığını kontrol ediyorum, carpisma varsa mermiyi cikariyorum [CODE]for(wall wall: walls){[/CODE] [CODE]if(circlerectcollision(p, wall)){[/CODE] projectiles.remove(i); break; } } // zombilerle carpismayi kontrol ediyorum for(int j = zombies.size() - 1; j >= 0; j--){ zombie z = zombies.get(j); [CODE]if(checkcollision(p, z)){[/CODE] z.takedamage(p.damage); // roketatar icin special case: patlama etkisiyle birden fazla zombiye zarar verir [CODE]if(p instanceof rocketprojectile){[/CODE] ((rocketprojectile) p).explode(zombies); projectiles.remove(i); break; } // keskin nisanci tufegi icin special case: mermileri zombileri delip arasındaki zombilere de hasar verir [CODE]if(!(p instanceof sniperprojectile)){[/CODE] projectiles.remove(i); break; } } } } // zombileri guncelliyorum ve oyuncu carpismasini kontrol ediyorum for(int i = zombies.size() - 1; i >= 0; i--){ zombie z = zombies.get(i); z.update(); // zombinin olup olmedigini kontrol et if(z.health <= 0){ // asit tukuren zombinin ozel efekti [CODE]if(z instanceof acidzombie){[/CODE] ((acidzombie) z).splashacid(zombies); } // cephane dusurme if(math.random() < 0.15){ pickups.add(new ammopickup(z.x, z.y)); } zombies.remove(i); score += 10 * currentwave; continue; } // oyuncuyla carpisma olup olmadigini kontrol ediyorum [CODE]if(checkcollision(player, z)){[/CODE] player.takedamage(z.damage); // oyuncuyu zombiden uzaklastiriyorum double angle = math.atan2(player.y - z.y, player.x - z.x); player.x += math.cos(angle) * 10; player.y += math.sin(angle) * 10; // oyuncu olunce oyun bitiyor if(player.health <= 0){ running = false; } } } // pickuplari guncelliyorum ve collectionlari kontrol ediyorum for(int i = pickups.size() - 1; i >= 0; i--){ pickup pickup = pickups.get(i); [CODE]if(checkcollision(player, pickup)){[/CODE] pickup.collect(player); pickups.remove(i); } } // level'in (wave) bitip bitmedigini kontrol ediyorum if(zombies.isempty()){ if (system.currenttimemillis() - lastwavetime > wavedelay){ startnextwave(); } } } private [CODE]void startnextwave() {[/CODE] currentwave++; lastwavetime = system.currenttimemillis(); // silah ekleme kontrolleri [CODE]if(currentwave == 2){[/CODE] player.addweapon([CODE]new assaultrifle());[/CODE] } [CODE]else if(currentwave == 4){[/CODE] player.addweapon([CODE]new shotgun());[/CODE] } [CODE]else if(currentwave == 6){[/CODE] player.addweapon([CODE]new sniperrifle());[/CODE] } [CODE]else if(currentwave == 11){[/CODE] player.addweapon([CODE]new rocketlauncher());[/CODE] } // level'lara gore zombiler [CODE]if(currentwave == 1){[/CODE] // sadece normal zombi [CODE]int normalcount = 3;[/CODE] // temel sayı [CODE]for(int i = 0;[/CODE] i < normalcount; i++){ spawnzombieatedge([CODE]new normalzombie(0, 0));[/CODE] } } [CODE]else if(currentwave == 2){[/CODE] // normal ve surungen zombi [CODE]int normalcount = 3;[/CODE] [CODE]int crawlercount = 2;[/CODE] [CODE]for(int i = 0;[/CODE] i < normalcount; i++){ spawnzombieatedge([CODE]new normalzombie(0, 0));[/CODE] } [CODE]for(int i = 0;[/CODE] i < crawlercount; i++){ spawnzombieatedge([CODE]new crawlerzombie(0, 0));[/CODE] } } [CODE]else if(currentwave == 3){[/CODE] // normal, surungen ve tank zombie [CODE]int normalcount = 3;[/CODE] [CODE]int crawlercount = 2;[/CODE] [CODE]int tankcount = 3;[/CODE] [CODE]for(int i = 0;[/CODE] i < normalcount; i++){ spawnzombieatedge([CODE]new normalzombie(0, 0));[/CODE] } [CODE]for(int i = 0;[/CODE] i < crawlercount; i++){ spawnzombieatedge([CODE]new crawlerzombie(0, 0));[/CODE] } [CODE]for(int i = 0;[/CODE] i < tankcount; i++){ spawnzombieatedge([CODE]new tankzombie(0, 0));[/CODE] } } [CODE]else if(currentwave >= 4){[/CODE] // 4. wave ve sonrasında: normal, surungen, tank ve asit tukuren zombi spawn ediyorum // surungen haricinde tum zombi türlerine her wavede 1'er adet ekliyorum [CODE]int increase = currentwave - 3;[/CODE] // 4. dalgada artis=1, 5. dalgada artis=2 [CODE]int normalcount = 3 + increase;[/CODE] [CODE]int tankcount = 3 + increase;[/CODE] [CODE]int acidcount = 3 + increase;[/CODE] [CODE]int crawlercount = 1;[/CODE] // sabit [CODE]for(int i = 0;[/CODE] i < normalcount; i++){ spawnzombieatedge([CODE]new normalzombie(0, 0));[/CODE] } [CODE]for(int i = 0;[/CODE] i < crawlercount; i++){ spawnzombieatedge([CODE]new crawlerzombie(0, 0));[/CODE] } [CODE]for(int i = 0;[/CODE] i < tankcount; i++){ spawnzombieatedge([CODE]new tankzombie(0, 0));[/CODE] } [CODE]for(int i = 0;[/CODE] i < acidcount; i++){ spawnzombieatedge([CODE]new acidzombie(0, 0));[/CODE] } } } /* private [CODE]void startnextwave(){[/CODE] /* * oyunun bu kismini sadece kontrol etme amacli yazdim ve waveler arasi geci̇s kontrolu icin * oyundaki zombi sayilarini 1'e indirerek oyunu kodun bu kisminda kolaylastirdim. * bundan dolayi bu kismi comment satirina aldim. * /* // normal zombi [CODE]for(int i = 0;[/CODE] i < 1; i++){ spawnzombieatedge([CODE]new normalzombie(0, 0));[/CODE] } // surungen zombi [CODE]if(currentwave >= 2){[/CODE] [CODE]for(int i = 0;[/CODE] i < 1; i++){ spawnzombieatedge([CODE]new crawlerzombie(0, 0));[/CODE] } } // tank zombi [CODE]if(currentwave >= 3){[/CODE] [CODE]for(int i = 0;[/CODE] i < 1; i++){ spawnzombieatedge([CODE]new tankzombie(0, 0));[/CODE] } } // asit zombi [CODE]if(currentwave >= 4){[/CODE] [CODE]for(int i = 0;[/CODE] i < 1; i++){ spawnzombieatedge([CODE]new acidzombie(0, 0));[/CODE] } } }*/ private [CODE]void spawnzombieatedge(zombie zombie){[/CODE] int side = (int) (math.random() * 4); // 0:ust, 1:sag, 2:alt, 3:sol switch(side){ case 0: // ust zombie.x = math.random() * window_width; zombie.y = -zombie_size; break; case 1: // sag zombie.x = window_width + zombie_size; zombie.y = math.random() * window_height; break; case 2: // alt zombie.x = math.random() * window_width; zombie.y = window_height + zombie_size; break; case 3: // sol zombie.x = -zombie_size; zombie.y = math.random() * window_height; break; } zombies.add(zombie); } private boolean checkcollision(gameobject a, gameobject b){ double distance = math.sqrt(math.pow(a.x - b.x, 2) + math.pow(a.y - b.y, 2)); return distance < (a.size + b.size) / 2; } // daire ile dikdortgen carpismasini tespit ediyorum private boolean circlerectcollision(gameobject circle, wall wall){ double radius = circle.size / 2.0; double cx = circle.x; double cy = circle.y; double closestx = math.max(wall.x, math.min(cx, wall.x + wall.width)); double closesty = math.max(wall.y, math.min(cy, wall.y + wall.height)); double dx = cx - closestx; double dy = cy - closesty; [CODE]return (dx * dx + dy * dy) < (radius * radius);[/CODE] } // carpisma olunca nesneyi duvardan itiyorum private [CODE]void resolvecollision(gameobject circle, wall wall){[/CODE] double radius = circle.size / 2.0; double cx = circle.x; double cy = circle.y; double closestx = math.max(wall.x, math.min(cx, wall.x + wall.width)); double closesty = math.max(wall.y, math.min(cy, wall.y + wall.height)); double dx = cx - closestx; double dy = cy - closesty; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance < radius && distance != 0){[/CODE] double penetration = radius - distance; circle.x += (dx / distance) * penetration; circle.y += (dy / distance) * penetration; } [CODE]else if(distance == 0){[/CODE] circle.x += radius; } } private [CODE]void togglepause(){[/CODE] paused = !paused; pauseitem.settext(paused ? ""resume"" : ""pause""); } private [CODE]void savegame(){[/CODE] [CODE]if(!running){[/CODE] [CODE]return;[/CODE] } try(objectoutputstream oos = new objectoutputstream(new fileoutputstream(""savegame.dat""))){ gamestate state = [CODE]new gamestate();[/CODE] state.player = player; state.zombies = zombies; state.projectiles = projectiles; state.pickups = pickups; state.score = score; state.currentwave = currentwave; oos.writeobject(state); joptionpane.showmessagedialog(this, ""game saved successfully!""); } [CODE]catch(exception e){[/CODE] joptionpane.showmessagedialog(this, ""failed to save game: "" + e.getmessage(), ""error"", joptionpane.error_message); e.pr[CODE]intstacktrace();[/CODE] } } private [CODE]void loadgame(){[/CODE] try(objectinputstream ois = new objectinputstream(new fileinputstream(""savegame.dat""))){ gamestate state = (gamestate) ois.readobject(); player = state.player; zombies = state.zombies; projectiles = state.projectiles; pickups = state.pickups; score = state.score; currentwave = state.currentwave; gametimer = [CODE]new timer();[/CODE] startgameloop(); reloadassets(); running = true; paused = false; pauseitem.settext(""pause""); joptionpane.showmessagedialog(this, ""game loaded successfully!""); } [CODE]catch(exception e){[/CODE] joptionpane.showmessagedialog(this, ""failed to load game: "" + e.getmessage(), ""error"", joptionpane.error_message); e.pr[CODE]intstacktrace();[/CODE] } } private [CODE]void reloadassets() {[/CODE] [CODE]try {[/CODE] background = imageio.read(new file(""background.png"")); // diğer grafik nesneleri burada tekrar yüklenir } [CODE]catch (ioexception e) {[/CODE] joptionpane.showmessagedialog(this, ""failed to load assets: "" + e.getmessage(), ""error"", joptionpane.error_message); e.pr[CODE]intstacktrace();[/CODE] } } // kaydetme ve yukleme islerini yapiyorum private [CODE]static class gamestate implements serializable{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] player player; list<zombie> zombies; list<projectile> projectiles; list<pickup> pickups; [CODE]int score;[/CODE] [CODE]int currentwave;[/CODE] } // game objelerinin base [CODE]class'i private abstract class gameobject implements serializable{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] double x, y; [CODE]int size;[/CODE] color color; [CODE]public gameobject(double x, double y, int size, color color){[/CODE] this.x = x; this.y = y; this.size = size; this.color = color; } [CODE]public abstract void update();[/CODE] [CODE]public void render(graphics2d g){[/CODE] g.setcolor(color); g.filloval(([CODE]int)(x - size/2), (int)(y - size/2), size, size);[/CODE] } } // duvar private [CODE]class wall implements serializable{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]int x, y, width, height;[/CODE] [CODE]public wall(int x, int y, int width, int height){[/CODE] this.x = x; this.y = y; this.width = width; this.height = height; } [CODE]public void render(graphics2d g){[/CODE] g.setcolor(color.light_gray); g.fillrect(x, y, width, height); } } private [CODE]class player extends gameobject{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private [CODE]int health = 100;[/CODE] private list<weapon> weapons = [CODE]new arraylist<>();[/CODE] private [CODE]int currentweaponindex = 0;[/CODE] private double angle = 0; [CODE]public player(double x, double y){[/CODE] super(x, y, player_size, color.blue); } [CODE]public void addweapon(weapon weapon){[/CODE] weapons.add(weapon); } [CODE]public weapon getcurrentweapon(){[/CODE] return weapons.get(currentweaponindex); } [CODE]public void switchweapon(int index){[/CODE] if(index >= 0 && index < weapons.size()){ currentweaponindex = index; } } [CODE]public void nextweapon(){[/CODE] currentweaponindex = (currentweaponindex + 1) % weapons.size(); } [CODE]public void previousweapon(){[/CODE] currentweaponindex = (currentweaponindex - 1 + weapons.size()) % weapons.size(); } [CODE]public void shoot(){[/CODE] getcurrentweapon().shoot(x, y, angle); } [CODE]public void reload(){[/CODE] getcurrentweapon().reload(); } [CODE]public void takedamage(int amount){[/CODE] health -= amount; [CODE]if (health < 0) health = 0;[/CODE] } @override [CODE]public void update(){[/CODE] double oldx = x, oldy = y; double dx = 0, dy = 0; [CODE]if (up) dy -= player_speed;[/CODE] [CODE]if (down) dy += player_speed;[/CODE] [CODE]if (left) dx -= player_speed;[/CODE] [CODE]if (right) dx += player_speed;[/CODE] // capraz hareket [CODE]if(dx != 0 && dy != 0){[/CODE] double factor = player_speed / math.sqrt(dx * dx + dy * dy); dx *= factor; dy *= factor; } x += dx; y += dy; // oyuncuyu sinirlar icinde tutuyorum [CODE]if(x < size/2){[/CODE] x = size/2; } [CODE]if(x > window_width - size/2){[/CODE] x = window_width - size/2; } [CODE]if(y < size/2){[/CODE] y = size/2; } [CODE]if(y > window_height - size/2){[/CODE] y = window_height - size/2; } // duvara carpinca geri don [CODE]for (wall wall: walls){[/CODE] [CODE]if (circlerectcollision(this, wall)){[/CODE] x = oldx; y = oldy; break; } } // aciyi mouse'un konumuna gore guncelliyorum double dx2 = mouseposition.x - x; double dy2 = mouseposition.y - y; angle = math.atan2(dy2, dx2); } @override [CODE]public void render(graphics2d g){[/CODE] // oyuncuyu ciziyorum g.setcolor(color); g.filloval(([CODE]int)(x - size/2), (int)(y - size/2), size, size);[/CODE] // silahin yonu [CODE]int gunlength = size/2 + 10;[/CODE] int endx = (int)(x + math.cos(angle) * gunlength); int endy = (int)(y + math.sin(angle) * gunlength); g.setcolor(color.dark_gray); g.setstroke([CODE]new basicstroke(3));[/CODE] g.drawline(([CODE]int)x, (int)y, endx, endy);[/CODE] } } private abstract [CODE]class zombie extends gameobject{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] protected [CODE]int health;[/CODE] protected [CODE]int damage;[/CODE] protected double speed; protected long lastattacktime = 0; protected [CODE]int attackcooldown = 1000;[/CODE] // 1 saniye [CODE]public zombie(double x, double y, int size, color color, int health, int damage, double speed){[/CODE] super(x, y, size, color); this.health = health; this.damage = damage; this.speed = speed; } [CODE]public void takedamage(int amount){[/CODE] health -= amount; } @override [CODE]public void update(){[/CODE] double dx = player.x - x; double dy = player.y - y; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance > 0){[/CODE] dx = dx / distance * speed; dy = dy / distance * speed; x += dx; y += dy; } // carpisma durumu [CODE]for(wall wall: walls){[/CODE] [CODE]if(circlerectcollision(this, wall)){[/CODE] resolvecollision(this, wall); } } } // varsayılan render() => yuvarlak (normalzombie) } // normal zombie: yesil daire (default durum) private [CODE]class normalzombie extends zombie{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public normalzombie(double x, double y){[/CODE] super(x, y, zombie_size, color.green, 30, 10, 1.0); } } // crawler (surungen) zombie: sari kare private [CODE]class crawlerzombie extends zombie {[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private boolean isjumping = false; private double jumptime = 0; [CODE]public crawlerzombie(double x, double y){[/CODE] super(x, y, zombie_size - 5, color.yellow, 15, 8, 2.0); } @override [CODE]public void update(){[/CODE] double dx = player.x - x; double dy = player.y - y; double distance = math.sqrt(dx * dx + dy * dy); [CODE]if(distance < 150 && !isjumping){[/CODE] isjumping = true; jumptime = 0; } [CODE]if(isjumping){[/CODE] jumptime += 0.05; if(jumptime < 1.0){ dx = dx / distance * (speed * 2); dy = dy / distance * (speed * 2); x += dx; y += dy; } [CODE]else{[/CODE] isjumping = false; } } [CODE]else{[/CODE] double ddx = player.x - x; double ddy = player.y - y; double ddistance = math.sqrt(ddx * ddx + ddy * ddy); [CODE]if(ddistance > 0){[/CODE] ddx = ddx / ddistance * speed; ddy = ddy / ddistance * speed; x += ddx; y += ddy; } } [CODE]for(wall wall: walls){[/CODE] [CODE]if(circlerectcollision(this, wall)){[/CODE] resolvecollision(this, wall); } } } // kare @override [CODE]public void render(graphics2d g){[/CODE] g.setcolor(color); [CODE]int drawx = (int)(x - size/2);[/CODE] [CODE]int drawy = (int)(y - size/2);[/CODE] g.fillrect(drawx, drawy, size, size); } } // tank zombie: kirmizi dortgen private [CODE]class tankzombie extends zombie{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public tankzombie(double x, double y){[/CODE] super(x, y, zombie_size + 10, color.red, 100, 20, 0.5); } @override [CODE]public void render(graphics2d g){[/CODE] // icini dolduruyorum g.setcolor(color); g.filloval(([CODE]int)(x - size/2), (int)(y - size/2), size, size);[/CODE] // kalin siyah border g.setcolor(color.black); g.setstroke([CODE]new basicstroke(3));[/CODE] g.drawoval(([CODE]int)(x - size/2), (int)(y - size/2), size, size);[/CODE] g.setstroke([CODE]new basicstroke(1));[/CODE] } } // acid (asit tukuren) zombie: mor ucgen private [CODE]class acidzombie extends zombie{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] private long lastspittime = 0; private [CODE]int spitcooldown = 3000;[/CODE] // 3 seconds [CODE]public acidzombie(double x, double y){[/CODE] super(x, y, zombie_size, color.magenta, 20, 8, 0.7); } @override [CODE]public void update(){[/CODE] super.update(); double distance = math.sqrt(math.pow(player.x - x, 2) + math.pow(player.y - y, 2)); if(distance < 200 && system.currenttimemillis() - lastspittime > spitcooldown){ double angle = math.atan2(player.y - y, player.x - x); projectiles.add([CODE]new acidprojectile(x, y, angle));[/CODE] lastspittime = system.currenttimemillis(); } } // ucgen @override [CODE]public void render(graphics2d g){[/CODE] g.setcolor(color); [CODE]int halfsize = size / 2;[/CODE] [CODE]int[] xpoints = {[/CODE]([CODE]int)x, (int)(x - halfsize), (int)(x + halfsize)}[/CODE]; [CODE]int[] ypoints = {[/CODE]([CODE]int)(y - halfsize), (int)(y + halfsize), (int)(y + halfsize)}[/CODE]; g.fillpolygon(xpo[CODE]ints, ypoints, 3);[/CODE] } [CODE]public void splashacid(list<zombie> zombies){[/CODE] [CODE]for(zombie z : zombies){[/CODE] [CODE]if(z != this){[/CODE] double distance = math.sqrt(math.pow(z.x - x, 2) + math.pow(z.y - y, 2)); [CODE]if(distance < 100){[/CODE] z.takedamage(15); } } } } } private abstract [CODE]class projectile extends gameobject{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] protected double vx, vy; protected [CODE]int damage;[/CODE] [CODE]public projectile(double x, double y, double angle, double speed, int damage, int size, color color){[/CODE] super(x, y, size, color); this.vx = math.cos(angle) * speed; this.vy = math.sin(angle) * speed; this.damage = damage; } @override [CODE]public void update(){[/CODE] x += vx; y += vy; } } private [CODE]class bulletprojectile extends projectile{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public bulletprojectile(double x, double y, double angle, int damage){[/CODE] super(x, y, angle, 10.0, damage, projectile_size, color.yellow); } } private [CODE]class shotgunprojectile extends projectile{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public shotgunprojectile(double x, double y, double angle, int damage){[/CODE] super(x, y, angle, 8.0, damage, projectile_size, color.orange); } } private [CODE]class sniperprojectile extends projectile{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public sniperprojectile(double x, double y, double angle, int damage){[/CODE] super(x, y, angle, 15.0, damage, projectile_size, color.red); } } private [CODE]class rocketprojectile extends projectile{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public rocketprojectile(double x, double y, double angle, int damage){[/CODE] super(x, y, angle, 5.0, damage, projectile_size * 2, color.gray); } [CODE]public void explode(list<zombie> zombies){[/CODE] [CODE]for(zombie z : zombies){[/CODE] double distance = math.sqrt(math.pow(z.x - x, 2) + math.pow(z.y - y, 2)); [CODE]if(distance < 100){[/CODE] [CODE]int explosiondamage = (int)(damage * (1 - distance / 100));[/CODE] z.takedamage(explosiondamage); } } } @override [CODE]public void render(graphics2d g){[/CODE] g.setcolor(color); g.filloval(([CODE]int)(x - size/2), (int)(y - size/2), size, size);[/CODE] g.setcolor(color.orange); g.filloval(([CODE]int)(x - vx - size/4), (int)(y - vy - size/4), size/2, size/2);[/CODE] } } private [CODE]class acidprojectile extends projectile{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public acidprojectile(double x, double y, double angle){[/CODE] super(x, y, angle, 3.0, 5, projectile_size, color.green); } } private [CODE]interface weapon extends serializable{[/CODE] [CODE]void shoot(double x, double y, double angle);[/CODE] [CODE]void reload();[/CODE] [CODE]int getammo();[/CODE] [CODE]int getmaxammo();[/CODE] [CODE]int gettotalammo();[/CODE] [CODE]string getname();[/CODE] } private abstract [CODE]class abstractweapon implements weapon{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] protected [CODE]int ammo;[/CODE] protected [CODE]int maxammo;[/CODE] protected [CODE]int totalammo;[/CODE] protected [CODE]int damage;[/CODE] protected long lastshottime = 0; protected [CODE]int firerate;[/CODE] [CODE]public abstractweapon(int maxammo, int totalammo, int damage, int firerate){[/CODE] this.maxammo = maxammo; this.ammo = maxammo; this.totalammo = totalammo; this.damage = damage; this.firerate = firerate; } @override [CODE]public void reload(){[/CODE] [CODE]if (totalammo > 0){[/CODE] [CODE]int ammoneeded = maxammo - ammo;[/CODE] int ammotoadd = math.min(ammoneeded, totalammo); ammo += ammotoadd; totalammo -= ammotoadd; } } @override [CODE]public int getammo(){[/CODE] [CODE]return ammo;[/CODE] } @override [CODE]public int getmaxammo(){[/CODE] [CODE]return maxammo;[/CODE] } @override [CODE]public int gettotalammo(){[/CODE] [CODE]return totalammo;[/CODE] } protected boolean canshoot(){ return ammo > 0 && system.currenttimemillis() - lastshottime > firerate; } } private [CODE]class pistol extends abstractweapon{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public pistol(){[/CODE] super(12, 60, 15, 400); } @override [CODE]public void shoot(double x, double y, double angle){[/CODE] [CODE]if(canshoot()){[/CODE] projectiles.add([CODE]new bulletprojectile(x, y, angle, damage));[/CODE] ammo--; lastshottime = system.currenttimemillis(); } } @override [CODE]public string getname(){[/CODE] [CODE]return ""pistol"";[/CODE] } } private [CODE]class assaultrifle extends abstractweapon{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public assaultrifle(){[/CODE] super(30, 120, 10, 100); } @override [CODE]public void shoot(double x, double y, double angle){[/CODE] [CODE]if(canshoot()){[/CODE] double spread = math.toradians((math.random() - 0.5) * 30); // -15° ile +15° arası sapma projectiles.add([CODE]new bulletprojectile(x, y, angle + spread, damage));[/CODE] ammo--; lastshottime = system.currenttimemillis(); } } @override [CODE]public string getname(){[/CODE] [CODE]return ""assault rifle"";[/CODE] } } private [CODE]class shotgun extends abstractweapon{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public shotgun(){[/CODE] super(8, 32, 8, 700); } @override [CODE]public void shoot(double x, double y, double mainangle){[/CODE] [CODE]if(canshoot()){[/CODE] [CODE]int pelletcount = 9;[/CODE] double totalspread = math.toradians(45); // 45 derece aci // ilk aci: yay araliginin yarisini sola cekiyorum double startangle = mainangle - totalspread / 2; double angleincrement = totalspread / (pelletcount - 1); [CODE]for(int i = 0;[/CODE] i < pelletcount; i++){ double pelletangle = startangle + i * angleincrement; projectiles.add([CODE]new shotgunprojectile(x, y, pelletangle, damage));[/CODE] } ammo--; lastshottime = system.currenttimemillis(); } } @override [CODE]public string getname(){[/CODE] [CODE]return ""shotgun"";[/CODE] } } private [CODE]class sniperrifle extends abstractweapon{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public sniperrifle(){[/CODE] super(5, 20, 50, 1200); } @override [CODE]public void shoot(double x, double y, double angle){[/CODE] [CODE]if(canshoot()){[/CODE] projectiles.add([CODE]new sniperprojectile(x, y, angle, damage));[/CODE] ammo--; lastshottime = system.currenttimemillis(); } } @override [CODE]public string getname(){[/CODE] [CODE]return ""sniper rifle"";[/CODE] } } private [CODE]class rocketlauncher extends abstractweapon{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public rocketlauncher(){[/CODE] super(1, 5, 100, 2000); } @override [CODE]public void shoot(double x, double y, double angle) {[/CODE] [CODE]if(canshoot()){[/CODE] projectiles.add([CODE]new rocketprojectile(x, y, angle, damage));[/CODE] ammo--; lastshottime = system.currenttimemillis(); } } @override [CODE]public string getname(){[/CODE] [CODE]return ""rocket launcher"";[/CODE] } } private abstract [CODE]class pickup extends gameobject{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public pickup(double x, double y, int size, color color){[/CODE] super(x, y, size, color); } [CODE]public abstract void collect(player player);[/CODE] @override [CODE]public void update(){[/CODE] // pickuplar hareket etmeyecek } } private [CODE]class ammopickup extends pickup{[/CODE] private [CODE]static final long serialversionuid = 1l;[/CODE] [CODE]public ammopickup(double x, double y){[/CODE] super(x, y, 15, color.orange); } @override [CODE]public void collect(player player){[/CODE] weapon weapon = player.getcurrentweapon(); ((abstractweapon)weapon).totalammo += weapon.getmaxammo(); } @override [CODE]public void render(graphics2d g){[/CODE] g.setcolor(color); g.fillrect(([CODE]int)(x - size/2), (int)(y - size/2), size, size);[/CODE] g.setcolor(color.black); g.draw[CODE]string(""a"", (int)x - 3, (int)y + 3);[/CODE] } } @override [CODE]public void keypressed(keyevent e){[/CODE] switch(e.getkeycode()){ case keyevent.vk_w: up = true; break; case keyevent.vk_s: down = true; break; case keyevent.vk_a: left = true; break; case keyevent.vk_d: right = true; break; case keyevent.vk_r: [CODE]if(running && !paused){[/CODE] player.reload(); } break; case keyevent.vk_1: case keyevent.vk_2: case keyevent.vk_3: case keyevent.vk_4: case keyevent.vk_5: [CODE]if(running && !paused){[/CODE] int index = e.getkeycode() - keyevent.vk_1; player.switchweapon(index); } break; case keyevent.vk_escape: [CODE]if(running){[/CODE] togglepause(); } break; case keyevent.vk_enter: [CODE]if(!running){[/CODE] initializegame(); running = true; startnextwave(); } break; case keyevent.vk_k: [CODE]if(running && !paused){[/CODE] savegame(); } break; } } @override [CODE]public void keyreleased(keyevent e){[/CODE] switch(e.getkeycode()){ case keyevent.vk_w: up = false; break; case keyevent.vk_s: down = false; break; case keyevent.vk_a: left = false; break; case keyevent.vk_d: right = false; break; } } @override [CODE]public void keytyped(keyevent e){[/CODE] // kullanmiyorum } @override [CODE]public void mousepressed(mouseevent e){[/CODE] if(running && !paused && e.getbutton() == mouseevent.button1){ player.shoot(); } } @override [CODE]public void mousereleased(mouseevent e){[/CODE] // kullanmiyorum } @override [CODE]public void mouseclicked(mouseevent e){[/CODE] // kullanmiyorum } @override [CODE]public void mouseentered(mouseevent e){[/CODE] // kullanmiyorum } @override [CODE]public void mouseexited(mouseevent e){[/CODE] // kullanmiyorum } @override [CODE]public void mousemoved(mouseevent e){[/CODE] mouseposition.x = e.getx(); mouseposition.y = e.gety(); } @override [CODE]public void mousedragged(mouseevent e){[/CODE] mouseposition.x = e.getx(); mouseposition.y = e.gety(); // surukleme if (running && !paused && swingutilities.isleftmousebutton(e)) { player.shoot(); } } }"
